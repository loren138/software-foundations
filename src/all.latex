\documentclass[12pt]{report}
\usepackage[utf8x]{inputenc}

%Warning: tipa declares many non-standard macros used by utf8x to
%interpret utf8 characters but extra packages might have to be added
%such as "textgreek" for Greek letters not already in tipa
%or "stmaryrd" for mathematical symbols.
%Utf8 codes missing a LaTeX interpretation can be defined by using
%\DeclareUnicodeCharacter{code}{interpretation}.
%Use coqdoc's option -p to add new packages or declarations.
\usepackage{tipa}

\usepackage[T1]{fontenc}
\usepackage{fullpage}
\usepackage{coqdoc}
\usepackage{amsmath,amssymb}
\usepackage{url}
\usepackage{enumitem}\setlistdepth{9}\setlist[itemize,1]{label=$\bullet$}\setlist[itemize,2]{label=$\bullet$}\setlist[itemize,3]{label=$\bullet$}\setlist[itemize,4]{label=$\bullet$}\setlist[itemize,5]{label=$\bullet$}\setlist[itemize,6]{label=$\bullet$}\setlist[itemize,7]{label=$\bullet$}\setlist[itemize,8]{label=$\bullet$}\setlist[itemize,9]{label=$\bullet$}\renewlist{itemize}{itemize}{9}
\begin{document}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% This file has been automatically generated with the command
%% coqdoc -toc -interpolate -utf8 -p \usepackage{enumitem}\setlistdepth{9}\setlist[itemize,1]{label=$\bullet$}\setlist[itemize,2]{label=$\bullet$}\setlist[itemize,3]{label=$\bullet$}\setlist[itemize,4]{label=$\bullet$}\setlist[itemize,5]{label=$\bullet$}\setlist[itemize,6]{label=$\bullet$}\setlist[itemize,7]{label=$\bullet$}\setlist[itemize,8]{label=$\bullet$}\setlist[itemize,9]{label=$\bullet$}\renewlist{itemize}{itemize}{9} -latex -R . Top -o all.tex Symbols.v Preface.v Basics.v Induction.v Lists.v Poly.v Tactics.v Logic.v IndProp.v Maps.v ProofObjects.v IndPrinciples.v Rel.v Imp.v ImpParser.v ImpCEvalFun.v Extraction.v Equiv.v Hoare.v Hoare2.v HoareAsLogic.v Smallstep.v Auto.v Types.v Stlc.v StlcProp.v MoreStlc.v Sub.v Typechecking.v Records.v References.v RecordSub.v Norm.v LibTactics.v UseTactics.v UseAuto.v PE.v Postscript.v Bib.v 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\tableofcontents
\coqlibrary{Top.Symbols}{Library }{Top.Symbols}

\begin{coqdoccode}
\end{coqdoccode}
\section{Symbols: Special symbols}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
$Date: 2016-05-26 16:17:19 -0400 (Thu, 26 May 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Preface}{Library }{Top.Preface}

\begin{coqdoccode}
\end{coqdoccode}
\section{Preface}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Welcome}



 This electronic book is a course on \textit{Software Foundations}, the
    mathematical underpinnings of reliable software.  Topics include
    basic concepts of logic, computer-assisted theorem proving, the
    Coq proof assistant, functional programming, operational
    semantics, Hoare logic, and static type systems.  The exposition
    is intended for a broad range of readers, from advanced
    undergraduates to PhD students and researchers.  No specific
    background in logic or programming languages is assumed, though a
    degree of mathematical maturity will be helpful.


    The principal novelty of the course is that it is one hundred
    percent formalized and machine-checked: the entire text is
    literally a script for Coq.  It is intended to be read
    alongside (or inside) an interactive session with Coq.  All the
    details in the text are fully formalized in Coq, and most of the
    exercises are designed to be worked using Coq.


    The files are organized into a sequence of core chapters, covering
    about one semester's worth of material and organized into a
    coherent linear narrative, plus a number of ``offshoot'' chapters
    covering additional topics.  All the core chapters are suitable
    for both upper-level undergraduate and graduate students. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Overview}



 Building reliable software is hard.  The scale and complexity of
    modern systems, the number of people involved in building them,
    and the range of demands placed on them make it extremely
    difficult to build software that is even more-or-less correct,
    much less 100\% correct.  At the same time, the increasing degree
    to which information processing is woven into every aspect of
    society greatly amplifies the cost of bugs and insecurities.


    Computer scientists and software engineers have responded to these
    challenges by developing a whole host of techniques for improving
    software reliability, ranging from recommendations about managing
    software projects teams (e.g., extreme programming) to design
    philosophies for libraries (e.g., model-view-controller,
    publish-subscribe, etc.) and programming languages (e.g.,
    object-oriented programming, aspect-oriented programming,
    functional programming, ...) to mathematical techniques for
    specifying and reasoning about properties of software and tools
    for helping validate these properties.  The present course is
    focused on this last set of techniques.


    The text weaves together five conceptual threads:


    (1) basic tools from \textit{logic} for making and justifying precise
        claims about programs;


    (2) the use of \textit{proof assistants} to construct rigorous logical
        arguments;


    (3) \textit{functional programming}, both as a method of programming that
        simplifies reasoning about programs and as a bridge between
        programming and logic;


    (4) formal techniques for \textit{reasoning about the properties of
        specific programs} (e.g., the fact that a sorting function or
        a compiler obeys some formal specification); and


    (5) the use of \textit{type systems} for establishing well-behavedness
        guarantees for \textit{all} programs in a given programming
        language (e.g., the fact that well-typed Java programs cannot
        be subverted at runtime).


    Each of these is easily rich enough to fill a whole course in its
    own right, and tackling all of them together naturally means that
    much will be left unsaid.  Nevertheless, we hope readers will find
    that these themes illuminate and amplify each other and that
    bringing them together creates a good foundation for digging into
    any of them more deeply.  Some suggestions for further reading can
    be found in the \coqdocvar{Postscript} chapter.  Bibliographic
    information for all cited works can be found in the file
    \coqdocvar{Bib}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Logic}



 Logic is the field of study whose subject matter is \textit{proofs} --
    unassailable arguments for the truth of particular propositions.
    Volumes have been written about the central role of logic in
    computer science.  Manna and Waldinger called it ``the calculus of
    computer science,'' while Halpern et al.'s paper \textit{On the Unusual
    Effectiveness of Logic in Computer Science} catalogs scores of
    ways in which logic offers critical tools and insights.  Indeed,
    they observe that, ``As a matter of fact, logic has turned out to
    be significiantly more effective in computer science than it has
    been in mathematics.  This is quite remarkable, especially since
    much of the impetus for the development of logic during the past
    one hundred years came from mathematics.''


    In particular, the fundamental tools of \textit{inductive proof} are
    ubiquitous in all of computer science.  You have surely seen them
    before, perhaps in a course on discrete math or analysis of
    algorithms, but in this course we will examine them much more
    deeply than you have probably done so far. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Proof Assistants}



 The flow of ideas between logic and computer science has not been
    unidirectional: CS has also made important contributions to logic.
    One of these has been the development of software tools for
    helping construct proofs of logical propositions.  These tools
    fall into two broad categories:



\begin{itemize}
\item  \textit{Automated theorem provers} provide ``push-button'' operation:
         you give them a proposition and they return either \textit{true} or
         \textit{false} (or, sometimes, \textit{don't know: ran out of time}).
         Although their capabilities are still limited to specific
         domains, they have matured tremendously in recent years and
         are used now in a multitude of settings.  Examples of such
         tools include SAT solvers, SMT solvers, and model checkers.



\item  \textit{Proof assistants} are hybrid tools that automate the more
         routine aspects of building proofs while depending on human
         guidance for more difficult aspects.  Widely used proof
         assistants include Isabelle, Agda, Twelf, ACL2, PVS, and Coq,
         among many others.

\end{itemize}


    This course is based around Coq, a proof assistant that has been
    under development since 1983 and that in recent years has
    attracted a large community of users in both research and
    industry.  Coq provides a rich environment for interactive
    development of machine-checked formal reasoning.  The kernel of
    the Coq system is a simple proof-checker, which guarantees that
    only correct deduction steps are ever performed.  On top of this
    kernel, the Coq environment provides high-level facilities for
    proof development, including a large library of common definitions
    and lemmas, powerful tactics for constructing complex proofs
    semi-automatically, and a special-purpose programming language for
    defining new proof-automation tactics for specific situations.


    Coq has been a critical enabler for a huge variety of work across
    computer science and mathematics:



\begin{itemize}
\item  As a \textit{platform for modeling programming languages}, it has
      become a standard tool for researchers who need to describe and
      reason about complex language definitions.  It has been used,
      for example, to check the security of the JavaCard platform,
      obtaining the highest level of common criteria certification,
      and for formal specifications of the x86 and LLVM instruction
      sets and programming languages such as C.



\item  As an \textit{environment for developing formally certified software
      and hardware}, Coq has been used, for example, to build
      CompCert, a fully-verified optimizing compiler for C, and
      CertiKos, a fully verified hypervisor, for proving the
      correctness of subtle algorithms involving floating point
      numbers, and as the basis for CertiCrypt, an environment for
      reasoning about the security of cryptographic algorithms.  It is
      also being used to build verified implementations of the
      open-source RISC-V processor.



\item  As a \textit{realistic environment for functional programming with
      dependent types}, it has inspired numerous innovations.  For
      example, the Ynot system embeds ``relational Hoare reasoning'' (an
      extension of the \textit{Hoare Logic} we will see later in this course)
      in Coq.



\item  As a \textit{proof assistant for higher-order logic}, it has been used
      to validate a number of important results in mathematics.  For
      example, its ability to include complex computations inside
      proofs made it possible to develop the first formally verified
      proof of the 4-color theorem.  This proof had previously been
      controversial among mathematicians because part of it included
      checking a large number of configurations using a program. In
      the Coq formalization, everything is checked, including the
      correctness of the computational part.  More recently, an even
      more massive effort led to a Coq formalization of the
      Feit-Thompson Theorem -- the first major step in the
      classification of finite simple groups.

\end{itemize}


   By the way, in case you're wondering about the name, here's what
   the official Coq web site at INRIA (the French national research
   lab where Coq has mostly been developed) says about it: ``Some
   French computer scientists have a tradition of naming their
   software as animal species: Caml, Elan, Foc or Phox are examples of
   this tacit convention. In French, 'coq' means rooster, and it
   sounds like the initials of the Calculus of Constructions (CoC) on
   which it is based.''  The rooster is also the national symbol of
   France, and C-o-q are the first three letters of the name of
   Thierry Coquand, one of Coq's early developers. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Functional Programming}



 The term \textit{functional programming} refers both to a collection of
    programming idioms that can be used in almost any programming
    language and to a family of programming languages designed to
    emphasize these idioms, including Haskell, OCaml, Standard ML,
    F\#, Scala, Scheme, Racket, Common Lisp, Clojure, Erlang, and Coq.


    Functional programming has been developed over many decades --
    indeed, its roots go back to Church's lambda-calculus, which was
    invented in the 1930s, well before the first computers (at least
    the first electronic ones)!  But since the early '90s it has
    enjoyed a surge of interest among industrial engineers and
    language designers, playing a key role in high-value systems at
    companies like Jane St. Capital, Microsoft, Facebook, and
    Ericsson.


    The most basic tenet of functional programming is that, as much as
    possible, computation should be \textit{pure}, in the sense that the only
    effect of execution should be to produce a result: it should be
    free from \textit{side effects} such as I/O, assignments to mutable
    variables, redirecting pointers, etc.  For example, whereas an
    \textit{imperative} sorting function might take a list of numbers and
    rearrange its pointers to put the list in order, a pure sorting
    function would take the original list and return a \textit{new} list
    containing the same numbers in sorted order.


    A significant benefit of this style of programming is that it
    makes programs easier to understand and reason about.  If every
    operation on a data structure yields a new data structure, leaving
    the old one intact, then there is no need to worry about how that
    structure is being shared and whether a change by one part of the
    program might break an invariant that another part of the program
    relies on.  These considerations are particularly critical in
    concurrent systems, where every piece of mutable state that is
    shared between threads is a potential source of pernicious bugs.
    Indeed, a large part of the recent interest in functional
    programming in industry is due to its simpler behavior in the
    presence of concurrency.


    Another reason for the current excitement about functional
    programming is related to the first: functional programs are often
    much easier to parallelize than their imperative counterparts.  If
    running a computation has no effect other than producing a result,
    then it does not matter \textit{where} it is run.  Similarly, if a data
    structure is never modified destructively, then it can be copied
    freely, across cores or across the network.  Indeed, the
    ``Map-Reduce'' idiom, which lies at the heart of massively
    distributed query processors like Hadoop and is used by Google to
    index the entire web is a classic example of functional
    programming.


    For purposes of this course, functional programming has yet
    another significant attraction: it serves as a bridge between
    logic and computer science.  Indeed, Coq itself can be viewed as a
    combination of a small but extremely expressive functional
    programming language plus a set of tools for stating and proving
    logical assertions.  Moreover, when we come to look more closely,
    we find that these two sides of Coq are actually aspects of the
    very same underlying machinery -- i.e., \textit{proofs are programs}.  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Program Verification}



 Approximately the first third of \textit{Software Foundations} is devoted
    to developing the conceptual framework of logic and functional
    programming and gaining enough fluency with Coq to use it for
    modeling and reasoning about nontrivial artifacts.  In the middle
    third, we turn our attention to two broad topics of critical
    importance in building reliable software (and hardware):
    techniques for proving specific properties of particular
    \textit{programs} and for proving general properties of whole programming
    \textit{languages}.


    For both of these, the first thing we need is a way of
    representing programs as mathematical objects, so we can talk
    about them precisely, plus ways of describing their behavior in
    terms of mathematical functions or relations.  Our main tools for
    these tasks are \textit{abstract syntax} and \textit{operational semantics}, a
    method of specifying programming languages by writing abstract
    interpreters.  At the beginning, we work with operational
    semantics in the so-called ``big-step'' style, which leads to simple
    and readable definitions when it is applicable.  Later on, we
    switch to a lower-level ``small-step'' style, which helps make some
    useful distinctions (e.g., between different sorts of
    nonterminating program behaviors) and which is applicable to a
    broader range of language features, including concurrency.


    The first programming language we consider in detail is \textit{Imp}, a
    tiny toy language capturing the core features of conventional
    imperative programming: variables, assignment, conditionals, and
    loops.


    We study two different ways of reasoning about the properties of
    Imp programs.  First, we consider what it means to say that two
    Imp programs are \textit{equivalent} in the intuitive sense that they
    exhibit the same behavior when started in any initial memory
    state.  This notion of equivalence then becomes a criterion for
    judging the correctness of \textit{metaprograms} -- programs that
    manipulate other programs, such as compilers and optimizers.  We
    build a simple optimizer for Imp and prove that it is correct.


    Second, we develop a methodology for proving that a given Imp
    program satisfies some formal specifications of its behavior.  We
    introduce the notion of \textit{Hoare triples} -- Imp programs annotated
    with pre- and post-conditions describing what they expect to be
    true about the memory in which they are started and what they
    promise to make true about the memory in which they terminate --
    and the reasoning principles of \textit{Hoare Logic}, a domain-specific
    logic specialized for convenient compositional reasoning about
    imperative programs, with concepts like ``loop invariant'' built in.


    This part of the course is intended to give readers a taste of the
    key ideas and mathematical tools used in a wide variety of
    real-world software and hardware verification tasks. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Type Systems}



 Our final major topic, covering approximately the last third of
    the course, is \textit{type systems}, which are powerful tools for
    establishing properties of \textit{all} programs in a given language.


    Type systems are the best established and most popular example of
    a highly successful class of formal verification techniques known
    as \textit{lightweight formal methods}.  These are reasoning techniques
    of modest power -- modest enough that automatic checkers can be
    built into compilers, linkers, or program analyzers and thus be
    applied even by programmers unfamiliar with the underlying
    theories.  Other examples of lightweight formal methods include
    hardware and software model checkers, contract checkers, and
    run-time monitoring techniques.


    This also completes a full circle with the beginning of the book:
    the language whose properties we study in this part, the \textit{simply
    typed lambda-calculus}, is essentially a simplified model of the
    core of Coq itself!
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Further Reading}



 This text is intended to be self contained, but readers looking
    for a deeper treatment of particular topics will find some
    suggestions for further reading in the \coqdocvar{Postscript}
    chapter. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Practicalities}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Chapter Dependencies}



 A diagram of the dependencies between chapters and some 
    paths through the material can be found in the file \coqdocvar{deps.html}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{System Requirements}



 Coq runs on Windows, Linux, and OS X.  You will need:



\begin{itemize}
\item  A current installation of Coq, available from the Coq home
         page.  Everything should work with version 8.4 (or 8.5).



\item  An IDE for interacting with Coq.  Currently, there are two
         choices:



\begin{itemize}
\item  Proof General is an Emacs-based IDE.  It tends to be
             preferred by users who are already comfortable with
             Emacs.  It requires a separate installation (google
             ``Proof General'').


             Adventurous users of Coq within Emacs may also want to
             check out extensions such as \coqdocvar{company}-\coqdocvar{coq} and
             \coqdocvar{control}-\coqdocvar{lock}.



\item  CoqIDE is a simpler stand-alone IDE.  It is distributed
             with Coq, so it should be available once you have Coq
             installed.  It can also be compiled from scratch, but on
             some platforms this may involve installing additional
             packages for GUI libraries and such. 
\end{itemize}

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Exercises}



 Each chapter includes numerous exercises.  Each is marked with a
    ``star rating,'' which can be interpreted as follows:



\begin{itemize}
\item  One star: easy exercises that underscore points in the text
         and that, for most readers, should take only a minute or two.
         Get in the habit of working these as you reach them.



\item  Two stars: straightforward exercises (five or ten minutes).



\item  Three stars: exercises requiring a bit of thought (ten
         minutes to half an hour).



\item  Four and five stars: more difficult exercises (half an hour
         and up).

\end{itemize}


    Also, some exercises are marked ``advanced,'' and some are marked
    ``optional.''  Doing just the non-optional, non-advanced exercises
    should provide good coverage of the core material.  Optional
    exercises provide a bit of extra practice with key concepts and
    introduce secondary themes that may be of interest to some
    readers.  Advanced exercises are for readers who want an extra
    challenge and a deeper cut at the material.


    \textit{Please do not post solutions to the exercises in a public places}: 
    Software Foundations is widely used both for self-study and for
    university courses.  Having solutions easily available makes it
    much less useful for courses, which typically have graded homework
    assignments.  We especially request that readers not post
    solutions to the exercises anyplace where they can be found by
    search engines.
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Downloading the Coq Files}



 A tar file containing the full sources for the ``release version''
    of this book (as a collection of Coq scripts and HTML files) is
    available here:


        http://www.cis.upenn.edu/\~{}bcpierce/sf


    (If you are using the book as part of a class, your professor may
    give you access to a locally modified version of the files, which
    you should use instead of the release version.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Note for Instructors}



 If you plan to use these materials in your own course, you will
    undoubtedly find things you'd like to change, improve, or add.
    Your contributions are welcome!


    In order to keep the legalities simple and to have a single
    point of responsibility in case the need should ever arise to
    adjust the license terms, sublicense, etc., we ask all
    contributors (i.e., everyone with access to the developers'
    repository) to assign copyright in their contributions to the
    appropriate ``author of record,'' as follows:



\begin{itemize}
\item  I hereby assign copyright in my past and future contributions
        to the Software Foundations project to the Author of Record of
        each volume or component, to be licensed under the same terms
        as the rest of Software Foundations.  I understand that, at
        present, the Authors of Record are as follows: For Volumes 1
        and 2, known until 2016 as ``Software Foundations'' and from
        2016 as (respectively) ``Logical Foundations'' and ``Programming
        Foundations,'' the Author of Record is Benjamin Pierce.  For
        Volume 3, ``Verified Functional Algorithms'', the Author of
        Record is Andrew W. Appel. For components outside of
        designated Volumes (e.g., typesetting and grading tools and
        other software infrastructure), the Author of Record is
        Benjamin Pierce.

\end{itemize}


    To get started, please send an email to Benjamin Pierce, describing
    yourself and how you plan to use the materials and including 
       (1) the above copyright transfer text and 
       (2) the result of doing ``htpasswd -s -n NAME''
    where NAME is your preferred user name. 


    We'll set you up with access to the subversion repository and 
    developers' mailing lists.  In the repository you'll find a 
    file \coqdocvar{INSTRUCTORS} with further instructions. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Translations}



 Thanks to the efforts of a team of volunteer translators,
    \textit{Software Foundations} can be enjoyed in Japanese at
    \coqdocvar{http}://\coqdocvar{proofcafe.org}/\coqdocvar{sf}.  A Chinese translation is underway. 

 $Date: 2016-08-29 16:12:34 -0400 (Mon, 29 Aug 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Basics}{Library }{Top.Basics}

\begin{coqdoccode}
\end{coqdoccode}
\section{Basics: Functional Programming in Coq}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\section{Introduction}



 The functional programming style is founded on simple, everyday
    mathematical intuition: If a procedure or method has no side
    effects, then (ignoring efficiency) all we need to understand
    about it is how it maps inputs to outputs -- that is, we can think
    of it as just a concrete method for computing a mathematical
    function.  This is one sense of the word ``functional'' in
    ``functional programming.''  The direct connection between programs
    and simple mathematical objects supports both formal correctness
    proofs and sound informal reasoning about program behavior.


    The other sense in which functional programming is ``functional'' is
    that it emphasizes the use of functions (or methods) as
    \textit{first-class} values -- i.e., values that can be passed as
    arguments to other functions, returned as results, included in
    data structures, etc.  The recognition that functions can be
    treated as data gives rise to a host of useful and powerful
    programming idioms.


    Other common features of functional languages include \textit{algebraic
    data types} and \textit{pattern matching}, which make it easy to
    construct and manipulate rich data structures, and sophisticated
    \textit{polymorphic type systems} supporting abstraction and code reuse.
    Coq offers all of these features.


    The first half of this chapter introduces the most essential
    elements of Coq's functional programming language, called
    \textit{Gallina}.  The second half introduces some basic \textit{tactics} that
    can be used to prove properties of Coq programs. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Enumerated Types}



 One notable aspect of Coq is that its set of built-in
    features is \textit{extremely} small.  For example, instead of providing
    the usual palette of atomic data types (booleans, integers,
    strings, etc.), Coq offers a powerful mechanism for defining new
    data types from scratch, with all these familiar types as
    instances.


    Naturally, the Coq distribution comes preloaded with an extensive
    standard library providing definitions of booleans, numbers, and
    many common data structures like lists and hash tables.  But there
    is nothing magic or primitive about these library definitions.  To
    illustrate this, we will explicitly recapitulate all the
    definitions we need in this course, rather than just getting them
    implicitly from the library. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Days of the Week}



 To see how this definition mechanism works, let's start with
    a very simple example.  The following declaration tells Coq that
    we are defining a new set of data values -- a \textit{type}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{day} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{monday} : \coqdocvar{day}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tuesday} : \coqdocvar{day}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wednesday} : \coqdocvar{day}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{thursday} : \coqdocvar{day}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{friday} : \coqdocvar{day}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{saturday} : \coqdocvar{day}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{sunday} : \coqdocvar{day}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The type is called \coqdocinductive{day}, and its members are \coqdocconstructor{monday},
    \coqdocconstructor{tuesday}, etc.  The second and following lines of the definition
    can be read ``\coqdocconstructor{monday} is a \coqdocinductive{day}, \coqdocconstructor{tuesday} is a \coqdocinductive{day}, etc.''


    Having defined \coqdocinductive{day}, we can write functions that operate on
    days. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{next\_weekday} (\coqdocvar{d}:\coqdocvar{day}) : \coqdocvar{day} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{d} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{monday}    \ensuremath{\Rightarrow} \coqdocvar{tuesday}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tuesday}   \ensuremath{\Rightarrow} \coqdocvar{wednesday}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wednesday} \ensuremath{\Rightarrow} \coqdocvar{thursday}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{thursday}  \ensuremath{\Rightarrow} \coqdocvar{friday}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{friday}    \ensuremath{\Rightarrow} \coqdocvar{monday}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{saturday}  \ensuremath{\Rightarrow} \coqdocvar{monday}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{sunday}    \ensuremath{\Rightarrow} \coqdocvar{monday}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
One thing to note is that the argument and return types of
    this function are explicitly declared.  Like most functional
    programming languages, Coq can often figure out these types for
    itself when they are not given explicitly -- i.e., it can do \textit{type
    inference} -- but we'll generally include them to make reading
    easier. 

 Having defined a function, we should check that it works on
    some examples.  There are actually three different ways to do this
    in Coq.  First, we can use the command \coqdockw{Compute} to evaluate a
    compound expression involving \coqdocdefinition{next\_weekday}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Compute} (\coqdocvar{next\_weekday} \coqdocvar{friday}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Compute} (\coqdocvar{next\_weekday} (\coqdocvar{next\_weekday} \coqdocvar{saturday})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(We show Coq's responses in comments, but, if you have a
    computer handy, this would be an excellent moment to fire up the
    Coq interpreter under your favorite IDE -- either CoqIde or Proof
    General -- and try this for yourself.  Load this file, \coqdocvar{Basics.v},
    from the book's Coq sources, find the above example, submit it to
    Coq, and observe the result.)


    Second, we can record what we \textit{expect} the result to be in the
    form of a Coq example: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_next\_weekday}:\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{next\_weekday} (\coqdocvar{next\_weekday} \coqdocvar{saturday})) = \coqdocvar{tuesday}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This declaration does two things: it makes an
    assertion (that the second weekday after \coqdocconstructor{saturday} is \coqdocconstructor{tuesday}),
    and it gives the assertion a name that can be used to refer to it
    later.  Having made the assertion, we can also ask Coq to verify
    it, like this: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The details are not important for now (we'll come back to
    them in a bit), but essentially this can be read as ``The assertion
    we've just made can be proved by observing that both sides of the
    equality evaluate to the same thing, after some simplification.''


    Third, we can ask Coq to \textit{extract}, from our \coqdockw{Definition}, a
    program in some other, more conventional, programming
    language (OCaml, Scheme, or Haskell) with a high-performance
    compiler.  This facility is very interesting, since it gives us a
    way to go from proved-correct algorithms written in Gallina to
    efficient machine code.  (Of course, we are trusting the
    correctness of the OCaml/Haskell/Scheme compiler, and of Coq's
    extraction facility itself, but this is still a big step forward
    from the way most software is developed today.) Indeed, this is
    one of the main uses for which Coq was developed.  We'll come back
    to this topic in later chapters. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Homework Submission Guidelines}



 If you are using Software Foundations in a course, your instructor
    may use automatic scripts to help grade your homework assignments.
    In order for these scripts to work correctly (so that you get full
    credit for your work!), please be careful to follow these rules:

\begin{itemize}
\item  The grading scripts work by extracting marked regions of the
        .v files that you submit.  It is therefore important that you
        do not alter the ``markup'' that delimits exercises: the
        Exercise header, the name of the exercise, the ``empty square
        bracket'' marker at the end, etc.  Please leave this markup
        exactly as you find it.

\item  Do not delete exercises.  If you skip an exercise (e.g.,
        because it is marked Optional, or because you can't solve it),
        it is OK to leave a partial proof in your .v file, but in this
        case please make sure it ends with \coqdocvar{Admitted} (not, for
        example \coqdockw{Abort}). 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Booleans}



 In a similar way, we can define the standard type \coqdocinductive{bool} of
    booleans, with members \coqdocconstructor{true} and \coqdocconstructor{false}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{bool} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{true} : \coqdocvar{bool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{false} : \coqdocvar{bool}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Although we are rolling our own booleans here for the sake
    of building up everything from scratch, Coq does, of course,
    provide a default implementation of the booleans, together with a
    multitude of useful functions and lemmas.  (Take a look at
    \coqdoclibrary{Coq.Init.Datatypes} in the Coq library documentation if you're
    interested.)  Whenever possible, we'll name our own definitions
    and theorems so that they exactly coincide with the ones in the
    standard library.


    Functions over booleans can be defined in the same way as
    above: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{negb} (\coqdocvar{b}:\coqdocvar{bool}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{b} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{true} \ensuremath{\Rightarrow} \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{false} \ensuremath{\Rightarrow} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{andb} (\coqdocvar{b1}:\coqdocvar{bool}) (\coqdocvar{b2}:\coqdocvar{bool}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{b1} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{true} \ensuremath{\Rightarrow} \coqdocvar{b2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{false} \ensuremath{\Rightarrow} \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{orb} (\coqdocvar{b1}:\coqdocvar{bool}) (\coqdocvar{b2}:\coqdocvar{bool}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{b1} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{true} \ensuremath{\Rightarrow} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{false} \ensuremath{\Rightarrow} \coqdocvar{b2}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The last two of these illustrate Coq's syntax for
    multi-argument function definitions.  The corresponding
    multi-argument application syntax is illustrated by the following
    ``unit tests,'' which constitute a complete specification -- a truth
    table -- for the \coqdocdefinition{orb} function: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_orb1}:  (\coqdocvar{orb} \coqdocvar{true}  \coqdocvar{false}) = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_orb2}:  (\coqdocvar{orb} \coqdocvar{false} \coqdocvar{false}) = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_orb3}:  (\coqdocvar{orb} \coqdocvar{false} \coqdocvar{true})  = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_orb4}:  (\coqdocvar{orb} \coqdocvar{true}  \coqdocvar{true})  = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can also introduce some familiar syntax for the boolean
    operations we have just defined. The \coqdockw{Infix} command defines a new
    symbolic notation for an existing definition. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Infix} "\&\&" := \coqdocvar{andb}.\coqdoceol
\coqdocnoindent
\coqdockw{Infix} "||" := \coqdocvar{orb}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_orb5}:  \coqdocvar{false} || \coqdocvar{false} || \coqdocvar{true} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\textit{A note on notation}: In .\coqdocvariable{v} files, we use square brackets
    to delimit fragments of Coq code within comments; this convention,
    also used by the \coqdocvar{coqdoc} documentation tool, keeps them visually
    separate from the surrounding text.  In the html version of the
    files, these pieces of text appear in a \coqdocvar{different} \coqdocvar{font}.


    The command \coqdocvar{Admitted} can be used as a placeholder for an
    incomplete proof.  We'll use it in exercises, to indicate the
    parts that we're leaving for you -- i.e., your job is to replace
    \coqdocvar{Admitted}s with real proofs. 

\paragraph{Exercise: 1 star (nandb)}

 Remove ``\coqdocvar{Admitted}.'' and complete the definition of the following
    function; then make sure that the \coqdockw{Example} assertions below can
    each be verified by Coq.  (Remove ``\coqdocvar{Admitted}.'' and fill in each
    proof, following the model of the \coqdocdefinition{orb} tests above.) The function
    should return \coqdocconstructor{true} if either or both of its inputs are
    \coqdocconstructor{false}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{nandb} (\coqdocvar{b1}:\coqdocvar{bool}) (\coqdocvar{b2}:\coqdocvar{bool}) : \coqdocvar{bool}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nandb1}:               (\coqdocvar{nandb} \coqdocvar{true} \coqdocvar{false}) = \coqdocvar{true}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nandb2}:               (\coqdocvar{nandb} \coqdocvar{false} \coqdocvar{false}) = \coqdocvar{true}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nandb3}:               (\coqdocvar{nandb} \coqdocvar{false} \coqdocvar{true}) = \coqdocvar{true}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nandb4}:               (\coqdocvar{nandb} \coqdocvar{true} \coqdocvar{true}) = \coqdocvar{false}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star (andb3)}

 Do the same for the \coqdocdefinition{andb3} function below. This function should
    return \coqdocconstructor{true} when all of its inputs are \coqdocconstructor{true}, and \coqdocconstructor{false}
    otherwise. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{andb3} (\coqdocvar{b1}:\coqdocvar{bool}) (\coqdocvar{b2}:\coqdocvar{bool}) (\coqdocvar{b3}:\coqdocvar{bool}) : \coqdocvar{bool}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_andb31}:                 (\coqdocvar{andb3} \coqdocvar{true} \coqdocvar{true} \coqdocvar{true}) = \coqdocvar{true}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_andb32}:                 (\coqdocvar{andb3} \coqdocvar{false} \coqdocvar{true} \coqdocvar{true}) = \coqdocvar{false}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_andb33}:                 (\coqdocvar{andb3} \coqdocvar{true} \coqdocvar{false} \coqdocvar{true}) = \coqdocvar{false}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_andb34}:                 (\coqdocvar{andb3} \coqdocvar{true} \coqdocvar{true} \coqdocvar{false}) = \coqdocvar{false}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Function Types}



 Every expression in Coq has a type, describing what sort of
    thing it computes. The \coqdockw{Check} command asks Coq to print the type
    of an expression. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} (\coqdocvar{negb} \coqdocvar{true}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Functions like \coqdocdefinition{negb} itself are also data values, just like
    \coqdocconstructor{true} and \coqdocconstructor{false}.  Their types are called \textit{function types}, and
    they are written with arrows. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{negb}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The type of \coqdocdefinition{negb}, written \coqdocinductive{bool} \ensuremath{\rightarrow} \coqdocinductive{bool} and pronounced
    ``\coqdocinductive{bool} arrow \coqdocinductive{bool},'' can be read, ``Given an input of type
    \coqdocinductive{bool}, this function produces an output of type \coqdocinductive{bool}.''
    Similarly, the type of \coqdocdefinition{andb}, written \coqdocinductive{bool} \ensuremath{\rightarrow} \coqdocinductive{bool} \ensuremath{\rightarrow} \coqdocinductive{bool}, can
    be read, ``Given two inputs, both of type \coqdocinductive{bool}, this function
    produces an output of type \coqdocinductive{bool}.'' \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Modules}



 Coq provides a \textit{module system}, to aid in organizing large
    developments.  In this course we won't need most of its features,
    but one is useful: If we enclose a collection of declarations
    between \coqdockw{Module} \coqdocdefinition{X} and \coqdockw{End} \coqdocdefinition{X} markers, then, in the remainder of
    the file after the \coqdockw{End}, these definitions are referred to by
    names like \coqdocvar{X.foo} instead of just \coqdoclemma{foo}.  We will use this
    feature to introduce the definition of the type \coqdocdefinition{nat} in an inner
    module so that it does not interfere with the one from the
    standard library (which we want to use in the rest because it
    comes with a tiny bit of convenient special notation).  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{NatPlayground}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Numbers}



 The types we have defined so far are examples of ``enumerated
    types'': their definitions explicitly enumerate a finite set of
    elements.  A more interesting way of defining a type is to give a
    collection of \textit{inductive rules} describing its elements.  For
    example, we can define (a unary representation of) the natural
    numbers as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{nat} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} : \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The clauses of this definition can be read:

\begin{itemize}
\item  \coqdocconstructor{O} is a natural number (note that this is the letter ``\coqdocconstructor{O},''
        not the numeral ``0'').

\item  \coqdocconstructor{S} is a ``constructor'' that takes a natural number and yields
        another one -- that is, if \coqdocabbreviation{n} is a natural number, then \coqdocconstructor{S} \coqdocabbreviation{n}
        is too. 
\end{itemize}


 Let's look at this in a little more detail.


    Every inductively defined set (\coqdocinductive{day}, \coqdocdefinition{nat}, \coqdocinductive{bool}, etc.) is
    actually a set of \textit{expressions} built from \textit{constructors}
    like \coqdocconstructor{O}, \coqdocconstructor{S}, \coqdocconstructor{true}, \coqdocconstructor{false}, \coqdocconstructor{monday}, etc.  The definition of
    \coqdocdefinition{nat} says how expressions in the set \coqdocdefinition{nat} can be built:



\begin{itemize}
\item  \coqdocconstructor{O} and \coqdocconstructor{S} are constructors;

\item  the expression \coqdocconstructor{O} belongs to the set \coqdocdefinition{nat};

\item  if \coqdocabbreviation{n} is an expression belonging to the set \coqdocdefinition{nat}, then \coqdocconstructor{S} \coqdocabbreviation{n}
      is also an expression belonging to the set \coqdocdefinition{nat}; and

\item  expressions formed in these two ways are the only ones belonging
      to the set \coqdocdefinition{nat}. 
\end{itemize}


 The same rules apply for our definitions of \coqdocinductive{day} and
    \coqdocinductive{bool}. (The annotations we used for their constructors are
    analogous to the one for the \coqdocconstructor{O} constructor, indicating that they
    don't take any arguments.)


    The above conditions are the precise force of the \coqdockw{Inductive}
    declaration.  They imply that the expression \coqdocconstructor{O}, the expression
    \coqdocconstructor{S} \coqdocconstructor{O}, the expression \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocconstructor{O}), the expression \coqdocconstructor{S} (\coqdocconstructor{S} (\coqdocconstructor{S} \coqdocconstructor{O})), and
    so on all belong to the set \coqdocdefinition{nat}, while other expressions built
    from data constructors, like \coqdocconstructor{true}, \coqdocdefinition{andb} \coqdocconstructor{true} \coqdocconstructor{false}, \coqdocconstructor{S} (\coqdocconstructor{S}
    \coqdocconstructor{false}), and \coqdocconstructor{O} (\coqdocconstructor{O} (\coqdocconstructor{O} \coqdocconstructor{S})) do not.


    A critical point here is that what we've done so far is just to
    define a \textit{representation} of numbers: a way of writing them down.
    The names \coqdocconstructor{O} and \coqdocconstructor{S} are arbitrary, and at this point they have
    no special meaning -- they are just two different marks that we
    can use to write down numbers (together with a rule that says any
    \coqdocdefinition{nat} will be written as some string of \coqdocconstructor{S} marks followed by an
    \coqdocconstructor{O}).  If we like, we can write essentially the same definition
    this way: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{nat'} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{stop} : \coqdocvar{nat'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tick} : \coqdocvar{nat'} \ensuremath{\rightarrow} \coqdocvar{nat'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \textit{interpretation} of these marks comes from how we use them to
    compute. 

 We can do this by writing functions that pattern match on
    representations of natural numbers just as we did above with
    booleans and days -- for example, here is the predecessor
    function: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pred} (\coqdocvar{n} : \coqdocvar{nat}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{O}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdocvar{n'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The second branch can be read: ``if \coqdocabbreviation{n} has the form \coqdocconstructor{S} \coqdocvariable{n'}
    for some \coqdocvariable{n'}, then return \coqdocvariable{n'}.''  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{NatPlayground}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{minustwo} (\coqdocvar{n} : \coqdocvar{nat}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{O}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{O}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{S} (\coqdocvar{S} \coqdocvar{n'}) \ensuremath{\Rightarrow} \coqdocvar{n'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Because natural numbers are such a pervasive form of data,
    Coq provides a tiny bit of built-in magic for parsing and printing
    them: ordinary arabic numerals can be used as an alternative to
    the ``unary'' notation defined by the constructors \coqdocconstructor{S} and \coqdocconstructor{O}.  Coq
    prints numbers in arabic form by default: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} (\coqdocvar{S} (\coqdocvar{S} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{O})))).\coqdoceol
\coqdocnoindent
\coqdockw{Compute} (\coqdocvar{minustwo} 4).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The constructor \coqdocconstructor{S} has the type \coqdocdefinition{nat} \ensuremath{\rightarrow} \coqdocdefinition{nat}, just like the
    functions \coqdocdefinition{minustwo} and \coqdocdefinition{pred}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{pred}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{minustwo}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
These are all things that can be applied to a number to yield a
    number.  However, there is a fundamental difference between the
    first one and the other two: functions like \coqdocdefinition{pred} and \coqdocdefinition{minustwo}
    come with \textit{computation rules} -- e.g., the definition of \coqdocdefinition{pred}
    says that \coqdocdefinition{pred} 2 can be simplified to 1 -- while the
    definition of \coqdocconstructor{S} has no such behavior attached.  Although it is
    like a function in the sense that it can be applied to an
    argument, it does not \textit{do} anything at all!  It is just a way of
    writing down numbers.  (Think about standard arabic numerals: the
    numeral 1 is not a computation; it's a piece of data.  When we
    write 111 to mean the number one hundred and eleven, we are
    using 1, three times, to write down a concrete representation of
    a number.)


    For most function definitions over numbers, just pattern matching
    is not enough: we also need recursion.  For example, to check that
    a number \coqdocabbreviation{n} is even, we may need to recursively check whether
    \coqdocabbreviation{n}-2 is even.  To write such functions, we use the keyword
    \coqdockw{Fixpoint}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{evenb} (\coqdocvar{n}:\coqdocvar{nat}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O}        \ensuremath{\Rightarrow} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{O}      \ensuremath{\Rightarrow} \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} (\coqdocvar{S} \coqdocvar{n'}) \ensuremath{\Rightarrow} \coqdocvar{evenb} \coqdocvar{n'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can define \coqdocdefinition{oddb} by a similar \coqdockw{Fixpoint} declaration, but here
    is a simpler definition: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{oddb} (\coqdocvar{n}:\coqdocvar{nat}) : \coqdocvar{bool}   :=   \coqdocvar{negb} (\coqdocvar{evenb} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_oddb1}:    \coqdocvar{oddb} 1 = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_oddb2}:    \coqdocvar{oddb} 4 = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(You will notice if you step through these proofs that
    \coqdoctac{simpl} actually has no effect on the goal -- all of the work is
    done by \coqdoctac{reflexivity}.  We'll see more about why that is shortly.)


    Naturally, we can also define multi-argument functions by
    recursion.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{NatPlayground2}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{plus} (\coqdocvar{n} : \coqdocvar{nat}) (\coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{m}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdocvar{S} (\coqdocvar{plus} \coqdocvar{n'} \coqdocvar{m})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Adding three to two now gives us five, as we'd expect. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Compute} (\coqdocvar{plus} 3 2).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The simplification that Coq performs to reach this conclusion can
    be visualized as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
As a notational convenience, if two or more arguments have
    the same type, they can be written together.  In the following
    definition, (\coqdocabbreviation{n} \coqdocabbreviation{m} : \coqdocdefinition{nat}) means just the same as if we had written
    (\coqdocabbreviation{n} : \coqdocdefinition{nat}) (\coqdocabbreviation{m} : \coqdocdefinition{nat}). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{mult} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{O}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdocvar{plus} \coqdocvar{m} (\coqdocvar{mult} \coqdocvar{n'} \coqdocvar{m})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_mult1}: (\coqdocvar{mult} 3 3) = 9.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
You can match two expressions at once by putting a comma
    between them: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{minus} (\coqdocvar{n} \coqdocvar{m}:\coqdocvar{nat}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n}, \coqdocvar{m} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O}   , \coqdocvar{\_}    \ensuremath{\Rightarrow} \coqdocvar{O}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{\_} , \coqdocvar{O}    \ensuremath{\Rightarrow} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'}, \coqdocvar{S} \coqdocvar{m'} \ensuremath{\Rightarrow} \coqdocvar{minus} \coqdocvar{n'} \coqdocvar{m'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \_ in the first line is a \textit{wildcard pattern}.  Writing \_ in a
    pattern is the same as writing some variable that doesn't get used
    on the right-hand side.  This avoids the need to invent a variable
    name. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{NatPlayground2}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{exp} (\coqdocvar{base} \coqdocvar{power} : \coqdocvar{nat}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{power} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{S} \coqdocvar{O}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{p} \ensuremath{\Rightarrow} \coqdocvar{mult} \coqdocvar{base} (\coqdocvar{exp} \coqdocvar{base} \coqdocvar{p})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (factorial)}

 Recall the standard mathematical factorial function:


       factorial(0)  =  1
       factorial(n)  =  n * factorial(n-1)     (if n>0)


    Translate this into Coq. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{factorial} (\coqdocvar{n}:\coqdocvar{nat}) : \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_factorial1}:          (\coqdocvar{factorial} 3) = 6.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_factorial2}:          (\coqdocvar{factorial} 5) = (\coqdocvar{mult} 10 12).\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 We can make numerical expressions a little easier to read and
    write by introducing \textit{notations} for addition, multiplication, and
    subtraction. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "x + y" := (\coqdocvar{plus} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{11.50em}
(\coqdoctac{at} \coqdockw{level} 50, \coqdoctac{left} \coqdockw{associativity})\coqdoceol
\coqdocindent{11.50em}
: \coqdocvar{nat\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "x - y" := (\coqdocvar{minus} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{11.50em}
(\coqdoctac{at} \coqdockw{level} 50, \coqdoctac{left} \coqdockw{associativity})\coqdoceol
\coqdocindent{11.50em}
: \coqdocvar{nat\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "x * y" := (\coqdocvar{mult} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{11.50em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdoctac{left} \coqdockw{associativity})\coqdoceol
\coqdocindent{11.50em}
: \coqdocvar{nat\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} ((0 + 1) + 1).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(The \coqdockw{level}, \coqdockw{associativity}, and \coqdocvar{nat\_scope} annotations
    control how these notations are treated by Coq's parser.  The
    details are not important for our purposes, but interested readers
    can refer to the optional ``More on Notation'' section at the end of
    this chapter.)


    Note that these do not change the definitions we've already made:
    they are simply instructions to the Coq parser to accept \coqdocabbreviation{x} + \coqdocabbreviation{y}
    in place of \coqdocdefinition{plus} \coqdocabbreviation{x} \coqdocabbreviation{y} and, conversely, to the Coq pretty-printer
    to display \coqdocdefinition{plus} \coqdocabbreviation{x} \coqdocabbreviation{y} as \coqdocabbreviation{x} + \coqdocabbreviation{y}. 

 When we say that Coq comes with almost nothing built-in, we really
    mean it: even equality testing for numbers is a user-defined
    operation!  We now define a function \coqdocdefinition{beq\_nat}, which tests
    \coqdocdefinition{nat}ural numbers for \coqdocabbreviation{eq}uality, yielding a \coqdocconstructor{b}oolean.  Note the
    use of nested \coqdockw{match}es (we could also have used a simultaneous
    match, as we did in \coqdocdefinition{minus}.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{beq\_nat} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdockw{match} \coqdocvar{m} \coqdockw{with}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{true}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{m'} \ensuremath{\Rightarrow} \coqdocvar{false}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdockw{match} \coqdocvar{m} \coqdockw{with}\coqdoceol
\coqdocindent{6.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{false}\coqdoceol
\coqdocindent{6.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{m'} \ensuremath{\Rightarrow} \coqdocvar{beq\_nat} \coqdocvar{n'} \coqdocvar{m'}\coqdoceol
\coqdocindent{6.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdocdefinition{leb} function tests whether its first argument is less than or
  equal to its second argument, yielding a boolean. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{leb} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{m} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{false}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{m'} \ensuremath{\Rightarrow} \coqdocvar{leb} \coqdocvar{n'} \coqdocvar{m'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_leb1}:             (\coqdocvar{leb} 2 2) = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_leb2}:             (\coqdocvar{leb} 2 4) = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_leb3}:             (\coqdocvar{leb} 4 2) = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (blt\_nat)}

 The \coqdocdefinition{blt\_nat} function tests \coqdocdefinition{nat}ural numbers for \coqdocabbreviation{l}ess-\coqdocvariable{t}han,
    yielding a \coqdocconstructor{b}oolean.  Instead of making up a new \coqdockw{Fixpoint} for
    this one, define it in terms of a previously defined function. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{blt\_nat} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{bool}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_blt\_nat1}:             (\coqdocvar{blt\_nat} 2 2) = \coqdocvar{false}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_blt\_nat2}:             (\coqdocvar{blt\_nat} 2 4) = \coqdocvar{true}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_blt\_nat3}:             (\coqdocvar{blt\_nat} 4 2) = \coqdocvar{false}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Proof by Simplification}



 Now that we've defined a few datatypes and functions, let's
    turn to stating and proving properties of their behavior.
    Actually, we've already started doing this: each \coqdockw{Example} in the
    previous sections makes a precise claim about the behavior of some
    function on some particular inputs.  The proofs of these claims
    were always the same: use \coqdoctac{simpl} to simplify both sides of the
    equation, then use \coqdoctac{reflexivity} to check that both sides contain
    identical values.


    The same sort of ``proof by simplification'' can be used to prove
    more interesting properties as well.  For example, the fact that
    0 is a ``neutral element'' for + on the left can be proved just
    by observing that 0 + \coqdocabbreviation{n} reduces to \coqdocabbreviation{n} no matter what \coqdocabbreviation{n} is, a
    fact that can be read directly off the definition of \coqdocdefinition{plus}.\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_O\_n} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat}, 0 + \coqdocvar{n} = \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(You may notice that the above statement looks different in
    the .\coqdocvariable{v} file in your IDE than it does in the HTML rendition in
    your browser, if you are viewing both. In .\coqdocvariable{v} files, we write the
    \coqdockw{\ensuremath{\forall}} universal quantifier using the reserved identifier
    ``forall.''  When the .\coqdocvariable{v} files are converted to HTML, this gets
    transformed into an upside-down-A symbol.)


    This is a good place to mention that \coqdoctac{reflexivity} is a bit
    more powerful than we have admitted. In the examples we have seen,
    the calls to \coqdoctac{simpl} were actually not needed, because
    \coqdoctac{reflexivity} can perform some simplification automatically when
    checking that two sides are equal; \coqdoctac{simpl} was just added so that
    we could see the intermediate state -- after simplification but
    before finishing the proof.  Here is a shorter proof of the
    theorem: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_O\_n'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat}, 0 + \coqdocvar{n} = \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Moreover, it will be useful later to know that \coqdoctac{reflexivity}
    does somewhat \textit{more} simplification than \coqdoctac{simpl} does -- for
    example, it tries ``unfolding'' defined terms, replacing them with
    their right-hand sides.  The reason for this difference is that,
    if reflexivity succeeds, the whole goal is finished and we don't
    need to look at whatever expanded expressions \coqdoctac{reflexivity} has
    created by all this simplification and unfolding; by contrast,
    \coqdoctac{simpl} is used in situations where we may have to read and
    understand the new goal that it creates, so we would not want it
    blindly expanding definitions and leaving the goal in a messy
    state.


    The form of the theorem we just stated and its proof are almost
    exactly the same as the simpler examples we saw earlier; there are
    just a few differences.


    First, we've used the keyword \coqdockw{Theorem} instead of \coqdockw{Example}.
    This difference is purely a matter of style; the keywords
    \coqdockw{Example} and \coqdockw{Theorem} (and a few others, including \coqdockw{Lemma},
    \coqdockw{Fact}, and \coqdockw{Remark}) mean exactly the same thing to Coq.


    Second, we've added the quantifier \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n}:\coqdocdefinition{nat}, so that our
    theorem talks about \textit{all} natural numbers \coqdocabbreviation{n}.  Informally, to
    prove theorems of this form, we generally start by saying ``Suppose
    \coqdocabbreviation{n} is some number...''  Formally, this is achieved in the proof by
    \coqdoctac{intros} \coqdocabbreviation{n}, which moves \coqdocabbreviation{n} from the quantifier in the goal to a
    \textit{context} of current assumptions.


    The keywords \coqdoctac{intros}, \coqdoctac{simpl}, and \coqdoctac{reflexivity} are examples of
    \textit{tactics}.  A tactic is a command that is used between \coqdockw{Proof} and
    \coqdockw{Qed} to guide the process of checking some claim we are making.
    We will see several more tactics in the rest of this chapter and
    yet more in future chapters.


    Other similar theorems can be proved with the same pattern. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_1\_l} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat}, 1 + \coqdocvar{n} = \coqdocvar{S} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_0\_l} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat}, 0 \ensuremath{\times} \coqdocvar{n} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdocvar{\_l} suffix in the names of these theorems is
    pronounced ``on the left.'' 

 It is worth stepping through these proofs to observe how the
    context and the goal change.  You may want to add calls to \coqdoctac{simpl}
    before \coqdoctac{reflexivity} to see the simplifications that Coq performs
    on the terms before checking that they are equal.


    Although simplification is powerful enough to prove some fairly
    general facts, there are many statements that cannot be handled by
    simplification alone.  For instance, we cannot use it to prove
    that 0 is also a neutral element for + \textit{on the right}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_n\_O} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{n} = \coqdocvar{n} + 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{simpl}. \end{coqdoccode}
(Can you explain why this happens?  Step through both proofs
    with Coq and notice how the goal and context change.)


    When stuck in the middle of a proof, we can use the \coqdockw{Abort}
    command to give up on it for the moment. \begin{coqdoccode}
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The next chapter will introduce \textit{induction}, a powerful
    technique that can be used for proving this goal.  For the moment,
    though, let's look at a few more simple tactics. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Proof by Rewriting}



 This theorem is a bit more interesting than the others we've
    seen: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_id\_example} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}:\coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + \coqdocvar{n} = \coqdocvar{m} + \coqdocvar{m}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Instead of making a universal claim about all numbers \coqdocabbreviation{n} and \coqdocabbreviation{m},
    it talks about a more specialized property that only holds when \coqdocabbreviation{n}
    = \coqdocabbreviation{m}.  The arrow symbol is pronounced ``implies.''


    As before, we need to be able to reason by assuming we are given such
    numbers \coqdocabbreviation{n} and \coqdocabbreviation{m}.  We also need to assume the hypothesis
    \coqdocabbreviation{n} = \coqdocabbreviation{m}. The \coqdoctac{intros} tactic will serve to move all three of these
    from the goal into assumptions in the current context.


    Since \coqdocabbreviation{n} and \coqdocabbreviation{m} are arbitrary numbers, we can't just use
    simplification to prove this theorem.  Instead, we prove it by
    observing that, if we are assuming \coqdocabbreviation{n} = \coqdocabbreviation{m}, then we can replace
    \coqdocabbreviation{n} with \coqdocabbreviation{m} in the goal statement and obtain an equality with the
    same expression on both sides.  The tactic that tells Coq to
    perform this replacement is called \coqdoctac{rewrite}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The first line of the proof moves the universally quantified
    variables \coqdocabbreviation{n} and \coqdocabbreviation{m} into the context.  The second moves the
    hypothesis \coqdocabbreviation{n} = \coqdocabbreviation{m} into the context and gives it the name \coqdocvariable{H}.
    The third tells Coq to rewrite the current goal (\coqdocabbreviation{n} + \coqdocabbreviation{n} = \coqdocabbreviation{m} + \coqdocabbreviation{m})
    by replacing the left side of the equality hypothesis \coqdocvariable{H} with the
    right side.


    (The arrow symbol in the \coqdoctac{rewrite} has nothing to do with
    implication: it tells Coq to apply the rewrite from left to right.
    To rewrite from right to left, you can use \coqdoctac{rewrite} \ensuremath{\leftarrow}.  Try
    making this change in the above proof and see what difference it
    makes.) 

\paragraph{Exercise: 1 star (plus\_id\_exercise)}

 Remove ``\coqdocvar{Admitted}.'' and fill in the proof. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_id\_exercise} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{m} = \coqdocvar{o} \ensuremath{\rightarrow} \coqdocvar{n} + \coqdocvar{m} = \coqdocvar{m} + \coqdocvar{o}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 The \coqdocvar{Admitted} command tells Coq that we want to skip trying
    to prove this theorem and just accept it as a given.  This can be
    useful for developing longer proofs, since we can state subsidiary
    lemmas that we believe will be useful for making some larger
    argument, use \coqdocvar{Admitted} to accept them on faith for the moment,
    and continue working on the main argument until we are sure it
    makes sense; then we can go back and fill in the proofs we
    skipped.  Be careful, though: every time you say \coqdocvar{Admitted} you
    are leaving a door open for total nonsense to enter Coq's nice,
    rigorous, formally checked world! 

 We can also use the \coqdoctac{rewrite} tactic with a previously proved
    theorem instead of a hypothesis from the context. If the statement
    of the previously proved theorem involves quantified variables,
    as in the example below, Coq tries to instantiate them
    by matching with the current goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_0\_plus} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(0 + \coqdocvar{n}) \ensuremath{\times} \coqdocvar{m} = \coqdocvar{n} \ensuremath{\times} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{plus\_O\_n}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (mult\_S\_1)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_S\_1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{m} = \coqdocvar{S} \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{m} \ensuremath{\times} (1 + \coqdocvar{n}) = \coqdocvar{m} \ensuremath{\times} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Proof by Case Analysis}



 Of course, not everything can be proved by simple
    calculation and rewriting: In general, unknown, hypothetical
    values (arbitrary numbers, booleans, lists, etc.) can block
    simplification.  For example, if we try to prove the following
    fact using the \coqdoctac{simpl} tactic as above, we get stuck. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_1\_neq\_0\_firsttry} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} (\coqdocvar{n} + 1) 0 = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The reason for this is that the definitions of both
    \coqdocdefinition{beq\_nat} and + begin by performing a \coqdockw{match} on their first
    argument.  But here, the first argument to + is the unknown
    number \coqdocabbreviation{n} and the argument to \coqdocdefinition{beq\_nat} is the compound
    expression \coqdocabbreviation{n} + 1; neither can be simplified.


    To make progress, we need to consider the possible forms of \coqdocabbreviation{n}
    separately.  If \coqdocabbreviation{n} is \coqdocconstructor{O}, then we can calculate the final result
    of \coqdocdefinition{beq\_nat} (\coqdocabbreviation{n} + 1) 0 and check that it is, indeed, \coqdocconstructor{false}.  And
    if \coqdocabbreviation{n} = \coqdocconstructor{S} \coqdocvariable{n'} for some \coqdocvariable{n'}, then, although we don't know exactly
    what number \coqdocabbreviation{n} + 1 yields, we can calculate that, at least, it
    will begin with one \coqdocconstructor{S}, and this is enough to calculate that,
    again, \coqdocdefinition{beq\_nat} (\coqdocabbreviation{n} + 1) 0 will yield \coqdocconstructor{false}.


    The tactic that tells Coq to consider, separately, the cases where
    \coqdocabbreviation{n} = \coqdocconstructor{O} and where \coqdocabbreviation{n} = \coqdocconstructor{S} \coqdocvariable{n'} is called \coqdoctac{destruct}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_1\_neq\_0} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} (\coqdocvar{n} + 1) 0 = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{destruct} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{destruct} generates \textit{two} subgoals, which we must then
    prove, separately, in order to get Coq to accept the theorem. The
    annotation ``\coqdockw{as} [| \coqdocvariable{n'}]'' is called an \textit{intro pattern}.  It tells
    Coq what variable names to introduce in each subgoal.  In general,
    what goes between the square brackets is a \textit{list of lists} of
    names, separated by \ensuremath{|}.  In this case, the first component is
    empty, since the \coqdocconstructor{O} constructor is nullary (it doesn't have any
    arguments).  The second component gives a single name, \coqdocvariable{n'}, since
    \coqdocconstructor{S} is a unary constructor.


    The - signs on the second and third lines are called \textit{bullets},
    and they mark the parts of the proof that correspond to each
    generated subgoal.  The proof script that comes after a bullet is
    the entire proof for a subgoal.  In this example, each of the
    subgoals is easily proved by a single use of \coqdoctac{reflexivity}, which
    itself performs some simplification -- e.g., the first one
    simplifies \coqdocdefinition{beq\_nat} (\coqdocconstructor{S} \coqdocvariable{n'} + 1) 0 to \coqdocconstructor{false} by first rewriting
    (\coqdocconstructor{S} \coqdocvariable{n'} + 1) to \coqdocconstructor{S} (\coqdocvariable{n'} + 1), then unfolding \coqdocdefinition{beq\_nat}, and then
    simplifying the \coqdockw{match}.


    Marking cases with bullets is entirely optional: if bullets are
    not present, Coq simply asks you to prove each subgoal in
    sequence, one at a time. But it is a good idea to use bullets.
    For one thing, they make the structure of a proof apparent, making
    it more readable. Also, bullets instruct Coq to ensure that a
    subgoal is complete before trying to verify the next one,
    preventing proofs for different subgoals from getting mixed
    up. These issues become especially important in large
    developments, where fragile proofs lead to long debugging
    sessions.


    There are no hard and fast rules for how proofs should be
    formatted in Coq -- in particular, where lines should be broken
    and how sections of the proof should be indented to indicate their
    nested structure.  However, if the places where multiple subgoals
    are generated are marked with explicit bullets at the beginning of
    lines, then the proof will be readable almost no matter what
    choices are made about other aspects of layout.


    This is also a good place to mention one other piece of somewhat
    obvious advice about line lengths.  Beginning Coq users sometimes
    tend to the extremes, either writing each tactic on its own line
    or writing entire proofs on one line.  Good style lies somewhere
    in the middle.  One reasonable convention is to limit yourself to
    80-character lines.


    The \coqdoctac{destruct} tactic can be used with any inductively defined
    datatype.  For example, we use it next to prove that boolean
    negation is involutive -- i.e., that negation is its own
    inverse. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{negb\_involutive} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} : \coqdocvar{bool},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{negb} (\coqdocvar{negb} \coqdocvar{b}) = \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b}. \coqdoctac{destruct} \coqdocvar{b}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that the \coqdoctac{destruct} here has no \coqdockw{as} clause because
    none of the subcases of the \coqdoctac{destruct} need to bind any variables,
    so there is no need to specify any names.  (We could also have
    written \coqdockw{as} [|], or \coqdockw{as} [].)  In fact, we can omit the \coqdockw{as}
    clause from \textit{any} \coqdoctac{destruct} and Coq will fill in variable names
    automatically.  This is generally considered bad style, since Coq
    often makes confusing choices of names when left to its own
    devices.


    It is sometimes useful to invoke \coqdoctac{destruct} inside a subgoal,
    generating yet more proof obligations. In this case, we use
    different kinds of bullets to mark goals on different ``levels.''
    For example: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{andb\_commutative} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c}, \coqdocvar{andb} \coqdocvar{b} \coqdocvar{c} = \coqdocvar{andb} \coqdocvar{c} \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{c}. \coqdoctac{destruct} \coqdocvar{b}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{destruct} \coqdocvar{c}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{destruct} \coqdocvar{c}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Each pair of calls to \coqdoctac{reflexivity} corresponds to the
    subgoals that were generated after the execution of the \coqdoctac{destruct} \coqdocconstructor{c}
    line right above it. 

 Besides - and +, we can use \ensuremath{\times} (asterisk) as a third kind of
    bullet.  We can also enclose sub-proofs in curly braces, which is
    useful in case we ever encounter a proof that generates more than
    three levels of subgoals: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{andb\_commutative'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c}, \coqdocvar{andb} \coqdocvar{b} \coqdocvar{c} = \coqdocvar{andb} \coqdocvar{c} \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{c}. \coqdoctac{destruct} \coqdocvar{b}.\coqdoceol
\coqdocindent{1.00em}
\{ \coqdoctac{destruct} \coqdocvar{c}.\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{reflexivity}. \} \}\coqdoceol
\coqdocindent{1.00em}
\{ \coqdoctac{destruct} \coqdocvar{c}.\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{reflexivity}. \} \}\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Since curly braces mark both the beginning and the end of a
    proof, they can be used for multiple subgoal levels, as this
    example shows. Furthermore, curly braces allow us to reuse the
    same bullet shapes at multiple levels in a proof: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{andb3\_exchange} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c} \coqdocvar{d}, \coqdocvar{andb} (\coqdocvar{andb} \coqdocvar{b} \coqdocvar{c}) \coqdocvar{d} = \coqdocvar{andb} (\coqdocvar{andb} \coqdocvar{b} \coqdocvar{d}) \coqdocvar{c}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{c} \coqdocvar{d}. \coqdoctac{destruct} \coqdocvar{b}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{destruct} \coqdocvar{c}.\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{destruct} \coqdocvar{d}.\coqdoceol
\coqdocindent{3.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
- \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{destruct} \coqdocvar{d}.\coqdoceol
\coqdocindent{3.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
- \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{destruct} \coqdocvar{c}.\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{destruct} \coqdocvar{d}.\coqdoceol
\coqdocindent{3.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
- \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{destruct} \coqdocvar{d}.\coqdoceol
\coqdocindent{3.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
- \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Before closing the chapter, let's mention one final
    convenience.  As you may have noticed, many proofs perform case
    analysis on a variable right after introducing it:


       intros x y. destruct y as \ensuremath{|}\coqdocabbreviation{y}.


    This pattern is so common that Coq provides a shorthand for it: we
    can perform case analysis on a variable when introducing it by
    using an intro pattern instead of a variable name. For instance,
    here is a shorter proof of the \coqdoclemma{plus\_1\_neq\_0} theorem above. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_1\_neq\_0'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} (\coqdocvar{n} + 1) 0 = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [|\coqdocvar{n}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If there are no arguments to name, we can just write []. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{andb\_commutative'{}'} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c}, \coqdocvar{andb} \coqdocvar{b} \coqdocvar{c} = \coqdocvar{andb} \coqdocvar{c} \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [] [].\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (andb\_true\_elim2)}

 Prove the following claim, marking cases (and subcases) with
    bullets when you use \coqdoctac{destruct}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{andb\_true\_elim2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c} : \coqdocvar{bool},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{andb} \coqdocvar{b} \coqdocvar{c} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{c} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star (zero\_nbeq\_plus\_1)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{zero\_nbeq\_plus\_1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} 0 (\coqdocvar{n} + 1) = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{More on Notation (Optional)}



 (In general, sections marked Optional are not needed to follow the
    rest of the book, except possibly other Optional sections.  On a
    first reading, you might want to skim these sections so that you
    know what's there for future reference.)


    Recall the notation definitions for infix plus and times: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "x + y" := (\coqdocvar{plus} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{11.50em}
(\coqdoctac{at} \coqdockw{level} 50, \coqdoctac{left} \coqdockw{associativity})\coqdoceol
\coqdocindent{11.50em}
: \coqdocvar{nat\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "x * y" := (\coqdocvar{mult} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{11.50em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdoctac{left} \coqdockw{associativity})\coqdoceol
\coqdocindent{11.50em}
: \coqdocvar{nat\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For each notation symbol in Coq, we can specify its \textit{precedence
    level} and its \textit{associativity}.  The precedence level \coqdocabbreviation{n} is
    specified by writing \coqdoctac{at} \coqdockw{level} \coqdocabbreviation{n}; this helps Coq parse compound
    expressions.  The associativity setting helps to disambiguate
    expressions containing multiple occurrences of the same
    symbol. For example, the parameters specified above for + and
    \ensuremath{\times} say that the expression 1+2*3*4 is shorthand for
    (1+((2*3)*4)). Coq uses precedence levels from 0 to 100, and
    \textit{left}, \textit{right}, or \textit{no} associativity.  We will see more examples
    of this later, e.g., in the \coqdoclibrary{Lists}
    chapter.


    Each notation symbol is also associated with a \textit{notation scope}.
    Coq tries to guess what scope is meant from context, so when it
    sees \coqdocconstructor{S}(\coqdocconstructor{O}\ensuremath{\times}\coqdocconstructor{O}) it guesses \coqdocvar{nat\_scope}, but when it sees the
    cartesian product (tuple) type \coqdocinductive{bool}\ensuremath{\times}\coqdocinductive{bool} (which we'll see in
    later chapters) it guesses \coqdocvar{type\_scope}.  Occasionally, it is
    necessary to help it out with percent-notation by writing
    (\coqdocabbreviation{x}\ensuremath{\times}\coqdocabbreviation{y})\%\coqdocdefinition{nat}, and sometimes in what Coq prints it will use \%\coqdocdefinition{nat}
    to indicate what scope a notation is in.


    Notation scopes also apply to numeral notation (3, 4, 5,
    etc.), so you may sometimes see 0\%\coqdocdefinition{nat}, which means \coqdocconstructor{O} (the
    natural number 0 that we're using in this chapter), or 0\%\coqdocdefinition{Z},
    which means the Integer zero (which comes from a different part of
    the standard library).


    Pro tip: Coq's notation mechanism is not especially powerful.
    Don't expect too much from it! \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Fixpoints and Structural Recursion (Optional)}



 Here is a copy of the definition of addition: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{plus'} (\coqdocvar{n} : \coqdocvar{nat}) (\coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{m}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdocvar{S} (\coqdocvar{plus'} \coqdocvar{n'} \coqdocvar{m})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
When Coq checks this definition, it notes that \coqdocdefinition{plus'} is
    ``decreasing on 1st argument.''  What this means is that we are
    performing a \textit{structural recursion} over the argument \coqdocabbreviation{n} -- i.e.,
    that we make recursive calls only on strictly smaller values of
    \coqdocabbreviation{n}.  This implies that all calls to \coqdocdefinition{plus'} will eventually
    terminate.  Coq demands that some argument of \textit{every} \coqdockw{Fixpoint}
    definition is ``decreasing.''


    This requirement is a fundamental feature of Coq's design: In
    particular, it guarantees that every function that can be defined
    in Coq will terminate on all inputs.  However, because Coq's
    ``decreasing analysis'' is not very sophisticated, it is sometimes
    necessary to write functions in slightly unnatural ways. 

\paragraph{Exercise: 2 stars, optional (decreasing)}

 To get a concrete sense of this, find a way to write a sensible
    \coqdockw{Fixpoint} definition (of a simple function on numbers, say) that
    \textit{does} terminate on all inputs, but that Coq will reject because
    of this restriction. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{More Exercises}



\paragraph{Exercise: 2 starsM (boolean\_functions)}

 Use the tactics you have learned so far to prove the following
    theorem about boolean functions. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{identity\_fn\_applied\_twice} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{f} : \coqdocvar{bool} \ensuremath{\rightarrow} \coqdocvar{bool}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} (\coqdocvar{x} : \coqdocvar{bool}), \coqdocvar{f} \coqdocvar{x} = \coqdocvar{x}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{b} : \coqdocvar{bool}), \coqdocvar{f} (\coqdocvar{f} \coqdocvar{b}) = \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now state and prove a theorem \coqdocvar{negation\_fn\_applied\_twice} similar
    to the previous one but where the second hypothesis says that the
    function \coqdocabbreviation{f} has the property that \coqdocabbreviation{f} \coqdocabbreviation{x} = \coqdocdefinition{negb} \coqdocabbreviation{x}.\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars (andb\_eq\_orb)}

 Prove the following theorem.  (You may want to first prove a
    subsidiary lemma or two. Alternatively, remember that you do
    not have to introduce all hypotheses at the same time.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{andb\_eq\_orb} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{b} \coqdocvar{c} : \coqdocvar{bool}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{andb} \coqdocvar{b} \coqdocvar{c} = \coqdocvar{orb} \coqdocvar{b} \coqdocvar{c}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{b} = \coqdocvar{c}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 starsM (binary)}

 Consider a different, more efficient representation of natural
    numbers using a binary rather than unary system.  That is, instead
    of saying that each natural number is either zero or the successor
    of a natural number, we can say that each binary number is either



\begin{itemize}
\item  zero,

\item  twice a binary number, or

\item  one more than twice a binary number.

\end{itemize}


    (a) First, write an inductive definition of the type \coqdocvar{bin}
        corresponding to this description of binary numbers.


    (Hint: Recall that the definition of \coqdocdefinition{nat} above,


         Inductive nat : Type := | O : nat | S : nat -> nat.


    says nothing about what \coqdocconstructor{O} and \coqdocconstructor{S} ``mean.''  It just says ``\coqdocconstructor{O} is
    in the set called \coqdocdefinition{nat}, and if \coqdocabbreviation{n} is in the set then so is \coqdocconstructor{S}
    \coqdocabbreviation{n}.''  The interpretation of \coqdocconstructor{O} as zero and \coqdocconstructor{S} as successor/plus
    one comes from the way that we \textit{use} \coqdocdefinition{nat} values, by writing
    functions to do things with them, proving things about them, and
    so on.  Your definition of \coqdocvar{bin} should be correspondingly simple;
    it is the functions you will write next that will give it
    mathematical meaning.)


    (b) Next, write an increment function \coqdocvar{incr} for binary numbers,
        and a function \coqdocvar{bin\_to\_nat} to convert binary numbers to unary
        numbers.


    (c) Write five unit tests \coqdocvar{test\_bin\_incr1}, \coqdocvar{test\_bin\_incr2}, etc.
        for your increment and binary-to-unary functions.  (A ``unit
        test'' in Coq is a specific \coqdockw{Example} that can be proved with
        just \coqdoctac{reflexivity}, as we've done for several of our
        definitions.)  Notice that incrementing a binary number and
        then converting it to unary should yield the same result as
        first converting it to unary and then incrementing. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-11-22 16:39:52 -0500 (Tue, 22 Nov 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Induction}{Library }{Top.Induction}

\begin{coqdoccode}
\end{coqdoccode}
\section{Induction: Proof by Induction}



 Before getting started, we need to import all of our
    definitions from the previous chapter: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Export} \coqdocvar{Basics}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For the \coqdockw{Require} \coqdockw{Export} to work, you first need to use
    \coqdocvar{coqc} to compile \coqdocvar{Basics.v} into \coqdocvar{Basics.vo}.  This is like
    making a .class file from a .java file, or a .o file from a .c
    file.  There are two ways to do it:



\begin{itemize}
\item  In CoqIDE:


         Open \coqdocvar{Basics.v}.  In the ``Compile'' menu, click on ``Compile
         Buffer''.



\item  From the command line:


         \coqdocvar{coqc} \coqdocvar{Basics.v}

\end{itemize}


   If you have trouble (e.g., if you get complaints about missing
   identifiers later in the file), it may be because the ``load path''
   for Coq is not set up correctly.  The \coqdockw{Print} \coqdocvar{LoadPath}. command may
   be helpful in sorting out such issues. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Proof by Induction}



 We proved in the last chapter that 0 is a neutral element
    for + on the left, using an easy argument based on
    simplification.  We also observed that proving the fact that it is
    also a neutral element on the \textit{right}... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_n\_O\_firsttry} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{n} + 0.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... can't be done in the same simple way.  Just applying
  \coqdoctac{reflexivity} doesn't work, since the \coqdocabbreviation{n} in \coqdocabbreviation{n} + 0 is an arbitrary
  unknown number, so the \coqdockw{match} in the definition of + can't be
  simplified.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
And reasoning by cases using \coqdoctac{destruct} \coqdocabbreviation{n} doesn't get us much
    further: the branch of the case analysis where we assume \coqdocabbreviation{n} = 0
    goes through fine, but in the branch where \coqdocabbreviation{n} = \coqdocconstructor{S} \coqdocvariable{n'} for some \coqdocvariable{n'} we
    get stuck in exactly the same way. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_n\_O\_secondtry} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{n} + 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{destruct} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}. \coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We could use \coqdoctac{destruct} \coqdocvariable{n'} to get one step further, but,
    since \coqdocabbreviation{n} can be arbitrarily large, if we just go on like this
    we'll never finish. 

 To prove interesting facts about numbers, lists, and other
    inductively defined sets, we usually need a more powerful
    reasoning principle: \textit{induction}.


    Recall (from high school, a discrete math course, etc.) the
    \textit{principle of induction over natural numbers}: If \coqdocaxiom{P}(\coqdocabbreviation{n}) is some
    proposition involving a natural number \coqdocabbreviation{n} and we want to show
    that \coqdocaxiom{P} holds for all numbers \coqdocabbreviation{n}, we can reason like this:

\begin{itemize}
\item  show that \coqdocaxiom{P}(\coqdocconstructor{O}) holds;

\item  show that, for any \coqdocvariable{n'}, if \coqdocaxiom{P}(\coqdocvariable{n'}) holds, then so does
           \coqdocaxiom{P}(\coqdocconstructor{S} \coqdocvariable{n'});

\item  conclude that \coqdocaxiom{P}(\coqdocabbreviation{n}) holds for all \coqdocabbreviation{n}.

\end{itemize}


    In Coq, the steps are the same: we begin with the goal of proving
    \coqdocaxiom{P}(\coqdocabbreviation{n}) for all \coqdocabbreviation{n} and break it down (by applying the \coqdoctac{induction}
    tactic) into two separate subgoals: one where we must show \coqdocaxiom{P}(\coqdocconstructor{O})
    and another where we must show \coqdocaxiom{P}(\coqdocvariable{n'}) \ensuremath{\rightarrow} \coqdocaxiom{P}(\coqdocconstructor{S} \coqdocvariable{n'}).  Here's how
    this works for the theorem at hand: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_n\_O} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat}, \coqdocvar{n} = \coqdocvar{n} + 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'} \coqdocvar{IHn'}].\coqdoceol
\coqdocindent{1.00em}
-     \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{IHn'}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Like \coqdoctac{destruct}, the \coqdoctac{induction} tactic takes an \coqdockw{as}...
    clause that specifies the names of the variables to be introduced
    in the subgoals.  Since there are two subgoals, the \coqdockw{as}... clause
    has two parts, separated by \ensuremath{|}.  (Strictly speaking, we can omit
    the \coqdockw{as}... clause and Coq will choose names for us.  In practice,
    this is a bad idea, as Coq's automatic choices tend to be
    confusing.)


    In the first subgoal, \coqdocabbreviation{n} is replaced by 0.  No new variables
    are introduced (so the first part of the \coqdockw{as}... is empty), and
    the goal becomes 0 + 0 = 0, which follows by simplification.


    In the second subgoal, \coqdocabbreviation{n} is replaced by \coqdocconstructor{S} \coqdocvariable{n'}, and the
    assumption \coqdocvariable{n'} + 0 = \coqdocvariable{n'} is added to the context with the name
    \coqdocvar{IHn'} (i.e., the Induction Hypothesis for \coqdocvariable{n'}).  These two names
    are specified in the second part of the \coqdockw{as}... clause.  The goal
    in this case becomes (\coqdocconstructor{S} \coqdocvariable{n'}) + 0 = \coqdocconstructor{S} \coqdocvariable{n'}, which simplifies to
    \coqdocconstructor{S} (\coqdocvariable{n'} + 0) = \coqdocconstructor{S} \coqdocvariable{n'}, which in turn follows from \coqdocvar{IHn'}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{minus\_diag} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{minus} \coqdocvar{n} \coqdocvar{n} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'} \coqdocvar{IHn'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{IHn'}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(The use of the \coqdoctac{intros} tactic in these proofs is actually
    redundant.  When applied to a goal that contains quantified
    variables, the \coqdoctac{induction} tactic will automatically move them
    into the context as needed.) 

\paragraph{Exercise: 2 stars, recommended (basic\_induction)}

 Prove the following using induction. You might need previously
    proven results. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_0\_r} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} \ensuremath{\times} 0 = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_n\_Sm} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{S} (\coqdocvar{n} + \coqdocvar{m}) = \coqdocvar{n} + (\coqdocvar{S} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_comm} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + \coqdocvar{m} = \coqdocvar{m} + \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_assoc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + (\coqdocvar{m} + \coqdocvar{p}) = (\coqdocvar{n} + \coqdocvar{m}) + \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars (double\_plus)}

 Consider the following function, which doubles its argument: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{double} (\coqdocvar{n}:\coqdocvar{nat}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{O}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdocvar{S} (\coqdocvar{S} (\coqdocvar{double} \coqdocvar{n'}))\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Use induction to prove this simple fact about \coqdocdefinition{double}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{double\_plus} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{double} \coqdocvar{n} = \coqdocvar{n} + \coqdocvar{n} .\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (evenb\_S)}

 One inconveninent aspect of our definition of \coqdocdefinition{evenb} \coqdocabbreviation{n} is the
    recursive call on \coqdocabbreviation{n} - 2. This makes proofs about \coqdocdefinition{evenb} \coqdocabbreviation{n}
    harder when done by induction on \coqdocabbreviation{n}, since we may need an
    induction hypothesis about \coqdocabbreviation{n} - 2. The following lemma gives an
    alternative characterization of \coqdocdefinition{evenb} (\coqdocconstructor{S} \coqdocabbreviation{n}) that works better
    with induction: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{evenb\_S} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{evenb} (\coqdocvar{S} \coqdocvar{n}) = \coqdocvar{negb} (\coqdocvar{evenb} \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 starM (destruct\_induction)}

 Briefly explain the difference between the tactics \coqdoctac{destruct}
    and \coqdoctac{induction}.


 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Proofs Within Proofs}



 In Coq, as in informal mathematics, large proofs are often
    broken into a sequence of theorems, with later proofs referring to
    earlier theorems.  But sometimes a proof will require some
    miscellaneous fact that is too trivial and of too little general
    interest to bother giving it its own top-level name.  In such
    cases, it is convenient to be able to simply state and prove the
    needed ``sub-theorem'' right at the point where it is used.  The
    \coqdoctac{assert} tactic allows us to do this.  For example, our earlier
    proof of the \coqdoclemma{mult\_0\_plus} theorem referred to a previous theorem
    named \coqdoclemma{plus\_O\_n}.  We could instead use \coqdoctac{assert} to state and
    prove \coqdoclemma{plus\_O\_n} in-line: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_0\_plus'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(0 + \coqdocvar{n}) \ensuremath{\times} \coqdocvar{m} = \coqdocvar{n} \ensuremath{\times} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H}: 0 + \coqdocvar{n} = \coqdocvar{n}). \{ \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{assert} tactic introduces two sub-goals.  The first is
    the assertion itself; by prefixing it with \coqdocvariable{H}: we name the
    assertion \coqdocvariable{H}.  (We can also name the assertion with \coqdockw{as} just as
    we did above with \coqdoctac{destruct} and \coqdoctac{induction}, i.e., \coqdoctac{assert} (0 + \coqdocabbreviation{n}
    = \coqdocabbreviation{n}) \coqdockw{as} \coqdocvariable{H}.)  Note that we surround the proof of this assertion
    with curly braces \{ ... \}, both for readability and so that,
    when using Coq interactively, we can see more easily when we have
    finished this sub-proof.  The second goal is the same as the one
    at the point where we invoke \coqdoctac{assert} except that, in the context,
    we now have the assumption \coqdocvariable{H} that 0 + \coqdocabbreviation{n} = \coqdocabbreviation{n}.  That is,
    \coqdoctac{assert} generates one subgoal where we must prove the asserted
    fact and a second subgoal where we can use the asserted fact to
    make progress on whatever we were trying to prove in the first
    place. 

 Another example of \coqdoctac{assert}... 

 For example, suppose we want to prove that (\coqdocabbreviation{n} + \coqdocabbreviation{m}) + (\coqdocvariable{p} + \coqdocvariable{q})
    = (\coqdocabbreviation{m} + \coqdocabbreviation{n}) + (\coqdocvariable{p} + \coqdocvariable{q}). The only difference between the two sides of
    the = is that the arguments \coqdocabbreviation{m} and \coqdocabbreviation{n} to the first inner +
    are swapped, so it seems we should be able to use the
    commutativity of addition (\coqdoclemma{plus\_comm}) to rewrite one into the
    other.  However, the \coqdoctac{rewrite} tactic is not very smart about
    \textit{where} it applies the rewrite.  There are three uses of + here,
    and it turns out that doing \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdoclemma{plus\_comm} will affect
    only the \textit{outer} one... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_rearrange\_firsttry} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} \coqdocvar{q} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{n} + \coqdocvar{m}) + (\coqdocvar{p} + \coqdocvar{q}) = (\coqdocvar{m} + \coqdocvar{n}) + (\coqdocvar{p} + \coqdocvar{q}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} \coqdocvar{q}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{plus\_comm}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To use \coqdoclemma{plus\_comm} at the point where we need it, we can introduce
    a local lemma stating that \coqdocabbreviation{n} + \coqdocabbreviation{m} = \coqdocabbreviation{m} + \coqdocabbreviation{n} (for the particular \coqdocabbreviation{m}
    and \coqdocabbreviation{n} that we are talking about here), prove this lemma using
    \coqdoclemma{plus\_comm}, and then use it to do the desired rewrite. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_rearrange} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} \coqdocvar{q} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{n} + \coqdocvar{m}) + (\coqdocvar{p} + \coqdocvar{q}) = (\coqdocvar{m} + \coqdocvar{n}) + (\coqdocvar{p} + \coqdocvar{q}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} \coqdocvar{q}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H}: \coqdocvar{n} + \coqdocvar{m} = \coqdocvar{m} + \coqdocvar{n}).\coqdoceol
\coqdocindent{1.00em}
\{ \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{plus\_comm}. \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Formal vs. Informal Proof}



 "\textit{Informal proofs are algorithms; formal proofs are code}.`` 

 What constitutes a successful proof of a mathematical claim?
    The question has challenged philosophers for millennia, but a
    rough and ready definition could be this: A proof of a
    mathematical proposition \coqdocaxiom{P} is a written (or spoken) text that
    instills in the reader or hearer the certainty that \coqdocaxiom{P} is true --
    an unassailable argument for the truth of \coqdocaxiom{P}.  That is, a proof
    is an act of communication.


    Acts of communication may involve different sorts of readers.  On
    one hand, the ''reader`` can be a program like Coq, in which case
    the ''belief`` that is instilled is that \coqdocaxiom{P} can be mechanically
    derived from a certain set of formal logical rules, and the proof
    is a recipe that guides the program in checking this fact.  Such
    recipes are \textit{formal} proofs.


    Alternatively, the reader can be a human being, in which case the
    proof will be written in English or some other natural language,
    and will thus necessarily be \textit{informal}.  Here, the criteria for
    success are less clearly specified.  A ''valid`` proof is one that
    makes the reader believe \coqdocaxiom{P}.  But the same proof may be read by
    many different readers, some of whom may be convinced by a
    particular way of phrasing the argument, while others may not be.
    Some readers may be particularly pedantic, inexperienced, or just
    plain thick-headed; the only way to convince them will be to make
    the argument in painstaking detail.  But other readers, more
    familiar in the area, may find all this detail so overwhelming
    that they lose the overall thread; all they want is to be told the
    main ideas, since it is easier for them to fill in the details for
    themselves than to wade through a written presentation of them.
    Ultimately, there is no universal standard, because there is no
    single way of writing an informal proof that is guaranteed to
    convince every conceivable reader.


    In practice, however, mathematicians have developed a rich set of
    conventions and idioms for writing about complex mathematical
    objects that -- at least within a certain community -- make
    communication fairly reliable.  The conventions of this stylized
    form of communication give a fairly clear standard for judging
    proofs good or bad.


    Because we are using Coq in this course, we will be working
    heavily with formal proofs.  But this doesn't mean we can
    completely forget about informal ones!  Formal proofs are useful
    in many ways, but they are \textit{not} very efficient ways of
    communicating ideas between human beings. 

 For example, here is a proof that addition is associative: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_assoc'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + (\coqdocvar{m} + \coqdocvar{p}) = (\coqdocvar{n} + \coqdocvar{m}) + \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}. \coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'} \coqdocvar{IHn'}]. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{IHn'}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Coq is perfectly happy with this.  For a human, however, it
    is difficult to make much sense of it.  We can use comments and
    bullets to show the structure a little more clearly... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_assoc'{}'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + (\coqdocvar{m} + \coqdocvar{p}) = (\coqdocvar{n} + \coqdocvar{m}) + \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}. \coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'} \coqdocvar{IHn'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{IHn'}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... and if you're used to Coq you may be able to step
    through the tactics one after the other in your mind and imagine
    the state of the context and goal stack at each point, but if the
    proof were even a little bit more complicated this would be next
    to impossible.


    A (pedantic) mathematician might write the proof something like
    this: 


\begin{itemize}
\item  \textit{Theorem}: For any \coqdocabbreviation{n}, \coqdocabbreviation{m} and \coqdocvariable{p},


      n + (m + p) = (n + m) + p.


    \textit{Proof}: By induction on \coqdocabbreviation{n}.



\begin{itemize}
\item  First, suppose \coqdocabbreviation{n} = 0.  We must show


        0 + (m + p) = (0 + m) + p.


      This follows directly from the definition of +.



\item  Next, suppose \coqdocabbreviation{n} = \coqdocconstructor{S} \coqdocvariable{n'}, where


        n' + (m + p) = (n' + m) + p.


      We must show


        (S n') + (m + p) = ((S n') + m) + p.


      By the definition of +, this follows from


        S (n' + (m + p)) = S ((n' + m) + p),


      which is immediate from the induction hypothesis.  \textit{Qed}. 
\end{itemize}

\end{itemize}


 The overall form of the proof is basically similar, and of
    course this is no accident: Coq has been designed so that its
    \coqdoctac{induction} tactic generates the same sub-goals, in the same
    order, as the bullet points that a mathematician would write.  But
    there are significant differences of detail: the formal proof is
    much more explicit in some ways (e.g., the use of \coqdoctac{reflexivity})
    but much less explicit in others (in particular, the ''proof state``
    at any given point in the Coq proof is completely implicit,
    whereas the informal proof reminds the reader several times where
    things stand). 

\paragraph{Exercise: 2 stars, advanced, recommendedM (plus\_comm\_informal)}

 Translate your solution for \coqdoclemma{plus\_comm} into an informal proof:


    Theorem: Addition is commutative.


    Proof:  \ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optionalM (beq\_nat\_refl\_informal)}

 Write an informal proof of the following theorem, using the
    informal proof of \coqdoclemma{plus\_assoc} as a model.  Don't just
    paraphrase the Coq tactics into English!


    Theorem: \coqdocconstructor{true} = \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} \coqdocabbreviation{n} for any \coqdocabbreviation{n}.


    Proof: \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{More Exercises}



\paragraph{Exercise: 3 stars, recommended (mult\_comm)}

 Use \coqdoctac{assert} to help prove this theorem.  You shouldn't need to
    use induction on \coqdoclemma{plus\_swap}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_swap} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + (\coqdocvar{m} + \coqdocvar{p}) = \coqdocvar{m} + (\coqdocvar{n} + \coqdocvar{p}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now prove commutativity of multiplication.  (You will probably
    need to define and prove a separate subsidiary theorem to be used
    in the proof of this one.  You may find that \coqdoclemma{plus\_swap} comes in
    handy.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_comm} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{n} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{m} \ensuremath{\times} \coqdocvar{n} = \coqdocvar{n} \ensuremath{\times} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (more\_exercises)}

 Take a piece of paper.  For each of the following theorems, first
    \textit{think} about whether (a) it can be proved using only
    simplification and rewriting, (b) it also requires case
    analysis (\coqdoctac{destruct}), or (c) it also requires induction.  Write
    down your prediction.  Then fill in the proof.  (There is no need
    to turn in your piece of paper; this is just to encourage you to
    reflect before you hack!) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{leb\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{true} = \coqdocvar{leb} \coqdocvar{n} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{zero\_nbeq\_S} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} 0 (\coqdocvar{S} \coqdocvar{n}) = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{andb\_false\_r} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} : \coqdocvar{bool},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{andb} \coqdocvar{b} \coqdocvar{false} = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_ble\_compat\_l} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{leb} \coqdocvar{n} \coqdocvar{m} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{leb} (\coqdocvar{p} + \coqdocvar{n}) (\coqdocvar{p} + \coqdocvar{m}) = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{S\_nbeq\_0} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} (\coqdocvar{S} \coqdocvar{n}) 0 = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_1\_l} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat}, 1 \ensuremath{\times} \coqdocvar{n} = \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{all3\_spec} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c} : \coqdocvar{bool},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{orb}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{andb} \coqdocvar{b} \coqdocvar{c})\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{orb} (\coqdocvar{negb} \coqdocvar{b})\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{negb} \coqdocvar{c}))\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_plus\_distr\_r} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{n} + \coqdocvar{m}) \ensuremath{\times} \coqdocvar{p} = (\coqdocvar{n} \ensuremath{\times} \coqdocvar{p}) + (\coqdocvar{m} \ensuremath{\times} \coqdocvar{p}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_assoc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} \ensuremath{\times} (\coqdocvar{m} \ensuremath{\times} \coqdocvar{p}) = (\coqdocvar{n} \ensuremath{\times} \coqdocvar{m}) \ensuremath{\times} \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (beq\_nat\_refl)}

 Prove the following theorem.  (Putting the \coqdocconstructor{true} on the left-hand
    side of the equality may look odd, but this is how the theorem is
    stated in the Coq standard library, so we follow suit.  Rewriting
    works equally well in either direction, so we will have no problem
    using the theorem no matter which way we state it.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_nat\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{true} = \coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (plus\_swap')}

 The \coqdoctac{replace} tactic allows you to specify a particular subterm to
   rewrite and what you want it rewritten to: \coqdoctac{replace} (\coqdocvariable{t}) \coqdockw{with} (\coqdocvariable{u})
   replaces (all copies of) expression \coqdocvariable{t} in the goal by expression
   \coqdocvariable{u}, and generates \coqdocvariable{t} = \coqdocvariable{u} as an additional subgoal. This is often
   useful when a plain \coqdoctac{rewrite} acts on the wrong part of the goal.


   Use the \coqdoctac{replace} tactic to do a proof of \coqdoclemma{plus\_swap'}, just like
   \coqdoclemma{plus\_swap} but without needing \coqdoctac{assert} (\coqdocabbreviation{n} + \coqdocabbreviation{m} = \coqdocabbreviation{m} + \coqdocabbreviation{n}). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_swap'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + (\coqdocvar{m} + \coqdocvar{p}) = \coqdocvar{m} + (\coqdocvar{n} + \coqdocvar{p}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, recommendedM (binary\_commute)}

 Recall the \coqdocvar{incr} and \coqdocvar{bin\_to\_nat} functions that you
    wrote for the \coqdocvar{binary} exercise in the \coqdoclibrary{Basics} chapter.  Prove
    that the following diagram commutes:


                            incr
              bin ----------------------> bin
               |                           |
    bin\_to\_nat |                           |  bin\_to\_nat
               |                           |
               v                           v
              nat ----------------------> nat
                             S


    That is, incrementing a binary number and then converting it to
    a (unary) natural number yields the same result as first converting
    it to a natural number and then incrementing.
    Name your theorem \coqdocvar{bin\_to\_nat\_pres\_incr} (''pres`` for ''preserves``).


    Before you start working on this exercise, copy the definitions
    from your solution to the \coqdocvar{binary} exercise here so that this file
    can be graded on its own.  If you want to change your original
    definitions to make the property easier to prove, feel free to
    do so! \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars, advancedM (binary\_inverse)}

 This exercise is a continuation of the previous exercise about
    binary numbers.  You will need your definitions and theorems from
    there to complete this one; please copy them to this file to make
    it self contained for grading.


    (a) First, write a function to convert natural numbers to binary
        numbers.  Then prove that starting with any natural number,
        converting to binary, then converting back yields the same
        natural number you started with.


    (b) You might naturally think that we should also prove the
        opposite direction: that starting with a binary number,
        converting to a natural, and then back to binary yields the
        same number we started with.  However, this is not true!
        Explain what the problem is.


    (c) Define a ''direct`` normalization function -- i.e., a function
        \coqdocvar{normalize} from binary numbers to binary numbers such that,
        for any binary number b, converting to a natural and then back
        to binary yields (\coqdocvar{normalize} \coqdocconstructor{b}).  Prove it.  (Warning: This
        part is tricky!)


    Again, feel free to change your earlier definitions if this helps
    here. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-10-07 14:01:19 -0400 (Fri, 07 Oct 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Lists}{Library }{Top.Lists}

\begin{coqdoccode}
\end{coqdoccode}
\section{Lists: Working with Structured Data}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Export} \coqdockw{Induction}.\coqdoceol
\coqdocnoindent
\coqdockw{Module} \coqdocvar{NatList}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Pairs of Numbers}



 In an \coqdockw{Inductive} type definition, each constructor can take
    any number of arguments -- none (as with \coqdocconstructor{true} and \coqdocconstructor{O}), one (as
    with \coqdocconstructor{S}), or more than one, as here: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{natprod} : \coqdockw{Type} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{pair} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{natprod}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This declaration can be read: ''There is just one way to
    construct a pair of numbers: by applying the constructor \coqdocconstructor{pair} to
    two arguments of type \coqdocdefinition{nat}.`` \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} (\coqdocvar{pair} 3 5).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here are two simple functions for extracting the first and
    second components of a pair.  The definitions also illustrate how
    to do pattern matching on two-argument constructors. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{fst} (\coqdocvar{p} : \coqdocvar{natprod}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{p} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{pair} \coqdocvar{x} \coqdocvar{y} \ensuremath{\Rightarrow} \coqdocvar{x}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{snd} (\coqdocvar{p} : \coqdocvar{natprod}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{p} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{pair} \coqdocvar{x} \coqdocvar{y} \ensuremath{\Rightarrow} \coqdocvar{y}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Compute} (\coqdocvar{fst} (\coqdocvar{pair} 3 5)).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Since pairs are used quite a bit, it is nice to be able to
    write them with the standard mathematical notation (\coqdocabbreviation{x},\coqdocabbreviation{y}) instead
    of \coqdocconstructor{pair} \coqdocabbreviation{x} \coqdocabbreviation{y}.  We can tell Coq to allow this with a \coqdockw{Notation}
    declaration. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "( x , y )" := (\coqdocvar{pair} \coqdocvar{x} \coqdocvar{y}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The new pair notation can be used both in expressions and in
    pattern matches (indeed, we've actually seen this already in the
    previous chapter, in the definition of the \coqdocdefinition{minus} function --
    this works because the pair notation is also provided as part of
    the standard library): \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Compute} (\coqdocvar{fst} (3,5)).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{fst'} (\coqdocvar{p} : \coqdocvar{natprod}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{p} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{x},\coqdocvar{y}) \ensuremath{\Rightarrow} \coqdocvar{x}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{snd'} (\coqdocvar{p} : \coqdocvar{natprod}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{p} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{x},\coqdocvar{y}) \ensuremath{\Rightarrow} \coqdocvar{y}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{swap\_pair} (\coqdocvar{p} : \coqdocvar{natprod}) : \coqdocvar{natprod} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{p} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{x},\coqdocvar{y}) \ensuremath{\Rightarrow} (\coqdocvar{y},\coqdocvar{x})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Let's try to prove a few simple facts about pairs.


    If we state things in a particular (and slightly peculiar) way, we
    can complete proofs with just reflexivity (and its built-in
    simplification): \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{surjective\_pairing'} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{n},\coqdocvar{m}) = (\coqdocvar{fst} (\coqdocvar{n},\coqdocvar{m}), \coqdocvar{snd} (\coqdocvar{n},\coqdocvar{m})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
But \coqdoctac{reflexivity} is not enough if we state the lemma in a more
    natural way: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{surjective\_pairing\_stuck} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{p} : \coqdocvar{natprod}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{p} = (\coqdocvar{fst} \coqdocvar{p}, \coqdocvar{snd} \coqdocvar{p}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We have to expose the structure of \coqdocvariable{p} so that \coqdoctac{simpl} can
    perform the pattern match in \coqdocdefinition{fst} and \coqdocdefinition{snd}.  We can do this with
    \coqdoctac{destruct}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{surjective\_pairing} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{p} : \coqdocvar{natprod}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{p} = (\coqdocvar{fst} \coqdocvar{p}, \coqdocvar{snd} \coqdocvar{p}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{p}. \coqdoctac{destruct} \coqdocvar{p} \coqdockw{as} [\coqdocvar{n} \coqdocvar{m}]. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Notice that, unlike its behavior with \coqdocdefinition{nat}s, \coqdoctac{destruct}
    generates just one subgoal here.  That's because \coqdocinductive{natprod}s can
    only be constructed in one way. 

\paragraph{Exercise: 1 star (snd\_fst\_is\_swap)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{snd\_fst\_is\_swap} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{p} : \coqdocvar{natprod}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{snd} \coqdocvar{p}, \coqdocvar{fst} \coqdocvar{p}) = \coqdocvar{swap\_pair} \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star, optional (fst\_swap\_is\_snd)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{fst\_swap\_is\_snd} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{p} : \coqdocvar{natprod}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fst} (\coqdocvar{swap\_pair} \coqdocvar{p}) = \coqdocvar{snd} \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Lists of Numbers}



 Generalizing the definition of pairs, we can describe the
    type of \textit{lists} of numbers like this: ''A list is either the empty
    list or else a pair of a number and another list.`` \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{natlist} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil}  : \coqdocvar{natlist}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{cons} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{natlist} \ensuremath{\rightarrow} \coqdocvar{natlist}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For example, here is a three-element list: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{mylist} := \coqdocvar{cons} 1 (\coqdocvar{cons} 2 (\coqdocvar{cons} 3 \coqdocvar{nil})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As with pairs, it is more convenient to write lists in
    familiar programming notation.  The following declarations
    allow us to use :: as an infix \coqdocconstructor{cons} operator and square
    brackets as an ''outfix`` notation for constructing lists. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "x :: l" := (\coqdocvar{cons} \coqdocvar{x} \coqdocvar{l})\coqdoceol
\coqdocindent{10.50em}
(\coqdoctac{at} \coqdockw{level} 60, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "[ ]" := \coqdocvar{nil}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "[ x ; .. ; y ]" := (\coqdocvar{cons} \coqdocvar{x} .. (\coqdocvar{cons} \coqdocvar{y} \coqdocvar{nil}) ..).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It is not necessary to understand the details of these
    declarations, but in case you are interested, here is roughly
    what's going on.  The \coqdoctac{right} \coqdockw{associativity} annotation tells Coq
    how to parenthesize expressions involving several uses of :: so
    that, for example, the next three declarations mean exactly the
    same thing: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{mylist1} := 1 :: (2 :: (3 :: \coqdocvar{nil})).\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{mylist2} := 1 :: 2 :: 3 :: \coqdocvar{nil}.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{mylist3} := [1;2;3].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{at} \coqdockw{level} 60 part tells Coq how to parenthesize
    expressions that involve both :: and some other infix operator.
    For example, since we defined + as infix notation for the \coqdocdefinition{plus}
    function at level 50,


  Notation ''x + y`` := (plus x y)
                      (at level 50, left associativity).


   the + operator will bind tighter than ::, so 1 + 2 :: [3]
   will be parsed, as we'd expect, as (1 + 2) :: [3] rather than 1
   + (2 :: [3]).


   (Expressions like ''1 + 2 :: [3]`` can be a little confusing when
   you read them in a .v file.  The inner brackets, around 3, indicate
   a list, but the outer brackets, which are invisible in the HTML
   rendering, are there to instruct the ''coqdoc`` tool that the bracketed
   part should be displayed as Coq code rather than running text.)


   The second and third \coqdockw{Notation} declarations above introduce the
   standard square-bracket notation for lists; the right-hand side of
   the third one illustrates Coq's syntax for declaring n-ary
   notations and translating them to nested sequences of binary
   constructors. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Repeat}



 A number of functions are useful for manipulating lists.
    For example, the \coqdoctac{repeat} function takes a number \coqdocabbreviation{n} and a
    \coqdocdefinition{count} and returns a list of length \coqdocdefinition{count} where every element
    is \coqdocabbreviation{n}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{repeat} (\coqdocvar{n} \coqdocvar{count} : \coqdocvar{nat}) : \coqdocvar{natlist} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{count} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{nil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{count'} \ensuremath{\Rightarrow} \coqdocvar{n} :: (\coqdoctac{repeat} \coqdocvar{n} \coqdocvar{count'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Length}



 The \coqdocdefinition{length} function calculates the length of a list. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{length} (\coqdocvar{l}:\coqdocvar{natlist}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{O}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{h} :: \coqdocvar{t} \ensuremath{\Rightarrow} \coqdocvar{S} (\coqdocvar{length} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Append}



 The \coqdocdefinition{app} function concatenates (appends) two lists. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{app} (\coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{natlist}) : \coqdocvar{natlist} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l1} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil}    \ensuremath{\Rightarrow} \coqdocvar{l2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{h} :: \coqdocvar{t} \ensuremath{\Rightarrow} \coqdocvar{h} :: (\coqdocvar{app} \coqdocvar{t} \coqdocvar{l2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Actually, \coqdocdefinition{app} will be used a lot in some parts of what
    follows, so it is convenient to have an infix operator for it. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "x ++ y" := (\coqdocvar{app} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{10.50em}
(\coqdoctac{right} \coqdockw{associativity}, \coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_app1}:             [1;2;3] ++ [4;5] = [1;2;3;4;5].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_app2}:             \coqdocvar{nil} ++ [4;5] = [4;5].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_app3}:             [1;2;3] ++ \coqdocvar{nil} = [1;2;3].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Head (with default) and Tail}



 Here are two smaller examples of programming with lists.
    The \coqdocdefinition{hd} function returns the first element (the ''head``) of the
    list, while \coqdocdefinition{tl} returns everything but the first
    element (the ''tail``).
    Of course, the empty list has no first element, so we
    must pass a default value to be returned in that case.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{hd} (\coqdocvar{default}:\coqdocvar{nat}) (\coqdocvar{l}:\coqdocvar{natlist}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{default}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{h} :: \coqdocvar{t} \ensuremath{\Rightarrow} \coqdocvar{h}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{tl} (\coqdocvar{l}:\coqdocvar{natlist}) : \coqdocvar{natlist} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{nil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{h} :: \coqdocvar{t} \ensuremath{\Rightarrow} \coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_hd1}:             \coqdocvar{hd} 0 [1;2;3] = 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_hd2}:             \coqdocvar{hd} 0 [] = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_tl}:              \coqdocvar{tl} [1;2;3] = [2;3].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Exercises}



\paragraph{Exercise: 2 stars, recommended (list\_funs)}

 Complete the definitions of \coqdocdefinition{nonzeros}, \coqdocdefinition{oddmembers} and
    \coqdocdefinition{countoddmembers} below. Have a look at the tests to understand
    what these functions should do. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{nonzeros} (\coqdocvar{l}:\coqdocvar{natlist}) : \coqdocvar{natlist}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nonzeros}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{nonzeros} [0;1;0;2;3;0;0] = [1;2;3].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{oddmembers} (\coqdocvar{l}:\coqdocvar{natlist}) : \coqdocvar{natlist}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_oddmembers}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{oddmembers} [0;1;0;2;3;0;0] = [1;3].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{countoddmembers} (\coqdocvar{l}:\coqdocvar{natlist}) : \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_countoddmembers1}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{countoddmembers} [1;0;3;1;4;5] = 4.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_countoddmembers2}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{countoddmembers} [0;2;4] = 0.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_countoddmembers3}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{countoddmembers} \coqdocvar{nil} = 0.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advanced (alternate)}

 Complete the definition of \coqdocdefinition{alternate}, which ''zips up`` two lists
    into one, alternating between elements taken from the first list
    and elements from the second.  See the tests below for more
    specific examples.


    Note: one natural and elegant way of writing \coqdocdefinition{alternate} will fail
    to satisfy Coq's requirement that all \coqdockw{Fixpoint} definitions be
    ''obviously terminating.``  If you find yourself in this rut, look
    for a slightly more verbose solution that considers elements of
    both lists at the same time.  (One possible solution requires
    defining a new kind of pairs, but this is not the only way.)  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{alternate} (\coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{natlist}) : \coqdocvar{natlist}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_alternate1}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{alternate} [1;2;3] [4;5;6] = [1;4;2;5;3;6].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_alternate2}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{alternate} [1] [4;5;6] = [1;4;5;6].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_alternate3}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{alternate} [1;2;3] [4] = [1;4;2;3].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_alternate4}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{alternate} [] [20;30] = [20;30].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Bags via Lists}



 A \coqdocdefinition{bag} (or \coqdocvar{multiset}) is like a set, except that each element
    can appear multiple times rather than just once.  One possible
    implementation is to represent a bag of numbers as a list. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{bag} := \coqdocvar{natlist}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, recommended (bag\_functions)}

 Complete the following definitions for the functions
    \coqdocdefinition{count}, \coqdocdefinition{sum}, \coqdocdefinition{add}, and \coqdocdefinition{member} for bags. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{count} (\coqdocvar{v}:\coqdocvar{nat}) (\coqdocvar{s}:\coqdocvar{bag}) : \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
All these proofs can be done just by \coqdoctac{reflexivity}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_count1}:              \coqdocvar{count} 1 [1;2;3;1;4;1] = 3.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_count2}:              \coqdocvar{count} 6 [1;2;3;1;4;1] = 0.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Multiset \coqdocdefinition{sum} is similar to set \coqdocvar{union}: \coqdocdefinition{sum} \coqdocabbreviation{a} \coqdocconstructor{b} contains
    all the elements of \coqdocabbreviation{a} and of \coqdocconstructor{b}.  (Mathematicians usually
    define \coqdocvar{union} on multisets a little bit differently, which
    is why we don't use that name for this operation.)
    For \coqdocdefinition{sum} we're giving you a header that does not give explicit
    names to the arguments.  Moreover, it uses the keyword
    \coqdockw{Definition} instead of \coqdockw{Fixpoint}, so even if you had names for
    the arguments, you wouldn't be able to process them recursively.
    The point of stating the question this way is to encourage you to
    think about whether \coqdocdefinition{sum} can be implemented in another way --
    perhaps by using functions that have already been defined.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{sum} : \coqdocvar{bag} \ensuremath{\rightarrow} \coqdocvar{bag} \ensuremath{\rightarrow} \coqdocvar{bag}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_sum1}:              \coqdocvar{count} 1 (\coqdocvar{sum} [1;2;3] [1;4;1]) = 3.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{add} (\coqdocvar{v}:\coqdocvar{nat}) (\coqdocvar{s}:\coqdocvar{bag}) : \coqdocvar{bag}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_add1}:                \coqdocvar{count} 1 (\coqdocvar{add} 1 [1;4;1]) = 3.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_add2}:                \coqdocvar{count} 5 (\coqdocvar{add} 1 [1;4;1]) = 0.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{member} (\coqdocvar{v}:\coqdocvar{nat}) (\coqdocvar{s}:\coqdocvar{bag}) : \coqdocvar{bool}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_member1}:             \coqdocvar{member} 1 [1;4;1] = \coqdocvar{true}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_member2}:             \coqdocvar{member} 2 [1;4;1] = \coqdocvar{false}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (bag\_more\_functions)}

 Here are some more bag functions for you to practice with. 

 When remove\_one is applied to a bag without the number to remove,
   it should return the same bag unchanged. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{remove\_one} (\coqdocvar{v}:\coqdocvar{nat}) (\coqdocvar{s}:\coqdocvar{bag}) : \coqdocvar{bag}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_remove\_one1}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{count} 5 (\coqdocvar{remove\_one} 5 [2;1;5;4;1]) = 0.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_remove\_one2}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{count} 5 (\coqdocvar{remove\_one} 5 [2;1;4;1]) = 0.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_remove\_one3}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{count} 4 (\coqdocvar{remove\_one} 5 [2;1;4;5;1;4]) = 2.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_remove\_one4}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{count} 5 (\coqdocvar{remove\_one} 5 [2;1;5;4;5;1;4]) = 1.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{remove\_all} (\coqdocvar{v}:\coqdocvar{nat}) (\coqdocvar{s}:\coqdocvar{bag}) : \coqdocvar{bag}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_remove\_all1}:  \coqdocvar{count} 5 (\coqdocvar{remove\_all} 5 [2;1;5;4;1]) = 0.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_remove\_all2}:  \coqdocvar{count} 5 (\coqdocvar{remove\_all} 5 [2;1;4;1]) = 0.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_remove\_all3}:  \coqdocvar{count} 4 (\coqdocvar{remove\_all} 5 [2;1;4;5;1;4]) = 2.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_remove\_all4}:  \coqdocvar{count} 5 (\coqdocvar{remove\_all} 5 [2;1;5;4;5;1;4;5;1;4]) = 0.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{subset} (\coqdocvar{s1}:\coqdocvar{bag}) (\coqdocvar{s2}:\coqdocvar{bag}) : \coqdocvar{bool}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_subset1}:              \coqdocvar{subset} [1;2] [2;1;4;1] = \coqdocvar{true}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_subset2}:              \coqdocvar{subset} [1;2;2] [2;1;4;1] = \coqdocvar{false}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, recommendedM (bag\_theorem)}

 Write down an interesting theorem \coqdocvar{bag\_theorem} about bags
    involving the functions \coqdocdefinition{count} and \coqdocdefinition{add}, and prove it.  Note
    that, since this problem is somewhat open-ended, it's possible
    that you may come up with a theorem which is true, but whose proof
    requires techniques you haven't learned yet.  Feel free to ask for
    help if you get stuck! \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Reasoning About Lists}



 As with numbers, simple facts about list-processing
    functions can sometimes be proved entirely by simplification.  For
    example, the simplification performed by \coqdoctac{reflexivity} is enough
    for this theorem... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{nil\_app} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l}:\coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
[] ++ \coqdocvar{l} = \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... because the [] is substituted into the
    ''scrutinee`` (the value being ''scrutinized`` by the match) in the
    definition of \coqdocdefinition{app}, allowing the match itself to be
    simplified. 

 Also, as with numbers, it is sometimes helpful to perform case
    analysis on the possible shapes (empty or non-empty) of an unknown
    list. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{tl\_length\_pred} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l}:\coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pred} (\coqdocvar{length} \coqdocvar{l}) = \coqdocvar{length} (\coqdocvar{tl} \coqdocvar{l}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{l}. \coqdoctac{destruct} \coqdocvar{l} \coqdockw{as} [| \coqdocvar{n} \coqdocvar{l'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here, the \coqdocconstructor{nil} case works because we've chosen to define
    \coqdocdefinition{tl} \coqdocconstructor{nil} = \coqdocconstructor{nil}. Notice that the \coqdockw{as} annotation on the \coqdoctac{destruct}
    tactic here introduces two names, \coqdocabbreviation{n} and \coqdocvariable{l'}, corresponding to
    the fact that the \coqdocconstructor{cons} constructor for lists takes two
    arguments (the head and tail of the list it is constructing). 

 Usually, though, interesting theorems about lists require
    induction for their proofs. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Micro-Sermon}



 Simply reading example proof scripts will not get you very far!
    It is important to work through the details of each one, using Coq
    and thinking about what each step achieves.  Otherwise it is more
    or less guaranteed that the exercises will make no sense when you
    get to them.  'Nuff said. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Induction on Lists}



 Proofs by induction over datatypes like \coqdocinductive{natlist} are a
    little less familiar than standard natural number induction, but
    the idea is equally simple.  Each \coqdockw{Inductive} declaration defines
    a set of data values that can be built up using the declared
    constructors: a boolean can be either \coqdocconstructor{true} or \coqdocconstructor{false}; a number
    can be either \coqdocconstructor{O} or \coqdocconstructor{S} applied to another number; a list can be
    either \coqdocconstructor{nil} or \coqdocconstructor{cons} applied to a number and a list.


    Moreover, applications of the declared constructors to one another
    are the \textit{only} possible shapes that elements of an inductively
    defined set can have, and this fact directly gives rise to a way
    of reasoning about inductively defined sets: a number is either
    \coqdocconstructor{O} or else it is \coqdocconstructor{S} applied to some \textit{smaller} number; a list is
    either \coqdocconstructor{nil} or else it is \coqdocconstructor{cons} applied to some number and some
    \textit{smaller} list; etc. So, if we have in mind some proposition \coqdocaxiom{P}
    that mentions a list \coqdocabbreviation{l} and we want to argue that \coqdocaxiom{P} holds for
    \textit{all} lists, we can reason as follows:



\begin{itemize}
\item  First, show that \coqdocaxiom{P} is true of \coqdocabbreviation{l} when \coqdocabbreviation{l} is \coqdocconstructor{nil}.



\item  Then show that \coqdocaxiom{P} is true of \coqdocabbreviation{l} when \coqdocabbreviation{l} is \coqdocconstructor{cons} \coqdocabbreviation{n} \coqdocvariable{l'} for
        some number \coqdocabbreviation{n} and some smaller list \coqdocvariable{l'}, assuming that \coqdocaxiom{P}
        is true for \coqdocvariable{l'}.

\end{itemize}


    Since larger lists can only be built up from smaller ones,
    eventually reaching \coqdocconstructor{nil}, these two arguments together establish
    the truth of \coqdocaxiom{P} for all lists \coqdocabbreviation{l}.  Here's a concrete example: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{app\_assoc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l1} \coqdocvar{l2} \coqdocvar{l3} : \coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{l1} ++ \coqdocvar{l2}) ++ \coqdocvar{l3} = \coqdocvar{l1} ++ (\coqdocvar{l2} ++ \coqdocvar{l3}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{l1} \coqdocvar{l2} \coqdocvar{l3}. \coqdoctac{induction} \coqdocvar{l1} \coqdockw{as} [| \coqdocvar{n} \coqdocvar{l1'} \coqdocvar{IHl1'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{IHl1'}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Notice that, as when doing induction on natural numbers, the
    \coqdockw{as}... clause provided to the \coqdoctac{induction} tactic gives a name to
    the induction hypothesis corresponding to the smaller list \coqdocvar{l1'}
    in the \coqdocconstructor{cons} case. Once again, this Coq proof is not especially
    illuminating as a static written document -- it is easy to see
    what's going on if you are reading the proof in an interactive Coq
    session and you can see the current goal and context at each
    point, but this state is not visible in the written-down parts of
    the Coq proof.  So a natural-language proof -- one written for
    human readers -- will need to include more explicit signposts; in
    particular, it will help the reader stay oriented if we remind
    them exactly what the induction hypothesis is in the second
    case. 

 For comparison, here is an informal proof of the same theorem. 

 \textit{Theorem}: For all lists \coqdoclemma{l1}, \coqdoclemma{l2}, and \coqdoclemma{l3},
   (\coqdoclemma{l1} ++ \coqdoclemma{l2}) ++ \coqdoclemma{l3} = \coqdoclemma{l1} ++ (\coqdoclemma{l2} ++ \coqdoclemma{l3}).


   \textit{Proof}: By induction on \coqdoclemma{l1}.



\begin{itemize}
\item  First, suppose \coqdoclemma{l1} = [].  We must show


       (\ensuremath{\Box} ++ l2) ++ l3 = \ensuremath{\Box} ++ (l2 ++ l3),


     which follows directly from the definition of ++.



\item  Next, suppose \coqdoclemma{l1} = \coqdocabbreviation{n}::\coqdocvar{l1'}, with


       (l1' ++ l2) ++ l3 = l1' ++ (l2 ++ l3)


     (the induction hypothesis). We must show


       ((n :: l1') ++ l2) ++ l3 = (n :: l1') ++ (l2 ++ l3).


     By the definition of ++, this follows from


       n :: ((l1' ++ l2) ++ l3) = n :: (l1' ++ (l2 ++ l3)),


     which is immediate from the induction hypothesis.  \ensuremath{\Box} 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Reversing a List}



 For a slightly more involved example of inductive proof over
    lists, suppose we use \coqdocdefinition{app} to define a list-reversing function
    \coqdocdefinition{rev}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{rev} (\coqdocvar{l}:\coqdocvar{natlist}) : \coqdocvar{natlist} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil}    \ensuremath{\Rightarrow} \coqdocvar{nil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{h} :: \coqdocvar{t} \ensuremath{\Rightarrow} \coqdocvar{rev} \coqdocvar{t} ++ [\coqdocvar{h}]\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_rev1}:            \coqdocvar{rev} [1;2;3] = [3;2;1].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_rev2}:            \coqdocvar{rev} \coqdocvar{nil} = \coqdocvar{nil}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Properties of \texorpdfstring{\protect\coqdocdefinition{rev}}{rev}}



 Now let's prove some theorems about our newly defined \coqdocdefinition{rev}.
    For something a bit more challenging than what we've seen, let's
    prove that reversing a list does not change its length.  Our first
    attempt gets stuck in the successor case... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{rev\_length\_firsttry} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l} : \coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{length} (\coqdocvar{rev} \coqdocvar{l}) = \coqdocvar{length} \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{l}. \coqdoctac{induction} \coqdocvar{l} \coqdockw{as} [| \coqdocvar{n} \coqdocvar{l'} \coqdocvar{IHl'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{IHl'}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
So let's take the equation relating ++ and \coqdocdefinition{length} that
    would have enabled us to make progress and prove it as a separate
    lemma. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{app\_length} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{length} (\coqdocvar{l1} ++ \coqdocvar{l2}) = (\coqdocvar{length} \coqdocvar{l1}) + (\coqdocvar{length} \coqdocvar{l2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{l1} \coqdocvar{l2}. \coqdoctac{induction} \coqdocvar{l1} \coqdockw{as} [| \coqdocvar{n} \coqdocvar{l1'} \coqdocvar{IHl1'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{IHl1'}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that, to make the lemma as general as possible, we
    quantify over \textit{all} \coqdocinductive{natlist}s, not just those that result from an
    application of \coqdocdefinition{rev}.  This should seem natural, because the truth
    of the goal clearly doesn't depend on the list having been
    reversed.  Moreover, it is easier to prove the more general
    property. 

 Now we can complete the original proof. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{rev\_length} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l} : \coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{length} (\coqdocvar{rev} \coqdocvar{l}) = \coqdocvar{length} \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{l}. \coqdoctac{induction} \coqdocvar{l} \coqdockw{as} [| \coqdocvar{n} \coqdocvar{l'} \coqdocvar{IHl'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{app\_length}, \coqdocvar{plus\_comm}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{IHl'}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For comparison, here are informal proofs of these two theorems:


    \textit{Theorem}: For all lists \coqdoclemma{l1} and \coqdoclemma{l2},
       \coqdocdefinition{length} (\coqdoclemma{l1} ++ \coqdoclemma{l2}) = \coqdocdefinition{length} \coqdoclemma{l1} + \coqdocdefinition{length} \coqdoclemma{l2}.


    \textit{Proof}: By induction on \coqdoclemma{l1}.



\begin{itemize}
\item  First, suppose \coqdoclemma{l1} = [].  We must show


        length (\ensuremath{\Box} ++ l2) = length \ensuremath{\Box} + length l2,


      which follows directly from the definitions of
      \coqdocdefinition{length} and ++.



\item  Next, suppose \coqdoclemma{l1} = \coqdocabbreviation{n}::\coqdocvar{l1'}, with


        length (l1' ++ l2) = length l1' + length l2.


      We must show


        length ((n::l1') ++ l2) = length (n::l1') + length l2).


      This follows directly from the definitions of \coqdocdefinition{length} and ++
      together with the induction hypothesis. \ensuremath{\Box} 
\end{itemize}


 \textit{Theorem}: For all lists \coqdocabbreviation{l}, \coqdocdefinition{length} (\coqdocdefinition{rev} \coqdocabbreviation{l}) = \coqdocdefinition{length} \coqdocabbreviation{l}.


    \textit{Proof}: By induction on \coqdocabbreviation{l}.



\begin{itemize}
\item  First, suppose \coqdocabbreviation{l} = [].  We must show


          length (rev \ensuremath{\Box}) = length \ensuremath{\Box},


        which follows directly from the definitions of \coqdocdefinition{length}
        and \coqdocdefinition{rev}.



\item  Next, suppose \coqdocabbreviation{l} = \coqdocabbreviation{n}::\coqdocvariable{l'}, with


          length (rev l') = length l'.


        We must show


          length (rev (n :: l')) = length (n :: l').


        By the definition of \coqdocdefinition{rev}, this follows from


          length ((rev l') ++ \coqdocabbreviation{n}) = S (length l')


        which, by the previous lemma, is the same as


          length (rev l') + length \coqdocabbreviation{n} = S (length l').


        This follows directly from the induction hypothesis and the
        definition of \coqdocdefinition{length}. \ensuremath{\Box} 
\end{itemize}


 The style of these proofs is rather longwinded and pedantic.
    After the first few, we might find it easier to follow proofs that
    give fewer details (which can easily work out in our own minds or
    on scratch paper if necessary) and just highlight the non-obvious
    steps.  In this more compressed style, the above proof might look
    like this: 

 \textit{Theorem}:
     For all lists \coqdocabbreviation{l}, \coqdocdefinition{length} (\coqdocdefinition{rev} \coqdocabbreviation{l}) = \coqdocdefinition{length} \coqdocabbreviation{l}.


    \textit{Proof}: First, observe that \coqdocdefinition{length} (\coqdocabbreviation{l} ++ [\coqdocabbreviation{n}]) = \coqdocconstructor{S} (\coqdocdefinition{length} \coqdocabbreviation{l})
     for any \coqdocabbreviation{l} (this follows by a straightforward induction on \coqdocabbreviation{l}).
     The main property again follows by induction on \coqdocabbreviation{l}, using the
     observation together with the induction hypothesis in the case
     where \coqdocabbreviation{l} = \coqdocvariable{n'}::\coqdocvariable{l'}. \ensuremath{\Box} 

 Which style is preferable in a given situation depends on
    the sophistication of the expected audience and how similar the
    proof at hand is to ones that the audience will already be
    familiar with.  The more pedantic style is a good default for our
    present purposes. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{\texorpdfstring{\protect\coqdockw{Search}}{Search}}



 We've seen that proofs can make use of other theorems we've
    already proved, e.g., using \coqdoctac{rewrite}.  But in order to refer to a
    theorem, we need to know its name!  Indeed, it is often hard even
    to remember what theorems have been proven, much less what they
    are called.


    Coq's \coqdockw{Search} command is quite helpful with this.  Typing
    \coqdockw{Search} \coqdoclemma{foo} will cause Coq to display a list of all theorems
    involving \coqdoclemma{foo}.  For example, try uncommenting the following line
    to see a list of theorems that we have proved about \coqdocdefinition{rev}: \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
Keep \coqdockw{Search} in mind as you do the following exercises and
    throughout the rest of the book; it can save you a lot of time!


    If you are using ProofGeneral, you can run \coqdockw{Search} with \coqdocabbreviation{C}-\coqdocconstructor{c}
    \coqdocabbreviation{C}-\coqdocabbreviation{a} \coqdocabbreviation{C}-\coqdocabbreviation{a}. Pasting its response into your buffer can be
    accomplished with \coqdocabbreviation{C}-\coqdocconstructor{c} \coqdocabbreviation{C}-;. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{List Exercises, Part 1}



\paragraph{Exercise: 3 starsM (list\_exercises)}

 More practice with lists: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{app\_nil\_r} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l} : \coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l} ++ [] = \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{rev\_app\_distr}: \coqdockw{\ensuremath{\forall}} \coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rev} (\coqdocvar{l1} ++ \coqdocvar{l2}) = \coqdocvar{rev} \coqdocvar{l2} ++ \coqdocvar{rev} \coqdocvar{l1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{rev\_involutive} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l} : \coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rev} (\coqdocvar{rev} \coqdocvar{l}) = \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
There is a short solution to the next one.  If you find yourself
    getting tangled up, step back and try to look for a simpler
    way. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{app\_assoc4} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l1} \coqdocvar{l2} \coqdocvar{l3} \coqdocvar{l4} : \coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l1} ++ (\coqdocvar{l2} ++ (\coqdocvar{l3} ++ \coqdocvar{l4})) = ((\coqdocvar{l1} ++ \coqdocvar{l2}) ++ \coqdocvar{l3}) ++ \coqdocvar{l4}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
An exercise about your implementation of \coqdocdefinition{nonzeros}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{nonzeros\_app} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{nonzeros} (\coqdocvar{l1} ++ \coqdocvar{l2}) = (\coqdocvar{nonzeros} \coqdocvar{l1}) ++ (\coqdocvar{nonzeros} \coqdocvar{l2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars (beq\_natlist)}

 Fill in the definition of \coqdocdefinition{beq\_natlist}, which compares
    lists of numbers for equality.  Prove that \coqdocdefinition{beq\_natlist} \coqdocabbreviation{l} \coqdocabbreviation{l}
    yields \coqdocconstructor{true} for every list \coqdocabbreviation{l}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{beq\_natlist} (\coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{natlist}) : \coqdocvar{bool}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_beq\_natlist1} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{beq\_natlist} \coqdocvar{nil} \coqdocvar{nil} = \coqdocvar{true}).\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_beq\_natlist2} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_natlist} [1;2;3] [1;2;3] = \coqdocvar{true}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_beq\_natlist3} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_natlist} [1;2;3] [1;2;4] = \coqdocvar{false}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_natlist\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l}:\coqdocvar{natlist},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{true} = \coqdocvar{beq\_natlist} \coqdocvar{l} \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{List Exercises, Part 2}



\paragraph{Exercise: 3 stars, advanced (bag\_proofs)}

 Here are a couple of little theorems to prove about your
    definitions about bags above. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{count\_member\_nonzero} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{s} : \coqdocvar{bag}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{leb} 1 (\coqdocvar{count} 1 (1 :: \coqdocvar{s})) = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The following lemma about \coqdocdefinition{leb} might help you in the next proof. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ble\_n\_Sn} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{leb} \coqdocvar{n} (\coqdocvar{S} \coqdocvar{n}) = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'} \coqdocvar{IHn'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{IHn'}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{remove\_decreases\_count}: \coqdockw{\ensuremath{\forall}} (\coqdocvar{s} : \coqdocvar{bag}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{leb} (\coqdocvar{count} 0 (\coqdocvar{remove\_one} 0 \coqdocvar{s})) (\coqdocvar{count} 0 \coqdocvar{s}) = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optionalM (bag\_count\_sum)}

 Write down an interesting theorem \coqdocvar{bag\_count\_sum} about bags
    involving the functions \coqdocdefinition{count} and \coqdocdefinition{sum}, and prove it.  (You may
    find that the difficulty of the proof depends on how you defined
    \coqdocdefinition{count}!) \begin{coqdoccode}
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advancedM (rev\_injective)}

 Prove that the \coqdocdefinition{rev} function is injective -- that is,


    forall (l1 l2 : natlist), rev l1 = rev l2 -> l1 = l2.


(There is a hard way and an easy way to do this.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Options}



 Suppose we want to write a function that returns the \coqdocabbreviation{n}th
    element of some list.  If we give it type \coqdocdefinition{nat} \ensuremath{\rightarrow} \coqdocinductive{natlist} \ensuremath{\rightarrow} \coqdocdefinition{nat},
    then we'll have to choose some number to return when the list is
    too short... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{nth\_bad} (\coqdocvar{l}:\coqdocvar{natlist}) (\coqdocvar{n}:\coqdocvar{nat}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} 42  \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{a} :: \coqdocvar{l'} \ensuremath{\Rightarrow} \coqdockw{match} \coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{O} \coqdockw{with}\coqdoceol
\coqdocindent{7.50em}
\ensuremath{|} \coqdocvar{true} \ensuremath{\Rightarrow} \coqdocvar{a}\coqdoceol
\coqdocindent{7.50em}
\ensuremath{|} \coqdocvar{false} \ensuremath{\Rightarrow} \coqdocvar{nth\_bad} \coqdocvar{l'} (\coqdocvar{pred} \coqdocvar{n})\coqdoceol
\coqdocindent{7.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This solution is not so good: If \coqdocdefinition{nth\_bad} returns 42, we
    can't tell whether that value actually appears on the input
    without further processing. A better alternative is to change the
    return type of \coqdocdefinition{nth\_bad} to include an error value as a possible
    outcome. We call this type \coqdocinductive{natoption}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{natoption} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Some} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{natoption}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{None} : \coqdocvar{natoption}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can then change the above definition of \coqdocdefinition{nth\_bad} to
    return \coqdocconstructor{None} when the list is too short and \coqdocconstructor{Some} \coqdocabbreviation{a} when the
    list has enough members and \coqdocabbreviation{a} appears at position \coqdocabbreviation{n}. We call
    this new function \coqdocdefinition{nth\_error} to indicate that it may result in an
    error. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{nth\_error} (\coqdocvar{l}:\coqdocvar{natlist}) (\coqdocvar{n}:\coqdocvar{nat}) : \coqdocvar{natoption} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{a} :: \coqdocvar{l'} \ensuremath{\Rightarrow} \coqdockw{match} \coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{O} \coqdockw{with}\coqdoceol
\coqdocindent{7.50em}
\ensuremath{|} \coqdocvar{true} \ensuremath{\Rightarrow} \coqdocvar{Some} \coqdocvar{a}\coqdoceol
\coqdocindent{7.50em}
\ensuremath{|} \coqdocvar{false} \ensuremath{\Rightarrow} \coqdocvar{nth\_error} \coqdocvar{l'} (\coqdocvar{pred} \coqdocvar{n})\coqdoceol
\coqdocindent{7.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nth\_error1} : \coqdocvar{nth\_error} [4;5;6;7] 0 = \coqdocvar{Some} 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nth\_error2} : \coqdocvar{nth\_error} [4;5;6;7] 3 = \coqdocvar{Some} 7.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nth\_error3} : \coqdocvar{nth\_error} [4;5;6;7] 9 = \coqdocvar{None}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(In the HTML version, the boilerplate proofs of these
    examples are elided.  Click on a box if you want to see one.)


    This example is also an opportunity to introduce one more small
    feature of Coq's programming language: conditional
    expressions... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{nth\_error'} (\coqdocvar{l}:\coqdocvar{natlist}) (\coqdocvar{n}:\coqdocvar{nat}) : \coqdocvar{natoption} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{a} :: \coqdocvar{l'} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{O} \coqdockw{then} \coqdocvar{Some} \coqdocvar{a}\coqdoceol
\coqdocindent{7.50em}
\coqdockw{else} \coqdocvar{nth\_error'} \coqdocvar{l'} (\coqdocvar{pred} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Coq's conditionals are exactly like those found in any other
    language, with one small generalization.  Since the boolean type
    is not built in, Coq actually supports conditional expressions over
    \textit{any} inductively defined type with exactly two constructors.  The
    guard is considered true if it evaluates to the first constructor
    in the \coqdockw{Inductive} definition and false if it evaluates to the
    second. 

 The function below pulls the \coqdocdefinition{nat} out of a \coqdocinductive{natoption}, returning
    a supplied default in the \coqdocconstructor{None} case. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{option\_elim} (\coqdocvar{d} : \coqdocvar{nat}) (\coqdocvar{o} : \coqdocvar{natoption}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{o} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdocvar{n'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{d}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (hd\_error)}

 Using the same idea, fix the \coqdocdefinition{hd} function from earlier so we don't
    have to pass a default element for the \coqdocconstructor{nil} case.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{hd\_error} (\coqdocvar{l} : \coqdocvar{natlist}) : \coqdocvar{natoption}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_hd\_error1} : \coqdocvar{hd\_error} [] = \coqdocvar{None}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_hd\_error2} : \coqdocvar{hd\_error} [1] = \coqdocvar{Some} 1.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_hd\_error3} : \coqdocvar{hd\_error} [5;6] = \coqdocvar{Some} 5.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star, optional (option\_elim\_hd)}

 This exercise relates your new \coqdocdefinition{hd\_error} to the old \coqdocdefinition{hd}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{option\_elim\_hd} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{l}:\coqdocvar{natlist}) (\coqdocvar{default}:\coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{hd} \coqdocvar{default} \coqdocvar{l} = \coqdocvar{option\_elim} \coqdocvar{default} (\coqdocvar{hd\_error} \coqdocvar{l}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{NatList}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Partial Maps}



 As a final illustration of how data structures can be defined in
    Coq, here is a simple \textit{partial map} data type, analogous to the
    map or dictionary data structures found in most programming
    languages. 

 First, we define a new inductive datatype \coqdocinductive{id} to serve as the
    ''keys`` of our partial maps. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{id} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Id} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{id}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Internally, an \coqdocinductive{id} is just a number.  Introducing a separate type
    by wrapping each nat with the tag \coqdocconstructor{Id} makes definitions more
    readable and gives us the flexibility to change representations
    later if we wish.


    We'll also need an equality test for \coqdocinductive{id}s: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{beq\_id} (\coqdocvar{x1} \coqdocvar{x2} : \coqdocvar{id}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{x1}, \coqdocvar{x2} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Id} \coqdocvar{n1}, \coqdocvar{Id} \coqdocvar{n2} \ensuremath{\Rightarrow} \coqdocvar{beq\_nat} \coqdocvar{n1} \coqdocvar{n2}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (beq\_id\_refl)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_id\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{true} = \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Now we define the type of partial maps: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{PartialMap}.\coqdoceol
\coqdocnoindent
\coqdockw{Export} \coqdocvar{NatList}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{partial\_map} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{empty}  : \coqdocvar{partial\_map}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{record} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{partial\_map} \ensuremath{\rightarrow} \coqdocvar{partial\_map}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This declaration can be read: ''There are two ways to construct a
    \coqdocdefinition{partial\_map}: either using the constructor \coqdocdefinition{empty} to represent an
    empty partial map, or by applying the constructor \coqdocconstructor{record} to
    a key, a value, and an existing \coqdocdefinition{partial\_map} to construct a
    \coqdocdefinition{partial\_map} with an additional key-to-value mapping.`` 

 The \coqdocdefinition{update} function overrides the entry for a given key in a
    partial map (or adds a new entry if the given key is not already
    present). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{update} (\coqdocvar{d} : \coqdocvar{partial\_map})\coqdoceol
\coqdocindent{9.00em}
(\coqdocvar{x} : \coqdocvar{id}) (\coqdocvar{value} : \coqdocvar{nat})\coqdoceol
\coqdocindent{9.00em}
: \coqdocvar{partial\_map} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{record} \coqdocvar{x} \coqdocvar{value} \coqdocvar{d}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Last, the \coqdocdefinition{find} function searches a \coqdocdefinition{partial\_map} for a given
    key.  It returns \coqdocconstructor{None} if the key was not found and \coqdocconstructor{Some} \coqdocvar{val} if
    the key was associated with \coqdocvar{val}. If the same key is mapped to
    multiple values, \coqdocdefinition{find} will return the first one it
    encounters. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{find} (\coqdocvar{x} : \coqdocvar{id}) (\coqdocvar{d} : \coqdocvar{partial\_map}) : \coqdocvar{natoption} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{d} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{empty}         \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{record} \coqdocvar{y} \coqdocvar{v} \coqdocvar{d'} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y}\coqdoceol
\coqdocindent{10.50em}
\coqdockw{then} \coqdocvar{Some} \coqdocvar{v}\coqdoceol
\coqdocindent{10.50em}
\coqdockw{else} \coqdocvar{find} \coqdocvar{x} \coqdocvar{d'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (update\_eq)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{update\_eq} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{d} : \coqdocvar{partial\_map}) (\coqdocvar{x} : \coqdocvar{id}) (\coqdocvar{v}: \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{find} \coqdocvar{x} (\coqdocvar{update} \coqdocvar{d} \coqdocvar{x} \coqdocvar{v}) = \coqdocvar{Some} \coqdocvar{v}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star (update\_neq)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{update\_neq} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{d} : \coqdocvar{partial\_map}) (\coqdocvar{x} \coqdocvar{y} : \coqdocvar{id}) (\coqdocvar{o}: \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} = \coqdocvar{false} \ensuremath{\rightarrow} \coqdocvar{find} \coqdocvar{x} (\coqdocvar{update} \coqdocvar{d} \coqdocvar{y} \coqdocvar{o}) = \coqdocvar{find} \coqdocvar{x} \coqdocvar{d}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocnoindent
\coqdockw{End} \coqdocvar{PartialMap}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 starsM (baz\_num\_elts)}

 Consider the following inductive definition: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{baz} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Baz1} : \coqdocvar{baz} \ensuremath{\rightarrow} \coqdocvar{baz}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Baz2} : \coqdocvar{baz} \ensuremath{\rightarrow} \coqdocvar{bool} \ensuremath{\rightarrow} \coqdocvar{baz}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
How \textit{many} elements does the type \coqdocinductive{baz} have?  (Answer in English
    or the natural language of your choice.)


 \ensuremath{\Box} 

 $Date: 2016-12-17 23:53:20 -0500 (Sat, 17 Dec 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Poly}{Library }{Top.Poly}

\begin{coqdoccode}
\end{coqdoccode}
\section{Poly: Polymorphism and Higher-Order Functions}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Export} \coqdocvar{Lists}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Polymorphism}



 In this chapter we continue our development of basic
    concepts of functional programming.  The critical new ideas are
    \textit{polymorphism} (abstracting functions over the types of the data
    they manipulate) and \textit{higher-order functions} (treating functions
    as data).  We begin with polymorphism. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Polymorphic Lists}



 For the last couple of chapters, we've been working just
    with lists of numbers.  Obviously, interesting programs also need
    to be able to manipulate lists with elements from other types --
    lists of strings, lists of booleans, lists of lists, etc.  We
    \textit{could} just define a new inductive datatype for each of these,
    for example... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{boollist} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{bool\_nil} : \coqdocvar{boollist}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{bool\_cons} : \coqdocvar{bool} \ensuremath{\rightarrow} \coqdocvar{boollist} \ensuremath{\rightarrow} \coqdocvar{boollist}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... but this would quickly become tedious, partly because we
    have to make up different constructor names for each datatype, but
    mostly because we would also need to define new versions of all
    our list manipulating functions (\coqdocdefinition{length}, \coqdocdefinition{rev}, etc.) for each
    new datatype definition. 

 To avoid all this repetition, Coq supports \textit{polymorphic}
    inductive type definitions.  For example, here is a \textit{polymorphic
    list} datatype. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{list} (\coqdocvar{X}:\coqdockw{Type}) : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} : \coqdocvar{list} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{cons} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{list} \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{list} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This is exactly like the definition of \coqdocinductive{natlist} from the
    previous chapter, except that the \coqdocdefinition{nat} argument to the \coqdocconstructor{cons}
    constructor has been replaced by an arbitrary type \coqdocdefinition{X}, a binding
    for \coqdocdefinition{X} has been added to the header, and the occurrences of
    \coqdocinductive{natlist} in the types of the constructors have been replaced by
    \coqdocinductive{list} \coqdocdefinition{X}.  (We can re-use the constructor names \coqdocconstructor{nil} and \coqdocconstructor{cons}
    because the earlier definition of \coqdocinductive{natlist} was inside of a
    \coqdockw{Module} definition that is now out of scope.)


    What sort of thing is \coqdocinductive{list} itself?  One good way to think
    about it is that \coqdocinductive{list} is a \textit{function} from \coqdockw{Type}s to
    \coqdockw{Inductive} definitions; or, to put it another way, \coqdocinductive{list} is a
    function from \coqdockw{Type}s to \coqdockw{Type}s.  For any particular type \coqdocdefinition{X},
    the type \coqdocinductive{list} \coqdocdefinition{X} is an \coqdockw{Inductive}ly defined set of lists whose
    elements are of type \coqdocdefinition{X}. 

 With this definition, when we use the constructors \coqdocconstructor{nil} and
    \coqdocconstructor{cons} to build lists, we need to tell Coq the type of the
    elements in the lists we are building -- that is, \coqdocconstructor{nil} and \coqdocconstructor{cons}
    are now \textit{polymorphic constructors}.  Observe the types of these
    constructors: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{nil}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{cons}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(Side note on notation: In .v files, the ''forall`` quantifier
    is spelled out in letters.  In the generated HTML files and in the
    way various IDEs show .v files (with certain settings of their
    display controls), \coqdockw{\ensuremath{\forall}} is usually typeset as the usual
    mathematical ''upside down A,`` but you'll still see the spelled-out
    ''forall`` in a few places.  This is just a quirk of typesetting:
    there is no difference in meaning.) 

 The ''\coqdockw{\ensuremath{\forall}} \coqdocdefinition{X}`` in these types can be read as an additional
    argument to the constructors that determines the expected types of
    the arguments that follow.  When \coqdocconstructor{nil} and \coqdocconstructor{cons} are used, these
    arguments are supplied in the same way as the others.  For
    example, the list containing 2 and 1 is written like this: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} (\coqdocvar{cons} \coqdocvar{nat} 2 (\coqdocvar{cons} \coqdocvar{nat} 1 (\coqdocvar{nil} \coqdocvar{nat}))).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(We've written \coqdocconstructor{nil} and \coqdocconstructor{cons} explicitly here because we haven't
    yet defined the  []  and :: notations for the new version of
    lists.  We'll do that in a bit.) 

 We can now go back and make polymorphic versions of all the
    list-processing functions that we wrote before.  Here is \coqdoctac{repeat},
    for example: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{repeat} (\coqdocvar{X} : \coqdockw{Type}) (\coqdocvar{x} : \coqdocvar{X}) (\coqdocvar{count} : \coqdocvar{nat}) : \coqdocvar{list} \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{count} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdocvar{nil} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{count'} \ensuremath{\Rightarrow} \coqdocvar{cons} \coqdocvar{X} \coqdocvar{x} (\coqdoctac{repeat} \coqdocvar{X} \coqdocvar{x} \coqdocvar{count'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As with \coqdocconstructor{nil} and \coqdocconstructor{cons}, we can use \coqdoctac{repeat} by applying it
    first to a type and then to its list argument: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_repeat1} :\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdocvar{nat} 4 2 = \coqdocvar{cons} \coqdocvar{nat} 4 (\coqdocvar{cons} \coqdocvar{nat} 4 (\coqdocvar{nil} \coqdocvar{nat})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To use \coqdoctac{repeat} to build other kinds of lists, we simply
    instantiate it with an appropriate type parameter: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_repeat2} :\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdocvar{bool} \coqdocvar{false} 1 = \coqdocvar{cons} \coqdocvar{bool} \coqdocvar{false} (\coqdocvar{nil} \coqdocvar{bool}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{MumbleGrumble}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 starsM (mumble\_grumble)}

 Consider the following two inductively defined types. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{mumble} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{a} : \coqdocvar{mumble}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{b} : \coqdocvar{mumble} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{mumble}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{c} : \coqdocvar{mumble}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{grumble} (\coqdocvar{X}:\coqdockw{Type}) : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{d} : \coqdocvar{mumble} \ensuremath{\rightarrow} \coqdocvar{grumble} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{e} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{grumble} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Which of the following are well-typed elements of \coqdocinductive{grumble} \coqdocdefinition{X} for
    some type \coqdocdefinition{X}?

\begin{itemize}
\item  \coqdocconstructor{d} (\coqdocconstructor{b} \coqdocabbreviation{a} 5)

\item  \coqdocconstructor{d} \coqdocinductive{mumble} (\coqdocconstructor{b} \coqdocabbreviation{a} 5)

\item  \coqdocconstructor{d} \coqdocinductive{bool} (\coqdocconstructor{b} \coqdocabbreviation{a} 5)

\item  \coqdocconstructor{e} \coqdocinductive{bool} \coqdocconstructor{true}

\item  \coqdocconstructor{e} \coqdocinductive{mumble} (\coqdocconstructor{b} \coqdocconstructor{c} 0)

\item  \coqdocconstructor{e} \coqdocinductive{bool} (\coqdocconstructor{b} \coqdocconstructor{c} 0)

\item  \coqdocconstructor{c}

\end{itemize}
 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{MumbleGrumble}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Type Annotation Inference}



 Let's write the definition of \coqdoctac{repeat} again, but this time we
    won't specify the types of any of the arguments.  Will Coq still
    accept it? \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{repeat'} \coqdocvar{X} \coqdocvar{x} \coqdocvar{count} : \coqdocvar{list} \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{count} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0        \ensuremath{\Rightarrow} \coqdocvar{nil} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{count'} \ensuremath{\Rightarrow} \coqdocvar{cons} \coqdocvar{X} \coqdocvar{x} (\coqdocvar{repeat'} \coqdocvar{X} \coqdocvar{x} \coqdocvar{count'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Indeed it will.  Let's see what type Coq has assigned to \coqdocdefinition{repeat'}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{repeat'}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdoctac{repeat}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It has exactly the same type type as \coqdoctac{repeat}.  Coq was able
    to use \textit{type inference} to deduce what the types of \coqdocdefinition{X}, \coqdocabbreviation{x}, and
    \coqdocdefinition{count} must be, based on how they are used.  For example, since
    \coqdocdefinition{X} is used as an argument to \coqdocconstructor{cons}, it must be a \coqdockw{Type}, since
    \coqdocconstructor{cons} expects a \coqdockw{Type} as its first argument; matching \coqdocdefinition{count}
    with 0 and \coqdocconstructor{S} means it must be a \coqdocdefinition{nat}; and so on.


    This powerful facility means we don't always have to write
    explicit type annotations everywhere, although explicit type
    annotations are still quite useful as documentation and sanity
    checks, so we will continue to use them most of the time.  You
    should try to find a balance in your own code between too many
    type annotations (which can clutter and distract) and too
    few (which forces readers to perform type inference in their heads
    in order to understand your code). \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Type Argument Synthesis}



 To use a polymorphic function, we need to pass it one or
    more types in addition to its other arguments.  For example, the
    recursive call in the body of the \coqdoctac{repeat} function above must
    pass along the type \coqdocdefinition{X}.  But since the second argument to
    \coqdoctac{repeat} is an element of \coqdocdefinition{X}, it seems entirely obvious that the
    first argument can only be \coqdocdefinition{X} -- why should we have to write it
    explicitly?


    Fortunately, Coq permits us to avoid this kind of redundancy.  In
    place of any type argument we can write the ''implicit argument``
    \coqdocvar{\_}, which can be read as ''Please try to figure out for yourself
    what belongs here.``  More precisely, when Coq encounters a \coqdocvar{\_}, it
    will attempt to \textit{unify} all locally available information -- the
    type of the function being applied, the types of the other
    arguments, and the type expected by the context in which the
    application appears -- to determine what concrete type should
    replace the \coqdocvar{\_}.


    This may sound similar to type annotation inference -- indeed, the
    two procedures rely on the same underlying mechanisms.  Instead of
    simply omitting the types of some arguments to a function, like


      repeat' X x count : list X :=


    we can also replace the types with \coqdocvar{\_}


      repeat' (X : \_) (x : \_) (count : \_) : list X :=


    to tell Coq to attempt to infer the missing information.


    Using implicit arguments, the \coqdocdefinition{count} function can be written like
    this: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{repeat'{}'} \coqdocvar{X} \coqdocvar{x} \coqdocvar{count} : \coqdocvar{list} \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{count} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0        \ensuremath{\Rightarrow} \coqdocvar{nil} \coqdocvar{\_}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{count'} \ensuremath{\Rightarrow} \coqdocvar{cons} \coqdocvar{\_} \coqdocvar{x} (\coqdocvar{repeat'{}'} \coqdocvar{\_} \coqdocvar{x} \coqdocvar{count'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In this instance, we don't save much by writing \coqdocvar{\_} instead of
    \coqdocdefinition{X}.  But in many cases the difference in both keystrokes and
    readability is nontrivial.  For example, suppose we want to write
    down a list containing the numbers 1, 2, and 3.  Instead of
    writing this... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{list123} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cons} \coqdocvar{nat} 1 (\coqdocvar{cons} \coqdocvar{nat} 2 (\coqdocvar{cons} \coqdocvar{nat} 3 (\coqdocvar{nil} \coqdocvar{nat}))).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
...we can use argument synthesis to write this: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{list123'} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cons} \coqdocvar{\_} 1 (\coqdocvar{cons} \coqdocvar{\_} 2 (\coqdocvar{cons} \coqdocvar{\_} 3 (\coqdocvar{nil} \coqdocvar{\_}))).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Implicit Arguments}



 We can go further and even avoid writing \coqdocvar{\_}'s in most cases by
    telling Coq \textit{always} to infer the type argument(s) of a given
    function.  The \coqdocvar{Arguments} directive specifies the name of the
    function (or constructor) and then lists its argument names, with
    curly braces around any arguments to be treated as implicit.  (If
    some arguments of a definition don't have a name, as is often the
    case for constructors, they can be marked with a wildcard pattern
    \coqdocvar{\_}.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{nil} \{\coqdocvar{X}\}.\coqdoceol
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{cons} \{\coqdocvar{X}\} \coqdocvar{\_} \coqdocvar{\_}.\coqdoceol
\coqdocnoindent
\coqdocvar{Arguments} \coqdoctac{repeat} \{\coqdocvar{X}\} \coqdocvar{x} \coqdocvar{count}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now, we don't have to supply type arguments at all: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{list123'{}'} := \coqdocvar{cons} 1 (\coqdocvar{cons} 2 (\coqdocvar{cons} 3 \coqdocvar{nil})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Alternatively, we can declare an argument to be implicit
    when defining the function itself, by surrounding it in curly
    braces instead of parens.  For example: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{repeat'{}'{}'} \{\coqdocvar{X} : \coqdockw{Type}\} (\coqdocvar{x} : \coqdocvar{X}) (\coqdocvar{count} : \coqdocvar{nat}) : \coqdocvar{list} \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{count} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0        \ensuremath{\Rightarrow} \coqdocvar{nil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{count'} \ensuremath{\Rightarrow} \coqdocvar{cons} \coqdocvar{x} (\coqdocvar{repeat'{}'{}'} \coqdocvar{x} \coqdocvar{count'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(Note that we didn't even have to provide a type argument to the
    recursive call to \coqdocdefinition{repeat'{}'{}'}; indeed, it would be invalid to
    provide one!)


    We will use the latter style whenever possible, but we will
    continue to use use explicit \coqdocvar{Argument} declarations for
    \coqdockw{Inductive} constructors.  The reason for this is that marking the
    parameter of an inductive type as implicit causes it to become
    implicit for the type itself, not just for its constructors.  For
    instance, consider the following alternative definition of the
    \coqdocinductive{list} type: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{list'} \{\coqdocvar{X}:\coqdockw{Type}\} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil'} : \coqdocvar{list'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{cons'} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{list'} \ensuremath{\rightarrow} \coqdocvar{list'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Because \coqdocdefinition{X} is declared as implicit for the \textit{entire} inductive
    definition including \coqdocinductive{list'} itself, we now have to write just
    \coqdocinductive{list'} whether we are talking about lists of numbers or booleans
    or anything else, rather than \coqdocinductive{list'} \coqdocdefinition{nat} or \coqdocinductive{list'} \coqdocinductive{bool} or
    whatever; this is a step too far. 

 Let's finish by re-implementing a few other standard list
    functions on our new polymorphic lists... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{app} \{\coqdocvar{X} : \coqdockw{Type}\} (\coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{list} \coqdocvar{X})\coqdoceol
\coqdocindent{6.50em}
: (\coqdocvar{list} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l1} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil}      \ensuremath{\Rightarrow} \coqdocvar{l2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{cons} \coqdocvar{h} \coqdocvar{t} \ensuremath{\Rightarrow} \coqdocvar{cons} \coqdocvar{h} (\coqdocvar{app} \coqdocvar{t} \coqdocvar{l2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{rev} \{\coqdocvar{X}:\coqdockw{Type}\} (\coqdocvar{l}:\coqdocvar{list} \coqdocvar{X}) : \coqdocvar{list} \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil}      \ensuremath{\Rightarrow} \coqdocvar{nil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{cons} \coqdocvar{h} \coqdocvar{t} \ensuremath{\Rightarrow} \coqdocvar{app} (\coqdocvar{rev} \coqdocvar{t}) (\coqdocvar{cons} \coqdocvar{h} \coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{length} \{\coqdocvar{X} : \coqdockw{Type}\} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} 0\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{cons} \coqdocvar{\_} \coqdocvar{l'} \ensuremath{\Rightarrow} \coqdocvar{S} (\coqdocvar{length} \coqdocvar{l'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_rev1} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rev} (\coqdocvar{cons} 1 (\coqdocvar{cons} 2 \coqdocvar{nil})) = (\coqdocvar{cons} 2 (\coqdocvar{cons} 1 \coqdocvar{nil})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_rev2}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rev} (\coqdocvar{cons} \coqdocvar{true} \coqdocvar{nil}) = \coqdocvar{cons} \coqdocvar{true} \coqdocvar{nil}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_length1}: \coqdocvar{length} (\coqdocvar{cons} 1 (\coqdocvar{cons} 2 (\coqdocvar{cons} 3 \coqdocvar{nil}))) = 3.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Supplying Type Arguments Explicitly}



 One small problem with declaring arguments \coqdockw{Implicit} is
    that, occasionally, Coq does not have enough local information to
    determine a type argument; in such cases, we need to tell Coq that
    we want to give the argument explicitly just this time.  For
    example, suppose we write this: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdocvar{Fail} \coqdockw{Definition} \coqdocvar{mynil} := \coqdocvar{nil}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(The \coqdocvar{Fail} qualifier that appears before \coqdockw{Definition} can be
    used with \textit{any} command, and is used to ensure that that command
    indeed fails when executed. If the command does fail, Coq prints
    the corresponding error message, but continues processing the rest
    of the file.)


    Here, Coq gives us an error because it doesn't know what type
    argument to supply to \coqdocconstructor{nil}.  We can help it by providing an
    explicit type declaration (so that Coq has more information
    available when it gets to the ''application`` of \coqdocconstructor{nil}): \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{mynil} : \coqdocvar{list} \coqdocvar{nat} := \coqdocvar{nil}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Alternatively, we can force the implicit arguments to be explicit by
   prefixing the function name with @. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} @\coqdocvar{nil}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{mynil'} := @\coqdocvar{nil} \coqdocvar{nat}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Using argument synthesis and implicit arguments, we can
    define convenient notation for lists, as before.  Since we have
    made the constructor type arguments implicit, Coq will know to
    automatically infer these when we use the notations. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "x :: y" := (\coqdocvar{cons} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{10.50em}
(\coqdoctac{at} \coqdockw{level} 60, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "[ ]" := \coqdocvar{nil}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "[ x ; .. ; y ]" := (\coqdocvar{cons} \coqdocvar{x} .. (\coqdocvar{cons} \coqdocvar{y} []) ..).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "x ++ y" := (\coqdocvar{app} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{10.50em}
(\coqdoctac{at} \coqdockw{level} 60, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now lists can be written just the way we'd hope: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{list123'{}'{}'} := [1; 2; 3].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Exercises}



\paragraph{Exercise: 2 stars, optional (poly\_exercises)}

 Here are a few simple exercises, just like ones in the \coqdoclibrary{Lists}
    chapter, for practice with polymorphism.  Complete the proofs below. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{app\_nil\_r} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}), \coqdockw{\ensuremath{\forall}} \coqdocvar{l}:\coqdocvar{list} \coqdocvar{X},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l} ++ [] = \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{app\_assoc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} (\coqdocvar{l} \coqdocvar{m} \coqdocvar{n}:\coqdocvar{list} \coqdocvar{A}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l} ++ \coqdocvar{m} ++ \coqdocvar{n} = (\coqdocvar{l} ++ \coqdocvar{m}) ++ \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{app\_length} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{length} (\coqdocvar{l1} ++ \coqdocvar{l2}) = \coqdocvar{length} \coqdocvar{l1} + \coqdocvar{length} \coqdocvar{l2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (more\_poly\_exercises)}

 Here are some slightly more interesting ones... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{rev\_app\_distr}: \coqdockw{\ensuremath{\forall}} \coqdocvar{X} (\coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rev} (\coqdocvar{l1} ++ \coqdocvar{l2}) = \coqdocvar{rev} \coqdocvar{l2} ++ \coqdocvar{rev} \coqdocvar{l1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{rev\_involutive} : \coqdockw{\ensuremath{\forall}} \coqdocvar{X} : \coqdockw{Type}, \coqdockw{\ensuremath{\forall}} \coqdocvar{l} : \coqdocvar{list} \coqdocvar{X},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rev} (\coqdocvar{rev} \coqdocvar{l}) = \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Polymorphic Pairs}



 Following the same pattern, the type definition we gave in
    the last chapter for pairs of numbers can be generalized to
    \textit{polymorphic pairs}, often called \textit{products}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{prod} (\coqdocvar{X} \coqdocvar{Y} : \coqdockw{Type}) : \coqdockw{Type} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{pair} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{Y} \ensuremath{\rightarrow} \coqdocvar{prod} \coqdocvar{X} \coqdocvar{Y}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{pair} \{\coqdocvar{X}\} \{\coqdocvar{Y}\} \coqdocvar{\_} \coqdocvar{\_}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As with lists, we make the type arguments implicit and define the
    familiar concrete notation. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "( x , y )" := (\coqdocvar{pair} \coqdocvar{x} \coqdocvar{y}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can also use the \coqdockw{Notation} mechanism to define the standard
    notation for product \textit{types}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "X * Y" := (\coqdocvar{prod} \coqdocvar{X} \coqdocvar{Y}) : \coqdocvar{type\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(The annotation : \coqdocvar{type\_scope} tells Coq that this abbreviation
    should only be used when parsing types.  This avoids a clash with
    the multiplication symbol.) 

 It is easy at first to get (\coqdocabbreviation{x},\coqdocabbreviation{y}) and \coqdocdefinition{X}\ensuremath{\times}\coqdocdefinition{Y} confused.
    Remember that (\coqdocabbreviation{x},\coqdocabbreviation{y}) is a \textit{value} built from two other values,
    while \coqdocdefinition{X}\ensuremath{\times}\coqdocdefinition{Y} is a \textit{type} built from two other types.  If \coqdocabbreviation{x} has
    type \coqdocdefinition{X} and \coqdocabbreviation{y} has type \coqdocdefinition{Y}, then (\coqdocabbreviation{x},\coqdocabbreviation{y}) has type \coqdocdefinition{X}\ensuremath{\times}\coqdocdefinition{Y}. 

 The first and second projection functions now look pretty
    much as they would in any functional programming language. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{fst} \{\coqdocvar{X} \coqdocvar{Y} : \coqdockw{Type}\} (\coqdocvar{p} : \coqdocvar{X} \ensuremath{\times} \coqdocvar{Y}) : \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{p} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{x}, \coqdocvar{y}) \ensuremath{\Rightarrow} \coqdocvar{x}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{snd} \{\coqdocvar{X} \coqdocvar{Y} : \coqdockw{Type}\} (\coqdocvar{p} : \coqdocvar{X} \ensuremath{\times} \coqdocvar{Y}) : \coqdocvar{Y} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{p} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{x}, \coqdocvar{y}) \ensuremath{\Rightarrow} \coqdocvar{y}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The following function takes two lists and combines them
    into a list of pairs.  In other functional languages, it is often
    called \coqdocvar{zip}; we call it \coqdocdefinition{combine} for consistency with Coq's
    standard library. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{combine} \{\coqdocvar{X} \coqdocvar{Y} : \coqdockw{Type}\} (\coqdocvar{lx} : \coqdocvar{list} \coqdocvar{X}) (\coqdocvar{ly} : \coqdocvar{list} \coqdocvar{Y})\coqdoceol
\coqdocindent{5.50em}
: \coqdocvar{list} (\coqdocvar{X}\ensuremath{\times}\coqdocvar{Y}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{lx}, \coqdocvar{ly} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [], \coqdocvar{\_} \ensuremath{\Rightarrow} []\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_}, [] \ensuremath{\Rightarrow} []\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{x} :: \coqdocvar{tx}, \coqdocvar{y} :: \coqdocvar{ty} \ensuremath{\Rightarrow} (\coqdocvar{x}, \coqdocvar{y}) :: (\coqdocvar{combine} \coqdocvar{tx} \coqdocvar{ty})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optionalM (combine\_checks)}

 Try answering the following questions on paper and
    checking your answers in coq:

\begin{itemize}
\item  What is the type of \coqdocdefinition{combine} (i.e., what does \coqdockw{Check}
      @\coqdocdefinition{combine} print?)

\item  What does


        Compute (combine 1;2 \coqdocconstructor{false};\coqdocconstructor{false};\coqdocconstructor{true};\coqdocconstructor{true}).


      print? 
\end{itemize}
 \ensuremath{\Box} 

\paragraph{Exercise: 2 stars, recommended (split)}

 The function \coqdoctac{split} is the right inverse of \coqdocdefinition{combine}: it takes a
    list of pairs and returns a pair of lists.  In many functional
    languages, it is called \coqdocvar{unzip}.


    Fill in the definition of \coqdoctac{split} below.  Make sure it passes the
    given unit test. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{split} \{\coqdocvar{X} \coqdocvar{Y} : \coqdockw{Type}\} (\coqdocvar{l} : \coqdocvar{list} (\coqdocvar{X}\ensuremath{\times}\coqdocvar{Y}))\coqdoceol
\coqdocindent{7.50em}
: (\coqdocvar{list} \coqdocvar{X}) \ensuremath{\times} (\coqdocvar{list} \coqdocvar{Y})\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_split}:\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split} [(1,\coqdocvar{false});(2,\coqdocvar{false})] = ([1;2],[\coqdocvar{false};\coqdocvar{false}]).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Polymorphic Options}



 One last polymorphic type for now: \textit{polymorphic options},
    which generalize \coqdocinductive{natoption} from the previous chapter: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{option} (\coqdocvar{X}:\coqdockw{Type}) : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Some} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{option} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{None} : \coqdocvar{option} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{Some} \{\coqdocvar{X}\} \coqdocvar{\_}.\coqdoceol
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{None} \{\coqdocvar{X}\}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can now rewrite the \coqdocdefinition{nth\_error} function so that it works
    with any type of lists. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{nth\_error} \{\coqdocvar{X} : \coqdockw{Type}\} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}) (\coqdocvar{n} : \coqdocvar{nat})\coqdoceol
\coqdocindent{9.50em}
: \coqdocvar{option} \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{a} :: \coqdocvar{l'} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{O} \coqdockw{then} \coqdocvar{Some} \coqdocvar{a} \coqdockw{else} \coqdocvar{nth\_error} \coqdocvar{l'} (\coqdocvar{pred} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nth\_error1} : \coqdocvar{nth\_error} [4;5;6;7] 0 = \coqdocvar{Some} 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nth\_error2} : \coqdocvar{nth\_error} [[1];[2]] 1 = \coqdocvar{Some} [2].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nth\_error3} : \coqdocvar{nth\_error} [\coqdocvar{true}] 2 = \coqdocvar{None}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional (hd\_error\_poly)}

 Complete the definition of a polymorphic version of the
    \coqdocdefinition{hd\_error} function from the last chapter. Be sure that it
    passes the unit tests below. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{hd\_error} \{\coqdocvar{X} : \coqdockw{Type}\} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}) : \coqdocvar{option} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Once again, to force the implicit arguments to be explicit,
    we can use @ before the name of the function. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} @\coqdocvar{hd\_error}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_hd\_error1} : \coqdocvar{hd\_error} [1;2] = \coqdocvar{Some} 1.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_hd\_error2} : \coqdocvar{hd\_error}  [[1];[2]]  = \coqdocvar{Some} [1].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Functions as Data}



 Like many other modern programming languages -- including
    all functional languages (ML, Haskell, Scheme, Scala, Clojure,
    etc.) -- Coq treats functions as first-class citizens, allowing
    them to be passed as arguments to other functions, returned as
    results, stored in data structures, etc.\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Higher-Order Functions}



 Functions that manipulate other functions are often called
    \textit{higher-order} functions.  Here's a simple one: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{doit3times} \{\coqdocvar{X}:\coqdockw{Type}\} (\coqdocvar{f}:\coqdocvar{X}\ensuremath{\rightarrow}\coqdocvar{X}) (\coqdocvar{n}:\coqdocvar{X}) : \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{f} (\coqdocvar{f} (\coqdocvar{f} \coqdocvar{n})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The argument \coqdocabbreviation{f} here is itself a function (from \coqdocdefinition{X} to
    \coqdocdefinition{X}); the body of \coqdocdefinition{doit3times} applies \coqdocabbreviation{f} three times to some
    value \coqdocabbreviation{n}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} @\coqdocvar{doit3times}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_doit3times}: \coqdocvar{doit3times} \coqdocvar{minustwo} 9 = 3.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_doit3times'}: \coqdocvar{doit3times} \coqdocvar{negb} \coqdocvar{true} = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Filter}



 Here is a more useful higher-order function, taking a list
    of \coqdocdefinition{X}s and a \textit{predicate} on \coqdocdefinition{X} (a function from \coqdocdefinition{X} to \coqdocinductive{bool})
    and ''filtering`` the list, returning a new list containing just
    those elements for which the predicate returns \coqdocconstructor{true}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{filter} \{\coqdocvar{X}:\coqdockw{Type}\} (\coqdocvar{test}: \coqdocvar{X}\ensuremath{\rightarrow}\coqdocvar{bool}) (\coqdocvar{l}:\coqdocvar{list} \coqdocvar{X})\coqdoceol
\coqdocindent{8.00em}
: (\coqdocvar{list} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} []     \ensuremath{\Rightarrow} []\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{h} :: \coqdocvar{t} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{test} \coqdocvar{h} \coqdockw{then} \coqdocvar{h} :: (\coqdocvar{filter} \coqdocvar{test} \coqdocvar{t})\coqdoceol
\coqdocindent{12.00em}
\coqdockw{else}       \coqdocvar{filter} \coqdocvar{test} \coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For example, if we apply \coqdocdefinition{filter} to the predicate \coqdocdefinition{evenb}
    and a list of numbers \coqdocabbreviation{l}, it returns a list containing just the
    even members of \coqdocabbreviation{l}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_filter1}: \coqdocvar{filter} \coqdocvar{evenb} [1;2;3;4] = [2;4].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{length\_is\_1} \{\coqdocvar{X} : \coqdockw{Type}\} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} (\coqdocvar{length} \coqdocvar{l}) 1.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_filter2}:\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{filter} \coqdocvar{length\_is\_1}\coqdoceol
\coqdocindent{5.50em}
[ [1; 2]; [3]; [4]; [5;6;7]; []; [8] ]\coqdoceol
\coqdocindent{1.00em}
= [ [3]; [4]; [8] ].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can use \coqdocdefinition{filter} to give a concise version of the
    \coqdocdefinition{countoddmembers} function from the \coqdoclibrary{Lists} chapter. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{countoddmembers'} (\coqdocvar{l}:\coqdocvar{list} \coqdocvar{nat}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{length} (\coqdocvar{filter} \coqdocvar{oddb} \coqdocvar{l}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_countoddmembers'1}:   \coqdocvar{countoddmembers'} [1;0;3;1;4;5] = 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_countoddmembers'2}:   \coqdocvar{countoddmembers'} [0;2;4] = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_countoddmembers'3}:   \coqdocvar{countoddmembers'} \coqdocvar{nil} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Anonymous Functions}



 It is arguably a little sad, in the example just above, to
    be forced to define the function \coqdocdefinition{length\_is\_1} and give it a name
    just to be able to pass it as an argument to \coqdocdefinition{filter}, since we
    will probably never use it again.  Moreover, this is not an
    isolated example: when using higher-order functions, we often want
    to pass as arguments ''one-off`` functions that we will never use
    again; having to give each of these functions a name would be
    tedious.


    Fortunately, there is a better way.  We can construct a function
    ''on the fly`` without declaring it at the top level or giving it a
    name. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_anon\_fun'}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{doit3times} (\coqdockw{fun} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{n} \ensuremath{\times} \coqdocvar{n}) 2 = 256.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The expression (\coqdockw{fun} \coqdocabbreviation{n} \ensuremath{\Rightarrow} \coqdocabbreviation{n} \ensuremath{\times} \coqdocabbreviation{n}) can be read as ''the function
    that, given a number \coqdocabbreviation{n}, yields \coqdocabbreviation{n} \ensuremath{\times} \coqdocabbreviation{n}.`` 

 Here is the \coqdocdefinition{filter} example, rewritten to use an anonymous
    function. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_filter2'}:\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{filter} (\coqdockw{fun} \coqdocvar{l} \ensuremath{\Rightarrow} \coqdocvar{beq\_nat} (\coqdocvar{length} \coqdocvar{l}) 1)\coqdoceol
\coqdocindent{5.50em}
[ [1; 2]; [3]; [4]; [5;6;7]; []; [8] ]\coqdoceol
\coqdocindent{1.00em}
= [ [3]; [4]; [8] ].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (filter\_even\_gt7)}

 Use \coqdocdefinition{filter} (instead of \coqdockw{Fixpoint}) to write a Coq function
    \coqdocdefinition{filter\_even\_gt7} that takes a list of natural numbers as input
    and returns a list of just those that are even and greater than
    7. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{filter\_even\_gt7} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{nat}) : \coqdocvar{list} \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_filter\_even\_gt7\_1} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{filter\_even\_gt7} [1;2;6;9;10;3;12;8] = [10;12;8].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_filter\_even\_gt7\_2} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{filter\_even\_gt7} [5;2;6;19;129] = [].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (partition)}

 Use \coqdocdefinition{filter} to write a Coq function \coqdocdefinition{partition}:


      partition : forall X : Type,
                  (X -> bool) -> list X -> list X * list X


   Given a set \coqdocdefinition{X}, a test function of type \coqdocdefinition{X} \ensuremath{\rightarrow} \coqdocinductive{bool} and a \coqdocinductive{list}
   \coqdocdefinition{X}, \coqdocdefinition{partition} should return a pair of lists.  The first member of
   the pair is the sublist of the original list containing the
   elements that satisfy the test, and the second is the sublist
   containing those that fail the test.  The order of elements in the
   two sublists should be the same as their order in the original
   list. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{partition} \{\coqdocvar{X} : \coqdockw{Type}\}\coqdoceol
\coqdocindent{10.50em}
(\coqdocvar{test} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{bool})\coqdoceol
\coqdocindent{10.50em}
(\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X})\coqdoceol
\coqdocindent{9.50em}
: \coqdocvar{list} \coqdocvar{X} \ensuremath{\times} \coqdocvar{list} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_partition1}: \coqdocvar{partition} \coqdocvar{oddb} [1;2;3;4;5] = ([1;3;5], [2;4]).\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_partition2}: \coqdocvar{partition} (\coqdockw{fun} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{false}) [5;9;0] = ([], [5;9;0]).\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Map}



 Another handy higher-order function is called \coqdocdefinition{map}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{map} \{\coqdocvar{X} \coqdocvar{Y}:\coqdockw{Type}\} (\coqdocvar{f}:\coqdocvar{X}\ensuremath{\rightarrow}\coqdocvar{Y}) (\coqdocvar{l}:\coqdocvar{list} \coqdocvar{X}) : (\coqdocvar{list} \coqdocvar{Y}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} []     \ensuremath{\Rightarrow} []\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{h} :: \coqdocvar{t} \ensuremath{\Rightarrow} (\coqdocvar{f} \coqdocvar{h}) :: (\coqdocvar{map} \coqdocvar{f} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It takes a function \coqdocabbreviation{f} and a list  \coqdocabbreviation{l} = [\coqdocvariable{n1}, \coqdocvariable{n2}, \coqdocvariable{n3}, ...] 
    and returns the list  [\coqdocabbreviation{f} \coqdocvariable{n1}, \coqdocabbreviation{f} \coqdocvariable{n2}, \coqdocabbreviation{f} \coqdocvariable{n3},...] , where \coqdocabbreviation{f} has
    been applied to each element of \coqdocabbreviation{l} in turn.  For example: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_map1}: \coqdocvar{map} (\coqdockw{fun} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{plus} 3 \coqdocvar{x}) [2;0;2] = [5;3;5].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The element types of the input and output lists need not be
    the same, since \coqdocdefinition{map} takes \textit{two} type arguments, \coqdocdefinition{X} and \coqdocdefinition{Y}; it
    can thus be applied to a list of numbers and a function from
    numbers to booleans to yield a list of booleans: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_map2}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{map} \coqdocvar{oddb} [2;1;2;5] = [\coqdocvar{false};\coqdocvar{true};\coqdocvar{false};\coqdocvar{true}].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It can even be applied to a list of numbers and
    a function from numbers to \textit{lists} of booleans to
    yield a \textit{list of lists} of booleans: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_map3}:\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{map} (\coqdockw{fun} \coqdocvar{n} \ensuremath{\Rightarrow} [\coqdocvar{evenb} \coqdocvar{n};\coqdocvar{oddb} \coqdocvar{n}]) [2;1;2;5]\coqdoceol
\coqdocindent{1.00em}
= [[\coqdocvar{true};\coqdocvar{false}];[\coqdocvar{false};\coqdocvar{true}];[\coqdocvar{true};\coqdocvar{false}];[\coqdocvar{false};\coqdocvar{true}]].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Exercises}



\paragraph{Exercise: 3 stars (map\_rev)}

 Show that \coqdocdefinition{map} and \coqdocdefinition{rev} commute.  You may need to define an
    auxiliary lemma. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{map\_rev} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X} \coqdocvar{Y} : \coqdockw{Type}) (\coqdocvar{f} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{Y}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{map} \coqdocvar{f} (\coqdocvar{rev} \coqdocvar{l}) = \coqdocvar{rev} (\coqdocvar{map} \coqdocvar{f} \coqdocvar{l}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, recommended (flat\_map)}

 The function \coqdocdefinition{map} maps a \coqdocinductive{list} \coqdocdefinition{X} to a \coqdocinductive{list} \coqdocdefinition{Y} using a function
    of type \coqdocdefinition{X} \ensuremath{\rightarrow} \coqdocdefinition{Y}.  We can define a similar function, \coqdocdefinition{flat\_map},
    which maps a \coqdocinductive{list} \coqdocdefinition{X} to a \coqdocinductive{list} \coqdocdefinition{Y} using a function \coqdocabbreviation{f} of type
    \coqdocdefinition{X} \ensuremath{\rightarrow} \coqdocinductive{list} \coqdocdefinition{Y}.  Your definition should work by 'flattening' the
    results of \coqdocabbreviation{f}, like so:


        flat\_map (fun n => \coqdocabbreviation{n};\coqdocabbreviation{n}+1;\coqdocabbreviation{n}+2) 1;5;10
      = 1; 2; 3; 5; 6; 7; 10; 11; 12.
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{flat\_map} \{\coqdocvar{X} \coqdocvar{Y}:\coqdockw{Type}\} (\coqdocvar{f}:\coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{list} \coqdocvar{Y}) (\coqdocvar{l}:\coqdocvar{list} \coqdocvar{X})\coqdoceol
\coqdocindent{9.50em}
: (\coqdocvar{list} \coqdocvar{Y})\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_flat\_map1}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{flat\_map} (\coqdockw{fun} \coqdocvar{n} \ensuremath{\Rightarrow} [\coqdocvar{n};\coqdocvar{n};\coqdocvar{n}]) [1;5;4]\coqdoceol
\coqdocindent{1.00em}
= [1; 1; 1; 5; 5; 5; 4; 4; 4].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Lists are not the only inductive type that we can write a
    \coqdocdefinition{map} function for.  Here is the definition of \coqdocdefinition{map} for the
    \coqdocinductive{option} type: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{option\_map} \{\coqdocvar{X} \coqdocvar{Y} : \coqdockw{Type}\} (\coqdocvar{f} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{Y}) (\coqdocvar{xo} : \coqdocvar{option} \coqdocvar{X})\coqdoceol
\coqdocindent{11.00em}
: \coqdocvar{option} \coqdocvar{Y} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{xo} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{Some} (\coqdocvar{f} \coqdocvar{x})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (implicit\_args)}

 The definitions and uses of \coqdocdefinition{filter} and \coqdocdefinition{map} use implicit
    arguments in many places.  Replace the curly braces around the
    implicit arguments with parentheses, and then fill in explicit
    type parameters where necessary and use Coq to check that you've
    done so correctly.  (This exercise is not to be turned in; it is
    probably easiest to do it on a \textit{copy} of this file that you can
    throw away afterwards.) 
 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Fold}



 An even more powerful higher-order function is called
    \coqdoctac{fold}.  This function is the inspiration for the ''\coqdocvar{reduce}``
    operation that lies at the heart of Google's map/reduce
    distributed programming framework. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{fold} \{\coqdocvar{X} \coqdocvar{Y}:\coqdockw{Type}\} (\coqdocvar{f}: \coqdocvar{X}\ensuremath{\rightarrow}\coqdocvar{Y}\ensuremath{\rightarrow}\coqdocvar{Y}) (\coqdocvar{l}:\coqdocvar{list} \coqdocvar{X}) (\coqdocvar{b}:\coqdocvar{Y})\coqdoceol
\coqdocindent{12.50em}
: \coqdocvar{Y} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{b}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{h} :: \coqdocvar{t} \ensuremath{\Rightarrow} \coqdocvar{f} \coqdocvar{h} (\coqdoctac{fold} \coqdocvar{f} \coqdocvar{t} \coqdocvar{b})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Intuitively, the behavior of the \coqdoctac{fold} operation is to
    insert a given binary operator \coqdocabbreviation{f} between every pair of elements
    in a given list.  For example,  \coqdoctac{fold} \coqdocdefinition{plus} [1;2;3;4]  intuitively
    means 1+2+3+4.  To make this precise, we also need a ''starting
    element`` that serves as the initial second input to \coqdocabbreviation{f}.  So, for
    example,


       fold plus 1;2;3;4 0


    yields


       1 + (2 + (3 + (4 + 0))).


    Some more examples: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} (\coqdoctac{fold} \coqdocvar{andb}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{fold\_example1} :\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{fold} \coqdocvar{mult} [1;2;3;4] 1 = 24.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{fold\_example2} :\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{fold} \coqdocvar{andb} [\coqdocvar{true};\coqdocvar{true};\coqdocvar{false};\coqdocvar{true}] \coqdocvar{true} = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{fold\_example3} :\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{fold} \coqdocvar{app}  [[1];[];[2;3];[4]] [] = [1;2;3;4].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, advancedM (fold\_types\_different)}

 Observe that the type of \coqdoctac{fold} is parameterized by \textit{two} type
    variables, \coqdocdefinition{X} and \coqdocdefinition{Y}, and the parameter \coqdocabbreviation{f} is a binary operator
    that takes an \coqdocdefinition{X} and a \coqdocdefinition{Y} and returns a \coqdocdefinition{Y}.  Can you think of a
    situation where it would be useful for \coqdocdefinition{X} and \coqdocdefinition{Y} to be
    different? \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Functions That Construct Functions}



 Most of the higher-order functions we have talked about so
    far take functions as arguments.  Let's look at some examples that
    involve \textit{returning} functions as the results of other functions.
    To begin, here is a function that takes a value \coqdocabbreviation{x} (drawn from
    some type \coqdocdefinition{X}) and returns a function from \coqdocdefinition{nat} to \coqdocdefinition{X} that
    yields \coqdocabbreviation{x} whenever it is called, ignoring its \coqdocdefinition{nat} argument. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{constfun} \{\coqdocvar{X}: \coqdockw{Type}\} (\coqdocvar{x}: \coqdocvar{X}) : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} (\coqdocvar{k}:\coqdocvar{nat}) \ensuremath{\Rightarrow} \coqdocvar{x}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ftrue} := \coqdocvar{constfun} \coqdocvar{true}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{constfun\_example1} : \coqdocvar{ftrue} 0 = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{constfun\_example2} : (\coqdocvar{constfun} 5) 99 = 5.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In fact, the multiple-argument functions we have already
    seen are also examples of passing functions as data.  To see why,
    recall the type of \coqdocdefinition{plus}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{plus}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Each \ensuremath{\rightarrow} in this expression is actually a \textit{binary} operator
    on types.  This operator is \textit{right-associative}, so the type of
    \coqdocdefinition{plus} is really a shorthand for \coqdocdefinition{nat} \ensuremath{\rightarrow} (\coqdocdefinition{nat} \ensuremath{\rightarrow} \coqdocdefinition{nat}) -- i.e., it
    can be read as saying that ''\coqdocdefinition{plus} is a one-argument function that
    takes a \coqdocdefinition{nat} and returns a one-argument function that takes
    another \coqdocdefinition{nat} and returns a \coqdocdefinition{nat}.``  In the examples above, we
    have always applied \coqdocdefinition{plus} to both of its arguments at once, but
    if we like we can supply just the first.  This is called \textit{partial
    application}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{plus3} := \coqdocvar{plus} 3.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{plus3}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_plus3} :    \coqdocvar{plus3} 4 = 7.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_plus3'} :   \coqdocvar{doit3times} \coqdocvar{plus3} 0 = 9.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_plus3'{}'} :  \coqdocvar{doit3times} (\coqdocvar{plus} 3) 0 = 9.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Additional Exercises}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Exercises}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (fold\_length)}

 Many common functions on lists can be implemented in terms of
   \coqdoctac{fold}.  For example, here is an alternative definition of \coqdocdefinition{length}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{fold\_length} \{\coqdocvar{X} : \coqdockw{Type}\} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{fold} (\coqdockw{fun} \coqdocvar{\_} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{S} \coqdocvar{n}) \coqdocvar{l} 0.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_fold\_length1} : \coqdocvar{fold\_length} [4;7;0] = 3.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Prove the correctness of \coqdocdefinition{fold\_length}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{fold\_length\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{X} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fold\_length} \coqdocvar{l} = \coqdocvar{length} \coqdocvar{l}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 starsM (fold\_map)}

 We can also define \coqdocdefinition{map} in terms of \coqdoctac{fold}.  Finish \coqdocdefinition{fold\_map}
    below. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{fold\_map} \{\coqdocvar{X} \coqdocvar{Y}:\coqdockw{Type}\} (\coqdocvar{f} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{Y}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}) : \coqdocvar{list} \coqdocvar{Y}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Write down a theorem \coqdocvar{fold\_map\_correct} in Coq stating that
   \coqdocdefinition{fold\_map} is correct, and prove it. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, advanced (currying)}

 In Coq, a function \coqdocabbreviation{f} : \coqdocabbreviation{A} \ensuremath{\rightarrow} \coqdocabbreviation{B} \ensuremath{\rightarrow} \coqdocabbreviation{C} really has the type \coqdocabbreviation{A}
    \ensuremath{\rightarrow} (\coqdocabbreviation{B} \ensuremath{\rightarrow} \coqdocabbreviation{C}).  That is, if you give \coqdocabbreviation{f} a value of type \coqdocabbreviation{A}, it
    will give you function \coqdocvar{f'} : \coqdocabbreviation{B} \ensuremath{\rightarrow} \coqdocabbreviation{C}.  If you then give \coqdocvar{f'} a
    value of type \coqdocabbreviation{B}, it will return a value of type \coqdocabbreviation{C}.  This
    allows for partial application, as in \coqdocdefinition{plus3}.  Processing a list
    of arguments with functions that return functions is called
    \textit{currying}, in honor of the logician Haskell Curry.


    Conversely, we can reinterpret the type \coqdocabbreviation{A} \ensuremath{\rightarrow} \coqdocabbreviation{B} \ensuremath{\rightarrow} \coqdocabbreviation{C} as (\coqdocabbreviation{A} \ensuremath{\times}
    \coqdocabbreviation{B}) \ensuremath{\rightarrow} \coqdocabbreviation{C}.  This is called \textit{uncurrying}.  With an uncurried binary
    function, both arguments must be given at once as a pair; there is
    no partial application. 

 We can define currying as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prod\_curry} \{\coqdocvar{X} \coqdocvar{Y} \coqdocvar{Z} : \coqdockw{Type}\}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{f} : \coqdocvar{X} \ensuremath{\times} \coqdocvar{Y} \ensuremath{\rightarrow} \coqdocvar{Z}) (\coqdocvar{x} : \coqdocvar{X}) (\coqdocvar{y} : \coqdocvar{Y}) : \coqdocvar{Z} := \coqdocvar{f} (\coqdocvar{x}, \coqdocvar{y}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As an exercise, define its inverse, \coqdocdefinition{prod\_uncurry}.  Then prove
    the theorems below to show that the two are inverses. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prod\_uncurry} \{\coqdocvar{X} \coqdocvar{Y} \coqdocvar{Z} : \coqdockw{Type}\}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{f} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{Y} \ensuremath{\rightarrow} \coqdocvar{Z}) (\coqdocvar{p} : \coqdocvar{X} \ensuremath{\times} \coqdocvar{Y}) : \coqdocvar{Z}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As a (trivial) example of the usefulness of currying, we can use it
    to shorten one of the examples that we saw above: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_map2}: \coqdocvar{map} (\coqdockw{fun} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{plus} 3 \coqdocvar{x}) [2;0;2] = [5;3;5].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Thought exercise: before running the following commands, can you
    calculate the types of \coqdocdefinition{prod\_curry} and \coqdocdefinition{prod\_uncurry}? \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} @\coqdocvar{prod\_curry}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} @\coqdocvar{prod\_uncurry}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{uncurry\_curry} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X} \coqdocvar{Y} \coqdocvar{Z} : \coqdockw{Type})\coqdoceol
\coqdocindent{12.00em}
(\coqdocvar{f} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{Y} \ensuremath{\rightarrow} \coqdocvar{Z})\coqdoceol
\coqdocindent{12.00em}
\coqdocvar{x} \coqdocvar{y},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{prod\_curry} (\coqdocvar{prod\_uncurry} \coqdocvar{f}) \coqdocvar{x} \coqdocvar{y} = \coqdocvar{f} \coqdocvar{x} \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{curry\_uncurry} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X} \coqdocvar{Y} \coqdocvar{Z} : \coqdockw{Type})\coqdoceol
\coqdocindent{12.00em}
(\coqdocvar{f} : (\coqdocvar{X} \ensuremath{\times} \coqdocvar{Y}) \ensuremath{\rightarrow} \coqdocvar{Z}) (\coqdocvar{p} : \coqdocvar{X} \ensuremath{\times} \coqdocvar{Y}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{prod\_uncurry} (\coqdocvar{prod\_curry} \coqdocvar{f}) \coqdocvar{p} = \coqdocvar{f} \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, advancedM (nth\_error\_informal)}

 Recall the definition of the \coqdocdefinition{nth\_error} function:


   Fixpoint nth\_error \{X : Type\} (l : list X) (n : nat) : option X :=
     match l with
     | \ensuremath{\Box} => None
     | a :: l' => if beq\_nat n O then Some a else nth\_error l' (pred n)
     end.


   Write an informal proof of the following theorem:


   forall X n l, length l = n -> @nth\_error X l n = None


 \ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced (church\_numerals)}

 This exercise explores an alternative way of defining natural
    numbers, using the so-called \textit{Church numerals}, named after
    mathematician Alonzo Church.  We can represent a natural number
    \coqdocabbreviation{n} as a function that takes a function \coqdocabbreviation{f} as a parameter and
    returns \coqdocabbreviation{f} iterated \coqdocabbreviation{n} times. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Church}.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{nat} := \coqdockw{\ensuremath{\forall}} \coqdocvar{X} : \coqdockw{Type}, (\coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{X}) \ensuremath{\rightarrow} \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Let's see how to write some numbers with this notation. Iterating
    a function once should be the same as just applying it.  Thus: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{one} : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} (\coqdocvar{X} : \coqdockw{Type}) (\coqdocvar{f} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{X}) (\coqdocvar{x} : \coqdocvar{X}) \ensuremath{\Rightarrow} \coqdocvar{f} \coqdocvar{x}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Similarly, \coqdocdefinition{two} should apply \coqdocabbreviation{f} twice to its argument: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{two} : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} (\coqdocvar{X} : \coqdockw{Type}) (\coqdocvar{f} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{X}) (\coqdocvar{x} : \coqdocvar{X}) \ensuremath{\Rightarrow} \coqdocvar{f} (\coqdocvar{f} \coqdocvar{x}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Defining \coqdocdefinition{zero} is somewhat trickier: how can we ''apply a function
    zero times``?  The answer is actually simple: just return the
    argument untouched. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{zero} : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} (\coqdocvar{X} : \coqdockw{Type}) (\coqdocvar{f} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{X}) (\coqdocvar{x} : \coqdocvar{X}) \ensuremath{\Rightarrow} \coqdocvar{x}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
More generally, a number \coqdocabbreviation{n} can be written as \coqdockw{fun} \coqdocdefinition{X} \coqdocabbreviation{f} \coqdocabbreviation{x} \ensuremath{\Rightarrow} \coqdocabbreviation{f} (\coqdocabbreviation{f}
    ... (\coqdocabbreviation{f} \coqdocabbreviation{x}) ...), with \coqdocabbreviation{n} occurrences of \coqdocabbreviation{f}.  Notice in
    particular how the \coqdocdefinition{doit3times} function we've defined previously
    is actually just the Church representation of 3. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{three} : \coqdocvar{nat} := @\coqdocvar{doit3times}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Complete the definitions of the following functions. Make sure
    that the corresponding unit tests pass by proving them with
    \coqdoctac{reflexivity}. 

 Successor of a natural number: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{succ} (\coqdocvar{n} : \coqdocvar{nat}) : \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{succ\_1} : \coqdocvar{succ} \coqdocvar{zero} = \coqdocvar{one}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{succ\_2} : \coqdocvar{succ} \coqdocvar{one} = \coqdocvar{two}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{succ\_3} : \coqdocvar{succ} \coqdocvar{two} = \coqdocvar{three}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Addition of two natural numbers: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{plus} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{plus\_1} : \coqdocvar{plus} \coqdocvar{zero} \coqdocvar{one} = \coqdocvar{one}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{plus\_2} : \coqdocvar{plus} \coqdocvar{two} \coqdocvar{three} = \coqdocvar{plus} \coqdocvar{three} \coqdocvar{two}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{plus\_3} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{plus} (\coqdocvar{plus} \coqdocvar{two} \coqdocvar{two}) \coqdocvar{three} = \coqdocvar{plus} \coqdocvar{one} (\coqdocvar{plus} \coqdocvar{three} \coqdocvar{three}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Multiplication: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{mult} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{mult\_1} : \coqdocvar{mult} \coqdocvar{one} \coqdocvar{one} = \coqdocvar{one}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{mult\_2} : \coqdocvar{mult} \coqdocvar{zero} (\coqdocvar{plus} \coqdocvar{three} \coqdocvar{three}) = \coqdocvar{zero}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{mult\_3} : \coqdocvar{mult} \coqdocvar{two} \coqdocvar{three} = \coqdocvar{plus} \coqdocvar{three} \coqdocvar{three}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Exponentiation: 

 (\textit{Hint}: Polymorphism plays a crucial role here.  However,
    choosing the right type to iterate over can be tricky.  If you hit
    a ''Universe inconsistency`` error, try iterating over a different
    type: \coqdocdefinition{nat} itself is usually problematic.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{exp} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{exp\_1} : \coqdocvar{exp} \coqdocvar{two} \coqdocvar{two} = \coqdocvar{plus} \coqdocvar{two} \coqdocvar{two}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{exp\_2} : \coqdocvar{exp} \coqdocvar{three} \coqdocvar{two} = \coqdocvar{plus} (\coqdocvar{mult} \coqdocvar{two} (\coqdocvar{mult} \coqdocvar{two} \coqdocvar{two})) \coqdocvar{one}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{exp\_3} : \coqdocvar{exp} \coqdocvar{three} \coqdocvar{zero} = \coqdocvar{one}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Church}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Exercises}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
$Date: 2016-12-17 23:53:20 -0500 (Sat, 17 Dec 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Tactics}{Library }{Top.Tactics}

\begin{coqdoccode}
\end{coqdoccode}
\section{Tactics: More Basic Tactics}



 This chapter introduces several additional proof strategies
    and tactics that allow us to begin proving more interesting
    properties of functional programs.  We will see:



\begin{itemize}
\item  how to use auxiliary lemmas in both ''forward-style`` and
      ''backward-style`` proofs;

\item  how to reason about data constructors (in particular, how to use
      the fact that they are injective and disjoint);

\item  how to strengthen an induction hypothesis (and when such
      strengthening is required); and

\item  more details on how to reason by case analysis. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Export} \coqdocvar{Poly}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{The \texorpdfstring{\protect\coqdoctac{apply}}{apply} Tactic}



 We often encounter situations where the goal to be proved is
    \textit{exactly} the same as some hypothesis in the context or some
    previously proved lemma. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{silly1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{p} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{n} = \coqdocvar{m}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
[\coqdocvar{n};\coqdocvar{o}] = [\coqdocvar{n};\coqdocvar{p}] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
[\coqdocvar{n};\coqdocvar{o}] = [\coqdocvar{m};\coqdocvar{p}].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{p} \coqdocvar{eq1} \coqdocvar{eq2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{eq1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here, we could finish with ''\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{eq2}.  \coqdoctac{reflexivity}.`` as we
    have done several times before.  We can achieve the same effect in
    a single step by using the \coqdoctac{apply} tactic instead: \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{eq2}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{apply} tactic also works with \textit{conditional} hypotheses
    and lemmas: if the statement being applied is an implication, then
    the premises of this implication will be added to the list of
    subgoals needing to be proved. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{silly2} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{p} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{n} = \coqdocvar{m}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} (\coqdocvar{q} \coqdocvar{r} : \coqdocvar{nat}), \coqdocvar{q} = \coqdocvar{r} \ensuremath{\rightarrow} [\coqdocvar{q};\coqdocvar{o}] = [\coqdocvar{r};\coqdocvar{p}]) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
[\coqdocvar{n};\coqdocvar{o}] = [\coqdocvar{m};\coqdocvar{p}].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{p} \coqdocvar{eq1} \coqdocvar{eq2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{eq2}. \coqdoctac{apply} \coqdocvar{eq1}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
You may find it instructive to experiment with this proof
    and see if there is a way to complete it using just \coqdoctac{rewrite}
    instead of \coqdoctac{apply}. 

 Typically, when we use \coqdoctac{apply} \coqdocvariable{H}, the statement \coqdocvariable{H} will
    begin with a \coqdockw{\ensuremath{\forall}} that binds some \textit{universal variables}.  When
    Coq matches the current goal against the conclusion of \coqdocvariable{H}, it
    will try to find appropriate values for these variables.  For
    example, when we do \coqdoctac{apply} \coqdocvar{eq2} in the following proof, the
    universal variable \coqdocvariable{q} in \coqdocvar{eq2} gets instantiated with \coqdocabbreviation{n} and \coqdocdefinition{r}
    gets instantiated with \coqdocabbreviation{m}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{silly2a} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.50em}
(\coqdocvar{n},\coqdocvar{n}) = (\coqdocvar{m},\coqdocvar{m})  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} (\coqdocvar{q} \coqdocvar{r} : \coqdocvar{nat}), (\coqdocvar{q},\coqdocvar{q}) = (\coqdocvar{r},\coqdocvar{r}) \ensuremath{\rightarrow} [\coqdocvar{q}] = [\coqdocvar{r}]) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
[\coqdocvar{n}] = [\coqdocvar{m}].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{eq1} \coqdocvar{eq2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{eq2}. \coqdoctac{apply} \coqdocvar{eq1}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (silly\_ex)}

 Complete the following proof without using \coqdoctac{simpl}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{silly\_ex} :\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{evenb} \coqdocvar{n} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{oddb} (\coqdocvar{S} \coqdocvar{n}) = \coqdocvar{true}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{evenb} 3 = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{oddb} 4 = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 To use the \coqdoctac{apply} tactic, the (conclusion of the) fact
    being applied must match the goal exactly -- for example, \coqdoctac{apply}
    will not work if the left and right sides of the equality are
    swapped. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{silly3\_firsttry} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{true} = \coqdocvar{beq\_nat} \coqdocvar{n} 5  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{beq\_nat} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})) 7 = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here we cannot use \coqdoctac{apply} directly, but we can use the \coqdoctac{symmetry}
    tactic, which switches the left and right sides of an equality in
    the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{symmetry}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars (apply\_exercise1)}

 (\textit{Hint}: You can use \coqdoctac{apply} with previously defined lemmas, not
    just hypotheses in the context.  Remember that \coqdockw{Search} is
    your friend.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{rev\_exercise1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{l} \coqdocvar{l'} : \coqdocvar{list} \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{l} = \coqdocvar{rev} \coqdocvar{l'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{l'} = \coqdocvar{rev} \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star, optionalM (apply\_rewrite)}

 Briefly explain the difference between the tactics \coqdoctac{apply} and
    \coqdoctac{rewrite}.  What are the situations where both can usefully be
    applied?


 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{The \texorpdfstring{\protect\coqdoctac{apply}}{apply} ... \texorpdfstring{\protect\coqdockw{with}}{with} ... Tactic}



 The following silly example uses two rewrites in a row to
    get from [\coqdocabbreviation{a},\coqdocconstructor{b}] to [\coqdocconstructor{e},\coqdocabbreviation{f}]. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{trans\_eq\_example} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{a} \coqdocvar{b} \coqdocvar{c} \coqdocvar{d} \coqdocvar{e} \coqdocvar{f} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.50em}
[\coqdocvar{a};\coqdocvar{b}] = [\coqdocvar{c};\coqdocvar{d}] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
[\coqdocvar{c};\coqdocvar{d}] = [\coqdocvar{e};\coqdocvar{f}] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
[\coqdocvar{a};\coqdocvar{b}] = [\coqdocvar{e};\coqdocvar{f}].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{a} \coqdocvar{b} \coqdocvar{c} \coqdocvar{d} \coqdocvar{e} \coqdocvar{f} \coqdocvar{eq1} \coqdocvar{eq2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{eq1}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{eq2}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Since this is a common pattern, we might like to pull it out
    as a lemma recording, once and for all, the fact that equality is
    transitive. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{trans\_eq} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{n} \coqdocvar{m} \coqdocvar{o} : \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{m} = \coqdocvar{o} \ensuremath{\rightarrow} \coqdocvar{n} = \coqdocvar{o}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{X} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{eq1} \coqdocvar{eq2}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{eq1}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{eq2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now, we should be able to use \coqdoclemma{trans\_eq} to prove the above
    example.  However, to do this we need a slight refinement of the
    \coqdoctac{apply} tactic. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{trans\_eq\_example'} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{a} \coqdocvar{b} \coqdocvar{c} \coqdocvar{d} \coqdocvar{e} \coqdocvar{f} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.50em}
[\coqdocvar{a};\coqdocvar{b}] = [\coqdocvar{c};\coqdocvar{d}] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
[\coqdocvar{c};\coqdocvar{d}] = [\coqdocvar{e};\coqdocvar{f}] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
[\coqdocvar{a};\coqdocvar{b}] = [\coqdocvar{e};\coqdocvar{f}].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{a} \coqdocvar{b} \coqdocvar{c} \coqdocvar{d} \coqdocvar{e} \coqdocvar{f} \coqdocvar{eq1} \coqdocvar{eq2}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If we simply tell Coq \coqdoctac{apply} \coqdoclemma{trans\_eq} at this point, it can
    tell (by matching the goal against the conclusion of the lemma)
    that it should instantiate \coqdocdefinition{X} with [\coqdocdefinition{nat}], \coqdocabbreviation{n} with [\coqdocabbreviation{a},\coqdocconstructor{b}], and
    \coqdocvariable{o} with [\coqdocconstructor{e},\coqdocabbreviation{f}].  However, the matching process doesn't determine
    an instantiation for \coqdocabbreviation{m}: we have to supply one explicitly by
    adding \coqdockw{with} (\coqdocabbreviation{m}:=[\coqdocconstructor{c},\coqdocconstructor{d}]) to the invocation of \coqdoctac{apply}. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{trans\_eq} \coqdockw{with} (\coqdocvar{m}:=[\coqdocvar{c};\coqdocvar{d}]).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{eq1}. \coqdoctac{apply} \coqdocvar{eq2}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Actually, we usually don't have to include the name \coqdocabbreviation{m} in
    the \coqdockw{with} clause; Coq is often smart enough to figure out which
    instantiation we're giving. We could instead write: \coqdoctac{apply}
    \coqdoclemma{trans\_eq} \coqdockw{with} [\coqdocconstructor{c};\coqdocconstructor{d}]. 

\paragraph{Exercise: 3 stars, optional (apply\_with\_exercise)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{trans\_eq\_exercise} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{p} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{m} = (\coqdocvar{minustwo} \coqdocvar{o}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdocvar{n} + \coqdocvar{p}) = \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdocvar{n} + \coqdocvar{p}) = (\coqdocvar{minustwo} \coqdocvar{o}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{The \texorpdfstring{\protect\coqdoctac{inversion}}{inversion} Tactic}



 Recall the definition of natural numbers:


     Inductive nat : Type :=
       | O : nat
       | S : nat -> nat.


    It is obvious from this definition that every number has one of
    two forms: either it is the constructor \coqdocconstructor{O} or it is built by
    applying the constructor \coqdocconstructor{S} to another number.  But there is more
    here than meets the eye: implicit in the definition (and in our
    informal understanding of how datatype declarations work in other
    programming languages) are two more facts:



\begin{itemize}
\item  The constructor \coqdocconstructor{S} is \textit{injective}.  That is, if \coqdocconstructor{S} \coqdocabbreviation{n} = \coqdocconstructor{S} \coqdocabbreviation{m}, it
      must be the case that \coqdocabbreviation{n} = \coqdocabbreviation{m}.



\item  The constructors \coqdocconstructor{O} and \coqdocconstructor{S} are \textit{disjoint}.  That is, \coqdocconstructor{O} is not
      equal to \coqdocconstructor{S} \coqdocabbreviation{n} for any \coqdocabbreviation{n}.

\end{itemize}


    Similar principles apply to all inductively defined types: all
    constructors are injective, and the values built from distinct
    constructors are never equal.  For lists, the \coqdocconstructor{cons} constructor
    is injective and \coqdocconstructor{nil} is different from every non-empty list.
    For booleans, \coqdocconstructor{true} and \coqdocconstructor{false} are different.  (Since neither
    \coqdocconstructor{true} nor \coqdocconstructor{false} take any arguments, their injectivity is not
    interesting.)  And so on. 

 Coq provides a tactic called \coqdoctac{inversion} that allows us to
    exploit these principles in proofs. To see how to use it, let's
    show explicitly that the \coqdocconstructor{S} constructor is injective: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{S\_injective} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{S} \coqdocvar{n} = \coqdocvar{S} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
By writing \coqdoctac{inversion} \coqdocvariable{H} at this point, we are asking Coq to
    generate all equations that it can infer from \coqdocvariable{H} as additional
    hypotheses, replacing variables in the goal as it goes. In the
    present example, this amounts to adding a new hypothesis \coqdocvar{H1} : \coqdocabbreviation{n} =
    \coqdocabbreviation{m} and replacing \coqdocabbreviation{n} by \coqdocabbreviation{m} in the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here's a more interesting example that shows how multiple
    equations can be derived at once. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{inversion\_ex1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} \coqdocvar{o} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
[\coqdocvar{n}; \coqdocvar{m}] = [\coqdocvar{o}; \coqdocvar{o}] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
[\coqdocvar{n}] = [\coqdocvar{m}].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can name the equations that \coqdoctac{inversion} generates with an
    \coqdockw{as} ... clause: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{inversion\_ex2} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
[\coqdocvar{n}] = [\coqdocvar{m}] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{Hnm}]. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (inversion\_ex3)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{inversion\_ex3} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X} : \coqdockw{Type}) (\coqdocvar{x} \coqdocvar{y} \coqdocvar{z} : \coqdocvar{X}) (\coqdocvar{l} \coqdocvar{j} : \coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x} :: \coqdocvar{y} :: \coqdocvar{l} = \coqdocvar{z} :: \coqdocvar{j} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{y} :: \coqdocvar{l} = \coqdocvar{x} :: \coqdocvar{j} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x} = \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 When used on a hypothesis involving an equality between
    \textit{different} constructors (e.g., \coqdocconstructor{S} \coqdocabbreviation{n} = \coqdocconstructor{O}), \coqdoctac{inversion} solves the
    goal immediately.  Consider the following proof: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_nat\_0\_l} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{beq\_nat} 0 \coqdocvar{n} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{n} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can proceed by case analysis on \coqdocabbreviation{n}. The first case is
    trivial. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, the second one doesn't look so simple: assuming
    \coqdocdefinition{beq\_nat} 0 (\coqdocconstructor{S} \coqdocvariable{n'}) = \coqdocconstructor{true}, we must show \coqdocconstructor{S} \coqdocvariable{n'} = 0, but the latter
    clearly contradictory!  The way forward lies in the assumption.
    After simplifying the goal state, we see that \coqdocdefinition{beq\_nat} 0 (\coqdocconstructor{S} \coqdocvariable{n'}) =
    \coqdocconstructor{true} has become \coqdocconstructor{false} = \coqdocconstructor{true}: \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If we use \coqdoctac{inversion} on this hypothesis, Coq notices that
    the subgoal we are working on is impossible, and therefore removes
    it from further consideration. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This is an instance of a logical principle known as the \textit{principle
    of explosion}, which asserts that a contradictory hypothesis
    entails anything, even false things! \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{inversion\_ex4} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{S} \coqdocvar{n} = \coqdocvar{O} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
2 + 2 = 5.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{contra}. \coqdoctac{inversion} \coqdocvar{contra}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{inversion\_ex5} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
[\coqdocvar{n}] = [\coqdocvar{m}].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{contra}. \coqdoctac{inversion} \coqdocvar{contra}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If you find the principle of explosion confusing, remember
    that these proofs are not actually showing that the conclusion of
    the statement holds.  Rather, they are arguing that, if the
    nonsensical situation described by the premise did somehow arise,
    then the nonsensical conclusion would follow.  We'll explore the
    principle of explosion of more detail in the next chapter. 

\paragraph{Exercise: 1 star (inversion\_ex6)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{inversion\_ex6} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X} : \coqdockw{Type})\coqdoceol
\coqdocindent{13.00em}
(\coqdocvar{x} \coqdocvar{y} \coqdocvar{z} : \coqdocvar{X}) (\coqdocvar{l} \coqdocvar{j} : \coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x} :: \coqdocvar{y} :: \coqdocvar{l} = [] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{y} :: \coqdocvar{l} = \coqdocvar{z} :: \coqdocvar{j} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x} = \coqdocvar{z}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 To summarize this discussion, suppose \coqdocvariable{H} is a hypothesis in the
    context or a previously proven lemma of the form


        c a1 a2 ... an = d b1 b2 ... bm


    for some constructors \coqdocconstructor{c} and \coqdocconstructor{d} and arguments \coqdocvariable{a1} ... \coqdocvar{an} and
    \coqdocvariable{b1} ... \coqdocvar{bm}.  Then \coqdoctac{inversion} \coqdocvariable{H} has the following effect:



\begin{itemize}
\item  If \coqdocconstructor{c} and \coqdocconstructor{d} are the same constructor, then, by the
      injectivity of this constructor, we know that \coqdocvariable{a1} = \coqdocvariable{b1}, \coqdocvariable{a2} =
      \coqdocvariable{b2}, etc.  The \coqdoctac{inversion} \coqdocvariable{H} adds these facts to the context and
      tries to use them to rewrite the goal.



\item  If \coqdocconstructor{c} and \coqdocconstructor{d} are different constructors, then the hypothesis
      \coqdocvariable{H} is contradictory, and the current goal doesn't have to be
      considered at all.  In this case, \coqdoctac{inversion} \coqdocvariable{H} marks the
      current goal as completed and pops it off the goal stack. 
\end{itemize}


 The injectivity of constructors allows us to reason that
    \coqdockw{\ensuremath{\forall}} (\coqdocabbreviation{n} \coqdocabbreviation{m} : \coqdocdefinition{nat}), \coqdocconstructor{S} \coqdocabbreviation{n} = \coqdocconstructor{S} \coqdocabbreviation{m} \ensuremath{\rightarrow} \coqdocabbreviation{n} = \coqdocabbreviation{m}.  The converse of this
    implication is an instance of a more general fact about both
    constructors and functions, which we will find useful in a few
    places below: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{f\_equal} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{A} \coqdocvar{B} : \coqdockw{Type}) (\coqdocvar{f}: \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{B}) (\coqdocvar{x} \coqdocvar{y}: \coqdocvar{A}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x} = \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{f} \coqdocvar{x} = \coqdocvar{f} \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{A} \coqdocvar{B} \coqdocvar{f} \coqdocvar{x} \coqdocvar{y} \coqdocvar{eq}. \coqdoctac{rewrite} \coqdocvar{eq}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Using Tactics on Hypotheses}



 By default, most tactics work on the goal formula and leave
    the context unchanged.  However, most tactics also have a variant
    that performs a similar operation on a statement in the context.


    For example, the tactic \coqdoctac{simpl} \coqdoctac{in} \coqdocvariable{H} performs simplification in
    the hypothesis named \coqdocvariable{H} in the context. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{S\_inj} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}) (\coqdocvar{b} : \coqdocvar{bool}),\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{beq\_nat} (\coqdocvar{S} \coqdocvar{n}) (\coqdocvar{S} \coqdocvar{m}) = \coqdocvar{b}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{m} = \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{b} \coqdocvar{H}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Similarly, \coqdoctac{apply} \coqdocvariable{L} \coqdoctac{in} \coqdocvariable{H} matches some conditional statement
    \coqdocvariable{L} (of the form \coqdocvar{L1} \ensuremath{\rightarrow} \coqdocvar{L2}, say) against a hypothesis \coqdocvariable{H} in the
    context.  However, unlike ordinary \coqdoctac{apply} (which rewrites a goal
    matching \coqdocvar{L2} into a subgoal \coqdocvar{L1}), \coqdoctac{apply} \coqdocvariable{L} \coqdoctac{in} \coqdocvariable{H} matches \coqdocvariable{H}
    against \coqdocvar{L1} and, if successful, replaces it with \coqdocvar{L2}.


    In other words, \coqdoctac{apply} \coqdocvariable{L} \coqdoctac{in} \coqdocvariable{H} gives us a form of ''forward
    reasoning``: from \coqdocvar{L1} \ensuremath{\rightarrow} \coqdocvar{L2} and a hypothesis matching \coqdocvar{L1}, it
    produces a hypothesis matching \coqdocvar{L2}.  By contrast, \coqdoctac{apply} \coqdocvariable{L} is
    ''backward reasoning``: it says that if we know \coqdocvar{L1}\ensuremath{\rightarrow}\coqdocvar{L2} and we are
    trying to prove \coqdocvar{L2}, it suffices to prove \coqdocvar{L1}.


    Here is a variant of a proof from above, using forward reasoning
    throughout instead of backward reasoning. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{silly3'} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{beq\_nat} \coqdocvar{n} 5 = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{beq\_nat} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})) 7 = \coqdocvar{true}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{true} = \coqdocvar{beq\_nat} \coqdocvar{n} 5  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{true} = \coqdocvar{beq\_nat} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})) 7.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{eq} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{symmetry} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{eq} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{symmetry} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Forward reasoning starts from what is \textit{given} (premises,
    previously proven theorems) and iteratively draws conclusions from
    them until the goal is reached.  Backward reasoning starts from
    the \textit{goal}, and iteratively reasons about what would imply the
    goal, until premises or previously proven theorems are reached.
    If you've seen informal proofs before (for example, in a math or
    computer science class), they probably used forward reasoning.  In
    general, idiomatic use of Coq tends to favor backward reasoning,
    but in some situations the forward style can be easier to think
    about.  

\paragraph{Exercise: 3 stars, recommended (plus\_n\_n\_injective)}

 Practice using ''in`` variants in this exercise.  (Hint: use
    \coqdoclemma{plus\_n\_Sm}.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_n\_n\_injective} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{n} + \coqdocvar{n} = \coqdocvar{m} + \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Varying the Induction Hypothesis}



 Sometimes it is important to control the exact form of the
    induction hypothesis when carrying out inductive proofs in Coq.
    In particular, we need to be careful about which of the
    assumptions we move (using \coqdoctac{intros}) from the goal to the context
    before invoking the \coqdoctac{induction} tactic.  For example, suppose
    we want to show that the \coqdocdefinition{double} function is injective -- i.e.,
    that it maps different arguments to different results:


    Theorem double\_injective: forall n m,
      double n = double m -> n = m.


    The way we \textit{start} this proof is a bit delicate: if we begin with


      intros n. induction n.


    all is well.  But if we begin it with


      intros n m. induction n.


    we get stuck in the middle of the inductive case... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{double\_injective\_FAILED} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{double} \coqdocvar{n} = \coqdocvar{double} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}. \coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{eq}. \coqdoctac{destruct} \coqdocvar{m} \coqdockw{as} [| \coqdocvar{m'}].\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{inversion} \coqdocvar{eq}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{intros} \coqdocvar{eq}. \coqdoctac{destruct} \coqdocvar{m} \coqdockw{as} [| \coqdocvar{m'}].\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{inversion} \coqdocvar{eq}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{apply} \coqdoctac{f\_equal}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
At this point, the induction hypothesis, \coqdocvar{IHn'}, does \textit{not} give us
    \coqdocvariable{n'} = \coqdocvar{m'} -- there is an extra \coqdocconstructor{S} in the way -- so the goal is
    not provable. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{3.00em}
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
What went wrong? 

 The problem is that, at the point we invoke the induction
    hypothesis, we have already introduced \coqdocabbreviation{m} into the context --
    intuitively, we have told Coq, ''Let's consider some particular \coqdocabbreviation{n}
    and \coqdocabbreviation{m}...`` and we now have to prove that, if \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocdefinition{double}
    \coqdocabbreviation{m} for \textit{these particular} \coqdocabbreviation{n} and \coqdocabbreviation{m}, then \coqdocabbreviation{n} = \coqdocabbreviation{m}.


    The next tactic, \coqdoctac{induction} \coqdocabbreviation{n} says to Coq: We are going to show
    the goal by induction on \coqdocabbreviation{n}.  That is, we are going to prove, for
    \textit{all} \coqdocabbreviation{n}, that the proposition



\begin{itemize}
\item  \coqdocaxiom{P} \coqdocabbreviation{n} = ''if \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocdefinition{double} \coqdocabbreviation{m}, then \coqdocabbreviation{n} = \coqdocabbreviation{m}``

\end{itemize}


    holds, by showing



\begin{itemize}
\item  \coqdocaxiom{P} \coqdocconstructor{O}


         (i.e., ''if \coqdocdefinition{double} \coqdocconstructor{O} = \coqdocdefinition{double} \coqdocabbreviation{m} then \coqdocconstructor{O} = \coqdocabbreviation{m}``) and



\item  \coqdocaxiom{P} \coqdocabbreviation{n} \ensuremath{\rightarrow} \coqdocaxiom{P} (\coqdocconstructor{S} \coqdocabbreviation{n})


        (i.e., ''if \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocdefinition{double} \coqdocabbreviation{m} then \coqdocabbreviation{n} = \coqdocabbreviation{m}`` implies ''if
        \coqdocdefinition{double} (\coqdocconstructor{S} \coqdocabbreviation{n}) = \coqdocdefinition{double} \coqdocabbreviation{m} then \coqdocconstructor{S} \coqdocabbreviation{n} = \coqdocabbreviation{m}``).

\end{itemize}


    If we look closely at the second statement, it is saying something
    rather strange: it says that, for a \textit{particular} \coqdocabbreviation{m}, if we know



\begin{itemize}
\item  ''if \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocdefinition{double} \coqdocabbreviation{m} then \coqdocabbreviation{n} = \coqdocabbreviation{m}``

\end{itemize}


    then we can prove



\begin{itemize}
\item  ''if \coqdocdefinition{double} (\coqdocconstructor{S} \coqdocabbreviation{n}) = \coqdocdefinition{double} \coqdocabbreviation{m} then \coqdocconstructor{S} \coqdocabbreviation{n} = \coqdocabbreviation{m}``.

\end{itemize}


    To see why this is strange, let's think of a particular \coqdocabbreviation{m} --
    say, 5.  The statement is then saying that, if we know



\begin{itemize}
\item  \coqdocvariable{Q} = ''if \coqdocdefinition{double} \coqdocabbreviation{n} = 10 then \coqdocabbreviation{n} = 5``

\end{itemize}


    then we can prove



\begin{itemize}
\item  \coqdocdefinition{R} = ''if \coqdocdefinition{double} (\coqdocconstructor{S} \coqdocabbreviation{n}) = 10 then \coqdocconstructor{S} \coqdocabbreviation{n} = 5``.

\end{itemize}


    But knowing \coqdocvariable{Q} doesn't give us any help at all with proving
    \coqdocdefinition{R}!  (If we tried to prove \coqdocdefinition{R} from \coqdocvariable{Q}, we would start with
    something like ''Suppose \coqdocdefinition{double} (\coqdocconstructor{S} \coqdocabbreviation{n}) = 10...`` but then we'd be
    stuck: knowing that \coqdocdefinition{double} (\coqdocconstructor{S} \coqdocabbreviation{n}) is 10 tells us nothing about
    whether \coqdocdefinition{double} \coqdocabbreviation{n} is 10, so \coqdocvariable{Q} is useless.) 

 Trying to carry out this proof by induction on \coqdocabbreviation{n} when \coqdocabbreviation{m} is
    already in the context doesn't work because we are then trying to
    prove a relation involving \textit{every} \coqdocabbreviation{n} but just a \textit{single} \coqdocabbreviation{m}. 

 The successful proof of \coqdoclemma{double\_injective} leaves \coqdocabbreviation{m} in the goal
    statement at the point where the \coqdoctac{induction} tactic is invoked on
    \coqdocabbreviation{n}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{double\_injective} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{double} \coqdocvar{n} = \coqdocvar{double} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{m} \coqdocvar{eq}. \coqdoctac{destruct} \coqdocvar{m} \coqdockw{as} [| \coqdocvar{m'}].\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{inversion} \coqdocvar{eq}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
-  \coqdoctac{simpl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Notice that both the goal and the induction hypothesis are
    different this time: the goal asks us to prove something more
    general (i.e., to prove the statement for \textit{every} \coqdocabbreviation{m}), but the IH
    is correspondingly more flexible, allowing us to choose any \coqdocabbreviation{m} we
    like when we apply the IH. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{m} \coqdocvar{eq}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now we've chosen a particular \coqdocabbreviation{m} and introduced the assumption
    that \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocdefinition{double} \coqdocabbreviation{m}.  Since we are doing a case analysis on
    \coqdocabbreviation{n}, we also need a case analysis on \coqdocabbreviation{m} to keep the two ''in sync.`` \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{m} \coqdockw{as} [| \coqdocvar{m'}].\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{simpl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The 0 case is trivial: \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{eq}.\coqdoceol
\coqdocemptyline
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdoctac{f\_equal}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
At this point, since we are in the second branch of the \coqdoctac{destruct}
    \coqdocabbreviation{m}, the \coqdocvar{m'} mentioned in the context is the predecessor of the
    \coqdocabbreviation{m} we started out talking about.  Since we are also in the \coqdocconstructor{S}
    branch of the induction, this is perfect: if we instantiate the
    generic \coqdocabbreviation{m} in the IH with the current \coqdocvar{m'} (this instantiation is
    performed automatically by the \coqdoctac{apply} in the next step), then
    \coqdocvar{IHn'} gives us exactly what we need to finish the proof. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHn'}. \coqdoctac{inversion} \coqdocvar{eq}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
What you should take away from all this is that we need to be
    careful about using induction to try to prove something too
    specific: To prove a property of \coqdocabbreviation{n} and \coqdocabbreviation{m} by induction on \coqdocabbreviation{n},
    it is sometimes important to leave \coqdocabbreviation{m} generic. 

 The following exercise requires the same pattern. 

\paragraph{Exercise: 2 stars (beq\_nat\_true)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_nat\_true} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{m} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, advancedM (beq\_nat\_true\_informal)}

 Give a careful informal proof of \coqdoclemma{beq\_nat\_true}, being as explicit
    as possible about quantifiers. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

 The strategy of doing fewer \coqdoctac{intros} before an \coqdoctac{induction} to
    obtain a more general IH doesn't always work by itself; sometimes
    some \textit{rearrangement} of quantified variables is needed.  Suppose,
    for example, that we wanted to prove \coqdoclemma{double\_injective} by
    induction on \coqdocabbreviation{m} instead of \coqdocabbreviation{n}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{double\_injective\_take2\_FAILED} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{double} \coqdocvar{n} = \coqdocvar{double} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}. \coqdoctac{induction} \coqdocvar{m} \coqdockw{as} [| \coqdocvar{m'}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{eq}. \coqdoctac{destruct} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{inversion} \coqdocvar{eq}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{intros} \coqdocvar{eq}. \coqdoctac{destruct} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{inversion} \coqdocvar{eq}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{apply} \coqdoctac{f\_equal}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The problem is that, to do induction on \coqdocabbreviation{m}, we must first
    introduce \coqdocabbreviation{n}.  (If we simply say \coqdoctac{induction} \coqdocabbreviation{m} without
    introducing anything first, Coq will automatically introduce \coqdocabbreviation{n}
    for us!)  

 What can we do about this?  One possibility is to rewrite the
    statement of the lemma so that \coqdocabbreviation{m} is quantified before \coqdocabbreviation{n}.  This
    works, but it's not nice: We don't want to have to twist the
    statements of lemmas to fit the needs of a particular strategy for
    proving them!  Rather we want to state them in the clearest and
    most natural way. 

 What we can do instead is to first introduce all the quantified
    variables and then \textit{re-generalize} one or more of them,
    selectively taking variables out of the context and putting them
    back at the beginning of the goal.  The \coqdoctac{generalize} \coqdoctac{dependent}
    tactic does this. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{double\_injective\_take2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{double} \coqdocvar{n} = \coqdocvar{double} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{n}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{m} \coqdockw{as} [| \coqdocvar{m'}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{n} \coqdocvar{eq}. \coqdoctac{destruct} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{inversion} \coqdocvar{eq}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{intros} \coqdocvar{n} \coqdocvar{eq}. \coqdoctac{destruct} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{inversion} \coqdocvar{eq}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{apply} \coqdoctac{f\_equal}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHm'}. \coqdoctac{inversion} \coqdocvar{eq}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Let's look at an informal proof of this theorem.  Note that
    the proposition we prove by induction leaves \coqdocabbreviation{n} quantified,
    corresponding to the use of generalize dependent in our formal
    proof.


    \textit{Theorem}: For any nats \coqdocabbreviation{n} and \coqdocabbreviation{m}, if \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocdefinition{double} \coqdocabbreviation{m}, then
      \coqdocabbreviation{n} = \coqdocabbreviation{m}.


    \textit{Proof}: Let \coqdocabbreviation{m} be a \coqdocdefinition{nat}. We prove by induction on \coqdocabbreviation{m} that, for
      any \coqdocabbreviation{n}, if \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocdefinition{double} \coqdocabbreviation{m} then \coqdocabbreviation{n} = \coqdocabbreviation{m}.



\begin{itemize}
\item  First, suppose \coqdocabbreviation{m} = 0, and suppose \coqdocabbreviation{n} is a number such
        that \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocdefinition{double} \coqdocabbreviation{m}.  We must show that \coqdocabbreviation{n} = 0.


        Since \coqdocabbreviation{m} = 0, by the definition of \coqdocdefinition{double} we have \coqdocdefinition{double} \coqdocabbreviation{n} =
        0.  There are two cases to consider for \coqdocabbreviation{n}.  If \coqdocabbreviation{n} = 0 we are
        done, since \coqdocabbreviation{m} = 0 = \coqdocabbreviation{n}, as required.  Otherwise, if \coqdocabbreviation{n} = \coqdocconstructor{S} \coqdocvariable{n'}
        for some \coqdocvariable{n'}, we derive a contradiction: by the definition of
        \coqdocdefinition{double}, we can calculate \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocconstructor{S} (\coqdocconstructor{S} (\coqdocdefinition{double} \coqdocvariable{n'})), but
        this contradicts the assumption that \coqdocdefinition{double} \coqdocabbreviation{n} = 0.



\item  Second, suppose \coqdocabbreviation{m} = \coqdocconstructor{S} \coqdocvar{m'} and that \coqdocabbreviation{n} is again a number such
        that \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocdefinition{double} \coqdocabbreviation{m}.  We must show that \coqdocabbreviation{n} = \coqdocconstructor{S} \coqdocvar{m'}, with
        the induction hypothesis that for every number \coqdocdefinition{s}, if \coqdocdefinition{double} \coqdocdefinition{s} =
        \coqdocdefinition{double} \coqdocvar{m'} then \coqdocdefinition{s} = \coqdocvar{m'}.


        By the fact that \coqdocabbreviation{m} = \coqdocconstructor{S} \coqdocvar{m'} and the definition of \coqdocdefinition{double}, we
        have \coqdocdefinition{double} \coqdocabbreviation{n} = \coqdocconstructor{S} (\coqdocconstructor{S} (\coqdocdefinition{double} \coqdocvar{m'})).  There are two cases to
        consider for \coqdocabbreviation{n}.


        If \coqdocabbreviation{n} = 0, then by definition \coqdocdefinition{double} \coqdocabbreviation{n} = 0, a contradiction.


        Thus, we may assume that \coqdocabbreviation{n} = \coqdocconstructor{S} \coqdocvariable{n'} for some \coqdocvariable{n'}, and again by
        the definition of \coqdocdefinition{double} we have \coqdocconstructor{S} (\coqdocconstructor{S} (\coqdocdefinition{double} \coqdocvariable{n'})) =
        \coqdocconstructor{S} (\coqdocconstructor{S} (\coqdocdefinition{double} \coqdocvar{m'})), which implies by inversion that \coqdocdefinition{double} \coqdocvariable{n'} =
        \coqdocdefinition{double} \coqdocvar{m'}.  Instantiating the induction hypothesis with \coqdocvariable{n'} thus
        allows us to conclude that \coqdocvariable{n'} = \coqdocvar{m'}, and it follows immediately
        that \coqdocconstructor{S} \coqdocvariable{n'} = \coqdocconstructor{S} \coqdocvar{m'}.  Since \coqdocconstructor{S} \coqdocvariable{n'} = \coqdocabbreviation{n} and \coqdocconstructor{S} \coqdocvar{m'} = \coqdocabbreviation{m}, this is just
        what we wanted to show. \ensuremath{\Box} 
\end{itemize}


 Before we close this section and move on to some exercises,
    let's digress briefly and use \coqdoclemma{beq\_nat\_true} to prove a similar
    property of identifiers that we'll need in later chapters: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_id\_true} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{x} = \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [\coqdocvar{m}] [\coqdocvar{n}]. \coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H'} : \coqdocvar{m} = \coqdocvar{n}). \{ \coqdoctac{apply} \coqdocvar{beq\_nat\_true}. \coqdoctac{apply} \coqdocvar{H}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{H'}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, recommended (gen\_dep\_practice)}

 Prove this by induction on \coqdocabbreviation{l}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{nth\_error\_after\_last}: \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} : \coqdocvar{nat}) (\coqdocvar{X} : \coqdockw{Type}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{length} \coqdocvar{l} = \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{nth\_error} \coqdocvar{l} \coqdocvar{n} = \coqdocvar{None}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Unfolding Definitions}



 It sometimes happens that we need to manually unfold a Definition
    so that we can manipulate its right-hand side.  For example, if we
    define... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{square} \coqdocvar{n} := \coqdocvar{n} \ensuremath{\times} \coqdocvar{n}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... and try to prove a simple fact about \coqdocdefinition{square}... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{square\_mult} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{square} (\coqdocvar{n} \ensuremath{\times} \coqdocvar{m}) = \coqdocvar{square} \coqdocvar{n} \ensuremath{\times} \coqdocvar{square} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... we get stuck: \coqdoctac{simpl} doesn't simplify anything at this point,
    and since we haven't proved any other facts about \coqdocdefinition{square}, there
    is nothing we can \coqdoctac{apply} or \coqdoctac{rewrite} with.


    To make progress, we can manually \coqdoctac{unfold} the definition of
    \coqdocdefinition{square}: \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{square}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now we have plenty to work with: both sides of the equality are
    expressions involving multiplication, and we have lots of facts
    about multiplication at our disposal.  In particular, we know that
    it is commutative and associative, and from these facts it is not
    hard to finish the proof. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{mult\_assoc}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H} : \coqdocvar{n} \ensuremath{\times} \coqdocvar{m} \ensuremath{\times} \coqdocvar{n} = \coqdocvar{n} \ensuremath{\times} \coqdocvar{n} \ensuremath{\times} \coqdocvar{m}).\coqdoceol
\coqdocindent{1.00em}
\{ \coqdoctac{rewrite} \coqdocvar{mult\_comm}. \coqdoctac{apply} \coqdocvar{mult\_assoc}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{rewrite} \coqdocvar{mult\_assoc}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
At this point, a deeper discussion of unfolding and simplification
    is in order.


    You may already have observed that tactics like \coqdoctac{simpl},
    \coqdoctac{reflexivity}, and \coqdoctac{apply} will often unfold the definitions of
    functions automatically when this allows them to make progress.  For
    example, if we define \coqdoclemma{foo} \coqdocabbreviation{m} to be the constant 5... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{foo} (\coqdocvar{x}: \coqdocvar{nat}) := 5.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
then the \coqdoctac{simpl} in the following proof (or the \coqdoctac{reflexivity}, if
    we omit the \coqdoctac{simpl}) will unfold \coqdoclemma{foo} \coqdocabbreviation{m} to (\coqdockw{fun} \coqdocabbreviation{x} \ensuremath{\Rightarrow} 5) \coqdocabbreviation{m} and
    then further simplify this expression to just 5. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fact} \coqdocvar{silly\_fact\_1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m}, \coqdocvar{foo} \coqdocvar{m} + 1 = \coqdocvar{foo} (\coqdocvar{m} + 1) + 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, this automatic unfolding is rather conservative.  For
    example, if we define a slightly more complicated function
    involving a pattern match... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{bar} \coqdocvar{x} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{x} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} 5\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{\_} \ensuremath{\Rightarrow} 5\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
...then the analogous proof will get stuck: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fact} \coqdocvar{silly\_fact\_2\_FAILED} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m}, \coqdocvar{bar} \coqdocvar{m} + 1 = \coqdocvar{bar} (\coqdocvar{m} + 1) + 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The reason that \coqdoctac{simpl} doesn't make progress here is that it
    notices that, after tentatively unfolding \coqdocdefinition{bar} \coqdocabbreviation{m}, it is left with
    a match whose scrutinee, \coqdocabbreviation{m}, is a variable, so the \coqdockw{match} cannot
    be simplified further.  (It is not smart enough to notice that the
    two branches of the \coqdockw{match} are identical.)  So it gives up on
    unfolding \coqdocdefinition{bar} \coqdocabbreviation{m} and leaves it alone.  Similarly, tentatively
    unfolding \coqdocdefinition{bar} (\coqdocabbreviation{m}+1) leaves a \coqdockw{match} whose scrutinee is a
    function application (that, itself, cannot be simplified, even
    after unfolding the definition of +), so \coqdoctac{simpl} leaves it
    alone.


    At this point, there are two ways to make progress.  One is to use
    \coqdoctac{destruct} \coqdocabbreviation{m} to break the proof into two cases, each focusing on a
    more concrete choice of \coqdocabbreviation{m} (\coqdocconstructor{O} vs \coqdocconstructor{S} \coqdocvar{\_}).  In each case, the
    \coqdockw{match} inside of \coqdocdefinition{bar} can now make progress, and the proof is
    easy to complete. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fact} \coqdocvar{silly\_fact\_2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m}, \coqdocvar{bar} \coqdocvar{m} + 1 = \coqdocvar{bar} (\coqdocvar{m} + 1) + 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{simpl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{simpl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This approach works, but it depends on our recognizing that the
    \coqdockw{match} hidden inside \coqdocdefinition{bar} is what was preventing us from making
    progress.


    A more straightforward way to make progress is to explicitly tell
    Coq to unfold \coqdocdefinition{bar}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fact} \coqdocvar{silly\_fact\_2'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m}, \coqdocvar{bar} \coqdocvar{m} + 1 = \coqdocvar{bar} (\coqdocvar{m} + 1) + 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bar}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now it is apparent that we are stuck on the \coqdockw{match} expressions on
    both sides of the =, and we can use \coqdoctac{destruct} to finish the
    proof without thinking too hard. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Using \texorpdfstring{\protect\coqdoctac{destruct}}{destruct} on Compound Expressions}



 We have seen many examples where \coqdoctac{destruct} is used to
    perform case analysis of the value of some variable.  But
    sometimes we need to reason by cases on the result of some
    \textit{expression}.  We can also do this with \coqdoctac{destruct}.


    Here are some examples: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{sillyfun} (\coqdocvar{n} : \coqdocvar{nat}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{if} \coqdocvar{beq\_nat} \coqdocvar{n} 3 \coqdockw{then} \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{else} \coqdockw{if} \coqdocvar{beq\_nat} \coqdocvar{n} 5 \coqdockw{then} \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{else} \coqdocvar{false}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{sillyfun\_false} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sillyfun} \coqdocvar{n} = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{unfold} \coqdocvar{sillyfun}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_nat} \coqdocvar{n} 3).\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{destruct} (\coqdocvar{beq\_nat} \coqdocvar{n} 5).\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
After unfolding \coqdocdefinition{sillyfun} in the above proof, we find that
    we are stuck on \coqdockw{if} (\coqdocdefinition{beq\_nat} \coqdocabbreviation{n} 3) \coqdockw{then} ... \coqdockw{else} ....  But either
    \coqdocabbreviation{n} is equal to 3 or it isn't, so we can use \coqdoctac{destruct} (\coqdocdefinition{beq\_nat}
    \coqdocabbreviation{n} 3) to let us reason about the two cases.


    In general, the \coqdoctac{destruct} tactic can be used to perform case
    analysis of the results of arbitrary computations.  If \coqdocconstructor{e} is an
    expression whose type is some inductively defined type \coqdocdefinition{T}, then,
    for each constructor \coqdocconstructor{c} of \coqdocdefinition{T}, \coqdoctac{destruct} \coqdocconstructor{e} generates a subgoal
    in which all occurrences of \coqdocconstructor{e} (in the goal and in the context)
    are replaced by \coqdocconstructor{c}. 

\paragraph{Exercise: 3 stars, optional (combine\_split)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{combine\_split} : \coqdockw{\ensuremath{\forall}} \coqdocvar{X} \coqdocvar{Y} (\coqdocvar{l} : \coqdocvar{list} (\coqdocvar{X} \ensuremath{\times} \coqdocvar{Y})) \coqdocvar{l1} \coqdocvar{l2},\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split} \coqdocvar{l} = (\coqdocvar{l1}, \coqdocvar{l2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{combine} \coqdocvar{l1} \coqdocvar{l2} = \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 However, \coqdoctac{destruct}ing compound expressions requires a bit of
    care, as such \coqdoctac{destruct}s can sometimes erase information we need
    to complete a proof.  For example, suppose we define a function \coqdocdefinition{sillyfun1} like
    this: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{sillyfun1} (\coqdocvar{n} : \coqdocvar{nat}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{if} \coqdocvar{beq\_nat} \coqdocvar{n} 3 \coqdockw{then} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{else} \coqdockw{if} \coqdocvar{beq\_nat} \coqdocvar{n} 5 \coqdockw{then} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{else} \coqdocvar{false}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now suppose that we want to convince Coq of the (rather
    obvious) fact that \coqdocdefinition{sillyfun1} \coqdocabbreviation{n} yields \coqdocconstructor{true} only when \coqdocabbreviation{n} is
    odd.  By analogy with the proofs we did with \coqdocdefinition{sillyfun} above, it
    is natural to start the proof like this: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{sillyfun1\_odd\_FAILED} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{sillyfun1} \coqdocvar{n} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{oddb} \coqdocvar{n} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{eq}. \coqdoctac{unfold} \coqdocvar{sillyfun1} \coqdoctac{in} \coqdocvar{eq}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_nat} \coqdocvar{n} 3).\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We get stuck at this point because the context does not
    contain enough information to prove the goal!  The problem is that
    the substitution performed by \coqdoctac{destruct} is too brutal -- it threw
    away every occurrence of \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} 3, but we need to keep some
    memory of this expression and how it was destructed, because we
    need to be able to reason that, since \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} 3 = \coqdocconstructor{true} in this
    branch of the case analysis, it must be that \coqdocabbreviation{n} = 3, from which
    it follows that \coqdocabbreviation{n} is odd.


    What we would really like is to substitute away all existing
    occurences of \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} 3, but at the same time add an equation
    to the context that records which case we are in.  The \coqdocvar{eqn}:
    qualifier allows us to introduce such an equation, giving it a
    name that we choose. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{sillyfun1\_odd} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{sillyfun1} \coqdocvar{n} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{oddb} \coqdocvar{n} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{eq}. \coqdoctac{unfold} \coqdocvar{sillyfun1} \coqdoctac{in} \coqdocvar{eq}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_nat} \coqdocvar{n} 3) \coqdocvar{eqn}:\coqdocvar{Heqe3}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{apply} \coqdocvar{beq\_nat\_true} \coqdoctac{in} \coqdocvar{Heqe3}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{Heqe3}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{2.50em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_nat} \coqdocvar{n} 5) \coqdocvar{eqn}:\coqdocvar{Heqe5}.\coqdoceol
\coqdocindent{4.00em}
+ \coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{beq\_nat\_true} \coqdoctac{in} \coqdocvar{Heqe5}.\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{Heqe5}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{4.00em}
+  \coqdoctac{inversion} \coqdocvar{eq}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (destruct\_eqn\_practice)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{bool\_fn\_applied\_thrice} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{f} : \coqdocvar{bool} \ensuremath{\rightarrow} \coqdocvar{bool}) (\coqdocvar{b} : \coqdocvar{bool}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{f} (\coqdocvar{f} (\coqdocvar{f} \coqdocvar{b})) = \coqdocvar{f} \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Review}



 We've now seen many of Coq's most fundamental tactics.  We'll
    introduce a few more in the coming chapters, and later on we'll
    see some more powerful \textit{automation} tactics that make Coq help us
    with low-level details.  But basically we've got what we need to
    get work done.


    Here are the ones we've seen:



\begin{itemize}
\item  \coqdoctac{intros}: move hypotheses/variables from goal to context



\item  \coqdoctac{reflexivity}: finish the proof (when the goal looks like \coqdocconstructor{e} =
        \coqdocconstructor{e})



\item  \coqdoctac{apply}: prove goal using a hypothesis, lemma, or constructor



\item  \coqdoctac{apply}... \coqdoctac{in} \coqdocvariable{H}: apply a hypothesis, lemma, or constructor to
        a hypothesis in the context (forward reasoning)



\item  \coqdoctac{apply}... \coqdockw{with}...: explicitly specify values for variables
        that cannot be determined by pattern matching



\item  \coqdoctac{simpl}: simplify computations in the goal



\item  \coqdoctac{simpl} \coqdoctac{in} \coqdocvariable{H}: ... or a hypothesis



\item  \coqdoctac{rewrite}: use an equality hypothesis (or lemma) to rewrite
        the goal



\item  \coqdoctac{rewrite} ... \coqdoctac{in} \coqdocvariable{H}: ... or a hypothesis



\item  \coqdoctac{symmetry}: changes a goal of the form \coqdocvariable{t}=\coqdocvariable{u} into \coqdocvariable{u}=\coqdocvariable{t}



\item  \coqdoctac{symmetry} \coqdoctac{in} \coqdocvariable{H}: changes a hypothesis of the form \coqdocvariable{t}=\coqdocvariable{u} into
        \coqdocvariable{u}=\coqdocvariable{t}



\item  \coqdoctac{unfold}: replace a defined constant by its right-hand side in
        the goal



\item  \coqdoctac{unfold}... \coqdoctac{in} \coqdocvariable{H}: ... or a hypothesis



\item  \coqdoctac{destruct}... \coqdockw{as}...: case analysis on values of inductively
        defined types



\item  \coqdoctac{destruct}... \coqdocvar{eqn}:...: specify the name of an equation to be
        added to the context, recording the result of the case
        analysis



\item  \coqdoctac{induction}... \coqdockw{as}...: induction on values of inductively
        defined types



\item  \coqdoctac{inversion}: reason by injectivity and distinctness of
        constructors



\item  \coqdoctac{assert} (\coqdocvariable{H}: \coqdocconstructor{e}) (or \coqdoctac{assert} (\coqdocconstructor{e}) \coqdockw{as} \coqdocvariable{H}): introduce a ''local
        lemma`` \coqdocconstructor{e} and call it \coqdocvariable{H}



\item  \coqdoctac{generalize} \coqdoctac{dependent} \coqdocabbreviation{x}: move the variable \coqdocabbreviation{x} (and anything
        else that depends on it) from the context back to an explicit
        hypothesis in the goal formula 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Additional Exercises}



\paragraph{Exercise: 3 stars (beq\_nat\_sym)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_nat\_sym} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{m} = \coqdocvar{beq\_nat} \coqdocvar{m} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advancedM? (beq\_nat\_sym\_informal)}

 Give an informal proof of this lemma that corresponds to your
    formal proof above:


   Theorem: For any \coqdocdefinition{nat}s \coqdocabbreviation{n} \coqdocabbreviation{m}, \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} \coqdocabbreviation{m} = \coqdocdefinition{beq\_nat} \coqdocabbreviation{m} \coqdocabbreviation{n}.


   Proof:
   \ensuremath{\Box}


\paragraph{Exercise: 3 stars, optional (beq\_nat\_trans)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_nat\_trans} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{m} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} \coqdocvar{m} \coqdocvar{p} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{p} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advancedM (split\_combine)}

 We proved, in an exercise above, that for all lists of pairs,
    \coqdocdefinition{combine} is the inverse of \coqdoctac{split}.  How would you formalize the
    statement that \coqdoctac{split} is the inverse of \coqdocdefinition{combine}?  When is this
    property true?


    Complete the definition of \coqdocdefinition{split\_combine\_statement} below with a
    property that states that \coqdoctac{split} is the inverse of
    \coqdocdefinition{combine}. Then, prove that the property holds. (Be sure to leave
    your induction hypothesis general by not doing \coqdoctac{intros} on more
    things than necessary.  Hint: what property do you need of \coqdoclemma{l1}
    and \coqdoclemma{l2} for \coqdoctac{split} \coqdocdefinition{combine} \coqdoclemma{l1} \coqdoclemma{l2} = (\coqdoclemma{l1},\coqdoclemma{l2}) to be true?) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{split\_combine\_statement} : \coqdockw{Prop}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{split\_combine} : \coqdocvar{split\_combine\_statement}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advanced (filter\_exercise)}

 This one is a bit challenging.  Pay attention to the form of your
    induction hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{filter\_exercise} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X} : \coqdockw{Type}) (\coqdocvar{test} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{bool})\coqdoceol
\coqdocindent{14.50em}
(\coqdocvar{x} : \coqdocvar{X}) (\coqdocvar{l} \coqdocvar{lf} : \coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{filter} \coqdocvar{test} \coqdocvar{l} = \coqdocvar{x} :: \coqdocvar{lf} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{test} \coqdocvar{x} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced, recommended (forall\_exists\_challenge)}

 Define two recursive \coqdocvar{Fixpoints}, \coqdocdefinition{forallb} and \coqdocvar{existsb}.  The
    first checks whether every element in a list satisfies a given
    predicate:


      forallb oddb 1;3;5;7;9 = true


      forallb negb \coqdocconstructor{false};\coqdocconstructor{false} = true


      forallb evenb 0;2;4;5 = false


      forallb (beq\_nat 5) \ensuremath{\Box} = true


    The second checks whether there exists an element in the list that
    satisfies a given predicate:


      existsb (beq\_nat 5) 0;2;3;6 = false


      existsb (andb true) \coqdocconstructor{true};\coqdocconstructor{true};\coqdocconstructor{false} = true


      existsb oddb 1;0;0;0;0;3 = true


      existsb evenb \ensuremath{\Box} = false


    Next, define a \textit{nonrecursive} version of \coqdocvar{existsb} -- call it
    \coqdocvar{existsb'} -- using \coqdocdefinition{forallb} and \coqdocdefinition{negb}.


    Finally, prove a theorem \coqdocvar{existsb\_existsb'} stating that
    \coqdocvar{existsb'} and \coqdocvar{existsb} have the same behavior. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-10-08 18:36:21 -0400 (Sat, 08 Oct 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Logic}{Library }{Top.Logic}

\begin{coqdoccode}
\end{coqdoccode}
\section{Logic: Logic in Coq}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Export} \coqdocvar{Tactics}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In previous chapters, we have seen many examples of factual
    claims (\textit{propositions}) and ways of presenting evidence of their
    truth (\textit{proofs}).  In particular, we have worked extensively with
    \textit{equality propositions} of the form \coqdocvariable{e1} = \coqdocvariable{e2}, with
    implications (\coqdocaxiom{P} \ensuremath{\rightarrow} \coqdocvariable{Q}), and with quantified propositions (\coqdockw{\ensuremath{\forall}}
    \coqdocabbreviation{x}, \coqdocaxiom{P}).  In this chapter, we will see how Coq can be used to carry
    out other familiar forms of logical reasoning.


    Before diving into details, let's talk a bit about the status of
    mathematical statements in Coq.  Recall that Coq is a \textit{typed}
    language, which means that every sensible expression in its world
    has an associated type.  Logical claims are no exception: any
    statement we might try to prove in Coq has a type, namely \coqdockw{Prop},
    the type of \textit{propositions}.  We can see this with the \coqdockw{Check}
    command: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} 3 = 3.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}, \coqdocvar{n} + \coqdocvar{m} = \coqdocvar{m} + \coqdocvar{n}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that \textit{all} syntactically well-formed propositions have type
    \coqdockw{Prop} in Coq, regardless of whether they are true or not.


    Simply \textit{being} a proposition is one thing; being \textit{provable} is
    something else! \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat}, \coqdocvar{n} = 2.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} 3 = 4.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Indeed, propositions don't just have types: they are \textit{first-class
    objects} that can be manipulated in the same ways as the other
    entities in Coq's world.  So far, we've seen one primary place
    that propositions can appear: in \coqdockw{Theorem} (and \coqdockw{Lemma} and
    \coqdockw{Example}) declarations. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_2\_2\_is\_4} :\coqdoceol
\coqdocindent{1.00em}
2 + 2 = 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
But propositions can be used in many other ways.  For example, we
    can give a name to a proposition using a \coqdockw{Definition}, just as we
    have given names to expressions of other sorts. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{plus\_fact} : \coqdockw{Prop} := 2 + 2 = 4.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{plus\_fact}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can later use this name in any situation where a proposition is
    expected -- for example, as the claim in a \coqdockw{Theorem} declaration. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_fact\_is\_true} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{plus\_fact}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can also write \textit{parameterized} propositions -- that is,
    functions that take arguments of some type and return a
    proposition. 

 For instance, the following function takes a number
    and returns a proposition asserting that this number is equal to
    three: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{is\_three} (\coqdocvar{n} : \coqdocvar{nat}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = 3.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{is\_three}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In Coq, functions that return propositions are said to define
    \textit{properties} of their arguments.


    For instance, here's a (polymorphic) property defining the
    familiar notion of an \textit{injective function}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{injective} \{\coqdocvar{A} \coqdocvar{B}\} (\coqdocvar{f} : \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{B}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} : \coqdocvar{A}, \coqdocvar{f} \coqdocvar{x} = \coqdocvar{f} \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{x} = \coqdocvar{y}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{succ\_inj} : \coqdocvar{injective} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The equality operator = is also a function that returns a
    \coqdockw{Prop}.


    The expression \coqdocabbreviation{n} = \coqdocabbreviation{m} is syntactic sugar for \coqdocabbreviation{eq} \coqdocabbreviation{n} \coqdocabbreviation{m}, defined
    using Coq's \coqdockw{Notation} mechanism. Because \coqdocabbreviation{eq} can be used with
    elements of any type, it is also polymorphic: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} @\coqdocvar{eq}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(Notice that we wrote @\coqdocabbreviation{eq} instead of \coqdocabbreviation{eq}: The type
    argument \coqdocabbreviation{A} to \coqdocabbreviation{eq} is declared as implicit, so we need to turn
    off implicit arguments to see the full type of \coqdocabbreviation{eq}.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Logical Connectives}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Conjunction}



 The \textit{conjunction} (or \textit{logical and}) of propositions \coqdocabbreviation{A} and \coqdocabbreviation{B}
    is written \coqdocabbreviation{A} \ensuremath{\land} \coqdocabbreviation{B}, representing the claim that both \coqdocabbreviation{A} and \coqdocabbreviation{B}
    are true. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{and\_example} : 3 + 4 = 7 \ensuremath{\land} 2 \ensuremath{\times} 2 = 4.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To prove a conjunction, use the \coqdoctac{split} tactic.  It will generate
    two subgoals, one for each part of the statement: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For any propositions \coqdocabbreviation{A} and \coqdocabbreviation{B}, if we assume that \coqdocabbreviation{A} is true
    and we assume that \coqdocabbreviation{B} is true, we can conclude that \coqdocabbreviation{A} \ensuremath{\land} \coqdocabbreviation{B} is
    also true. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{and\_intro} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} \coqdocvar{B} : \coqdockw{Prop}, \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{B} \ensuremath{\rightarrow} \coqdocvar{A} \ensuremath{\land} \coqdocvar{B}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{A} \coqdocvar{B} \coqdocvar{HA} \coqdocvar{HB}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{HA}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{HB}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Since applying a theorem with hypotheses to some goal has the
    effect of generating as many subgoals as there are hypotheses for
    that theorem, we can apply \coqdoclemma{and\_intro} to achieve the same effect
    as \coqdoctac{split}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{and\_example'} : 3 + 4 = 7 \ensuremath{\land} 2 \ensuremath{\times} 2 = 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{and\_intro}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (and\_exercise)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{and\_exercise} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}, \coqdocvar{n} + \coqdocvar{m} = 0 \ensuremath{\rightarrow} \coqdocvar{n} = 0 \ensuremath{\land} \coqdocvar{m} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 So much for proving conjunctive statements.  To go in the other
    direction -- i.e., to \textit{use} a conjunctive hypothesis to help prove
    something else -- we employ the \coqdoctac{destruct} tactic.


    If the proof context contains a hypothesis \coqdocvariable{H} of the form
    \coqdocabbreviation{A} \ensuremath{\land} \coqdocabbreviation{B}, writing \coqdoctac{destruct} \coqdocvariable{H} \coqdockw{as} [\coqdocvar{HA} \coqdocvar{HB}] will remove \coqdocvariable{H} from the
    context and add two new hypotheses: \coqdocvar{HA}, stating that \coqdocabbreviation{A} is
    true, and \coqdocvar{HB}, stating that \coqdocabbreviation{B} is true.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{and\_example2} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}, \coqdocvar{n} = 0 \ensuremath{\land} \coqdocvar{m} = 0 \ensuremath{\rightarrow} \coqdocvar{n} + \coqdocvar{m} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{H} \coqdockw{as} [\coqdocvar{Hn} \coqdocvar{Hm}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{Hn}. \coqdoctac{rewrite} \coqdocvar{Hm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As usual, we can also destruct \coqdocvariable{H} right when we introduce it,
    instead of introducing and then destructing it: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{and\_example2'} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}, \coqdocvar{n} = 0 \ensuremath{\land} \coqdocvar{m} = 0 \ensuremath{\rightarrow} \coqdocvar{n} + \coqdocvar{m} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} [\coqdocvar{Hn} \coqdocvar{Hm}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{Hn}. \coqdoctac{rewrite} \coqdocvar{Hm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
You may wonder why we bothered packing the two hypotheses \coqdocabbreviation{n} = 0
    and \coqdocabbreviation{m} = 0 into a single conjunction, since we could have also
    stated the theorem with two separate premises: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{and\_example2'{}'} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}, \coqdocvar{n} = 0 \ensuremath{\rightarrow} \coqdocvar{m} = 0 \ensuremath{\rightarrow} \coqdocvar{n} + \coqdocvar{m} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{Hn} \coqdocvar{Hm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{Hn}. \coqdoctac{rewrite} \coqdocvar{Hm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For this theorem, both formulations are fine.  But it's important
    to understand how to work with conjunctive hypotheses because
    conjunctions often arise from intermediate steps in proofs,
    especially in bigger developments.  Here's a simple example: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{and\_example3} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}, \coqdocvar{n} + \coqdocvar{m} = 0 \ensuremath{\rightarrow} \coqdocvar{n} \ensuremath{\times} \coqdocvar{m} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H'} : \coqdocvar{n} = 0 \ensuremath{\land} \coqdocvar{m} = 0).\coqdoceol
\coqdocindent{1.00em}
\{ \coqdoctac{apply} \coqdocvar{and\_exercise}. \coqdoctac{apply} \coqdocvar{H}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{H'} \coqdockw{as} [\coqdocvar{Hn} \coqdocvar{Hm}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{Hn}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Another common situation with conjunctions is that we know
    \coqdocabbreviation{A} \ensuremath{\land} \coqdocabbreviation{B} but in some context we need just \coqdocabbreviation{A} (or just \coqdocabbreviation{B}).
    The following lemmas are useful in such cases: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{proj1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\land} \coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} [\coqdocvar{HP} \coqdocvar{HQ}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{HP}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional (proj2)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{proj2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\land} \coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{Q}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Finally, we sometimes need to rearrange the order of conjunctions
    and/or the grouping of multi-way conjunctions.  The following
    commutativity and associativity theorems are handy in such
    cases. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{and\_commut} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\land} \coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{Q} \ensuremath{\land} \coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} [\coqdocvar{HP} \coqdocvar{HQ}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{apply} \coqdocvar{HQ}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{apply} \coqdocvar{HP}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (and\_assoc)}

 (In the following proof of associativity, notice how the \textit{nested}
    intro pattern breaks the hypothesis \coqdocvariable{H} : \coqdocaxiom{P} \ensuremath{\land} (\coqdocvariable{Q} \ensuremath{\land} \coqdocdefinition{R}) down into
    \coqdocvar{HP} : \coqdocaxiom{P}, \coqdocvar{HQ} : \coqdocvariable{Q}, and \coqdocvar{HR} : \coqdocdefinition{R}.  Finish the proof from
    there.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{and\_assoc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\land} (\coqdocvar{Q} \ensuremath{\land} \coqdocvar{R}) \ensuremath{\rightarrow} (\coqdocvar{P} \ensuremath{\land} \coqdocvar{Q}) \ensuremath{\land} \coqdocvar{R}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} [\coqdocvar{HP} [\coqdocvar{HQ} \coqdocvar{HR}]].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 By the way, the infix notation \ensuremath{\land} is actually just syntactic
    sugar for \coqdocinductive{and} \coqdocabbreviation{A} \coqdocabbreviation{B}.  That is, \coqdocinductive{and} is a Coq operator that takes
    two propositions as arguments and yields a proposition. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{and}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Disjunction}



 Another important connective is the \textit{disjunction}, or \textit{logical or}
    of two propositions: \coqdocabbreviation{A} \ensuremath{\lor} \coqdocabbreviation{B} is true when either \coqdocabbreviation{A} or \coqdocabbreviation{B}
    is.  (Alternatively, we can write \coqdocinductive{or} \coqdocabbreviation{A} \coqdocabbreviation{B}, where \coqdocinductive{or} : \coqdockw{Prop} \ensuremath{\rightarrow}
    \coqdockw{Prop} \ensuremath{\rightarrow} \coqdockw{Prop}.)


    To use a disjunctive hypothesis in a proof, we proceed by case
    analysis, which, as for \coqdocdefinition{nat} or other data types, can be done
    with \coqdoctac{destruct} or \coqdoctac{intros}.  Here is an example: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{or\_example} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}, \coqdocvar{n} = 0 \ensuremath{\lor} \coqdocvar{m} = 0 \ensuremath{\rightarrow} \coqdocvar{n} \ensuremath{\times} \coqdocvar{m} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} [\coqdocvar{Hn} \ensuremath{|} \coqdocvar{Hm}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{Hn}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{Hm}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{mult\_n\_O}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Conversely, to show that a disjunction holds, we need to show that
    one of its sides does. This is done via two tactics, \coqdoctac{left} and
    \coqdoctac{right}.  As their names imply, the first one requires
    proving the left side of the disjunction, while the second
    requires proving its right side.  Here is a trivial use... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{or\_intro} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} \coqdocvar{B} : \coqdockw{Prop}, \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{A} \ensuremath{\lor} \coqdocvar{B}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{A} \coqdocvar{B} \coqdocvar{HA}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{left}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{HA}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... and a slightly more interesting example requiring both \coqdoctac{left}
    and \coqdoctac{right}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{zero\_or\_succ} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat}, \coqdocvar{n} = 0 \ensuremath{\lor} \coqdocvar{n} = \coqdocvar{S} (\coqdocvar{pred} \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [|\coqdocvar{n}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{left}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{right}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (mult\_eq\_0)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{mult\_eq\_0} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{n} \ensuremath{\times} \coqdocvar{m} = 0 \ensuremath{\rightarrow} \coqdocvar{n} = 0 \ensuremath{\lor} \coqdocvar{m} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star (or\_commut)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{or\_commut} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\lor} \coqdocvar{Q}  \ensuremath{\rightarrow} \coqdocvar{Q} \ensuremath{\lor} \coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Falsehood and Negation}



 So far, we have mostly been concerned with proving that certain
    things are \textit{true} -- addition is commutative, appending lists is
    associative, etc.  Of course, we may also be interested in
    \textit{negative} results, showing that certain propositions are \textit{not}
    true. In Coq, such negative statements are expressed with the
    negation operator \ensuremath{\lnot}.


    To see how negation works, recall the discussion of the \textit{principle
    of explosion} from the \coqdoclibrary{Tactics} chapter; it asserts that, if we
    assume a contradiction, then any other proposition can be derived.
    Following this intuition, we could define \ensuremath{\lnot} \coqdocaxiom{P} (''not \coqdocaxiom{P}``) as
    \coqdockw{\ensuremath{\forall}} \coqdocvariable{Q}, \coqdocaxiom{P} \ensuremath{\rightarrow} \coqdocvariable{Q}.  Coq actually makes a slightly different
    choice, defining \ensuremath{\lnot} \coqdocaxiom{P} as \coqdocaxiom{P} \ensuremath{\rightarrow} \coqdocinductive{False}, where \coqdocinductive{False} is a
    \textit{particular} contradictory proposition defined in the standard
    library. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{MyNot}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{not} (\coqdocvar{P}:\coqdockw{Prop}) := \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{False}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "\~{} x" := (\coqdocvar{not} \coqdocvar{x}) : \coqdocvar{type\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{not}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{MyNot}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Since \coqdocinductive{False} is a contradictory proposition, the principle of
    explosion also applies to it. If we get \coqdocinductive{False} into the proof
    context, we can \coqdoctac{destruct} it to complete any goal: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ex\_falso\_quodlibet} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P}:\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{False} \ensuremath{\rightarrow} \coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{contra}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{contra}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The Latin \textit{ex falso quodlibet} means, literally, ''from falsehood
    follows whatever you like``; this is another common name for the
    principle of explosion. 

\paragraph{Exercise: 2 stars, optional (not\_implies\_our\_not)}

 Show that Coq's definition of negation implies the intuitive one
    mentioned above: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fact} \coqdocvar{not\_implies\_our\_not} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P}:\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdocvar{P} \ensuremath{\rightarrow} (\coqdockw{\ensuremath{\forall}} (\coqdocvar{Q}:\coqdockw{Prop}), \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{Q}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 This is how we use \coqdocdefinition{not} to state that 0 and 1 are different
    elements of \coqdocdefinition{nat}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{zero\_not\_one} : \~{}(0 = 1).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{contra}. \coqdoctac{inversion} \coqdocvar{contra}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Such inequality statements are frequent enough to warrant a
    special notation, \coqdocabbreviation{x} \ensuremath{\not=} \coqdocabbreviation{y}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} (0 \ensuremath{\not=} 1).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{zero\_not\_one'} : 0 \ensuremath{\not=} 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It takes a little practice to get used to working with negation in
    Coq.  Even though you can see perfectly well why a statement
    involving negation is true, it can be a little tricky at first to
    get things into the right configuration so that Coq can understand
    it!  Here are proofs of a few familiar facts to get you warmed
    up. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{not\_False} :\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdocvar{False}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{not}. \coqdoctac{intros} \coqdocvar{H}. \coqdoctac{destruct} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{contradiction\_implies\_anything} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} \ensuremath{\land} \ensuremath{\lnot}\coqdocvar{P}) \ensuremath{\rightarrow} \coqdocvar{Q}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} [\coqdocvar{HP} \coqdocvar{HNA}]. \coqdoctac{unfold} \coqdocvar{not} \coqdoctac{in} \coqdocvar{HNA}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{HNA} \coqdoctac{in} \coqdocvar{HP}. \coqdoctac{destruct} \coqdocvar{HP}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{double\_neg} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\rightarrow} \~{}\~{}\coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{H}. \coqdoctac{unfold} \coqdocvar{not}. \coqdoctac{intros} \coqdocvar{G}. \coqdoctac{apply} \coqdocvar{G}. \coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, advanced, recommendedM (double\_neg\_inf)}

 Write an informal proof of \coqdoclemma{double\_neg}:


   \textit{Theorem}: \coqdocaxiom{P} implies \~{}\~{}\coqdocaxiom{P}, for any proposition \coqdocaxiom{P}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, recommended (contrapositive)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{contrapositive} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{Q}) \ensuremath{\rightarrow} (\~{}\coqdocvar{Q} \ensuremath{\rightarrow} \ensuremath{\lnot}\coqdocvar{P}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star (not\_both\_true\_and\_false)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{not\_both\_true\_and\_false} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} (\coqdocvar{P} \ensuremath{\land} \ensuremath{\lnot}\coqdocvar{P}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star, advancedM (informal\_not\_PNP)}

 Write an informal proof (in English) of the proposition \coqdockw{\ensuremath{\forall}} \coqdocaxiom{P}
    : \coqdockw{Prop}, \~{}(\coqdocaxiom{P} \ensuremath{\land} \ensuremath{\lnot}\coqdocaxiom{P}). \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

 Similarly, since inequality involves a negation, it requires a
    little practice to be able to work with it fluently.  Here is one
    useful trick.  If you are trying to prove a goal that is
    nonsensical (e.g., the goal state is \coqdocconstructor{false} = \coqdocconstructor{true}), apply
    \coqdoclemma{ex\_falso\_quodlibet} to change the goal to \coqdocinductive{False}.  This makes it
    easier to use assumptions of the form \ensuremath{\lnot}\coqdocaxiom{P} that may be available
    in the context -- in particular, assumptions of the form
    \coqdocabbreviation{x}\ensuremath{\not=}\coqdocabbreviation{y}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{not\_true\_is\_false} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} : \coqdocvar{bool},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{b} \ensuremath{\not=} \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{b} = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [] \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{not} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ex\_falso\_quodlibet}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Since reasoning with \coqdoclemma{ex\_falso\_quodlibet} is quite common, Coq
    provides a built-in tactic, \coqdocvar{exfalso}, for applying it. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{not\_true\_is\_false'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} : \coqdocvar{bool},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{b} \ensuremath{\not=} \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{b} = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [] \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{not} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{exfalso}. \coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Truth}



 Besides \coqdocinductive{False}, Coq's standard library also defines \coqdocinductive{True}, a
    proposition that is trivially true. To prove it, we use the
    predefined constant \coqdocconstructor{I} : \coqdocinductive{True}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{True\_is\_true} : \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{apply} \coqdocvar{I}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Unlike \coqdocinductive{False}, which is used extensively, \coqdocinductive{True} is used quite
    rarely, since it is trivial (and therefore uninteresting) to prove
    as a goal, and it carries no useful information as a hypothesis.
    But it can be quite useful when defining complex \coqdockw{Prop}s using
    conditionals or as a parameter to higher-order \coqdockw{Prop}s.  We will
    see examples of such uses of \coqdocinductive{True} later on.
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Logical Equivalence}



 The handy ''if and only if`` connective, which asserts that two
    propositions have the same truth value, is just the conjunction of
    two implications. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{MyIff}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{iff} (\coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop}) := (\coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{Q}) \ensuremath{\land} (\coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{P}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "P <-> Q" := (\coqdocvar{iff} \coqdocvar{P} \coqdocvar{Q})\coqdoceol
\coqdocindent{11.00em}
(\coqdoctac{at} \coqdockw{level} 95, \coqdockw{no} \coqdockw{associativity})\coqdoceol
\coqdocindent{11.00em}
: \coqdocvar{type\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{MyIff}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{iff\_sym} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} \ensuremath{\leftrightarrow} \coqdocvar{Q}) \ensuremath{\rightarrow} (\coqdocvar{Q} \ensuremath{\leftrightarrow} \coqdocvar{P}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} [\coqdocvar{HAB} \coqdocvar{HBA}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{HBA}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{HAB}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{not\_true\_iff\_false} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{b} \ensuremath{\not=} \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdocvar{b} = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{not\_true\_is\_false}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{H}. \coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{intros} \coqdocvar{H'}. \coqdoctac{inversion} \coqdocvar{H'}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional (iff\_properties)}

 Using the above proof that \ensuremath{\leftrightarrow} is symmetric (\coqdoclemma{iff\_sym}) as
    a guide, prove that it is also reflexive and transitive. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{iff\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\leftrightarrow} \coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{iff\_trans} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} \ensuremath{\leftrightarrow} \coqdocvar{Q}) \ensuremath{\rightarrow} (\coqdocvar{Q} \ensuremath{\leftrightarrow} \coqdocvar{R}) \ensuremath{\rightarrow} (\coqdocvar{P} \ensuremath{\leftrightarrow} \coqdocvar{R}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (or\_distributes\_over\_and)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{or\_distributes\_over\_and} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\lor} (\coqdocvar{Q} \ensuremath{\land} \coqdocvar{R}) \ensuremath{\leftrightarrow} (\coqdocvar{P} \ensuremath{\lor} \coqdocvar{Q}) \ensuremath{\land} (\coqdocvar{P} \ensuremath{\lor} \coqdocvar{R}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Some of Coq's tactics treat \coqdocdefinition{iff} statements specially, avoiding
    the need for some low-level proof-state manipulation.  In
    particular, \coqdoctac{rewrite} and \coqdoctac{reflexivity} can be used with \coqdocdefinition{iff}
    statements, not just equalities.  To enable this behavior, we need
    to import a special Coq library that allows rewriting with other
    formulas besides equality: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Setoids.Setoid}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here is a simple example demonstrating how these tactics work with
    \coqdocdefinition{iff}.  First, let's prove a couple of basic iff equivalences... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{mult\_0} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{n} \ensuremath{\times} \coqdocvar{m} = 0 \ensuremath{\leftrightarrow} \coqdocvar{n} = 0 \ensuremath{\lor} \coqdocvar{m} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{mult\_eq\_0}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{or\_example}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{or\_assoc} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} : \coqdockw{Prop}, \coqdocvar{P} \ensuremath{\lor} (\coqdocvar{Q} \ensuremath{\lor} \coqdocvar{R}) \ensuremath{\leftrightarrow} (\coqdocvar{P} \ensuremath{\lor} \coqdocvar{Q}) \ensuremath{\lor} \coqdocvar{R}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{intros} [\coqdocvar{H} \ensuremath{|} [\coqdocvar{H} \ensuremath{|} \coqdocvar{H}]].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{left}. \coqdoctac{left}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{left}. \coqdoctac{right}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{right}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{intros} [[\coqdocvar{H} \ensuremath{|} \coqdocvar{H}] \ensuremath{|} \coqdocvar{H}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{left}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{right}. \coqdoctac{left}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{right}. \coqdoctac{right}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can now use these facts with \coqdoctac{rewrite} and \coqdoctac{reflexivity} to
    give smooth proofs of statements involving equivalences.  Here is
    a ternary version of the previous \coqdoclemma{mult\_0} result: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{mult\_0\_3} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}, \coqdocvar{n} \ensuremath{\times} \coqdocvar{m} \ensuremath{\times} \coqdocvar{p} = 0 \ensuremath{\leftrightarrow} \coqdocvar{n} = 0 \ensuremath{\lor} \coqdocvar{m} = 0 \ensuremath{\lor} \coqdocvar{p} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{mult\_0}. \coqdoctac{rewrite} \coqdocvar{mult\_0}. \coqdoctac{rewrite} \coqdocvar{or\_assoc}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{apply} tactic can also be used with \ensuremath{\leftrightarrow}. When given an
    equivalence as its argument, \coqdoctac{apply} tries to guess which side of
    the equivalence to use. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{apply\_iff\_example} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}, \coqdocvar{n} \ensuremath{\times} \coqdocvar{m} = 0 \ensuremath{\rightarrow} \coqdocvar{n} = 0 \ensuremath{\lor} \coqdocvar{m} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{mult\_0}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Existential Quantification}



 Another important logical connective is \textit{existential
    quantification}.  To say that there is some \coqdocabbreviation{x} of type \coqdocdefinition{T} such
    that some property \coqdocaxiom{P} holds of \coqdocabbreviation{x}, we write \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x} : \coqdocdefinition{T},
    \coqdocaxiom{P}. As with \coqdockw{\ensuremath{\forall}}, the type annotation : \coqdocdefinition{T} can be omitted if
    Coq is able to infer from the context what the type of \coqdocabbreviation{x} should
    be. 

 To prove a statement of the form \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x}, \coqdocaxiom{P}, we must show that
    \coqdocaxiom{P} holds for some specific choice of value for \coqdocabbreviation{x}, known as the
    \textit{witness} of the existential.  This is done in two steps: First,
    we explicitly tell Coq which witness \coqdocvariable{t} we have in mind by
    invoking the tactic \coqdoctac{\ensuremath{\exists}} \coqdocvariable{t}.  Then we prove that \coqdocaxiom{P} holds after
    all occurrences of \coqdocabbreviation{x} are replaced by \coqdocvariable{t}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{four\_is\_even} : \coqdoctac{\ensuremath{\exists}} \coqdocvar{n} : \coqdocvar{nat}, 4 = \coqdocvar{n} + \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} 2. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Conversely, if we have an existential hypothesis \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x}, \coqdocaxiom{P} in
    the context, we can destruct it to obtain a witness \coqdocabbreviation{x} and a
    hypothesis stating that \coqdocaxiom{P} holds of \coqdocabbreviation{x}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{exists\_example\_2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{m}, \coqdocvar{n} = 4 + \coqdocvar{m}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{o}, \coqdocvar{n} = 2 + \coqdocvar{o}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} [\coqdocvar{m} \coqdocvar{Hm}]. \coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} (2 + \coqdocvar{m}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{Hm}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (dist\_not\_exists)}

 Prove that ''\coqdocaxiom{P} holds for all \coqdocabbreviation{x}`` implies ''there is no \coqdocabbreviation{x} for
    which \coqdocaxiom{P} does not hold.`` \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{dist\_not\_exists} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{P} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{P} \coqdocvar{x}) \ensuremath{\rightarrow} \ensuremath{\lnot} (\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \ensuremath{\lnot} \coqdocvar{P} \coqdocvar{x}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars (dist\_exists\_or)}

 Prove that existential quantification distributes over
    disjunction. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{dist\_exists\_or} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{P} \coqdocvar{Q} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{P} \coqdocvar{x} \ensuremath{\lor} \coqdocvar{Q} \coqdocvar{x}) \ensuremath{\leftrightarrow} (\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{P} \coqdocvar{x}) \ensuremath{\lor} (\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{Q} \coqdocvar{x}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Programming with Propositions}



 The logical connectives that we have seen provide a rich
    vocabulary for defining complex propositions from simpler ones.
    To illustrate, let's look at how to express the claim that an
    element \coqdocabbreviation{x} occurs in a list \coqdocabbreviation{l}.  Notice that this property has a
    simple recursive structure: 


\begin{itemize}
\item  If \coqdocabbreviation{l} is the empty list, then \coqdocabbreviation{x} cannot occur on it, so the
      property ''\coqdocabbreviation{x} appears in \coqdocabbreviation{l}`` is simply false.



\begin{itemize}
\item  Otherwise, \coqdocabbreviation{l} has the form \coqdocvariable{x'} :: \coqdocvariable{l'}.  In this case, \coqdocabbreviation{x}
      occurs in \coqdocabbreviation{l} if either it is equal to \coqdocvariable{x'} or it occurs in
      \coqdocvariable{l'}.



\end{itemize}
    We can translate this directly into a straightforward recursive
    function from taking an element and a list and returning a
    proposition: 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{In} \{\coqdocvar{A} : \coqdockw{Type}\} (\coqdocvar{x} : \coqdocvar{A}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{A}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{False}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{x'} :: \coqdocvar{l'} \ensuremath{\Rightarrow} \coqdocvar{x'} = \coqdocvar{x} \ensuremath{\lor} \coqdocvar{In} \coqdocvar{x} \coqdocvar{l'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
When \coqdocdefinition{In} is applied to a concrete list, it expands into a
    concrete sequence of nested disjunctions. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{In\_example\_1} : \coqdocvar{In} 4 [1; 2; 3; 4; 5].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdoctac{right}. \coqdoctac{right}. \coqdoctac{right}. \coqdoctac{left}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{In\_example\_2} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{In} \coqdocvar{n} [2; 4] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{n'}, \coqdocvar{n} = 2 \ensuremath{\times} \coqdocvar{n'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} [\coqdocvar{H} \ensuremath{|} [\coqdocvar{H} \ensuremath{|} []]].\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{\ensuremath{\exists}} 1. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{\ensuremath{\exists}} 2. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\end{coqdoccode}
(Notice the use of the empty pattern to discharge the last case
    \textit{en passant}.) 

 We can also prove more generic, higher-level lemmas about \coqdocdefinition{In}.


    Note, in the next, how \coqdocdefinition{In} starts out applied to a variable and
    only gets expanded when we do case analysis on this variable: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{In\_map} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{A} \coqdocvar{B} : \coqdockw{Type}) (\coqdocvar{f} : \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{B}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{A}) (\coqdocvar{x} : \coqdocvar{A}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{In} \coqdocvar{x} \coqdocvar{l} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{In} (\coqdocvar{f} \coqdocvar{x}) (\coqdocvar{map} \coqdocvar{f} \coqdocvar{l}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{A} \coqdocvar{B} \coqdocvar{f} \coqdocvar{l} \coqdocvar{x}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{l} \coqdockw{as} [|\coqdocvar{x'} \coqdocvar{l'} \coqdocvar{IHl'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{intros} [].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{intros} [\coqdocvar{H} \ensuremath{|} \coqdocvar{H}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{left}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{right}. \coqdoctac{apply} \coqdocvar{IHl'}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This way of defining propositions recursively, though convenient
    in some cases, also has some drawbacks.  In particular, it is
    subject to Coq's usual restrictions regarding the definition of
    recursive functions, e.g., the requirement that they be ''obviously
    terminating.``  In the next chapter, we will see how to define
    propositions \textit{inductively}, a different technique with its own set
    of strengths and limitations. 

\paragraph{Exercise: 2 stars (In\_map\_iff)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{In\_map\_iff} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{A} \coqdocvar{B} : \coqdockw{Type}) (\coqdocvar{f} : \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{B}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{A}) (\coqdocvar{y} : \coqdocvar{B}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{In} \coqdocvar{y} (\coqdocvar{map} \coqdocvar{f} \coqdocvar{l}) \ensuremath{\leftrightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{f} \coqdocvar{x} = \coqdocvar{y} \ensuremath{\land} \coqdocvar{In} \coqdocvar{x} \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars (in\_app\_iff)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{in\_app\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} \coqdocvar{l} \coqdocvar{l'} (\coqdocvar{a}:\coqdocvar{A}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{In} \coqdocvar{a} (\coqdocvar{l}++\coqdocvar{l'}) \ensuremath{\leftrightarrow} \coqdocvar{In} \coqdocvar{a} \coqdocvar{l} \ensuremath{\lor} \coqdocvar{In} \coqdocvar{a} \coqdocvar{l'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (All)}

 Recall that functions returning propositions can be seen as
    \textit{properties} of their arguments. For instance, if \coqdocaxiom{P} has type
    \coqdocdefinition{nat} \ensuremath{\rightarrow} \coqdockw{Prop}, then \coqdocaxiom{P} \coqdocabbreviation{n} states that property \coqdocaxiom{P} holds of \coqdocabbreviation{n}.


    Drawing inspiration from \coqdocdefinition{In}, write a recursive function \coqdockw{All}
    stating that some property \coqdocaxiom{P} holds of all elements of a list
    \coqdocabbreviation{l}. To make sure your definition is correct, prove the \coqdoclemma{All\_In}
    lemma below.  (Of course, your definition should \textit{not} just
    restate the left-hand side of \coqdoclemma{All\_In}.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdockw{All} \{\coqdocvar{T} : \coqdockw{Type}\} (\coqdocvar{P} : \coqdocvar{T} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{T}) : \coqdockw{Prop}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{All\_In} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{P} : \coqdocvar{T} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{T}),\coqdoceol
\coqdocindent{2.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{In} \coqdocvar{x} \coqdocvar{l} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{x}) \ensuremath{\leftrightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{All} \coqdocvar{P} \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (combine\_odd\_even)}

 Complete the definition of the \coqdocdefinition{combine\_odd\_even} function below.
    It takes as arguments two properties of numbers, \coqdocvariable{Podd} and
    \coqdocvariable{Peven}, and it should return a property \coqdocaxiom{P} such that \coqdocaxiom{P} \coqdocabbreviation{n} is
    equivalent to \coqdocvariable{Podd} \coqdocabbreviation{n} when \coqdocabbreviation{n} is odd and equivalent to \coqdocvariable{Peven} \coqdocabbreviation{n}
    otherwise. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{combine\_odd\_even} (\coqdocvar{Podd} \coqdocvar{Peven} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}) : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To test your definition, prove the following facts: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{combine\_odd\_even\_intro} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{Podd} \coqdocvar{Peven} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{oddb} \coqdocvar{n} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{Podd} \coqdocvar{n}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{oddb} \coqdocvar{n} = \coqdocvar{false} \ensuremath{\rightarrow} \coqdocvar{Peven} \coqdocvar{n}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{combine\_odd\_even} \coqdocvar{Podd} \coqdocvar{Peven} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{combine\_odd\_even\_elim\_odd} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{Podd} \coqdocvar{Peven} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{combine\_odd\_even} \coqdocvar{Podd} \coqdocvar{Peven} \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{oddb} \coqdocvar{n} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Podd} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{combine\_odd\_even\_elim\_even} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{Podd} \coqdocvar{Peven} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{combine\_odd\_even} \coqdocvar{Podd} \coqdocvar{Peven} \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{oddb} \coqdocvar{n} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Peven} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Applying Theorems to Arguments}



 One feature of Coq that distinguishes it from many other proof
    assistants is that it treats \textit{proofs} as first-class objects.


    There is a great deal to be said about this, but it is not
    necessary to understand it in detail in order to use Coq.  This
    section gives just a taste, while a deeper exploration can be
    found in the optional chapters \coqdoclibrary{ProofObjects} and
    \coqdoclibrary{IndPrinciples}. 

 We have seen that we can use the \coqdockw{Check} command to ask Coq to
    print the type of an expression.  We can also use \coqdockw{Check} to ask
    what theorem a particular identifier refers to. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{plus\_comm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Coq prints the \textit{statement} of the \coqdoclemma{plus\_comm} theorem in the same
    way that it prints the \textit{type} of any term that we ask it to
    \coqdockw{Check}.  Why?


    The reason is that the identifier \coqdoclemma{plus\_comm} actually refers to a
    \textit{proof object} -- a data structure that represents a logical
    derivation establishing of the truth of the statement \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n} \coqdocabbreviation{m}
    : \coqdocdefinition{nat}, \coqdocabbreviation{n} + \coqdocabbreviation{m} = \coqdocabbreviation{m} + \coqdocabbreviation{n}.  The type of this object \textit{is} the statement
    of the theorem that it is a proof of. 

 Intuitively, this makes sense because the statement of a theorem
    tells us what we can use that theorem for, just as the type of a
    computational object tells us what we can do with that object --
    e.g., if we have a term of type \coqdocdefinition{nat} \ensuremath{\rightarrow} \coqdocdefinition{nat} \ensuremath{\rightarrow} \coqdocdefinition{nat}, we can give
    it two \coqdocdefinition{nat}s as arguments and get a \coqdocdefinition{nat} back.  Similarly, if we
    have an object of type \coqdocabbreviation{n} = \coqdocabbreviation{m} \ensuremath{\rightarrow} \coqdocabbreviation{n} + \coqdocabbreviation{n} = \coqdocabbreviation{m} + \coqdocabbreviation{m} and we provide it
    an ''argument`` of type \coqdocabbreviation{n} = \coqdocabbreviation{m}, we can derive \coqdocabbreviation{n} + \coqdocabbreviation{n} = \coqdocabbreviation{m} + \coqdocabbreviation{m}. 

 Operationally, this analogy goes even further: by applying a
    theorem, as if it were a function, to hypotheses with matching
    types, we can specialize its result without having to resort to
    intermediate assertions.  For example, suppose we wanted to prove
    the following result: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{plus\_comm3} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}, \coqdocvar{n} + (\coqdocvar{m} + \coqdocvar{p}) = (\coqdocvar{p} + \coqdocvar{m}) + \coqdocvar{n}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It appears at first sight that we ought to be able to prove this
    by rewriting with \coqdoclemma{plus\_comm} twice to make the two sides match.
    The problem, however, is that the second \coqdoctac{rewrite} will undo the
    effect of the first. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{plus\_comm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{plus\_comm}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
One simple way of fixing this problem, using only tools that we
    already know, is to use \coqdoctac{assert} to derive a specialized version
    of \coqdoclemma{plus\_comm} that can be used to rewrite exactly where we
    want. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{plus\_comm3\_take2} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}, \coqdocvar{n} + (\coqdocvar{m} + \coqdocvar{p}) = (\coqdocvar{p} + \coqdocvar{m}) + \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{plus\_comm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H} : \coqdocvar{m} + \coqdocvar{p} = \coqdocvar{p} + \coqdocvar{m}).\coqdoceol
\coqdocindent{1.00em}
\{ \coqdoctac{rewrite} \coqdocvar{plus\_comm}. \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A more elegant alternative is to apply \coqdoclemma{plus\_comm} directly to the
    arguments we want to instantiate it with, in much the same way as
    we apply a polymorphic function to a type argument. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{plus\_comm3\_take3} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}, \coqdocvar{n} + (\coqdocvar{m} + \coqdocvar{p}) = (\coqdocvar{p} + \coqdocvar{m}) + \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{plus\_comm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} (\coqdocvar{plus\_comm} \coqdocvar{m}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
You can ''use theorems as functions`` in this way with almost all
    tactics that take a theorem name as an argument.  Note also that
    theorem application uses the same inference mechanisms as function
    application; thus, it is possible, for example, to supply
    wildcards as arguments to be inferred, or to declare some
    hypotheses to a theorem as implicit by default.  These features
    are illustrated in the proof below. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{lemma\_application\_ex} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \{\coqdocvar{n} : \coqdocvar{nat}\} \{\coqdocvar{ns} : \coqdocvar{list} \coqdocvar{nat}\},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{In} \coqdocvar{n} (\coqdocvar{map} (\coqdockw{fun} \coqdocvar{m} \ensuremath{\Rightarrow} \coqdocvar{m} \ensuremath{\times} 0) \coqdocvar{ns}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{n} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{ns} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{proj1} \coqdocvar{\_} \coqdocvar{\_} (\coqdocvar{In\_map\_iff} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}) \coqdocvar{H})\coqdoceol
\coqdocindent{5.50em}
\coqdockw{as} [\coqdocvar{m} [\coqdocvar{Hm} \coqdocvar{\_}]].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{mult\_0\_r} \coqdoctac{in} \coqdocvar{Hm}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Hm}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We will see many more examples of the idioms from this section in
    later chapters. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Coq vs. Set Theory}



 Coq's logical core, the \textit{Calculus of Inductive Constructions},
    differs in some important ways from other formal systems that are
    used by mathematicians for writing down precise and rigorous
    proofs.  For example, in the most popular foundation for
    mainstream paper-and-pencil mathematics, Zermelo-Fraenkel Set
    Theory (ZFC), a mathematical object can potentially be a member of
    many different sets; a term in Coq's logic, on the other hand, is
    a member of at most one type.  This difference often leads to
    slightly different ways of capturing informal mathematical
    concepts, but these are, by and large, quite natural and easy to
    work with.  For example, instead of saying that a natural number
    \coqdocabbreviation{n} belongs to the set of even numbers, we would say in Coq that
    \coqdocinductive{ev} \coqdocabbreviation{n} holds, where \coqdocinductive{ev} : \coqdocdefinition{nat} \ensuremath{\rightarrow} \coqdockw{Prop} is a property describing
    even numbers.


    However, there are some cases where translating standard
    mathematical reasoning into Coq can be either cumbersome or
    sometimes even impossible, unless we enrich the core logic with
    additional axioms.  We conclude this chapter with a brief
    discussion of some of the most significant differences between the
    two worlds. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Functional Extensionality}



 The equality assertions that we have seen so far mostly have
    concerned elements of inductive types (\coqdocdefinition{nat}, \coqdocinductive{bool}, etc.).  But
    since Coq's equality operator is polymorphic, these are not the
    only possibilities -- in particular, we can write propositions
    claiming that two \textit{functions} are equal to each other: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{function\_equality\_ex1} : \coqdocvar{plus} 3 = \coqdocvar{plus} (\coqdocvar{pred} 4).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In common mathematical practice, two functions \coqdocabbreviation{f} and \coqdocabbreviation{g} are
    considered equal if they produce the same outputs:


    (forall x, f x = g x) -> f = g


    This is known as the principle of \textit{functional extensionality}.


    Informally speaking, an ''extensional property`` is one that
    pertains to an object's observable behavior.  Thus, functional
    extensionality simply means that a function's identity is
    completely determined by what we can observe from it -- i.e., in
    Coq terms, the results we obtain after applying it.


    Functional extensionality is not part of Coq's basic axioms.  This
    means that some ''reasonable`` propositions are not provable. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{function\_equality\_ex2} :\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{fun} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{plus} \coqdocvar{x} 1) = (\coqdockw{fun} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{plus} 1 \coqdocvar{x}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, we can add functional extensionality to Coq's core logic
    using the \coqdockw{Axiom} command. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Axiom} \coqdocvar{functional\_extensionality} : \coqdockw{\ensuremath{\forall}} \{\coqdocvar{X} \coqdocvar{Y}: \coqdockw{Type}\}\coqdoceol
\coqdocindent{18.00em}
\{\coqdocvar{f} \coqdocvar{g} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{Y}\},\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} (\coqdocvar{x}:\coqdocvar{X}), \coqdocvar{f} \coqdocvar{x} = \coqdocvar{g} \coqdocvar{x}) \ensuremath{\rightarrow} \coqdocvar{f} = \coqdocvar{g}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Using \coqdockw{Axiom} has the same effect as stating a theorem and
    skipping its proof using \coqdocvar{Admitted}, but it alerts the reader that
    this isn't just something we're going to come back and fill in
    later!


    We can now invoke functional extensionality in proofs: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{function\_equality\_ex2} :\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{fun} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{plus} \coqdocvar{x} 1) = (\coqdockw{fun} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{plus} 1 \coqdocvar{x}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{functional\_extensionality}. \coqdoctac{intros} \coqdocvar{x}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{plus\_comm}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Naturally, we must be careful when adding new axioms into Coq's
    logic, as they may render it \textit{inconsistent} -- that is, they may
    make it possible to prove every proposition, including \coqdocinductive{False}!


    Unfortunately, there is no simple way of telling whether an axiom
    is safe to add: hard work is generally required to establish the
    consistency of any particular combination of axioms.


    However, it is known that adding functional extensionality, in
    particular, \textit{is} consistent.


    To check whether a particular proof relies on any additional
    axioms, use the \coqdockw{Print} \coqdockw{Assumptions} command.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Print} \coqdockw{Assumptions} \coqdocvar{function\_equality\_ex2}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 4 stars (tr\_rev)}

 One problem with the definition of the list-reversing function
    \coqdocdefinition{rev} that we have is that it performs a call to \coqdocdefinition{app} on each
    step; running \coqdocdefinition{app} takes time asymptotically linear in the size
    of the list, which means that \coqdocdefinition{rev} has quadratic running time.
    We can improve this with the following definition: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{rev\_append} \{\coqdocvar{X}\} (\coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{list} \coqdocvar{X}) : \coqdocvar{list} \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l1} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{l2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{x} :: \coqdocvar{l1'} \ensuremath{\Rightarrow} \coqdocvar{rev\_append} \coqdocvar{l1'} (\coqdocvar{x} :: \coqdocvar{l2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{tr\_rev} \{\coqdocvar{X}\} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}) : \coqdocvar{list} \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rev\_append} \coqdocvar{l} [].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This version is said to be \textit{tail-recursive}, because the recursive
    call to the function is the last operation that needs to be
    performed (i.e., we don't have to execute ++ after the recursive
    call); a decent compiler will generate very efficient code in this
    case.  Prove that the two definitions are indeed equivalent. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{tr\_rev\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{X}, @\coqdocvar{tr\_rev} \coqdocvar{X} = @\coqdocvar{rev} \coqdocvar{X}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Propositions and Booleans}



 We've seen two different ways of encoding logical facts in Coq:
    with \textit{booleans} (of type \coqdocinductive{bool}), and with \textit{propositions} (of type
    \coqdockw{Prop}).


    For instance, to claim that a number \coqdocabbreviation{n} is even, we can say
    either

\begin{itemize}
\item  (1) that \coqdocdefinition{evenb} \coqdocabbreviation{n} returns \coqdocconstructor{true}, or

\item  (2) that there exists some \coqdocabbreviation{k} such that \coqdocabbreviation{n} = \coqdocdefinition{double} \coqdocabbreviation{k}.
             Indeed, these two notions of evenness are equivalent, as
             can easily be shown with a couple of auxiliary lemmas.

\end{itemize}


    We often say that the boolean \coqdocdefinition{evenb} \coqdocabbreviation{n} \textit{reflects} the proposition
    \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{k}, \coqdocabbreviation{n} = \coqdocdefinition{double} \coqdocabbreviation{k}.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{evenb\_double} : \coqdockw{\ensuremath{\forall}} \coqdocvar{k}, \coqdocvar{evenb} (\coqdocvar{double} \coqdocvar{k}) = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{k}. \coqdoctac{induction} \coqdocvar{k} \coqdockw{as} [|\coqdocvar{k'} \coqdocvar{IHk'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{simpl}. \coqdoctac{apply} \coqdocvar{IHk'}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars (evenb\_double\_conv)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{evenb\_double\_conv} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{k}, \coqdocvar{n} = \coqdockw{if} \coqdocvar{evenb} \coqdocvar{n} \coqdockw{then} \coqdocvar{double} \coqdocvar{k}\coqdoceol
\coqdocindent{8.00em}
\coqdockw{else} \coqdocvar{S} (\coqdocvar{double} \coqdocvar{k}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{even\_bool\_prop} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{evenb} \coqdocvar{n} = \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{k}, \coqdocvar{n} = \coqdocvar{double} \coqdocvar{k}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{intros} \coqdocvar{H}. \coqdoctac{destruct} (\coqdocvar{evenb\_double\_conv} \coqdocvar{n}) \coqdockw{as} [\coqdocvar{k} \coqdocvar{Hk}].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{Hk}. \coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{k}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{intros} [\coqdocvar{k} \coqdocvar{Hk}]. \coqdoctac{rewrite} \coqdocvar{Hk}. \coqdoctac{apply} \coqdocvar{evenb\_double}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Similarly, to state that two numbers \coqdocabbreviation{n} and \coqdocabbreviation{m} are equal, we can
    say either (1) that \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} \coqdocabbreviation{m} returns \coqdocconstructor{true} or (2) that \coqdocabbreviation{n} =
    \coqdocabbreviation{m}.  These two notions are equivalent. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_nat\_true\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} \coqdocvar{n1} \coqdocvar{n2} = \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdocvar{n1} = \coqdocvar{n2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n1} \coqdocvar{n2}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{beq\_nat\_true}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{intros} \coqdocvar{H}. \coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_nat\_refl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, while the boolean and propositional formulations of a
    claim are equivalent from a purely logical perspective, they need
    not be equivalent \textit{operationally}.  Equality provides an extreme
    example: knowing that \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} \coqdocabbreviation{m} = \coqdocconstructor{true} is generally of little
    direct help in the middle of a proof involving \coqdocabbreviation{n} and \coqdocabbreviation{m};
    however, if we convert the statement to the equivalent form \coqdocabbreviation{n} =
    \coqdocabbreviation{m}, we can rewrite with it.


    The case of even numbers is also interesting.  Recall that,
    when proving the backwards direction of \coqdoclemma{even\_bool\_prop} (i.e.,
    \coqdoclemma{evenb\_double}, going from the propositional to the boolean
    claim), we used a simple induction on \coqdocabbreviation{k}.  On the other hand, the
    converse (the \coqdoclemma{evenb\_double\_conv} exercise) required a clever
    generalization, since we can't directly prove (\coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{k}, \coqdocabbreviation{n} =
    \coqdocdefinition{double} \coqdocabbreviation{k}) \ensuremath{\rightarrow} \coqdocdefinition{evenb} \coqdocabbreviation{n} = \coqdocconstructor{true}.


    For these examples, the propositional claims are more useful than
    their boolean counterparts, but this is not always the case.  For
    instance, we cannot test whether a general proposition is true or
    not in a function definition; as a consequence, the following code
    fragment is rejected: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdocvar{Fail} \coqdockw{Definition} \coqdocvar{is\_even\_prime} \coqdocvar{n} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{if} \coqdocvar{n} = 2 \coqdockw{then} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{else} \coqdocvar{false}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Coq complains that \coqdocabbreviation{n} = 2 has type \coqdockw{Prop}, while it expects an
    elements of \coqdocinductive{bool} (or some other inductive type with two
    elements).  The reason for this error message has to do with the
    \textit{computational} nature of Coq's core language, which is designed
    so that every function that it can express is computable and
    total.  One reason for this is to allow the extraction of
    executable programs from Coq developments.  As a consequence,
    \coqdockw{Prop} in Coq does \textit{not} have a universal case analysis operation
    telling whether any given proposition is true or false, since such
    an operation would allow us to write non-computable functions.


    Although general non-computable properties cannot be phrased as
    boolean computations, it is worth noting that even many
    \textit{computable} properties are easier to express using \coqdockw{Prop} than
    \coqdocinductive{bool}, since recursive function definitions are subject to
    significant restrictions in Coq.  For instance, the next chapter
    shows how to define the property that a regular expression matches
    a given string using \coqdockw{Prop}.  Doing the same with \coqdocinductive{bool} would
    amount to writing a regular expression matcher, which would be
    more complicated, harder to understand, and harder to reason
    about.


    Conversely, an important side benefit of stating facts using
    booleans is enabling some proof automation through computation
    with Coq terms, a technique known as \textit{proof by
    reflection}.  Consider the following statement: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{even\_1000} : \coqdoctac{\ensuremath{\exists}} \coqdocvar{k}, 1000 = \coqdocvar{double} \coqdocvar{k}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The most direct proof of this fact is to give the value of \coqdocabbreviation{k}
    explicitly. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{\ensuremath{\exists}} 500. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
On the other hand, the proof of the corresponding boolean
    statement is even simpler: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{even\_1000'} : \coqdocvar{evenb} 1000 = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
What is interesting is that, since the two notions are equivalent,
    we can use the boolean formulation to prove the other one without
    mentioning the value 500 explicitly: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{even\_1000'{}'} : \coqdoctac{\ensuremath{\exists}} \coqdocvar{k}, 1000 = \coqdocvar{double} \coqdocvar{k}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{apply} \coqdocvar{even\_bool\_prop}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Although we haven't gained much in terms of proof size in this
    case, larger proofs can often be made considerably simpler by the
    use of reflection.  As an extreme example, the Coq proof of the
    famous \textit{4-color theorem} uses reflection to reduce the analysis of
    hundreds of different cases to a boolean computation.  We won't
    cover reflection in great detail, but it serves as a good example
    showing the complementary strengths of booleans and general
    propositions. 

\paragraph{Exercise: 2 stars (logical\_connectives)}

 The following lemmas relate the propositional connectives studied
    in this chapter to the corresponding boolean operations. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{andb\_true\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b1} \coqdocvar{b2}:\coqdocvar{bool},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{b1} \&\& \coqdocvar{b2} = \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\land} \coqdocvar{b2} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{orb\_true\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b1} \coqdocvar{b2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{b1} || \coqdocvar{b2} = \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\lor} \coqdocvar{b2} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star (beq\_nat\_false\_iff)}

 The following theorem is an alternate ''negative`` formulation of
    \coqdoclemma{beq\_nat\_true\_iff} that is more convenient in certain
    situations (we'll see examples in later chapters). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_nat\_false\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_nat} \coqdocvar{x} \coqdocvar{y} = \coqdocvar{false} \ensuremath{\leftrightarrow} \coqdocvar{x} \ensuremath{\not=} \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (beq\_list)}

 Given a boolean operator \coqdocvariable{beq} for testing equality of elements of
    some type \coqdocabbreviation{A}, we can define a function \coqdocdefinition{beq\_list} \coqdocvariable{beq} for testing
    equality of lists with elements in \coqdocabbreviation{A}.  Complete the definition
    of the \coqdocdefinition{beq\_list} function below.  To make sure that your
    definition is correct, prove the lemma \coqdoclemma{beq\_list\_true\_iff}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{beq\_list} \{\coqdocvar{A} : \coqdockw{Type}\} (\coqdocvar{beq} : \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{bool})\coqdoceol
\coqdocindent{9.00em}
(\coqdocvar{l1} \coqdocvar{l2} : \coqdocvar{list} \coqdocvar{A}) : \coqdocvar{bool}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{beq\_list\_true\_iff} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{A} (\coqdocvar{beq} : \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{bool}),\coqdoceol
\coqdocindent{2.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{a1} \coqdocvar{a2}, \coqdocvar{beq} \coqdocvar{a1} \coqdocvar{a2} = \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdocvar{a1} = \coqdocvar{a2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{l1} \coqdocvar{l2}, \coqdocvar{beq\_list} \coqdocvar{beq} \coqdocvar{l1} \coqdocvar{l2} = \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdocvar{l1} = \coqdocvar{l2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, recommended (All\_forallb)}

 Recall the function \coqdocdefinition{forallb}, from the exercise
    \coqdocvar{forall\_exists\_challenge} in chapter \coqdoclibrary{Tactics}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{forallb} \{\coqdocvar{X} : \coqdockw{Type}\} (\coqdocvar{test} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{bool}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{x} :: \coqdocvar{l'} \ensuremath{\Rightarrow} \coqdocvar{andb} (\coqdocvar{test} \coqdocvar{x}) (\coqdocvar{forallb} \coqdocvar{test} \coqdocvar{l'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Prove the theorem below, which relates \coqdocdefinition{forallb} to the \coqdockw{All}
    property of the above exercise. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{forallb\_true\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{X} \coqdocvar{test} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{forallb} \coqdocvar{test} \coqdocvar{l} = \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdockw{All} (\coqdockw{fun} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{test} \coqdocvar{x} = \coqdocvar{true}) \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Are there any important properties of the function \coqdocdefinition{forallb} which
    are not captured by this specification? \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Classical vs. Constructive Logic}



 We have seen that it is not possible to test whether or not a
    proposition \coqdocaxiom{P} holds while defining a Coq function.  You may be
    surprised to learn that a similar restriction applies to \textit{proofs}!
    In other words, the following intuitive reasoning principle is not
    derivable in Coq: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{excluded\_middle} := \coqdockw{\ensuremath{\forall}} \coqdocvar{P} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\lor} \ensuremath{\lnot} \coqdocvar{P}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To understand operationally why this is the case, recall
    that, to prove a statement of the form \coqdocaxiom{P} \ensuremath{\lor} \coqdocvariable{Q}, we use the \coqdoctac{left}
    and \coqdoctac{right} tactics, which effectively require knowing which side
    of the disjunction holds.  But the universally quantified \coqdocaxiom{P} in
    \coqdocdefinition{excluded\_middle} is an \textit{arbitrary} proposition, which we know
    nothing about.  We don't have enough information to choose which
    of \coqdoctac{left} or \coqdoctac{right} to apply, just as Coq doesn't have enough
    information to mechanically decide whether \coqdocaxiom{P} holds or not inside
    a function. 

 However, if we happen to know that \coqdocaxiom{P} is reflected in some
    boolean term \coqdocconstructor{b}, then knowing whether it holds or not is trivial:
    we just have to check the value of \coqdocconstructor{b}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{restricted\_excluded\_middle} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{b},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} \ensuremath{\leftrightarrow} \coqdocvar{b} = \coqdocvar{true}) \ensuremath{\rightarrow} \coqdocvar{P} \ensuremath{\lor} \ensuremath{\lnot} \coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} [] \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{left}. \coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{right}. \coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{intros} \coqdocvar{contra}. \coqdoctac{inversion} \coqdocvar{contra}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In particular, the excluded middle is valid for equations \coqdocabbreviation{n} = \coqdocabbreviation{m},
    between natural numbers \coqdocabbreviation{n} and \coqdocabbreviation{m}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{restricted\_excluded\_middle\_eq} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{m} \ensuremath{\lor} \coqdocvar{n} \ensuremath{\not=} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{restricted\_excluded\_middle} (\coqdocvar{n} = \coqdocvar{m}) (\coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{m})).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{symmetry}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{beq\_nat\_true\_iff}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It may seem strange that the general excluded middle is not
    available by default in Coq; after all, any given claim must be
    either true or false.  Nonetheless, there is an advantage in not
    assuming the excluded middle: statements in Coq can make stronger
    claims than the analogous statements in standard mathematics.
    Notably, if there is a Coq proof of \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x}, \coqdocaxiom{P} \coqdocabbreviation{x}, it is
    possible to explicitly exhibit a value of \coqdocabbreviation{x} for which we can
    prove \coqdocaxiom{P} \coqdocabbreviation{x} -- in other words, every proof of existence is
    necessarily \textit{constructive}. 

 Logics like Coq's, which do not assume the excluded middle, are
    referred to as \textit{constructive logics}.


    More conventional logical systems such as ZFC, in which the
    excluded middle does hold for arbitrary propositions, are referred
    to as \textit{classical}. 

 The following example illustrates why assuming the excluded middle
    may lead to non-constructive proofs:


    \textit{Claim}: There exist irrational numbers \coqdocabbreviation{a} and \coqdocconstructor{b} such that \coqdocabbreviation{a} \^{}
    \coqdocconstructor{b} is rational.


    \textit{Proof}: It is not difficult to show that \coqdocvar{sqrt} 2 is irrational.
    If \coqdocvar{sqrt} 2 \^{} \coqdocvar{sqrt} 2 is rational, it suffices to take \coqdocabbreviation{a} = \coqdocconstructor{b} =
    \coqdocvar{sqrt} 2 and we are done.  Otherwise, \coqdocvar{sqrt} 2 \^{} \coqdocvar{sqrt} 2 is
    irrational.  In this case, we can take \coqdocabbreviation{a} = \coqdocvar{sqrt} 2 \^{} \coqdocvar{sqrt} 2 and
    \coqdocconstructor{b} = \coqdocvar{sqrt} 2, since \coqdocabbreviation{a} \^{} \coqdocconstructor{b} = \coqdocvar{sqrt} 2 \^{} (\coqdocvar{sqrt} 2 \ensuremath{\times} \coqdocvar{sqrt} 2) = \coqdocvar{sqrt} 2 \^{}
    2 = 2.  \ensuremath{\Box}


    Do you see what happened here?  We used the excluded middle to
    consider separately the cases where \coqdocvar{sqrt} 2 \^{} \coqdocvar{sqrt} 2 is rational
    and where it is not, without knowing which one actually holds!
    Because of that, we wind up knowing that such \coqdocabbreviation{a} and \coqdocconstructor{b} exist
    but we cannot determine what their actual values are (at least,
    using this line of argument).


    As useful as constructive logic is, it does have its limitations:
    There are many statements that can easily be proven in classical
    logic but that have much more complicated constructive proofs, and
    there are some that are known to have no constructive proof at
    all!  Fortunately, like functional extensionality, the excluded
    middle is known to be compatible with Coq's logic, allowing us to
    add it safely as an axiom.  However, we will not need to do so in
    this book: the results that we cover can be developed entirely
    within constructive logic at negligible extra cost.


    It takes some practice to understand which proof techniques must
    be avoided in constructive reasoning, but arguments by
    contradiction, in particular, are infamous for leading to
    non-constructive proofs.  Here's a typical example: suppose that
    we want to show that there exists \coqdocabbreviation{x} with some property \coqdocaxiom{P},
    i.e., such that \coqdocaxiom{P} \coqdocabbreviation{x}.  We start by assuming that our conclusion
    is false; that is, \ensuremath{\lnot} \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x}, \coqdocaxiom{P} \coqdocabbreviation{x}. From this premise, it is not
    hard to derive \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{x}, \ensuremath{\lnot} \coqdocaxiom{P} \coqdocabbreviation{x}.  If we manage to show that this
    intermediate fact results in a contradiction, we arrive at an
    existence proof without ever exhibiting a value of \coqdocabbreviation{x} for which
    \coqdocaxiom{P} \coqdocabbreviation{x} holds!


    The technical flaw here, from a constructive standpoint, is that
    we claimed to prove \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x}, \coqdocaxiom{P} \coqdocabbreviation{x} using a proof of
    \ensuremath{\lnot} \ensuremath{\lnot} (\coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x}, \coqdocaxiom{P} \coqdocabbreviation{x}).  Allowing ourselves to remove double
    negations from arbitrary statements is equivalent to assuming the
    excluded middle, as shown in one of the exercises below.  Thus,
    this line of reasoning cannot be encoded in Coq without assuming
    additional axioms. 

\paragraph{Exercise: 3 stars (excluded\_middle\_irrefutable)}

 The consistency of Coq with the general excluded middle axiom
    requires complicated reasoning that cannot be carried out within
    Coq itself.  However, the following theorem implies that it is
    always safe to assume a decidability axiom (i.e., an instance of
    excluded middle) for any \textit{particular} Prop \coqdocaxiom{P}.  Why? Because we
    cannot prove the negation of such an axiom; if we could, we would
    have both \ensuremath{\lnot} (\coqdocaxiom{P} \ensuremath{\lor} \ensuremath{\lnot}\coqdocaxiom{P}) and \ensuremath{\lnot} \ensuremath{\lnot} (\coqdocaxiom{P} \ensuremath{\lor} \ensuremath{\lnot}\coqdocaxiom{P}), a contradiction. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{excluded\_middle\_irrefutable}:  \coqdockw{\ensuremath{\forall}} (\coqdocvar{P}:\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \ensuremath{\lnot} (\coqdocvar{P} \ensuremath{\lor} \ensuremath{\lnot} \coqdocvar{P}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advanced (not\_exists\_dist)}

 It is a theorem of classical logic that the following two
    assertions are equivalent:


    \~{} (exists x, \~{} P x)
    forall x, P x


    The \coqdoclemma{dist\_not\_exists} theorem above proves one side of this
    equivalence. Interestingly, the other direction cannot be proved
    in constructive logic. Your job is to show that it is implied by
    the excluded middle. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{not\_exists\_dist} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{excluded\_middle} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{P} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdockw{Prop}),\coqdoceol
\coqdocindent{2.00em}
\ensuremath{\lnot} (\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \ensuremath{\lnot} \coqdocvar{P} \coqdocvar{x}) \ensuremath{\rightarrow} (\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{P} \coqdocvar{x}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars, optional (classical\_axioms)}

 For those who like a challenge, here is an exercise taken from the
    Coq'Art book by Bertot and Casteran (p. 123).  Each of the
    following four statements, together with \coqdocdefinition{excluded\_middle}, can be
    considered as characterizing classical logic.  We can't prove any
    of them in Coq, but we can consistently add any one of them as an
    axiom if we wish to work in classical logic.


    Prove that all five propositions (these four plus
    \coqdocdefinition{excluded\_middle}) are equivalent. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{peirce} := \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q}: \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{P}\ensuremath{\rightarrow}\coqdocvar{Q})->\coqdocvar{P})->\coqdocvar{P}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{double\_negation\_elimination} := \coqdockw{\ensuremath{\forall}} \coqdocvar{P}:\coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\~{}\~{}\coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{P}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{de\_morgan\_not\_and\_not} := \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q}:\coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\~{}(\~{}\coqdocvar{P} \ensuremath{\land} \ensuremath{\lnot}\coqdocvar{Q}) \ensuremath{\rightarrow} \coqdocvar{P}\ensuremath{\lor}\coqdocvar{Q}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{implies\_to\_or} := \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q}:\coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P}\ensuremath{\rightarrow}\coqdocvar{Q}) \ensuremath{\rightarrow} (\~{}\coqdocvar{P}\ensuremath{\lor}\coqdocvar{Q}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-12-18 16:20:32 -0500 (Sun, 18 Dec 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.IndProp}{Library }{Top.IndProp}

\begin{coqdoccode}
\end{coqdoccode}
\section{IndProp: Inductively Defined Propositions}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Export} \coqdocvar{Logic}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Inductively Defined Propositions}



 In the \coqdoclibrary{Logic} chapter, we looked at several ways of writing
    propositions, including conjunction, disjunction, and quantifiers.
    In this chapter, we bring a new tool into the mix: \textit{inductive
    definitions}.


    Recall that we have seen two ways of stating that a number \coqdocabbreviation{n} is
    even: We can say (1) \coqdocdefinition{evenb} \coqdocabbreviation{n} = \coqdocconstructor{true}, or (2) \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{k}, \coqdocabbreviation{n} =
    \coqdocdefinition{double} \coqdocabbreviation{k}.  Yet another possibility is to say that \coqdocabbreviation{n} is even if
    we can establish its evenness from the following rules:



\begin{itemize}
\item  Rule \coqdocconstructor{ev\_0}:  The number 0 is even.

\item  Rule \coqdocconstructor{ev\_SS}: If \coqdocabbreviation{n} is even, then \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocabbreviation{n}) is even. 
\end{itemize}


 To illustrate how this definition of evenness works, let's
    imagine using it to show that 4 is even. By rule \coqdocconstructor{ev\_SS}, it
    suffices to show that 2 is even. This, in turn, is again
    guaranteed by rule \coqdocconstructor{ev\_SS}, as long as we can show that 0 is
    even. But this last fact follows directly from the \coqdocconstructor{ev\_0} rule. 

 We will see many definitions like this one during the rest
    of the course.  For purposes of informal discussions, it is
    helpful to have a lightweight notation that makes them easy to
    read and write.  \textit{Inference rules} are one such notation: \par
\noindent\hrulefill\par
\noindent{}                        (ev\_0)
                                 ev 0


                                  ev n
\par
\noindent\hrulefill\par
\noindent{}                      (ev\_SS)
                              ev (S (S n))


 Each of the textual rules above is reformatted here as an
    inference rule; the intended reading is that, if the \textit{premises}
    above the line all hold, then the \textit{conclusion} below the line
    follows.  For example, the rule \coqdocconstructor{ev\_SS} says that, if \coqdocabbreviation{n}
    satisfies \coqdocinductive{ev}, then \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocabbreviation{n}) also does.  If a rule has no
    premises above the line, then its conclusion holds
    unconditionally.


    We can represent a proof using these rules by combining rule
    applications into a \textit{proof tree}. Here's how we might transcribe
    the above proof that 4 is even: \par
\noindent\hrulefill\par
\noindent{}  (ev\_0)
                              ev 0
\par
\noindent\hrulefill\par
\noindent{} (ev\_SS)
                              ev 2
\par
\noindent\hrulefill\par
\noindent{} (ev\_SS)
                              ev 4


 Why call this a ''tree`` (rather than a ''stack``, for example)?
    Because, in general, inference rules can have multiple premises.
    We will see examples of this below. 

 Putting all of this together, we can translate the definition of
    evenness into a formal Coq definition using an \coqdockw{Inductive}
    declaration, where each constructor corresponds to an inference
    rule: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ev} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{ev\_0} : \coqdocvar{ev} 0\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{ev\_SS} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} : \coqdocvar{nat}, \coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This definition is different in one crucial respect from
    previous uses of \coqdockw{Inductive}: its result is not a \coqdockw{Type}, but
    rather a function from \coqdocdefinition{nat} to \coqdockw{Prop} -- that is, a property of
    numbers.  Note that we've already seen other inductive definitions
    that result in functions, such as \coqdocinductive{list}, whose type is \coqdockw{Type} \ensuremath{\rightarrow}
    \coqdockw{Type}.  What is new here is that, because the \coqdocdefinition{nat} argument of
    \coqdocinductive{ev} appears \textit{unnamed}, to the \textit{right} of the colon, it is allowed
    to take different values in the types of different constructors:
    0 in the type of \coqdocconstructor{ev\_0} and \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocabbreviation{n}) in the type of \coqdocconstructor{ev\_SS}.


    In contrast, the definition of \coqdocinductive{list} names the \coqdocdefinition{X} parameter
    \textit{globally}, to the \textit{left} of the colon, forcing the result of
    \coqdocconstructor{nil} and \coqdocconstructor{cons} to be the same (\coqdocinductive{list} \coqdocdefinition{X}).  Had we tried to bring
    \coqdocdefinition{nat} to the left in defining \coqdocinductive{ev}, we would have seen an error: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdocvar{Fail} \coqdockw{Inductive} \coqdocvar{wrong\_ev} (\coqdocvar{n} : \coqdocvar{nat}) : \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{wrong\_ev\_0} : \coqdocvar{wrong\_ev} 0\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{wrong\_ev\_SS} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{wrong\_ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{wrong\_ev} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(''Parameter`` here is Coq jargon for an argument on the left of the
    colon in an \coqdockw{Inductive} definition; ''index`` is used to refer to
    arguments on the right of the colon.) 

 We can think of the definition of \coqdocinductive{ev} as defining a Coq property
    \coqdocinductive{ev} : \coqdocdefinition{nat} \ensuremath{\rightarrow} \coqdockw{Prop}, together with theorems \coqdocconstructor{ev\_0} : \coqdocinductive{ev} 0 and
    \coqdocconstructor{ev\_SS} : \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n}, \coqdocinductive{ev} \coqdocabbreviation{n} \ensuremath{\rightarrow} \coqdocinductive{ev} (\coqdocconstructor{S} (\coqdocconstructor{S} \coqdocabbreviation{n})).  Such ''constructor
    theorems`` have the same status as proven theorems.  In particular,
    we can use Coq's \coqdoctac{apply} tactic with the rule names to prove \coqdocinductive{ev}
    for particular numbers... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_4} : \coqdocvar{ev} 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{apply} \coqdocvar{ev\_SS}. \coqdoctac{apply} \coqdocvar{ev\_SS}. \coqdoctac{apply} \coqdocvar{ev\_0}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... or we can use function application syntax: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_4'} : \coqdocvar{ev} 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{apply} (\coqdocvar{ev\_SS} 2 (\coqdocvar{ev\_SS} 0 \coqdocvar{ev\_0})). \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can also prove theorems that have hypotheses involving \coqdocinductive{ev}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_plus4} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev} (4 + \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{Hn}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ev\_SS}. \coqdoctac{apply} \coqdocvar{ev\_SS}. \coqdoctac{apply} \coqdocvar{Hn}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
More generally, we can show that any number multiplied by 2 is even: 

\paragraph{Exercise: 1 star (ev\_double)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_double} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} (\coqdocvar{double} \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Using Evidence in Proofs}



 Besides \textit{constructing} evidence that numbers are even, we can also
    \textit{reason about} such evidence.


    Introducing \coqdocinductive{ev} with an \coqdockw{Inductive} declaration tells Coq not
    only that the constructors \coqdocconstructor{ev\_0} and \coqdocconstructor{ev\_SS} are valid ways to
    build evidence that some number is even, but also that these two
    constructors are the \textit{only} ways to build evidence that numbers
    are even (in the sense of \coqdocinductive{ev}). 

 In other words, if someone gives us evidence \coqdocvar{E} for the assertion
    \coqdocinductive{ev} \coqdocabbreviation{n}, then we know that \coqdocvar{E} must have one of two shapes:



\begin{itemize}
\item  \coqdocvar{E} is \coqdocconstructor{ev\_0} (and \coqdocabbreviation{n} is \coqdocconstructor{O}), or

\item  \coqdocvar{E} is \coqdocconstructor{ev\_SS} \coqdocvariable{n'} \coqdocvar{E'} (and \coqdocabbreviation{n} is \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocvariable{n'}), where \coqdocvar{E'} is
        evidence for \coqdocinductive{ev} \coqdocvariable{n'}). 
\end{itemize}


 This suggests that it should be possible to analyze a hypothesis
    of the form \coqdocinductive{ev} \coqdocabbreviation{n} much as we do inductively defined data
    structures; in particular, it should be possible to argue by
    \textit{induction} and \textit{case analysis} on such evidence.  Let's look at a
    few examples to see what this means in practice. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Inversion on Evidence}



 Suppose we are proving some fact involving a number \coqdocabbreviation{n}, and we
    are given \coqdocinductive{ev} \coqdocabbreviation{n} as a hypothesis.  We already know how to perform
    case analysis on \coqdocabbreviation{n} using the \coqdoctac{inversion} tactic, generating
    separate subgoals for the case where \coqdocabbreviation{n} = \coqdocconstructor{O} and the case where \coqdocabbreviation{n}
    = \coqdocconstructor{S} \coqdocvariable{n'} for some \coqdocvariable{n'}.  But for some proofs we may instead want to
    analyze the evidence that \coqdocinductive{ev} \coqdocabbreviation{n} \textit{directly}.


    By the definition of \coqdocinductive{ev}, there are two cases to consider:



\begin{itemize}
\item  If the evidence is of the form \coqdocconstructor{ev\_0}, we know that \coqdocabbreviation{n} = 0.



\item  Otherwise, the evidence must have the form \coqdocconstructor{ev\_SS} \coqdocvariable{n'} \coqdocvar{E'}, where
      \coqdocabbreviation{n} = \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocvariable{n'}) and \coqdocvar{E'} is evidence for \coqdocinductive{ev} \coqdocvariable{n'}. 
\end{itemize}


 We can perform this kind of reasoning in Coq, again using
    the \coqdoctac{inversion} tactic.  Besides allowing us to reason about
    equalities involving constructors, \coqdoctac{inversion} provides a
    case-analysis principle for inductively defined propositions.
    When used in this way, its syntax is similar to \coqdoctac{destruct}: We
    pass it a list of identifiers separated by \ensuremath{|} characters to name
    the arguments to each of the possible constructors.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_minus2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev} (\coqdocvar{pred} (\coqdocvar{pred} \coqdocvar{n})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{E}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{E} \coqdockw{as} [| \coqdocvar{n'} \coqdocvar{E'}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{apply} \coqdocvar{ev\_0}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{apply} \coqdocvar{E'}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In words, here is how the inversion reasoning works in this proof:



\begin{itemize}
\item  If the evidence is of the form \coqdocconstructor{ev\_0}, we know that \coqdocabbreviation{n} = 0.
      Therefore, it suffices to show that \coqdocinductive{ev} (\coqdocdefinition{pred} (\coqdocdefinition{pred} 0)) holds.
      By the definition of \coqdocdefinition{pred}, this is equivalent to showing that
      \coqdocinductive{ev} 0 holds, which directly follows from \coqdocconstructor{ev\_0}.



\item  Otherwise, the evidence must have the form \coqdocconstructor{ev\_SS} \coqdocvariable{n'} \coqdocvar{E'}, where
      \coqdocabbreviation{n} = \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocvariable{n'}) and \coqdocvar{E'} is evidence for \coqdocinductive{ev} \coqdocvariable{n'}.  We must then
      show that \coqdocinductive{ev} (\coqdocdefinition{pred} (\coqdocdefinition{pred} (\coqdocconstructor{S} (\coqdocconstructor{S} \coqdocvariable{n'})))) holds, which, after
      simplification, follows directly from \coqdocvar{E'}. 
\end{itemize}


 This particular proof also works if we replace \coqdoctac{inversion} by
    \coqdoctac{destruct}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_minus2'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev} (\coqdocvar{pred} (\coqdocvar{pred} \coqdocvar{n})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{E}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{E} \coqdockw{as} [| \coqdocvar{n'} \coqdocvar{E'}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{apply} \coqdocvar{ev\_0}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{apply} \coqdocvar{E'}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The difference between the two forms is that \coqdoctac{inversion} is more
    convenient when used on a hypothesis that consists of an inductive
    property applied to a complex expression (as opposed to a single
    variable).  Here's is a concrete example.  Suppose that we wanted
    to prove the following variation of \coqdoclemma{ev\_minus2}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{evSS\_ev} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})) \ensuremath{\rightarrow} \coqdocvar{ev} \coqdocvar{n}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Intuitively, we know that evidence for the hypothesis cannot
    consist just of the \coqdocconstructor{ev\_0} constructor, since \coqdocconstructor{O} and \coqdocconstructor{S} are
    different constructors of the type \coqdocdefinition{nat}; hence, \coqdocconstructor{ev\_SS} is the
    only case that applies.  Unfortunately, \coqdoctac{destruct} is not smart
    enough to realize this, and it still generates two subgoals.  Even
    worse, in doing so, it keeps the final goal unchanged, failing to
    provide any useful information for completing the proof.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{E}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{E} \coqdockw{as} [| \coqdocvar{n'} \coqdocvar{E'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
What happened, exactly?  Calling \coqdoctac{destruct} has the effect of
    replacing all occurrences of the property argument by the values
    that correspond to each constructor.  This is enough in the case
    of \coqdoclemma{ev\_minus2'} because that argument, \coqdocabbreviation{n}, is mentioned directly
    in the final goal. However, it doesn't help in the case of
    \coqdoclemma{evSS\_ev} since the term that gets replaced (\coqdocconstructor{S} (\coqdocconstructor{S} \coqdocabbreviation{n})) is not
    mentioned anywhere. 

 The \coqdoctac{inversion} tactic, on the other hand, can detect (1) that the
    first case does not apply, and (2) that the \coqdocvariable{n'} that appears on
    the \coqdocconstructor{ev\_SS} case must be the same as \coqdocabbreviation{n}.  This allows us to
    complete the proof: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{evSS\_ev} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})) \ensuremath{\rightarrow} \coqdocvar{ev} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{E}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{E} \coqdockw{as} [| \coqdocvar{n'} \coqdocvar{E'}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{E'}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
By using \coqdoctac{inversion}, we can also apply the principle of explosion
    to ''obviously contradictory`` hypotheses involving inductive
    properties. For example: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{one\_not\_even} : \ensuremath{\lnot} \coqdocvar{ev} 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (inversion\_practice)}

 Prove the following results using \coqdoctac{inversion}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{SSSSev\_\_even} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} (\coqdocvar{S} (\coqdocvar{S} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})))) \ensuremath{\rightarrow} \coqdocvar{ev} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{even5\_nonsense} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} 5 \ensuremath{\rightarrow} 2 + 2 = 9.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 The way we've used \coqdoctac{inversion} here may seem a bit
    mysterious at first.  Until now, we've only used \coqdoctac{inversion} on
    equality propositions, to utilize injectivity of constructors or
    to discriminate between different constructors.  But we see here
    that \coqdoctac{inversion} can also be applied to analyzing evidence for
    inductively defined propositions.


    Here's how \coqdoctac{inversion} works in general.  Suppose the name \coqdocconstructor{I}
    refers to an assumption \coqdocaxiom{P} in the current context, where \coqdocaxiom{P} has
    been defined by an \coqdockw{Inductive} declaration.  Then, for each of the
    constructors of \coqdocaxiom{P}, \coqdoctac{inversion} \coqdocconstructor{I} generates a subgoal in which
    \coqdocconstructor{I} has been replaced by the exact, specific conditions under
    which this constructor could have been used to prove \coqdocaxiom{P}.  Some of
    these subgoals will be self-contradictory; \coqdoctac{inversion} throws
    these away.  The ones that are left represent the cases that must
    be proved to establish the original goal.  For those, \coqdoctac{inversion}
    adds all equations into the proof context that must hold of the
    arguments given to \coqdocaxiom{P} (e.g., \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocvariable{n'}) = \coqdocabbreviation{n} in the proof of
    \coqdoclemma{evSS\_ev}). 

 The \coqdoclemma{ev\_double} exercise above shows that our new notion of
    evenness is implied by the two earlier ones (since, by
    \coqdoclemma{even\_bool\_prop} in chapter \coqdoclibrary{Logic}, we already know that
    those are equivalent to each other). To show that all three
    coincide, we just need the following lemma: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{ev\_even\_firsttry} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{k}, \coqdocvar{n} = \coqdocvar{double} \coqdocvar{k}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We could try to proceed by case analysis or induction on \coqdocabbreviation{n}.  But
    since \coqdocinductive{ev} is mentioned in a premise, this strategy would probably
    lead to a dead end, as in the previous section.  Thus, it seems
    better to first try inversion on the evidence for \coqdocinductive{ev}.  Indeed,
    the first case can be solved trivially. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{E}. \coqdoctac{inversion} \coqdocvar{E} \coqdockw{as} [| \coqdocvar{n'} \coqdocvar{E'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} 0. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Unfortunately, the second case is harder.  We need to show \coqdoctac{\ensuremath{\exists}}
    \coqdocabbreviation{k}, \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocvariable{n'}) = \coqdocdefinition{double} \coqdocabbreviation{k}, but the only available assumption is
    \coqdocvar{E'}, which states that \coqdocinductive{ev} \coqdocvariable{n'} holds.  Since this isn't directly
    useful, it seems that we are stuck and that performing case
    analysis on \coqdocvar{E} was a waste of time.


    If we look more closely at our second goal, however, we can see
    that something interesting happened: By performing case analysis
    on \coqdocvar{E}, we were able to reduce the original result to an similar
    one that involves a \textit{different} piece of evidence for \coqdocinductive{ev}: \coqdocvar{E'}.
    More formally, we can finish our proof by showing that


        exists k', n' = double k',


    which is the same as the original statement, but with \coqdocvariable{n'} instead
    of \coqdocabbreviation{n}.  Indeed, it is not difficult to convince Coq that this
    intermediate result suffices. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{I} : (\coqdoctac{\ensuremath{\exists}} \coqdocvar{k'}, \coqdocvar{n'} = \coqdocvar{double} \coqdocvar{k'}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{8.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{k}, \coqdocvar{S} (\coqdocvar{S} \coqdocvar{n'}) = \coqdocvar{double} \coqdocvar{k})).\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{intros} [\coqdocvar{k'} \coqdocvar{Hk'}]. \coqdoctac{rewrite} \coqdocvar{Hk'}. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{S} \coqdocvar{k'}). \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{I}. \coqdocemptyline
\coqdocnoindent
\coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Induction on Evidence}



 If this looks familiar, it is no coincidence: We've encountered
    similar problems in the \coqdockw{Induction} chapter, when trying to use
    case analysis to prove results that required induction.  And once
    again the solution is... induction!


    The behavior of \coqdoctac{induction} on evidence is the same as its
    behavior on data: It causes Coq to generate one subgoal for each
    constructor that could have used to build that evidence, while
    providing an induction hypotheses for each recursive occurrence of
    the property in question. 

 Let's try our current lemma again: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{ev\_even} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{k}, \coqdocvar{n} = \coqdocvar{double} \coqdocvar{k}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{E}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E} \coqdockw{as} [|\coqdocvar{n'} \coqdocvar{E'} \coqdocvar{IH}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} 0. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IH} \coqdockw{as} [\coqdocvar{k'} \coqdocvar{Hk'}].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{Hk'}. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{S} \coqdocvar{k'}). \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here, we can see that Coq produced an \coqdocvar{IH} that corresponds to
    \coqdocvar{E'}, the single recursive occurrence of \coqdocinductive{ev} in its own
    definition.  Since \coqdocvar{E'} mentions \coqdocvariable{n'}, the induction hypothesis
    talks about \coqdocvariable{n'}, as opposed to \coqdocabbreviation{n} or some other number. 

 The equivalence between the second and third definitions of
    evenness now follows. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_even\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} \coqdocvar{n} \ensuremath{\leftrightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{k}, \coqdocvar{n} = \coqdocvar{double} \coqdocvar{k}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{ev\_even}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{intros} [\coqdocvar{k} \coqdocvar{Hk}]. \coqdoctac{rewrite} \coqdocvar{Hk}. \coqdoctac{apply} \coqdocvar{ev\_double}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As we will see in later chapters, induction on evidence is a
    recurring technique across many areas, and in particular when
    formalizing the semantics of programming languages, where many
    properties of interest are defined inductively. 

 The following exercises provide simple examples of this
    technique, to help you familiarize yourself with it. 

\paragraph{Exercise: 2 stars (ev\_sum)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_sum} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev} \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{ev} (\coqdocvar{n} + \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced, optional (ev\_alternate)}

 In general, there may be multiple ways of defining a
    property inductively.  For example, here's a (slightly contrived)
    alternative definition for \coqdocinductive{ev}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ev'} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{ev'\_0} : \coqdocvar{ev'} 0\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{ev'\_2} : \coqdocvar{ev'} 2\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{ev'\_sum} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{ev'} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev'} \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{ev'} (\coqdocvar{n} + \coqdocvar{m}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Prove that this definition is logically equivalent to the old
    one.  (You may want to look at the previous theorem when you get
    to the induction step.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev'\_ev} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{ev'} \coqdocvar{n} \ensuremath{\leftrightarrow} \coqdocvar{ev} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advanced, recommended (ev\_ev\_\_ev)}

 Finding the appropriate thing to do induction on is a
    bit tricky here: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_ev\_\_ev} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} (\coqdocvar{n}+\coqdocvar{m}) \ensuremath{\rightarrow} \coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (ev\_plus\_plus)}

 This exercise just requires applying existing lemmas.  No
    induction or even case analysis is needed, though some of the
    rewriting may be tedious. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_plus\_plus} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} (\coqdocvar{n}+\coqdocvar{m}) \ensuremath{\rightarrow} \coqdocvar{ev} (\coqdocvar{n}+\coqdocvar{p}) \ensuremath{\rightarrow} \coqdocvar{ev} (\coqdocvar{m}+\coqdocvar{p}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Inductive Relations}



 A proposition parameterized by a number (such as \coqdocinductive{ev})
    can be thought of as a \textit{property} -- i.e., it defines
    a subset of \coqdocdefinition{nat}, namely those numbers for which the proposition
    is provable.  In the same way, a two-argument proposition can be
    thought of as a \textit{relation} -- i.e., it defines a set of pairs for
    which the proposition is provable. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Playground}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
One useful example is the ''less than or equal to`` relation on
    numbers. 

 The following definition should be fairly intuitive.  It
    says that there are two ways to give evidence that one number is
    less than or equal to another: either observe that they are the
    same number, or give evidence that the first is less than or equal
    to the predecessor of the second. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{le} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{le\_n} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{le} \coqdocvar{n} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{le\_S} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, (\coqdocvar{le} \coqdocvar{n} \coqdocvar{m}) \ensuremath{\rightarrow} (\coqdocvar{le} \coqdocvar{n} (\coqdocvar{S} \coqdocvar{m})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "m <= n" := (\coqdocvar{le} \coqdocvar{m} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Proofs of facts about \ensuremath{\le} using the constructors \coqdocconstructor{le\_n} and
    \coqdocconstructor{le\_S} follow the same patterns as proofs about properties, like
    \coqdocinductive{ev} above. We can \coqdoctac{apply} the constructors to prove \ensuremath{\le}
    goals (e.g., to show that 3<=3 or 3<=6), and we can use
    tactics like \coqdoctac{inversion} to extract information from \ensuremath{\le}
    hypotheses in the context (e.g., to prove that (2 \ensuremath{\le} 1) \ensuremath{\rightarrow}
    2+2=5.) 

 Here are some sanity checks on the definition.  (Notice that,
    although these are the same kind of simple ''unit tests`` as we gave
    for the testing functions we wrote in the first few lectures, we
    must construct their proofs explicitly -- \coqdoctac{simpl} and
    \coqdoctac{reflexivity} don't do the job, because the proofs aren't just a
    matter of simplifying computations.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{test\_le1} :\coqdoceol
\coqdocindent{1.00em}
3 \ensuremath{\le} 3.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{le\_n}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{test\_le2} :\coqdoceol
\coqdocindent{1.00em}
3 \ensuremath{\le} 6.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{le\_S}. \coqdoctac{apply} \coqdocvar{le\_S}. \coqdoctac{apply} \coqdocvar{le\_S}. \coqdoctac{apply} \coqdocvar{le\_n}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{test\_le3} :\coqdoceol
\coqdocindent{1.00em}
(2 \ensuremath{\le} 1) \ensuremath{\rightarrow} 2 + 2 = 5.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H2}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The ''strictly less than`` relation \coqdocabbreviation{n} < \coqdocabbreviation{m} can now be defined
    in terms of \coqdocinductive{le}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Playground}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{lt} (\coqdocvar{n} \coqdocvar{m}:\coqdocvar{nat}) := \coqdocvar{le} (\coqdocvar{S} \coqdocvar{n}) \coqdocvar{m}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "m < n" := (\coqdocvar{lt} \coqdocvar{m} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here are a few more simple relations on numbers: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{square\_of} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{sq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat}, \coqdocvar{square\_of} \coqdocvar{n} (\coqdocvar{n} \ensuremath{\times} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{next\_nat} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nn} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat}, \coqdocvar{next\_nat} \coqdocvar{n} (\coqdocvar{S} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{next\_even} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ne\_1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{ev} (\coqdocvar{S} \coqdocvar{n}) \ensuremath{\rightarrow} \coqdocvar{next\_even} \coqdocvar{n} (\coqdocvar{S} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ne\_2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{ev} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})) \ensuremath{\rightarrow} \coqdocvar{next\_even} \coqdocvar{n} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (total\_relation)}

 Define an inductive binary relation \coqdocvar{total\_relation} that holds
    between every pair of natural numbers. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (empty\_relation)}

 Define an inductive binary relation \coqdocvar{empty\_relation} (on numbers)
    that never holds. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (le\_exercises)}

 Here are a number of facts about the \ensuremath{\le} and < relations that
    we are going to need later in the course.  The proofs make good
    practice exercises. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{le\_trans} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o}, \coqdocvar{m} \ensuremath{\le} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{n} \ensuremath{\le} \coqdocvar{o} \ensuremath{\rightarrow} \coqdocvar{m} \ensuremath{\le} \coqdocvar{o}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{O\_le\_n} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
0 \ensuremath{\le} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{n\_le\_m\_\_Sn\_le\_Sm} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} \ensuremath{\le} \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{S} \coqdocvar{n} \ensuremath{\le} \coqdocvar{S} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{Sn\_le\_Sm\_\_n\_le\_m} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{S} \coqdocvar{n} \ensuremath{\le} \coqdocvar{S} \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{n} \ensuremath{\le} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_plus\_l} : \coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{b},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{a} \ensuremath{\le} \coqdocvar{a} + \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_lt} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n1} + \coqdocvar{n2} < \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n1} < \coqdocvar{m} \ensuremath{\land} \coqdocvar{n2} < \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{0.50em}
\coqdoctac{unfold} \coqdocvar{lt}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{lt\_S} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} < \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} < \coqdocvar{S} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{leb\_complete} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{leb} \coqdocvar{n} \coqdocvar{m} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{n} \ensuremath{\le} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Hint: The next one may be easiest to prove by induction on \coqdocabbreviation{m}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{leb\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} \ensuremath{\le} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{leb} \coqdocvar{n} \coqdocvar{m} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Hint: This theorem can easily be proved without using \coqdoctac{induction}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{leb\_true\_trans} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{leb} \coqdocvar{n} \coqdocvar{m} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{leb} \coqdocvar{m} \coqdocvar{o} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{leb} \coqdocvar{n} \coqdocvar{o} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (leb\_iff)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{leb\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{leb} \coqdocvar{n} \coqdocvar{m} = \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdocvar{n} \ensuremath{\le} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{R}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, recommendedM (R\_provability)}

 We can define three-place relations, four-place relations,
    etc., in just the same way as binary relations.  For example,
    consider the following three-place relation on numbers: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{R} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.50em}
\ensuremath{|} \coqdocvar{c1} : \coqdocvar{R} 0 0 0\coqdoceol
\coqdocindent{1.50em}
\ensuremath{|} \coqdocvar{c2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o}, \coqdocvar{R} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o} \ensuremath{\rightarrow} \coqdocvar{R} (\coqdocvar{S} \coqdocvar{m}) \coqdocvar{n} (\coqdocvar{S} \coqdocvar{o})\coqdoceol
\coqdocindent{1.50em}
\ensuremath{|} \coqdocvar{c3} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o}, \coqdocvar{R} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{m} (\coqdocvar{S} \coqdocvar{n}) (\coqdocvar{S} \coqdocvar{o})\coqdoceol
\coqdocindent{1.50em}
\ensuremath{|} \coqdocvar{c4} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o}, \coqdocvar{R} (\coqdocvar{S} \coqdocvar{m}) (\coqdocvar{S} \coqdocvar{n}) (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{o})) \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o}\coqdoceol
\coqdocindent{1.50em}
\ensuremath{|} \coqdocvar{c5} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o}, \coqdocvar{R} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}

\begin{itemize}
\item  Which of the following propositions are provable?

\begin{itemize}
\item  \coqdocdefinition{R} 1 1 2

\item  \coqdocdefinition{R} 2 2 6



\end{itemize}

\item  If we dropped constructor \coqdocconstructor{c5} from the definition of \coqdocdefinition{R},
      would the set of provable propositions change?  Briefly (1
      sentence) explain your answer.



\item  If we dropped constructor \coqdocdefinition{c4} from the definition of \coqdocdefinition{R},
      would the set of provable propositions change?  Briefly (1
      sentence) explain your answer.

\end{itemize}


\ensuremath{\Box}


\paragraph{Exercise: 3 stars, optional (R\_fact)}

 The relation \coqdocdefinition{R} above actually encodes a familiar function.
    Figure out which function; then state and prove this equivalence
    in Coq? \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{fR} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{R\_equiv\_fR} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o}, \coqdocvar{R} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o} \ensuremath{\leftrightarrow} \coqdocvar{fR} \coqdocvar{m} \coqdocvar{n} = \coqdocvar{o}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{R}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 4 stars, advanced (subsequence)}

 A list is a \textit{subsequence} of another list if all of the elements
    in the first list occur in the same order in the second list,
    possibly with some extra elements in between. For example,


      1;2;3


    is a subsequence of each of the lists


      1;2;3
      1;1;1;2;2;3
      1;2;7;3
      5;6;1;9;9;2;7;3;8


    but it is \textit{not} a subsequence of any of the lists


      1;2
      1;3
      5;6;2;1;7;3;8.



\begin{itemize}
\item  Define an inductive proposition \coqdocvar{subseq} on \coqdocinductive{list} \coqdocdefinition{nat} that
      captures what it means to be a subsequence. (Hint: You'll need
      three cases.)



\item  Prove \coqdocvar{subseq\_refl} that subsequence is reflexive, that is,
      any list is a subsequence of itself.



\item  Prove \coqdocvar{subseq\_app} that for any lists \coqdoclemma{l1}, \coqdoclemma{l2}, and \coqdoclemma{l3},
      if \coqdoclemma{l1} is a subsequence of \coqdoclemma{l2}, then \coqdoclemma{l1} is also a subsequence
      of \coqdoclemma{l2} ++ \coqdoclemma{l3}.



\item  (Optional, harder) Prove \coqdocvar{subseq\_trans} that subsequence is
      transitive -- that is, if \coqdoclemma{l1} is a subsequence of \coqdoclemma{l2} and \coqdoclemma{l2}
      is a subsequence of \coqdoclemma{l3}, then \coqdoclemma{l1} is a subsequence of \coqdoclemma{l3}.
      Hint: choose your induction carefully! 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optionalM (R\_provability2)}

 Suppose we give Coq the following definition:


    Inductive R : nat -> list nat -> Prop :=
      | c1 : R 0 \ensuremath{\Box}
      | c2 : forall n l, R n l -> R (S n) (n :: l)
      | c3 : forall n l, R (S n) l -> R n l.


    Which of the following propositions are provable?



\begin{itemize}
\item  \coqdocdefinition{R} 2 [1;0]

\item  \coqdocdefinition{R} 1 [1;2;1;0]

\item  \coqdocdefinition{R} 6 [3;2;1;0]  
\end{itemize}


 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Case Study: Regular Expressions}



 The \coqdocinductive{ev} property provides a simple example for illustrating
    inductive definitions and the basic techniques for reasoning about
    them, but it is not terribly exciting -- after all, it is
    equivalent to the two non-inductive of evenness that we had
    already seen, and does not seem to offer any concrete benefit over
    them.  To give a better sense of the power of inductive
    definitions, we now show how to use them to model a classic
    concept in computer science: \textit{regular expressions}. 

 Regular expressions are a simple language for describing strings,
    defined as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{reg\_exp} (\coqdocvar{T} : \coqdockw{Type}) : \coqdockw{Type} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{EmptySet} : \coqdocvar{reg\_exp} \coqdocvar{T}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{EmptyStr} : \coqdocvar{reg\_exp} \coqdocvar{T}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{Char} : \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{reg\_exp} \coqdocvar{T}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{App} : \coqdocvar{reg\_exp} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{reg\_exp} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{reg\_exp} \coqdocvar{T}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{Union} : \coqdocvar{reg\_exp} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{reg\_exp} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{reg\_exp} \coqdocvar{T}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{Star} : \coqdocvar{reg\_exp} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{reg\_exp} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{EmptySet} \{\coqdocvar{T}\}.\coqdoceol
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{EmptyStr} \{\coqdocvar{T}\}.\coqdoceol
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{Char} \{\coqdocvar{T}\} \coqdocvar{\_}.\coqdoceol
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{App} \{\coqdocvar{T}\} \coqdocvar{\_} \coqdocvar{\_}.\coqdoceol
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{Union} \{\coqdocvar{T}\} \coqdocvar{\_} \coqdocvar{\_}.\coqdoceol
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{Star} \{\coqdocvar{T}\} \coqdocvar{\_}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that this definition is \textit{polymorphic}: Regular
    expressions in \coqdocinductive{reg\_exp} \coqdocdefinition{T} describe strings with characters drawn
    from \coqdocdefinition{T} -- that is, lists of elements of \coqdocdefinition{T}.


    (We depart slightly from standard practice in that we do not
    require the type \coqdocdefinition{T} to be finite.  This results in a somewhat
    different theory of regular expressions, but the difference is not
    significant for our purposes.) 

 We connect regular expressions and strings via the following
    rules, which define when a regular expression \textit{matches} some
    string:



\begin{itemize}
\item  The expression \coqdocconstructor{EmptySet} does not match any string.



\item  The expression \coqdocconstructor{EmptyStr} matches the empty string [].



\item  The expression \coqdocconstructor{Char} \coqdocabbreviation{x} matches the one-character string [\coqdocabbreviation{x}].



\item  If \coqdocvariable{re1} matches \coqdocvariable{s1}, and \coqdocvariable{re2} matches \coqdocvariable{s2}, then \coqdocconstructor{App} \coqdocvariable{re1}
        \coqdocvariable{re2} matches \coqdocvariable{s1} ++ \coqdocvariable{s2}.



\item  If at least one of \coqdocvariable{re1} and \coqdocvariable{re2} matches \coqdocdefinition{s}, then \coqdocconstructor{Union} \coqdocvariable{re1}
        \coqdocvariable{re2} matches \coqdocdefinition{s}.



\item  Finally, if we can write some string \coqdocdefinition{s} as the concatenation of
        a sequence of strings \coqdocdefinition{s} = \coqdocvar{s\_1} ++ ... ++ \coqdocvar{s\_k}, and the
        expression \coqdocvariable{re} matches each one of the strings \coqdocvar{s\_i}, then
        \coqdocconstructor{Star} \coqdocvariable{re} matches \coqdocdefinition{s}.


        As a special case, the sequence of strings may be empty, so
        \coqdocconstructor{Star} \coqdocvariable{re} always matches the empty string [] no matter what
        \coqdocvariable{re} is.

\end{itemize}


    We can easily translate this informal definition into an
    \coqdockw{Inductive} one as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{exp\_match} \{\coqdocvar{T}\} : \coqdocvar{list} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{reg\_exp} \coqdocvar{T} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{MEmpty} : \coqdocvar{exp\_match} [] \coqdocvar{EmptyStr}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{MChar} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{exp\_match} [\coqdocvar{x}] (\coqdocvar{Char} \coqdocvar{x})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{MApp} : \coqdockw{\ensuremath{\forall}} \coqdocvar{s1} \coqdocvar{re1} \coqdocvar{s2} \coqdocvar{re2},\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{exp\_match} \coqdocvar{s1} \coqdocvar{re1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{exp\_match} \coqdocvar{s2} \coqdocvar{re2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{exp\_match} (\coqdocvar{s1} ++ \coqdocvar{s2}) (\coqdocvar{App} \coqdocvar{re1} \coqdocvar{re2})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{MUnionL} : \coqdockw{\ensuremath{\forall}} \coqdocvar{s1} \coqdocvar{re1} \coqdocvar{re2},\coqdoceol
\coqdocindent{7.00em}
\coqdocvar{exp\_match} \coqdocvar{s1} \coqdocvar{re1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{7.00em}
\coqdocvar{exp\_match} \coqdocvar{s1} (\coqdocvar{Union} \coqdocvar{re1} \coqdocvar{re2})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{MUnionR} : \coqdockw{\ensuremath{\forall}} \coqdocvar{re1} \coqdocvar{s2} \coqdocvar{re2},\coqdoceol
\coqdocindent{7.00em}
\coqdocvar{exp\_match} \coqdocvar{s2} \coqdocvar{re2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{7.00em}
\coqdocvar{exp\_match} \coqdocvar{s2} (\coqdocvar{Union} \coqdocvar{re1} \coqdocvar{re2})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{MStar0} : \coqdockw{\ensuremath{\forall}} \coqdocvar{re}, \coqdocvar{exp\_match} [] (\coqdocvar{Star} \coqdocvar{re})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{MStarApp} : \coqdockw{\ensuremath{\forall}} \coqdocvar{s1} \coqdocvar{s2} \coqdocvar{re},\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{exp\_match} \coqdocvar{s1} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{exp\_match} \coqdocvar{s2} (\coqdocvar{Star} \coqdocvar{re}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{exp\_match} (\coqdocvar{s1} ++ \coqdocvar{s2}) (\coqdocvar{Star} \coqdocvar{re}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Again, for readability, we can also display this definition using
    inference-rule notation.  At the same time, let's introduce a more
    readable infix notation. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "s =\~{} re" := (\coqdocvar{exp\_match} \coqdocvar{s} \coqdocvar{re}) (\coqdoctac{at} \coqdockw{level} 80).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\par
\noindent\hrulefill\par
\noindent{}                    (MEmpty)
                           \ensuremath{\Box} =\~{} EmptyStr
\par
\noindent\hrulefill\par
\noindent{}                      (MChar)
                           \coqdocabbreviation{x} =\~{} Char x


                       s1 =\~{} re1    s2 =\~{} re2
\par
\noindent\hrulefill\par
\noindent{}                 (MApp)
                       s1 ++ s2 =\~{} App re1 re2


                              s1 =\~{} re1
\par
\noindent\hrulefill\par
\noindent{}                (MUnionL)
                         s1 =\~{} Union re1 re2


                              s2 =\~{} re2
\par
\noindent\hrulefill\par
\noindent{}                (MUnionR)
                         s2 =\~{} Union re1 re2
\par
\noindent\hrulefill\par
\noindent{}                     (MStar0)
                           \ensuremath{\Box} =\~{} Star re


                      s1 =\~{} re    s2 =\~{} Star re
\par
\noindent\hrulefill\par
\noindent{}            (MStarApp)
                        s1 ++ s2 =\~{} Star re


 Notice that these rules are not \textit{quite} the same as the informal
    ones that we gave at the beginning of the section.  First, we
    don't need to include a rule explicitly stating that no string
    matches \coqdocconstructor{EmptySet}; we just don't happen to include any rule that
    would have the effect of some string matching \coqdocconstructor{EmptySet}.  (Indeed,
    the syntax of inductive definitions doesn't even \textit{allow} us to
    give such a ''negative rule.``)


    Second, the informal rules for \coqdocconstructor{Union} and \coqdocconstructor{Star} correspond
    to two constructors each: \coqdocconstructor{MUnionL} / \coqdocconstructor{MUnionR}, and \coqdocconstructor{MStar0} /
    \coqdocconstructor{MStarApp}.  The result is logically equivalent to the original
    rules but more convenient to use in Coq, since the recursive
    occurrences of \coqdocinductive{exp\_match} are given as direct arguments to the
    constructors, making it easier to perform induction on evidence.
    (The \coqdocvar{exp\_match\_ex1} and \coqdocvar{exp\_match\_ex2} exercises below ask you
    to prove that the constructors given in the inductive declaration
    and the ones that would arise from a more literal transcription of
    the informal rules are indeed equivalent.)


    Let's illustrate these rules with a few examples. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{reg\_exp\_ex1} : [1] =\~{} \coqdocvar{Char} 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{MChar}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{reg\_exp\_ex2} : [1; 2] =\~{} \coqdocvar{App} (\coqdocvar{Char} 1) (\coqdocvar{Char} 2).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{MApp} [1] \coqdocvar{\_} [2]).\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{MChar}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{MChar}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(Notice how the last example applies \coqdocconstructor{MApp} to the strings [1]
    and [2] directly.  Since the goal mentions [1; 2] instead of
    [1] ++ [2], Coq wouldn't be able to figure out how to split the
    string on its own.)


    Using \coqdoctac{inversion}, we can also show that certain strings do \textit{not}
    match a regular expression: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{reg\_exp\_ex3} : \ensuremath{\lnot} ([1; 2] =\~{} \coqdocvar{Char} 1).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can define helper functions to help write down regular
    expressions. The \coqdocdefinition{reg\_exp\_of\_list} function constructs a regular
    expression that matches exactly the list that it receives as an
    argument: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{reg\_exp\_of\_list} \{\coqdocvar{T}\} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{EmptyStr}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{x} :: \coqdocvar{l'} \ensuremath{\Rightarrow} \coqdocvar{App} (\coqdocvar{Char} \coqdocvar{x}) (\coqdocvar{reg\_exp\_of\_list} \coqdocvar{l'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{reg\_exp\_ex4} : [1; 2; 3] =\~{} \coqdocvar{reg\_exp\_of\_list} [1; 2; 3].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdoctac{apply} (\coqdocvar{MApp} [1]).\coqdoceol
\coqdocindent{1.00em}
\{ \coqdoctac{apply} \coqdocvar{MChar}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{MApp} [2]).\coqdoceol
\coqdocindent{1.00em}
\{ \coqdoctac{apply} \coqdocvar{MChar}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{MApp} [3]).\coqdoceol
\coqdocindent{1.00em}
\{ \coqdoctac{apply} \coqdocvar{MChar}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{MEmpty}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can also prove general facts about \coqdocinductive{exp\_match}.  For instance,
    the following lemma shows that every string \coqdocdefinition{s} that matches \coqdocvariable{re}
    also matches \coqdocconstructor{Star} \coqdocvariable{re}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{MStar1} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{T} \coqdocvar{s} (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}) ,\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{s} =\~{} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{s} =\~{} \coqdocvar{Star} \coqdocvar{re}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T} \coqdocvar{s} \coqdocvar{re} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} (\coqdocvar{app\_nil\_r} \coqdocvar{\_} \coqdocvar{s}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{MStarApp} \coqdocvar{s} [] \coqdocvar{re}).\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{MStar0}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(Note the use of \coqdoclemma{app\_nil\_r} to change the goal of the theorem to
    exactly the same shape expected by \coqdocconstructor{MStarApp}.) 

\paragraph{Exercise: 3 stars (exp\_match\_ex1)}

 The following lemmas show that the informal matching rules given
    at the beginning of the chapter can be obtained from the formal
    inductive definition. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{empty\_is\_empty} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{s} : \coqdocvar{list} \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} (\coqdocvar{s} =\~{} \coqdocvar{EmptySet}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{MUnion'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{s} : \coqdocvar{list} \coqdocvar{T}) (\coqdocvar{re1} \coqdocvar{re2} : \coqdocvar{reg\_exp} \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s} =\~{} \coqdocvar{re1} \ensuremath{\lor} \coqdocvar{s} =\~{} \coqdocvar{re2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s} =\~{} \coqdocvar{Union} \coqdocvar{re1} \coqdocvar{re2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The next lemma is stated in terms of the \coqdoctac{fold} function from the
    \coqdoclibrary{Poly} chapter: If \coqdocvariable{ss} : \coqdocinductive{list} (\coqdocinductive{list} \coqdocdefinition{T}) represents a sequence of
    strings \coqdocvariable{s1}, ..., \coqdocvar{sn}, then \coqdoctac{fold} \coqdocdefinition{app} \coqdocvariable{ss} [] is the result of
    concatenating them all together. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{MStar'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{ss} : \coqdocvar{list} (\coqdocvar{list} \coqdocvar{T})) (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{s}, \coqdocvar{In} \coqdocvar{s} \coqdocvar{ss} \ensuremath{\rightarrow} \coqdocvar{s} =\~{} \coqdocvar{re}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{fold} \coqdocvar{app} \coqdocvar{ss} [] =\~{} \coqdocvar{Star} \coqdocvar{re}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars (reg\_exp\_of\_list)}

 Prove that \coqdocdefinition{reg\_exp\_of\_list} satisfies the following
    specification: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{reg\_exp\_of\_list\_spec} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{s1} \coqdocvar{s2} : \coqdocvar{list} \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s1} =\~{} \coqdocvar{reg\_exp\_of\_list} \coqdocvar{s2} \ensuremath{\leftrightarrow} \coqdocvar{s1} = \coqdocvar{s2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Since the definition of \coqdocinductive{exp\_match} has a recursive
    structure, we might expect that proofs involving regular
    expressions will often require induction on evidence.  For
    example, suppose that we wanted to prove the following intuitive
    result: If a regular expression \coqdocvariable{re} matches some string \coqdocdefinition{s}, then
    all elements of \coqdocdefinition{s} must occur somewhere in \coqdocvariable{re}.  To state this
    theorem, we first define a function \coqdocdefinition{re\_chars} that lists all
    characters that occur in a regular expression: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{re\_chars} \{\coqdocvar{T}\} (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}) : \coqdocvar{list} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{re} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{EmptySet} \ensuremath{\Rightarrow} []\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{EmptyStr} \ensuremath{\Rightarrow} []\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Char} \coqdocvar{x} \ensuremath{\Rightarrow} [\coqdocvar{x}]\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{App} \coqdocvar{re1} \coqdocvar{re2} \ensuremath{\Rightarrow} \coqdocvar{re\_chars} \coqdocvar{re1} ++ \coqdocvar{re\_chars} \coqdocvar{re2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Union} \coqdocvar{re1} \coqdocvar{re2} \ensuremath{\Rightarrow} \coqdocvar{re\_chars} \coqdocvar{re1} ++ \coqdocvar{re\_chars} \coqdocvar{re2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Star} \coqdocvar{re} \ensuremath{\Rightarrow} \coqdocvar{re\_chars} \coqdocvar{re}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can then phrase our theorem as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{in\_re\_match} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{s} : \coqdocvar{list} \coqdocvar{T}) (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}) (\coqdocvar{x} : \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s} =\~{} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{In} \coqdocvar{x} \coqdocvar{s} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{In} \coqdocvar{x} (\coqdocvar{re\_chars} \coqdocvar{re}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T} \coqdocvar{s} \coqdocvar{re} \coqdocvar{x} \coqdocvar{Hmatch} \coqdocvar{Hin}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hmatch}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{as} [\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|}\coqdocvar{x'}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|}\coqdocvar{s1} \coqdocvar{re1} \coqdocvar{s2} \coqdocvar{re2} \coqdocvar{Hmatch1} \coqdocvar{IH1} \coqdocvar{Hmatch2} \coqdocvar{IH2}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|}\coqdocvar{s1} \coqdocvar{re1} \coqdocvar{re2} \coqdocvar{Hmatch} \coqdocvar{IH}\ensuremath{|}\coqdocvar{re1} \coqdocvar{s2} \coqdocvar{re2} \coqdocvar{Hmatch} \coqdocvar{IH}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|}\coqdocvar{re}\ensuremath{|}\coqdocvar{s1} \coqdocvar{s2} \coqdocvar{re} \coqdocvar{Hmatch1} \coqdocvar{IH1} \coqdocvar{Hmatch2} \coqdocvar{IH2}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{Hin}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{Hin}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{in\_app\_iff} \coqdoctac{in} *.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{Hin} \coqdockw{as} [\coqdocvar{Hin} \ensuremath{|} \coqdocvar{Hin}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{left}. \coqdoctac{apply} (\coqdocvar{IH1} \coqdocvar{Hin}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{right}. \coqdoctac{apply} (\coqdocvar{IH2} \coqdocvar{Hin}).\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{in\_app\_iff}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{left}. \coqdoctac{apply} (\coqdocvar{IH} \coqdocvar{Hin}).\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{in\_app\_iff}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{apply} (\coqdocvar{IH} \coqdocvar{Hin}).\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{Hin}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Something interesting happens in the \coqdocconstructor{MStarApp} case.  We obtain
    \textit{two} induction hypotheses: One that applies when \coqdocabbreviation{x} occurs in
    \coqdocvariable{s1} (which matches \coqdocvariable{re}), and a second one that applies when \coqdocabbreviation{x}
    occurs in \coqdocvariable{s2} (which matches \coqdocconstructor{Star} \coqdocvariable{re}).  This is a good
    illustration of why we need induction on evidence for \coqdocinductive{exp\_match},
    as opposed to \coqdocvariable{re}: The latter would only provide an induction
    hypothesis for strings that match \coqdocvariable{re}, which would not allow us
    to reason about the case \coqdocdefinition{In} \coqdocabbreviation{x} \coqdocvariable{s2}. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{in\_app\_iff} \coqdoctac{in} \coqdocvar{Hin}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{Hin} \coqdockw{as} [\coqdocvar{Hin} \ensuremath{|} \coqdocvar{Hin}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} (\coqdocvar{IH1} \coqdocvar{Hin}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} (\coqdocvar{IH2} \coqdocvar{Hin}).\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 4 stars (re\_not\_empty)}

 Write a recursive function \coqdocdefinition{re\_not\_empty} that tests whether a
    regular expression matches some string. Prove that your function
    is correct. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{re\_not\_empty} \{\coqdocvar{T} : \coqdockw{Type}\} (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}) : \coqdocvar{bool}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{re\_not\_empty\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{s}, \coqdocvar{s} =\~{} \coqdocvar{re}) \ensuremath{\leftrightarrow} \coqdocvar{re\_not\_empty} \coqdocvar{re} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{The \texorpdfstring{\protect}{remember}\coqdocvar{remember} Tactic}



 One potentially confusing feature of the \coqdoctac{induction} tactic is
    that it happily lets you try to set up an induction over a term
    that isn't sufficiently general.  The effect of this is to lose
    information (much as \coqdoctac{destruct} can do), and leave you unable to
    complete the proof.  Here's an example: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{star\_app}: \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{s1} \coqdocvar{s2} : \coqdocvar{list} \coqdocvar{T}) (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s1} =\~{} \coqdocvar{Star} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s2} =\~{} \coqdocvar{Star} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s1} ++ \coqdocvar{s2} =\~{} \coqdocvar{Star} \coqdocvar{re}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T} \coqdocvar{s1} \coqdocvar{s2} \coqdocvar{re} \coqdocvar{H1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Just doing an \coqdoctac{inversion} on \coqdocvar{H1} won't get us very far in the
    recursive cases. (Try it!). So we need induction. Here is a naive
    first attempt: \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H1}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{as} [|\coqdocvar{x'}\ensuremath{|}\coqdocvar{s1} \coqdocvar{re1} \coqdocvar{s2'} \coqdocvar{re2} \coqdocvar{Hmatch1} \coqdocvar{IH1} \coqdocvar{Hmatch2} \coqdocvar{IH2}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|}\coqdocvar{s1} \coqdocvar{re1} \coqdocvar{re2} \coqdocvar{Hmatch} \coqdocvar{IH}\ensuremath{|}\coqdocvar{re1} \coqdocvar{s2'} \coqdocvar{re2} \coqdocvar{Hmatch} \coqdocvar{IH}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|}\coqdocvar{re'{}'}\ensuremath{|}\coqdocvar{s1} \coqdocvar{s2'} \coqdocvar{re'{}'} \coqdocvar{Hmatch1} \coqdocvar{IH1} \coqdocvar{Hmatch2} \coqdocvar{IH2}].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
But now, although we get seven cases (as we would expect from the
    definition of \coqdocinductive{exp\_match}), we have lost a very important bit of
    information from \coqdocvar{H1}: the fact that \coqdocvariable{s1} matched something of the
    form \coqdocconstructor{Star} \coqdocvariable{re}.  This means that we have to give proofs for \textit{all}
    seven constructors of this definition, even though all but two of
    them (\coqdocconstructor{MStar0} and \coqdocconstructor{MStarApp}) are contradictory.  We can still
    get the proof to go through for a few constructors, such as
    \coqdocconstructor{MEmpty}... \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... but most cases get stuck.  For \coqdocconstructor{MChar}, for instance, we
    must show that


    s2 =\~{} Char x' -> x' :: s2 =\~{} Char x',


    which is clearly impossible. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The problem is that \coqdoctac{induction} over a Prop hypothesis only works
    properly with hypotheses that are completely general, i.e., ones
    in which all the arguments are variables, as opposed to more
    complex expressions, such as \coqdocconstructor{Star} \coqdocvariable{re}.


    (In this respect, \coqdoctac{induction} on evidence behaves more like
    \coqdoctac{destruct} than like \coqdoctac{inversion}.)


    We can solve this problem by generalizing over the problematic
    expressions with an explicit equality: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{star\_app}: \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{s1} \coqdocvar{s2} : \coqdocvar{list} \coqdocvar{T}) (\coqdocvar{re} \coqdocvar{re'} : \coqdocvar{reg\_exp} \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s1} =\~{} \coqdocvar{re'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{re'} = \coqdocvar{Star} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s2} =\~{} \coqdocvar{Star} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s1} ++ \coqdocvar{s2} =\~{} \coqdocvar{Star} \coqdocvar{re}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can now proceed by performing induction over evidence directly,
    because the argument to the first hypothesis is sufficiently
    general, which means that we can discharge most cases by inverting
    the \coqdocvariable{re'} = \coqdocconstructor{Star} \coqdocvariable{re} equality in the context.


    This idiom is so common that Coq provides a tactic to
    automatically generate such equations for us, avoiding thus the
    need for changing the statements of our theorems. 

 Invoking the tactic \coqdocvar{remember} \coqdocconstructor{e} \coqdockw{as} \coqdocabbreviation{x} causes Coq to (1) replace
    all occurrences of the expression \coqdocconstructor{e} by the variable \coqdocabbreviation{x}, and (2)
    add an equation \coqdocabbreviation{x} = \coqdocconstructor{e} to the context.  Here's how we can use it
    to show the above result: \begin{coqdoccode}
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{star\_app}: \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{s1} \coqdocvar{s2} : \coqdocvar{list} \coqdocvar{T}) (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s1} =\~{} \coqdocvar{Star} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s2} =\~{} \coqdocvar{Star} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s1} ++ \coqdocvar{s2} =\~{} \coqdocvar{Star} \coqdocvar{re}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T} \coqdocvar{s1} \coqdocvar{s2} \coqdocvar{re} \coqdocvar{H1}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{Star} \coqdocvar{re}) \coqdockw{as} \coqdocvar{re'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We now have \coqdocvar{Heqre'} : \coqdocvariable{re'} = \coqdocconstructor{Star} \coqdocvariable{re}. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{s2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H1}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{as} [|\coqdocvar{x'}\ensuremath{|}\coqdocvar{s1} \coqdocvar{re1} \coqdocvar{s2'} \coqdocvar{re2} \coqdocvar{Hmatch1} \coqdocvar{IH1} \coqdocvar{Hmatch2} \coqdocvar{IH2}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|}\coqdocvar{s1} \coqdocvar{re1} \coqdocvar{re2} \coqdocvar{Hmatch} \coqdocvar{IH}\ensuremath{|}\coqdocvar{re1} \coqdocvar{s2'} \coqdocvar{re2} \coqdocvar{Hmatch} \coqdocvar{IH}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|}\coqdocvar{re'{}'}\ensuremath{|}\coqdocvar{s1} \coqdocvar{s2'} \coqdocvar{re'{}'} \coqdocvar{Hmatch1} \coqdocvar{IH1} \coqdocvar{Hmatch2} \coqdocvar{IH2}].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdocvar{Heqre'} is contradictory in most cases, which allows us to
    conclude immediately. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
-   \coqdoctac{inversion} \coqdocvar{Heqre'}.\coqdoceol
\coqdocindent{1.00em}
-    \coqdoctac{inversion} \coqdocvar{Heqre'}.\coqdoceol
\coqdocindent{1.00em}
-     \coqdoctac{inversion} \coqdocvar{Heqre'}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{inversion} \coqdocvar{Heqre'}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{inversion} \coqdocvar{Heqre'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The interesting cases are those that correspond to \coqdocconstructor{Star}.  Note
    that the induction hypothesis \coqdocvar{IH2} on the \coqdocconstructor{MStarApp} case
    mentions an additional premise \coqdocconstructor{Star} \coqdocvar{re'{}'} = \coqdocconstructor{Star} \coqdocvariable{re'}, which
    results from the equality generated by \coqdocvar{remember}. \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqre'}. \coqdoctac{intros} \coqdocvar{s} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqre'}. \coqdoctac{rewrite} \coqdocvar{H0} \coqdoctac{in} \coqdocvar{IH2}, \coqdocvar{Hmatch1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{s2} \coqdocvar{H1}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{app\_assoc}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{MStarApp}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{apply} \coqdocvar{Hmatch1}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{apply} \coqdocvar{IH2}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoctac{apply} \coqdocvar{H1}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 4 stars (exp\_match\_ex2)}



 The \coqdoclemma{MStar'{}'} lemma below (combined with its converse, the
    \coqdoclemma{MStar'} exercise above), shows that our definition of \coqdocinductive{exp\_match}
    for \coqdocconstructor{Star} is equivalent to the informal one given previously. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{MStar'{}'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{s} : \coqdocvar{list} \coqdocvar{T}) (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s} =\~{} \coqdocvar{Star} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ss} : \coqdocvar{list} (\coqdocvar{list} \coqdocvar{T}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{s} = \coqdoctac{fold} \coqdocvar{app} \coqdocvar{ss} []\coqdoceol
\coqdocindent{2.00em}
\ensuremath{\land} \coqdockw{\ensuremath{\forall}} \coqdocvar{s'}, \coqdocvar{In} \coqdocvar{s'} \coqdocvar{ss} \ensuremath{\rightarrow} \coqdocvar{s'} =\~{} \coqdocvar{re}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars, advanced (pumping)}

 One of the first really interesting theorems in the theory of
    regular expressions is the so-called \textit{pumping lemma}, which
    states, informally, that any sufficiently long string \coqdocdefinition{s} matching
    a regular expression \coqdocvariable{re} can be ''pumped`` by repeating some middle
    section of \coqdocdefinition{s} an arbitrary number of times to produce a new
    string also matching \coqdocvariable{re}.


    To begin, we need to define ''sufficiently long.``  Since we are
    working in a constructive logic, we actually need to be able to
    calculate, for each regular expression \coqdocvariable{re}, the minimum length
    for strings \coqdocdefinition{s} to guarantee ''pumpability.`` \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Pumping}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{pumping\_constant} \{\coqdocvar{T}\} (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{re} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{EmptySet} \ensuremath{\Rightarrow} 0\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{EmptyStr} \ensuremath{\Rightarrow} 1\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Char} \coqdocvar{\_} \ensuremath{\Rightarrow} 2\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{App} \coqdocvar{re1} \coqdocvar{re2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pumping\_constant} \coqdocvar{re1} + \coqdocvar{pumping\_constant} \coqdocvar{re2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Union} \coqdocvar{re1} \coqdocvar{re2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pumping\_constant} \coqdocvar{re1} + \coqdocvar{pumping\_constant} \coqdocvar{re2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Star} \coqdocvar{\_} \ensuremath{\Rightarrow} 1\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next, it is useful to define an auxiliary function that repeats a
    string (appends it to itself) some number of times. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{napp} \{\coqdocvar{T}\} (\coqdocvar{n} : \coqdocvar{nat}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{T}) : \coqdocvar{list} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} []\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdocvar{l} ++ \coqdocvar{napp} \coqdocvar{n'} \coqdocvar{l}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{napp\_plus}: \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{T}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{napp} (\coqdocvar{n} + \coqdocvar{m}) \coqdocvar{l} = \coqdocvar{napp} \coqdocvar{n} \coqdocvar{l} ++ \coqdocvar{napp} \coqdocvar{m} \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T} \coqdocvar{n} \coqdocvar{m} \coqdocvar{l}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [|\coqdocvar{n} \coqdocvar{IHn}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{IHn}, \coqdocvar{app\_assoc}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now, the pumping lemma itself says that, if \coqdocdefinition{s} =\~{} \coqdocvariable{re} and if the
    length of \coqdocdefinition{s} is at least the pumping constant of \coqdocvariable{re}, then \coqdocdefinition{s}
    can be split into three substrings \coqdocvariable{s1} ++ \coqdocvariable{s2} ++ \coqdocvariable{s3} in such a way
    that \coqdocvariable{s2} can be repeated any number of times and the result, when
    combined with \coqdocvariable{s1} and \coqdocvariable{s3} will still match \coqdocvariable{re}.  Since \coqdocvariable{s2} is
    also guaranteed not to be the empty string, this gives us
    a (constructive!) way to generate strings matching \coqdocvariable{re} that are
    as long as we like. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{pumping} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} (\coqdocvar{re} : \coqdocvar{reg\_exp} \coqdocvar{T}) \coqdocvar{s},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s} =\~{} \coqdocvar{re} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pumping\_constant} \coqdocvar{re} \ensuremath{\le} \coqdocvar{length} \coqdocvar{s} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{s1} \coqdocvar{s2} \coqdocvar{s3},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{s} = \coqdocvar{s1} ++ \coqdocvar{s2} ++ \coqdocvar{s3} \ensuremath{\land}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{s2} \ensuremath{\not=} [] \ensuremath{\land}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{m}, \coqdocvar{s1} ++ \coqdocvar{napp} \coqdocvar{m} \coqdocvar{s2} ++ \coqdocvar{s3} =\~{} \coqdocvar{re}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To streamline the proof (which you are to fill in), the \coqdoctac{omega}
    tactic, which is enabled by the following \coqdockw{Require}, is helpful in
    several places for automatically completing tedious low-level
    arguments involving equalities or inequalities over natural
    numbers.  We'll return to \coqdoctac{omega} in a later chapter, but feel
    free to experiment with it now if you like.  The first case of the
    induction gives an example of how it is used. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T} \coqdocvar{re} \coqdocvar{s} \coqdocvar{Hmatch}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hmatch}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{as} [ \ensuremath{|} \coqdocvar{x} \ensuremath{|} \coqdocvar{s1} \coqdocvar{re1} \coqdocvar{s2} \coqdocvar{re2} \coqdocvar{Hmatch1} \coqdocvar{IH1} \coqdocvar{Hmatch2} \coqdocvar{IH2}\coqdoceol
\coqdocindent{3.50em}
\ensuremath{|} \coqdocvar{s1} \coqdocvar{re1} \coqdocvar{re2} \coqdocvar{Hmatch} \coqdocvar{IH} \ensuremath{|} \coqdocvar{re1} \coqdocvar{s2} \coqdocvar{re2} \coqdocvar{Hmatch} \coqdocvar{IH}\coqdoceol
\coqdocindent{3.50em}
\ensuremath{|} \coqdocvar{re} \ensuremath{|} \coqdocvar{s1} \coqdocvar{s2} \coqdocvar{re} \coqdocvar{Hmatch1} \coqdocvar{IH1} \coqdocvar{Hmatch2} \coqdocvar{IH2} ].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{omega}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Pumping}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Case Study: Improving Reflection}



 We've seen in the \coqdoclibrary{Logic} chapter that we often need to
    relate boolean computations to statements in \coqdockw{Prop}.  But
    performing this conversion in the way we did it there can result
    in tedious proof scripts.  Consider the proof of the following
    theorem: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{filter\_not\_empty\_In} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{l},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{filter} (\coqdocvar{beq\_nat} \coqdocvar{n}) \coqdocvar{l} \ensuremath{\not=} [] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{In} \coqdocvar{n} \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{l}. \coqdoctac{induction} \coqdocvar{l} \coqdockw{as} [|\coqdocvar{m} \coqdocvar{l'} \coqdocvar{IHl'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{destruct} (\coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{m}) \coqdocvar{eqn}:\coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{\_}. \coqdoctac{rewrite} \coqdocvar{beq\_nat\_true\_iff} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{rewrite} \coqdocvar{H}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{left}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{H'}. \coqdoctac{right}. \coqdoctac{apply} \coqdocvar{IHl'}. \coqdoctac{apply} \coqdocvar{H'}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In the first branch after \coqdoctac{destruct}, we explicitly apply
    the \coqdoclemma{beq\_nat\_true\_iff} lemma to the equation generated by
    destructing \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} \coqdocabbreviation{m}, to convert the assumption \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} \coqdocabbreviation{m}
    = \coqdocconstructor{true} into the assumption \coqdocabbreviation{n} = \coqdocabbreviation{m}; then we had to \coqdoctac{rewrite}
    using this assumption to complete the case.


    We can streamline this by defining an inductive proposition that
    yields a better case-analysis principle for \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} \coqdocabbreviation{m}.
    Instead of generating an equation such as \coqdocdefinition{beq\_nat} \coqdocabbreviation{n} \coqdocabbreviation{m} = \coqdocconstructor{true},
    which is generally not directly useful, this principle gives us
    right away the assumption we really need: \coqdocabbreviation{n} = \coqdocabbreviation{m}.


    We'll actually define something a bit more general, which can be
    used with arbitrary properties (and not just equalities): \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{FirstTry}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{reflect} : \coqdockw{Prop} \ensuremath{\rightarrow} \coqdocvar{bool} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{ReflectT} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P}:\coqdockw{Prop}), \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{reflect} \coqdocvar{P} \coqdocvar{true}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{ReflectF} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P}:\coqdockw{Prop}), \ensuremath{\lnot} \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{reflect} \coqdocvar{P} \coqdocvar{false}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Before explaining this, let's rearrange it a little: Since the
    types of both \coqdocconstructor{ReflectT} and \coqdocconstructor{ReflectF} begin with
    \coqdockw{\ensuremath{\forall}} (\coqdocaxiom{P}:\coqdockw{Prop}), we can make the definition a bit more readable
    and easier to work with by making \coqdocaxiom{P} a parameter of the whole
    Inductive declaration. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{FirstTry}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{reflect} (\coqdocvar{P} : \coqdockw{Prop}) : \coqdocvar{bool} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{ReflectT} : \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{reflect} \coqdocvar{P} \coqdocvar{true}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{ReflectF} : \ensuremath{\lnot} \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{reflect} \coqdocvar{P} \coqdocvar{false}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdocinductive{reflect} property takes two arguments: a proposition
    \coqdocaxiom{P} and a boolean \coqdocconstructor{b}.  Intuitively, it states that the property
    \coqdocaxiom{P} is \textit{reflected} in (i.e., equivalent to) the boolean \coqdocconstructor{b}: \coqdocaxiom{P}
    holds if and only if \coqdocconstructor{b} = \coqdocconstructor{true}.  To see this, notice that, by
    definition, the only way we can produce evidence that \coqdocinductive{reflect} \coqdocaxiom{P}
    \coqdocconstructor{true} holds is by showing that \coqdocaxiom{P} is true and using the
    \coqdocconstructor{ReflectT} constructor.  If we invert this statement, this means
    that it should be possible to extract evidence for \coqdocaxiom{P} from a
    proof of \coqdocinductive{reflect} \coqdocaxiom{P} \coqdocconstructor{true}.  Conversely, the only way to show
    \coqdocinductive{reflect} \coqdocaxiom{P} \coqdocconstructor{false} is by combining evidence for \ensuremath{\lnot} \coqdocaxiom{P} with the
    \coqdocconstructor{ReflectF} constructor.


    It is easy to formalize this intuition and show that the two
    statements are indeed equivalent: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{iff\_reflect} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{b}, (\coqdocvar{P} \ensuremath{\leftrightarrow} \coqdocvar{b} = \coqdocvar{true}) \ensuremath{\rightarrow} \coqdocvar{reflect} \coqdocvar{P} \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{b} \coqdocvar{H}. \coqdoctac{destruct} \coqdocvar{b}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{ReflectT}. \coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{ReflectF}. \coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{intros} \coqdocvar{H'}. \coqdoctac{inversion} \coqdocvar{H'}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, recommended (reflect\_iff)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{reflect\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{b}, \coqdocvar{reflect} \coqdocvar{P} \coqdocvar{b} \ensuremath{\rightarrow} (\coqdocvar{P} \ensuremath{\leftrightarrow} \coqdocvar{b} = \coqdocvar{true}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 The advantage of \coqdocinductive{reflect} over the normal ''if and only if``
    connective is that, by destructing a hypothesis or lemma of the
    form \coqdocinductive{reflect} \coqdocaxiom{P} \coqdocconstructor{b}, we can perform case analysis on \coqdocconstructor{b} while at
    the same time generating appropriate hypothesis in the two
    branches (\coqdocaxiom{P} in the first subgoal and \ensuremath{\lnot} \coqdocaxiom{P} in the second). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{beq\_natP} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{reflect} (\coqdocvar{n} = \coqdocvar{m}) (\coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{iff\_reflect}. \coqdoctac{rewrite} \coqdocvar{beq\_nat\_true\_iff}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The new proof of \coqdoclemma{filter\_not\_empty\_In} now goes as follows.
    Notice how the calls to \coqdoctac{destruct} and \coqdoctac{apply} are combined into a
    single call to \coqdoctac{destruct}. 

 (To see this clearly, look at the two proofs of
    \coqdoclemma{filter\_not\_empty\_In} with Coq and observe the differences in
    proof state at the beginning of the first case of the
    \coqdoctac{destruct}.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{filter\_not\_empty\_In'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{l},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{filter} (\coqdocvar{beq\_nat} \coqdocvar{n}) \coqdocvar{l} \ensuremath{\not=} [] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{In} \coqdocvar{n} \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{l}. \coqdoctac{induction} \coqdocvar{l} \coqdockw{as} [|\coqdocvar{m} \coqdocvar{l'} \coqdocvar{IHl'}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{destruct} (\coqdocvar{beq\_natP} \coqdocvar{n} \coqdocvar{m}) \coqdockw{as} [\coqdocvar{H} \ensuremath{|} \coqdocvar{H}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{\_}. \coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{left}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{H'}. \coqdoctac{right}. \coqdoctac{apply} \coqdocvar{IHl'}. \coqdoctac{apply} \coqdocvar{H'}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, recommended (beq\_natP\_practice)}

 Use \coqdoclemma{beq\_natP} as above to prove the following: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{count} \coqdocvar{n} \coqdocvar{l} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} 0\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{m} :: \coqdocvar{l'} \ensuremath{\Rightarrow} (\coqdockw{if} \coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{m} \coqdockw{then} 1 \coqdockw{else} 0) + \coqdocvar{count} \coqdocvar{n} \coqdocvar{l'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_natP\_practice} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{l},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{count} \coqdocvar{n} \coqdocvar{l} = 0 \ensuremath{\rightarrow} \~{}(\coqdocvar{In} \coqdocvar{n} \coqdocvar{l}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 This technique gives us only a small gain in convenience for
    the proofs we've seen here, but using \coqdocinductive{reflect} consistently often
    leads to noticeably shorter and clearer scripts as proofs get
    larger.  We'll see many more examples in later chapters.


    The use of the \coqdocinductive{reflect} property was popularized by \textit{SSReflect},
    a Coq library that has been used to formalize important results in
    mathematics, including as the 4-color theorem and the
    Feit-Thompson theorem.  The name SSReflect stands for \textit{small-scale
    reflection}, i.e., the pervasive use of reflection to simplify
    small proof steps with boolean computations. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Additional Exercises}



\paragraph{Exercise: 3 stars, recommended (nostutter)}

 Formulating inductive definitions of properties is an important
    skill you'll need in this course.  Try to solve this exercise
    without any help at all.


    We say that a list ''stutters`` if it repeats the same element
    consecutively.  The property ''\coqdocinductive{nostutter} \coqdocdefinition{mylist}`` means that
    \coqdocdefinition{mylist} does not stutter.  Formulate an inductive definition for
    \coqdocinductive{nostutter}.  (This is different from the \coqdocvar{NoDup} property in the
    exercise above; the sequence 1;4;1 repeats but does not
    stutter.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{nostutter} \{\coqdocvar{X}:\coqdockw{Type}\} : \coqdocvar{list} \coqdocvar{X} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{0.50em}
\coqdoceol
\coqdocnoindent
.\coqdoceol
\end{coqdoccode}
Make sure each of these tests succeeds, but feel free to change
    the suggested proof (in comments) if the given one doesn't work
    for you.  Your definition might be different from ours and still
    be correct, in which case the examples might need a different
    proof.  (You'll notice that the suggested proofs use a number of
    tactics we haven't talked about, to make them more robust to
    different possible ways of defining \coqdocinductive{nostutter}.  You can probably
    just uncomment and use them as-is, but you can also prove each
    example with more basic tactics.)  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nostutter\_1}: \coqdocvar{nostutter} [3;1;4;1;5;6].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nostutter\_2}:  \coqdocvar{nostutter} (@\coqdocvar{nil} \coqdocvar{nat}).\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nostutter\_3}:  \coqdocvar{nostutter} [5].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_nostutter\_4}:      \coqdocvar{not} (\coqdocvar{nostutter} [3;1;1;4]).\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced (filter\_challenge)}

 Let's prove that our definition of \coqdocdefinition{filter} from the \coqdoclibrary{Poly}
    chapter matches an abstract specification.  Here is the
    specification, written out informally in English:


    A list \coqdocabbreviation{l} is an ''in-order merge`` of \coqdoclemma{l1} and \coqdoclemma{l2} if it contains
    all the same elements as \coqdoclemma{l1} and \coqdoclemma{l2}, in the same order as \coqdoclemma{l1}
    and \coqdoclemma{l2}, but possibly interleaved.  For example,


    1;4;6;2;3


    is an in-order merge of


    1;6;2


    and


    4;3.


    Now, suppose we have a set \coqdocdefinition{X}, a function \coqdocdefinition{test}: \coqdocdefinition{X}\ensuremath{\rightarrow}\coqdocinductive{bool}, and a
    list \coqdocabbreviation{l} of type \coqdocinductive{list} \coqdocdefinition{X}.  Suppose further that \coqdocabbreviation{l} is an
    in-order merge of two lists, \coqdoclemma{l1} and \coqdoclemma{l2}, such that every item
    in \coqdoclemma{l1} satisfies \coqdocdefinition{test} and no item in \coqdoclemma{l2} satisfies test.  Then
    \coqdocdefinition{filter} \coqdocdefinition{test} \coqdocabbreviation{l} = \coqdoclemma{l1}.


    Translate this specification into a Coq theorem and prove
    it.  (You'll need to begin by defining what it means for one list
    to be a merge of two others.  Do this with an inductive relation,
    not a \coqdockw{Fixpoint}.)  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars, advanced, optional (filter\_challenge\_2)}

 A different way to characterize the behavior of \coqdocdefinition{filter} goes like
    this: Among all subsequences of \coqdocabbreviation{l} with the property that \coqdocdefinition{test}
    evaluates to \coqdocconstructor{true} on all their members, \coqdocdefinition{filter} \coqdocdefinition{test} \coqdocabbreviation{l} is the
    longest.  Formalize this claim and prove it. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, optional (palindromes)}

 A palindrome is a sequence that reads the same backwards as
    forwards.



\begin{itemize}
\item  Define an inductive proposition \coqdocvar{pal} on \coqdocinductive{list} \coqdocdefinition{X} that
      captures what it means to be a palindrome. (Hint: You'll need
      three cases.  Your definition should be based on the structure
      of the list; just having a single constructor like


        c : forall l, l = rev l -> pal l


      may seem obvious, but will not work very well.)



\item  Prove (\coqdocvar{pal\_app\_rev}) that


       forall l, pal (l ++ rev l).



\item  Prove (\coqdocvar{pal\_rev} that)


       forall l, pal l -> l = rev l.

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars, optional (palindrome\_converse)}

 Again, the converse direction is significantly more difficult, due
    to the lack of evidence.  Using your definition of \coqdocvar{pal} from the
    previous exercise, prove that


     forall l, l = rev l -> pal l.
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced, optional (NoDup)}

 Recall the definition of the \coqdocdefinition{In} property from the \coqdoclibrary{Logic}
    chapter, which asserts that a value \coqdocabbreviation{x} appears at least once in a
    list \coqdocabbreviation{l}: \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
Your first task is to use \coqdocdefinition{In} to define a proposition \coqdocvar{disjoint} \coqdocdefinition{X}
    \coqdoclemma{l1} \coqdoclemma{l2}, which should be provable exactly when \coqdoclemma{l1} and \coqdoclemma{l2} are
    lists (with elements of type X) that have no elements in
    common. \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
Next, use \coqdocdefinition{In} to define an inductive proposition \coqdocvar{NoDup} \coqdocdefinition{X}
    \coqdocabbreviation{l}, which should be provable exactly when \coqdocabbreviation{l} is a list (with
    elements of type \coqdocdefinition{X}) where every member is different from every
    other.  For example, \coqdocvar{NoDup} \coqdocdefinition{nat} [1;2;3;4] and \coqdocvar{NoDup}
    \coqdocinductive{bool} [] should be provable, while \coqdocvar{NoDup} \coqdocdefinition{nat} [1;2;1] and
    \coqdocvar{NoDup} \coqdocinductive{bool} [\coqdocconstructor{true};\coqdocconstructor{true}] should not be.  \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
Finally, state and prove one or more interesting theorems relating
    \coqdocvar{disjoint}, \coqdocvar{NoDup} and ++ (list append).  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced, optional (pigeonhole principle)}

 The \textit{pigeonhole principle} states a basic fact about counting: if
   we distribute more than \coqdocabbreviation{n} items into \coqdocabbreviation{n} pigeonholes, some
   pigeonhole must contain at least two items.  As often happens, this
   apparently trivial fact about numbers requires non-trivial
   machinery to prove, but we now have enough... 

 First prove an easy useful lemma. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{in\_split} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{x}:\coqdocvar{X}) (\coqdocvar{l}:\coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{In} \coqdocvar{x} \coqdocvar{l} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{l1} \coqdocvar{l2}, \coqdocvar{l} = \coqdocvar{l1} ++ \coqdocvar{x} :: \coqdocvar{l2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now define a property \coqdocinductive{repeats} such that \coqdocinductive{repeats} \coqdocdefinition{X} \coqdocabbreviation{l} asserts
    that \coqdocabbreviation{l} contains at least one repeated element (of type \coqdocdefinition{X}).  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{repeats} \{\coqdocvar{X}:\coqdockw{Type}\} : \coqdocvar{list} \coqdocvar{X} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now, here's a way to formalize the pigeonhole principle.  Suppose
    list \coqdoclemma{l2} represents a list of pigeonhole labels, and list \coqdoclemma{l1}
    represents the labels assigned to a list of items.  If there are
    more items than labels, at least two items must have the same
    label -- i.e., list \coqdoclemma{l1} must contain repeats.


    This proof is much easier if you use the \coqdocdefinition{excluded\_middle}
    hypothesis to show that \coqdocdefinition{In} is decidable, i.e., \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{x} \coqdocabbreviation{l}, (\coqdocdefinition{In} \coqdocabbreviation{x}
    \coqdocabbreviation{l}) \ensuremath{\lor} \ensuremath{\lnot} (\coqdocdefinition{In} \coqdocabbreviation{x} \coqdocabbreviation{l}).  However, it is also possible to make the proof
    go through \textit{without} assuming that \coqdocdefinition{In} is decidable; if you
    manage to do this, you will not need the \coqdocdefinition{excluded\_middle}
    hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pigeonhole\_principle}: \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{l1}  \coqdocvar{l2}:\coqdocvar{list} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{excluded\_middle} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{In} \coqdocvar{x} \coqdocvar{l1} \ensuremath{\rightarrow} \coqdocvar{In} \coqdocvar{x} \coqdocvar{l2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{length} \coqdocvar{l2} < \coqdocvar{length} \coqdocvar{l1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{repeats} \coqdocvar{l1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{intros} \coqdocvar{X} \coqdocvar{l1}. \coqdoctac{induction} \coqdocvar{l1} \coqdockw{as} [|\coqdocvar{x} \coqdocvar{l1'} \coqdocvar{IHl1'}].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-12-17 23:53:20 -0500 (Sat, 17 Dec 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Maps}{Library }{Top.Maps}

\begin{coqdoccode}
\end{coqdoccode}
\section{Maps: Total and Partial Maps}



 Maps (or dictionaries) are ubiquitous data structures both
    generally and in the theory of programming languages in
    particular; we're going to need them in many places in the coming
    chapters.  They also make a nice case study using ideas we've seen
    in previous chapters, including building data structures out of
    higher-order functions (from \coqdoclibrary{Basics} and \coqdoclibrary{Poly}) and the use of
    reflection to streamline proofs (from \coqdoclibrary{IndProp}).


    We'll define two flavors of maps: \textit{total} maps, which include a
    ''default`` element to be returned when a key being looked up
    doesn't exist, and \textit{partial} maps, which return an \coqdocinductive{option} to
    indicate success or failure.  The latter is defined in terms of
    the former, using \coqdocconstructor{None} as the default element. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{The Coq Standard Library}



 One small digression before we get to maps.


    Unlike the chapters we have seen so far, this one does not
    \coqdockw{Require} \coqdockw{Import} the chapter before it (and, transitively, all the
    earlier chapters).  Instead, in this chapter and from now, on
    we're going to import the definitions and theorems we need
    directly from Coq's standard library stuff.  You should not notice
    much difference, though, because we've been careful to name our
    own definitions and theorems the same as their counterparts in the
    standard library, wherever they overlap. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Bool.Bool}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Strings.String}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Logic.FunctionalExtensionality}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Documentation for the standard library can be found at
    http://coq.inria.fr/library/.  


    The \coqdockw{Search} command is a good way to look for theorems involving 
    objects of specific types.  Take a minute now to experiment with it. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Identifiers}



 First, we need a type for the keys that we use to index into our
    maps.  For this purpose, we again use the type \coqdocinductive{id} from the
    \coqdoclibrary{Lists} chapter.  To make this chapter self contained, we repeat
    its definition here, together with the equality comparison
    function for \coqdocinductive{id}s and its fundamental property. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{id} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Id} : \coqdocvar{string} \ensuremath{\rightarrow} \coqdocvar{id}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{x},\coqdocvar{y} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{Id} \coqdocvar{n1}, \coqdocvar{Id} \coqdocvar{n2} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{string\_dec} \coqdocvar{n1} \coqdocvar{n2} \coqdockw{then} \coqdocvar{true} \coqdockw{else} \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(The function \coqexternalref{string dec}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Strings.String}{\coqdocdefinition{string\_dec}} comes from Coq's string library.
    If you check its result type, you'll see that it does not actually
    return a \coqdocinductive{bool}, but rather a type that looks like \{\coqdocabbreviation{x} = \coqdocabbreviation{y}\} + \{\coqdocabbreviation{x}
    \ensuremath{\not=} \coqdocabbreviation{y}\}, called a \coqexternalref{sumbool}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Specif}{\coqdocinductive{sumbool}}, which can be thought of as an
    ''evidence-carrying boolean.``  Formally, an element of \coqexternalref{sumbool}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Specif}{\coqdocinductive{sumbool}} is
    either a proof that two things are equal or a proof that they are
    unequal, together with a tag indicating which.  But for present
    purposes you can think of it as just a fancy \coqdocinductive{bool}.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_id\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{id}, \coqdocvar{true} = \coqdocvar{beq\_id} \coqdocvar{id} \coqdocvar{id}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [\coqdocvar{n}]. \coqdoctac{simpl}. \coqdoctac{destruct} (\coqdocvar{string\_dec} \coqdocvar{n} \coqdocvar{n}).\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{destruct} \coqdocvar{n0}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The following useful property of \coqdocdefinition{beq\_id} follows from an
    analogous lemma about strings: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_id\_true\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} : \coqdocvar{id},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} = \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdocvar{x} = \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{intros} [\coqdocvar{n1}] [\coqdocvar{n2}].\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{unfold} \coqdocvar{beq\_id}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{destruct} (\coqdocvar{string\_dec} \coqdocvar{n1} \coqdocvar{n2}).\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{subst}. \coqdoctac{split}. \coqdoctac{reflexivity}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{split}.\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{intros} \coqdocvar{contra}. \coqdoctac{inversion} \coqdocvar{contra}.\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{intros} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}. \coqdoctac{destruct} \coqdocvar{n}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Similarly: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{beq\_id\_false\_iff} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} : \coqdocvar{id},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} = \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\leftrightarrow} \coqdocvar{x} \ensuremath{\not=} \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{y}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_true\_iff}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{not\_true\_iff\_false}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This useful variant follows just by rewriting: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{false\_beq\_id} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} : \coqdocvar{id},\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{x} \ensuremath{\not=} \coqdocvar{y}\coqdoceol
\coqdocindent{1.50em}
\ensuremath{\rightarrow} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{y}. \coqdoctac{rewrite} \coqdocvar{beq\_id\_false\_iff}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Total Maps}



 Our main job in this chapter will be to build a definition of
    partial maps that is similar in behavior to the one we saw in the
    \coqdoclibrary{Lists} chapter, plus accompanying lemmas about its behavior.


    This time around, though, we're going to use \textit{functions}, rather
    than lists of key-value pairs, to build maps.  The advantage of
    this representation is that it offers a more \textit{extensional} view of
    maps, where two maps that respond to queries in the same way will
    be represented as literally the same thing (the very same function),
    rather than just ''equivalent`` data structures.  This, in turn,
    simplifies proofs that use maps.


    We build partial maps in two steps.  First, we define a type of
    \textit{total maps} that return a default value when we look up a key
    that is not present in the map. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{total\_map} (\coqdocvar{A}:\coqdockw{Type}) := \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{A}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Intuitively, a total map over an element type \coqdocabbreviation{A} is just a
    function that can be used to look up \coqdocinductive{id}s, yielding \coqdocabbreviation{A}s.


    The function \coqdocdefinition{t\_empty} yields an empty total map, given a default
    element; this map always returns the default element when applied
    to any id. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{t\_empty} \{\coqdocvar{A}:\coqdockw{Type}\} (\coqdocvar{v} : \coqdocvar{A}) : \coqdocvar{total\_map} \coqdocvar{A} :=\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{v}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
More interesting is the \coqdocdefinition{update} function, which (as before) takes
    a map \coqdocabbreviation{m}, a key \coqdocabbreviation{x}, and a value \coqdocvariable{v} and returns a new map that
    takes \coqdocabbreviation{x} to \coqdocvariable{v} and takes every other key to whatever \coqdocabbreviation{m} does. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{t\_update} \{\coqdocvar{A}:\coqdockw{Type}\} (\coqdocvar{m} : \coqdocvar{total\_map} \coqdocvar{A})\coqdoceol
\coqdocindent{10.00em}
(\coqdocvar{x} : \coqdocvar{id}) (\coqdocvar{v} : \coqdocvar{A}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} \coqdocvar{x'} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x'} \coqdockw{then} \coqdocvar{v} \coqdockw{else} \coqdocvar{m} \coqdocvar{x'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This definition is a nice example of higher-order programming:
    \coqdocdefinition{t\_update} takes a \textit{function} \coqdocabbreviation{m} and yields a new function 
    \coqdockw{fun} \coqdocvariable{x'} \ensuremath{\Rightarrow} ... that behaves like the desired map.


    For example, we can build a map taking \coqdocinductive{id}s to \coqdocinductive{bool}s, where \coqdocconstructor{Id}
    3 is mapped to \coqdocconstructor{true} and every other key is mapped to \coqdocconstructor{false},
    like this: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{examplemap} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t\_update} (\coqdocvar{t\_update} (\coqdocvar{t\_empty} \coqdocvar{false}) (\coqdocvar{Id} "foo") \coqdocvar{false})\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{Id} "bar") \coqdocvar{true}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This completes the definition of total maps.  Note that we don't
    need to define a \coqdocdefinition{find} operation because it is just function
    application! \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{update\_example1} : \coqdocvar{examplemap} (\coqdocvar{Id} "baz") = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{update\_example2} : \coqdocvar{examplemap} (\coqdocvar{Id} "foo") = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{update\_example3} : \coqdocvar{examplemap} (\coqdocvar{Id} "quux") = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{update\_example4} : \coqdocvar{examplemap} (\coqdocvar{Id} "bar") = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To use maps in later chapters, we'll need several fundamental
    facts about how they behave.  Even if you don't work the following
    exercises, make sure you thoroughly understand the statements of
    the lemmas!  (Some of the proofs require the functional
    extensionality axiom, which is discussed in the \coqdoclibrary{Logic}
    chapter.) 

\paragraph{Exercise: 1 star, optional (t\_apply\_empty)}

 First, the empty map returns its default element for all keys: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{t\_apply\_empty}:  \coqdockw{\ensuremath{\forall}} \coqdocvar{A} \coqdocvar{x} \coqdocvar{v}, @\coqdocvar{t\_empty} \coqdocvar{A} \coqdocvar{v} \coqdocvar{x} = \coqdocvar{v}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (t\_update\_eq)}

 Next, if we update a map \coqdocabbreviation{m} at a key \coqdocabbreviation{x} with a new value \coqdocvariable{v}
    and then look up \coqdocabbreviation{x} in the map resulting from the \coqdocdefinition{update}, we
    get back \coqdocvariable{v}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{t\_update\_eq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} (\coqdocvar{m}: \coqdocvar{total\_map} \coqdocvar{A}) \coqdocvar{x} \coqdocvar{v},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{t\_update} \coqdocvar{m} \coqdocvar{x} \coqdocvar{v}) \coqdocvar{x} = \coqdocvar{v}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (t\_update\_neq)}

 On the other hand, if we update a map \coqdocabbreviation{m} at a key \coqdocvariable{x1} and then
    look up a \textit{different} key \coqdocvariable{x2} in the resulting map, we get the
    same result that \coqdocabbreviation{m} would have given: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{t\_update\_neq} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) \coqdocvar{v} \coqdocvar{x1} \coqdocvar{x2}\coqdoceol
\coqdocindent{12.50em}
(\coqdocvar{m} : \coqdocvar{total\_map} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x1} \ensuremath{\not=} \coqdocvar{x2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{t\_update} \coqdocvar{m} \coqdocvar{x1} \coqdocvar{v}) \coqdocvar{x2} = \coqdocvar{m} \coqdocvar{x2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (t\_update\_shadow)}

 If we update a map \coqdocabbreviation{m} at a key \coqdocabbreviation{x} with a value \coqdocvariable{v1} and then
    update again with the same key \coqdocabbreviation{x} and another value \coqdocvariable{v2}, the
    resulting map behaves the same (gives the same result when applied
    to any key) as the simpler map obtained by performing just
    the second \coqdocdefinition{update} on \coqdocabbreviation{m}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{t\_update\_shadow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} (\coqdocvar{m}: \coqdocvar{total\_map} \coqdocvar{A}) \coqdocvar{v1} \coqdocvar{v2} \coqdocvar{x},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{m} \coqdocvar{x} \coqdocvar{v1}) \coqdocvar{x} \coqdocvar{v2}\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{t\_update} \coqdocvar{m} \coqdocvar{x} \coqdocvar{v2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 For the final two lemmas about total maps, it's convenient to use
    the reflection idioms introduced in chapter \coqdoclibrary{IndProp}.  We begin
    by proving a fundamental \textit{reflection lemma} relating the equality
    proposition on \coqdocinductive{id}s with the boolean function \coqdocdefinition{beq\_id}. 

\paragraph{Exercise: 2 stars, optional (beq\_idP)}

 Use the proof of \coqdoclemma{beq\_natP} in chapter \coqdoclibrary{IndProp} as a template to
    prove the following: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{beq\_idP} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y}, \coqdocvar{reflect} (\coqdocvar{x} = \coqdocvar{y}) (\coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Now, given \coqdocinductive{id}s \coqdocvariable{x1} and \coqdocvariable{x2}, we can use the \coqdoctac{destruct} (\coqdoclemma{beq\_idP}
    \coqdocvariable{x1} \coqdocvariable{x2}) to simultaneously perform case analysis on the result of
    \coqdocdefinition{beq\_id} \coqdocvariable{x1} \coqdocvariable{x2} and generate hypotheses about the equality (in the
    sense of =) of \coqdocvariable{x1} and \coqdocvariable{x2}. 

\paragraph{Exercise: 2 stars (t\_update\_same)}

 With the example in chapter \coqdoclibrary{IndProp} as a template, use
    \coqdoclemma{beq\_idP} to prove the following theorem, which states that if we
    update a map to assign key \coqdocabbreviation{x} the same value as it already has in
    \coqdocabbreviation{m}, then the result is equal to \coqdocabbreviation{m}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{t\_update\_same} : \coqdockw{\ensuremath{\forall}} \coqdocvar{X} \coqdocvar{x} (\coqdocvar{m} : \coqdocvar{total\_map} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t\_update} \coqdocvar{m} \coqdocvar{x} (\coqdocvar{m} \coqdocvar{x}) = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, recommended (t\_update\_permute)}

 Use \coqdoclemma{beq\_idP} to prove one final property of the \coqdocdefinition{update}
    function: If we update a map \coqdocabbreviation{m} at two distinct keys, it doesn't
    matter in which order we do the updates. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{t\_update\_permute} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) \coqdocvar{v1} \coqdocvar{v2} \coqdocvar{x1} \coqdocvar{x2}\coqdoceol
\coqdocindent{14.50em}
(\coqdocvar{m} : \coqdocvar{total\_map} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x2} \ensuremath{\not=} \coqdocvar{x1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{m} \coqdocvar{x2} \coqdocvar{v2}) \coqdocvar{x1} \coqdocvar{v1})\coqdoceol
\coqdocindent{1.00em}
= (\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{m} \coqdocvar{x1} \coqdocvar{v1}) \coqdocvar{x2} \coqdocvar{v2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Partial maps}



 Finally, we define \textit{partial maps} on top of total maps.  A partial
    map with elements of type \coqdocabbreviation{A} is simply a total map with elements
    of type \coqdocinductive{option} \coqdocabbreviation{A} and default element \coqdocconstructor{None}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{partial\_map} (\coqdocvar{A}:\coqdockw{Type}) := \coqdocvar{total\_map} (\coqdocvar{option} \coqdocvar{A}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{empty} \{\coqdocvar{A}:\coqdockw{Type}\} : \coqdocvar{partial\_map} \coqdocvar{A} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t\_empty} \coqdocvar{None}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{update} \{\coqdocvar{A}:\coqdockw{Type}\} (\coqdocvar{m} : \coqdocvar{partial\_map} \coqdocvar{A})\coqdoceol
\coqdocindent{9.00em}
(\coqdocvar{x} : \coqdocvar{id}) (\coqdocvar{v} : \coqdocvar{A}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t\_update} \coqdocvar{m} \coqdocvar{x} (\coqdocvar{Some} \coqdocvar{v}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We now straightforwardly lift all of the basic lemmas about total
    maps to partial maps.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{apply\_empty} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} \coqdocvar{x}, @\coqdocvar{empty} \coqdocvar{A} \coqdocvar{x} = \coqdocvar{None}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{unfold} \coqdocvar{empty}. \coqdoctac{rewrite} \coqdocvar{t\_apply\_empty}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{update\_eq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} (\coqdocvar{m}: \coqdocvar{partial\_map} \coqdocvar{A}) \coqdocvar{x} \coqdocvar{v},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{update} \coqdocvar{m} \coqdocvar{x} \coqdocvar{v}) \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{v}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{unfold} \coqdocvar{update}. \coqdoctac{rewrite} \coqdocvar{t\_update\_eq}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{update\_neq} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) \coqdocvar{v} \coqdocvar{x1} \coqdocvar{x2}\coqdoceol
\coqdocindent{11.50em}
(\coqdocvar{m} : \coqdocvar{partial\_map} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x2} \ensuremath{\not=} \coqdocvar{x1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{update} \coqdocvar{m} \coqdocvar{x2} \coqdocvar{v}) \coqdocvar{x1} = \coqdocvar{m} \coqdocvar{x1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{X} \coqdocvar{v} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{m} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{update}. \coqdoctac{rewrite} \coqdocvar{t\_update\_neq}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{update\_shadow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} (\coqdocvar{m}: \coqdocvar{partial\_map} \coqdocvar{A}) \coqdocvar{v1} \coqdocvar{v2} \coqdocvar{x},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{update} (\coqdocvar{update} \coqdocvar{m} \coqdocvar{x} \coqdocvar{v1}) \coqdocvar{x} \coqdocvar{v2} = \coqdocvar{update} \coqdocvar{m} \coqdocvar{x} \coqdocvar{v2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{A} \coqdocvar{m} \coqdocvar{v1} \coqdocvar{v2} \coqdocvar{x1}. \coqdoctac{unfold} \coqdocvar{update}. \coqdoctac{rewrite} \coqdocvar{t\_update\_shadow}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{update\_same} : \coqdockw{\ensuremath{\forall}} \coqdocvar{X} \coqdocvar{v} \coqdocvar{x} (\coqdocvar{m} : \coqdocvar{partial\_map} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{m} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{v} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{update} \coqdocvar{m} \coqdocvar{x} \coqdocvar{v} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{X} \coqdocvar{v} \coqdocvar{x} \coqdocvar{m} \coqdocvar{H}. \coqdoctac{unfold} \coqdocvar{update}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{t\_update\_same}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{update\_permute} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) \coqdocvar{v1} \coqdocvar{v2} \coqdocvar{x1} \coqdocvar{x2}\coqdoceol
\coqdocindent{16.00em}
(\coqdocvar{m} : \coqdocvar{partial\_map} \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x2} \ensuremath{\not=} \coqdocvar{x1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{update} (\coqdocvar{update} \coqdocvar{m} \coqdocvar{x2} \coqdocvar{v2}) \coqdocvar{x1} \coqdocvar{v1})\coqdoceol
\coqdocindent{1.00em}
= (\coqdocvar{update} (\coqdocvar{update} \coqdocvar{m} \coqdocvar{x1} \coqdocvar{v1}) \coqdocvar{x2} \coqdocvar{v2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{X} \coqdocvar{v1} \coqdocvar{v2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{m}. \coqdoctac{unfold} \coqdocvar{update}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{t\_update\_permute}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
$Date: 2016-11-22 16:39:52 -0500 (Tue, 22 Nov 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.ProofObjects}{Library }{Top.ProofObjects}

\begin{coqdoccode}
\end{coqdoccode}
\section{ProofObjects: The Curry-Howard Correspondence}



 "\textit{Algorithms are the computational content of proofs}.''  --Robert Harper \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Export} \coqdocvar{IndProp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We have seen that Coq has mechanisms both for \textit{programming},
    using inductive data types like \coqdocdefinition{nat} or \coqdocinductive{list} and functions over
    these types, and for \textit{proving} properties of these programs, using
    inductive propositions (like \coqdocinductive{ev}), implication, universal
    quantification, and the like.  So far, we have mostly treated
    these mechanisms as if they were quite separate, and for many
    purposes this is a good way to think.  But we have also seen hints
    that Coq's programming and proving facilities are closely related.
    For example, the keyword \coqdockw{Inductive} is used to declare both data
    types and propositions, and \ensuremath{\rightarrow} is used both to describe the type
    of functions on data and logical implication.  This is not just a
    syntactic accident!  In fact, programs and proofs in Coq are
    almost the same thing.  In this chapter we will study how this
    works.


    We have already seen the fundamental idea: provability in Coq is
    represented by concrete \textit{evidence}.  When we construct the proof
    of a basic proposition, we are actually building a tree of
    evidence, which can be thought of as a data structure.


    If the proposition is an implication like \coqdocabbreviation{A} \ensuremath{\rightarrow} \coqdocabbreviation{B}, then its proof
    will be an evidence \textit{transformer}: a recipe for converting
    evidence for A into evidence for B.  So at a fundamental level,
    proofs are simply programs that manipulate evidence. 

 Question: If evidence is data, what are propositions themselves?


    Answer: They are types!


    Look again at the formal definition of the \coqdocinductive{ev} property.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Print} \coqdocvar{ev}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Suppose we introduce an alternative pronunciation of ``:''.
    Instead of ``has type,'' we can say ``is a proof of.''  For example,
    the second line in the definition of \coqdocinductive{ev} declares that \coqdocconstructor{ev\_0} : \coqdocinductive{ev}
    0.  Instead of ``\coqdocconstructor{ev\_0} has type \coqdocinductive{ev} 0,'' we can say that ``\coqdocconstructor{ev\_0}
    is a proof of \coqdocinductive{ev} 0.'' 

 This pun between types and propositions -- between : as ``has type''
    and : as ``is a proof of'' or ``is evidence for'' -- is called the
    \textit{Curry-Howard correspondence}.  It proposes a deep connection
    between the world of logic and the world of computation:


                 propositions  \~{}  types
                 proofs        \~{}  data values


    See \coqdocvar{Wadler} 2015 for a brief history and an up-to-date exposition.


    Many useful insights follow from this connection.  To begin with,
    it gives us a natural interpretation of the type of the \coqdocconstructor{ev\_SS}
    constructor: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{ev\_SS}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This can be read ``\coqdocconstructor{ev\_SS} is a constructor that takes two
    arguments -- a number \coqdocabbreviation{n} and evidence for the proposition \coqdocinductive{ev}
    \coqdocabbreviation{n} -- and yields evidence for the proposition \coqdocinductive{ev} (\coqdocconstructor{S} (\coqdocconstructor{S} \coqdocabbreviation{n})).'' 

 Now let's look again at a previous proof involving \coqdocinductive{ev}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_4} : \coqdocvar{ev} 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ev\_SS}. \coqdoctac{apply} \coqdocvar{ev\_SS}. \coqdoctac{apply} \coqdocvar{ev\_0}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As with ordinary data values and functions, we can use the \coqdockw{Print}
    command to see the \textit{proof object} that results from this proof
    script. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Print} \coqdocvar{ev\_4}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As a matter of fact, we can also write down this proof object
    \textit{directly}, without the need for a separate proof script: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} (\coqdocvar{ev\_SS} 2 (\coqdocvar{ev\_SS} 0 \coqdocvar{ev\_0})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The expression \coqdocconstructor{ev\_SS} 2 (\coqdocconstructor{ev\_SS} 0 \coqdocconstructor{ev\_0}) can be thought of as
    instantiating the parameterized constructor \coqdocconstructor{ev\_SS} with the
    specific arguments 2 and 0 plus the corresponding proof
    objects for its premises \coqdocinductive{ev} 2 and \coqdocinductive{ev} 0.  Alternatively, we can
    think of \coqdocconstructor{ev\_SS} as a primitive ``evidence constructor'' that, when
    applied to a particular number, wants to be further applied to
    evidence that that number is even; its type,


      forall n, ev n -> ev (S (S n)),


    expresses this functionality, in the same way that the polymorphic
    type \coqdockw{\ensuremath{\forall}} \coqdocdefinition{X}, \coqdocinductive{list} \coqdocdefinition{X} expresses the fact that the constructor
    \coqdocconstructor{nil} can be thought of as a function from types to empty lists
    with elements of that type. 

 We saw in the \coqdoclibrary{Logic} chapter that we can use function
    application syntax to instantiate universally quantified variables
    in lemmas, as well as to supply evidence for assumptions that
    these lemmas impose.  For instance: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_4'}: \coqdocvar{ev} 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{ev\_SS} 2 (\coqdocvar{ev\_SS} 0 \coqdocvar{ev\_0})).\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can now see that this feature is a trivial consequence of the
    status the Coq grants to proofs and propositions: Lemmas and
    hypotheses can be combined in expressions (i.e., proof objects)
    according to the same basic rules used for programs in the
    language. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Proof Scripts}



 The \textit{proof objects} we've been discussing lie at the core of how
    Coq operates.  When Coq is following a proof script, what is
    happening internally is that it is gradually constructing a proof
    object -- a term whose type is the proposition being proved.  The
    tactics between \coqdockw{Proof} and \coqdockw{Qed} tell it how to build up a term
    of the required type.  To see this process in action, let's use
    the \coqdockw{Show} \coqdockw{Proof} command to display the current state of the proof
    tree at various points in the following tactic proof. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_4'{}'} : \coqdocvar{ev} 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Show} \coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ev\_SS}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Show} \coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ev\_SS}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Show} \coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ev\_0}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Show} \coqdockw{Proof}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
At any given moment, Coq has constructed a term with a
    ``hole'' (indicated by ?\coqdockw{Goal} here, and so on), and it knows what
    type of evidence is needed to fill this hole.  


    Each hole corresponds to a subgoal, and the proof is
    finished when there are no more subgoals.  At this point, the
    evidence we've built stored in the global context under the name
    given in the \coqdockw{Theorem} command. 

 Tactic proofs are useful and convenient, but they are not
    essential: in principle, we can always construct the required
    evidence by hand, as shown above. Then we can use \coqdockw{Definition}
    (rather than \coqdockw{Theorem}) to give a global name directly to a
    piece of evidence. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ev\_4'{}'{}'} : \coqdocvar{ev} 4 :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev\_SS} 2 (\coqdocvar{ev\_SS} 0 \coqdocvar{ev\_0}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
All these different ways of building the proof lead to exactly the
    same evidence being saved in the global environment. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Print} \coqdocvar{ev\_4}.\coqdoceol
\coqdocnoindent
\coqdockw{Print} \coqdocvar{ev\_4'}.\coqdoceol
\coqdocnoindent
\coqdockw{Print} \coqdocvar{ev\_4'{}'}.\coqdoceol
\coqdocnoindent
\coqdockw{Print} \coqdocvar{ev\_4'{}'{}'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (eight\_is\_even)}

 Give a tactic proof and a proof object showing that \coqdocinductive{ev} 8. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_8} : \coqdocvar{ev} 8.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ev\_8'} : \coqdocvar{ev} 8 \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Quantifiers, Implications, Functions}



 In Coq's computational universe (where data structures and
    programs live), there are two sorts of values with arrows in their
    types: \textit{constructors} introduced by \coqdockw{Inductive}-ly defined data
    types, and \textit{functions}.


    Similarly, in Coq's logical universe (where we carry out proofs),
    there are two ways of giving evidence for an implication:
    constructors introduced by \coqdockw{Inductive}-ly defined propositions,
    and... functions!


    For example, consider this statement: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_plus4} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev} (4 + \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{H}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ev\_SS}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ev\_SS}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
What is the proof object corresponding to \coqdoclemma{ev\_plus4}?


    We're looking for an expression whose \textit{type} is \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n}, \coqdocinductive{ev} \coqdocabbreviation{n} \ensuremath{\rightarrow}
    \coqdocinductive{ev} (4 + \coqdocabbreviation{n}) -- that is, a \textit{function} that takes two arguments (one
    number and a piece of evidence) and returns a piece of evidence!
    Here it is: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ev\_plus4'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev} (4 + \coqdocvar{n}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} (\coqdocvar{n} : \coqdocvar{nat}) \ensuremath{\Rightarrow} \coqdockw{fun} (\coqdocvar{H} : \coqdocvar{ev} \coqdocvar{n}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{ev\_SS} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})) (\coqdocvar{ev\_SS} \coqdocvar{n} \coqdocvar{H}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Recall that \coqdockw{fun} \coqdocabbreviation{n} \ensuremath{\Rightarrow} \coqdocvar{blah} means ``the function that, given \coqdocabbreviation{n},
    yields \coqdocvar{blah},'' and that Coq treats 4 + \coqdocabbreviation{n} and \coqdocconstructor{S} (\coqdocconstructor{S} (\coqdocconstructor{S} (\coqdocconstructor{S} \coqdocabbreviation{n})))
    as synonyms. Another equivalent way to write this definition is: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ev\_plus4'{}'} (\coqdocvar{n} : \coqdocvar{nat}) (\coqdocvar{H} : \coqdocvar{ev} \coqdocvar{n}) : \coqdocvar{ev} (4 + \coqdocvar{n}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev\_SS} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})) (\coqdocvar{ev\_SS} \coqdocvar{n} \coqdocvar{H}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{ev\_plus4'{}'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
When we view the proposition being proved by \coqdoclemma{ev\_plus4} as a
    function type, one aspect of it may seem a little unusual. The
    second argument's type, \coqdocinductive{ev} \coqdocabbreviation{n}, mentions the \textit{value} of the first
    argument, \coqdocabbreviation{n}.  While such \textit{dependent types} are not found in
    conventional programming languages, they can be useful in
    programming too, as the recent flurry of activity in the
    functional programming community demonstrates.


    Notice that both implication (\ensuremath{\rightarrow}) and quantification (\coqdockw{\ensuremath{\forall}})
    correspond to functions on evidence.  In fact, they are really the
    same thing: \ensuremath{\rightarrow} is just a shorthand for a degenerate use of
    \coqdockw{\ensuremath{\forall}} where there is no dependency, i.e., no need to give a
    name to the type on the left-hand side of the arrow. 

 For example, consider this proposition: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ev\_plus2} : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdockw{\ensuremath{\forall}} (\coqdocvar{E} : \coqdocvar{ev} \coqdocvar{n}), \coqdocvar{ev} (\coqdocvar{n} + 2).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A proof term inhabiting this proposition would be a function
    with two arguments: a number \coqdocabbreviation{n} and some evidence \coqdocvar{E} that \coqdocabbreviation{n} is
    even.  But the name \coqdocvar{E} for this evidence is not used in the rest
    of the statement of \coqdocdefinition{ev\_plus2}, so it's a bit silly to bother
    making up a name for it.  We could write it like this instead,
    using the dummy identifier \coqdocvar{\_} in place of a real name: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ev\_plus2'} : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdockw{\ensuremath{\forall}} (\coqdocvar{\_} : \coqdocvar{ev} \coqdocvar{n}), \coqdocvar{ev} (\coqdocvar{n} + 2).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Or, equivalently, we can write it in more familiar notation: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ev\_plus2'{}'} : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev} (\coqdocvar{n} + 2).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In general, ``\coqdocaxiom{P} \ensuremath{\rightarrow} \coqdocvariable{Q}'' is just syntactic sugar for
    ``\coqdockw{\ensuremath{\forall}} (\coqdocvar{\_}:\coqdocaxiom{P}), \coqdocvariable{Q}''. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Programming with Tactics}



 If we can build proofs by giving explicit terms rather than
    executing tactic scripts, you may be wondering whether we can
    build \textit{programs} using \textit{tactics} rather than explicit terms.
    Naturally, the answer is yes! \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{add1} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat}.\coqdoceol
\coqdocnoindent
\coqdoctac{intro} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Show} \coqdockw{Proof}.\coqdoceol
\coqdocnoindent
\coqdoctac{apply} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Show} \coqdockw{Proof}.\coqdoceol
\coqdocnoindent
\coqdoctac{apply} \coqdocvar{n}. \coqdockw{Defined}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Print} \coqdocvar{add1}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Compute} \coqdocvar{add1} 2.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Notice that we terminate the \coqdockw{Definition} with a . rather than
    with := followed by a term.  This tells Coq to enter \textit{proof
    scripting mode} to build an object of type \coqdocdefinition{nat} \ensuremath{\rightarrow} \coqdocdefinition{nat}.  Also, we
    terminate the proof with \coqdockw{Defined} rather than \coqdockw{Qed}; this makes
    the definition \textit{transparent} so that it can be used in computation
    like a normally-defined function.  (\coqdockw{Qed}-defined objects are
    opaque during computation.)


    This feature is mainly useful for writing functions with dependent
    types, which we won't explore much further in this book.  But it
    does illustrate the uniformity and orthogonality of the basic
    ideas in Coq. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Logical Connectives as Inductive Types}



 Inductive definitions are powerful enough to express most of the
    connectives and quantifiers we have seen so far.  Indeed, only
    universal quantification (and thus implication) is built into Coq;
    all the others are defined inductively.  We'll see these
    definitions in this section. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Props}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Conjunction}




    To prove that \coqdocaxiom{P} \ensuremath{\land} \coqdocvariable{Q} holds, we must present evidence for both
    \coqdocaxiom{P} and \coqdocvariable{Q}.  Thus, it makes sense to define a proof object for \coqdocaxiom{P}
    \ensuremath{\land} \coqdocvariable{Q} as consisting of a pair of two proofs: one for \coqdocaxiom{P} and
    another one for \coqdocvariable{Q}. This leads to the following definition. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{And}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{and} (\coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop}) : \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{conj} : \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{and} \coqdocvar{P} \coqdocvar{Q}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{And}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Notice the similarity with the definition of the \coqdocinductive{prod} type,
    given in chapter \coqdoclibrary{Poly}; the only difference is that \coqdocinductive{prod} takes
    \coqdockw{Type} arguments, whereas \coqdocinductive{and} takes \coqdockw{Prop} arguments. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Print} \coqdocvar{prod}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This should clarify why \coqdoctac{destruct} and \coqdoctac{intros} patterns can be
    used on a conjunctive hypothesis.  Case analysis allows us to
    consider all possible ways in which \coqdocaxiom{P} \ensuremath{\land} \coqdocvariable{Q} was proved -- here
    just one (the \coqdocconstructor{conj} constructor).  Similarly, the \coqdoctac{split} tactic
    actually works for any inductively defined proposition with only
    one constructor.  In particular, it works for \coqdocinductive{and}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{and\_comm} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop}, \coqdocvar{P} \ensuremath{\land} \coqdocvar{Q} \ensuremath{\leftrightarrow} \coqdocvar{Q} \ensuremath{\land} \coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{intros} [\coqdocvar{HP} \coqdocvar{HQ}]. \coqdoctac{split}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{apply} \coqdocvar{HQ}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{apply} \coqdocvar{HP}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{intros} [\coqdocvar{HP} \coqdocvar{HQ}]. \coqdoctac{split}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{apply} \coqdocvar{HQ}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{apply} \coqdocvar{HP}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This shows why the inductive definition of \coqdocinductive{and} can be
    manipulated by tactics as we've been doing.  We can also use it to
    build proofs directly, using pattern-matching.  For instance: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{and\_comm'\_aux} \coqdocvar{P} \coqdocvar{Q} (\coqdocvar{H} : \coqdocvar{P} \ensuremath{\land} \coqdocvar{Q}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{H} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{conj} \coqdocvar{HP} \coqdocvar{HQ} \ensuremath{\Rightarrow} \coqdocvar{conj} \coqdocvar{HQ} \coqdocvar{HP}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{and\_comm'} \coqdocvar{P} \coqdocvar{Q} : \coqdocvar{P} \ensuremath{\land} \coqdocvar{Q} \ensuremath{\leftrightarrow} \coqdocvar{Q} \ensuremath{\land} \coqdocvar{P} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{conj} (\coqdocvar{and\_comm'\_aux} \coqdocvar{P} \coqdocvar{Q}) (\coqdocvar{and\_comm'\_aux} \coqdocvar{Q} \coqdocvar{P}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (conj\_fact)}

 Construct a proof object demonstrating the following proposition. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{conj\_fact} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R}, \coqdocvar{P} \ensuremath{\land} \coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{Q} \ensuremath{\land} \coqdocvar{R} \ensuremath{\rightarrow} \coqdocvar{P} \ensuremath{\land} \coqdocvar{R} \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\subsection{Disjunction}




    The inductive definition of disjunction uses two constructors, one
    for each side of the disjunct: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Or}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{or} (\coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop}) : \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{or\_introl} : \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{or} \coqdocvar{P} \coqdocvar{Q}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{or\_intror} : \coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{or} \coqdocvar{P} \coqdocvar{Q}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Or}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This declaration explains the behavior of the \coqdoctac{destruct} tactic on
    a disjunctive hypothesis, since the generated subgoals match the
    shape of the \coqdocconstructor{or\_introl} and \coqdocconstructor{or\_intror} constructors.


    Once again, we can also directly write proof objects for theorems
    involving \coqdocinductive{or}, without resorting to tactics. 

\paragraph{Exercise: 2 stars, optional (or\_commut'')}

 Try to write down an explicit proof object for \coqdoclemma{or\_commut} (without
    using \coqdockw{Print} to peek at the ones we already defined!). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{or\_comm} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q}, \coqdocvar{P} \ensuremath{\lor} \coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{Q} \ensuremath{\lor} \coqdocvar{P} \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\subsection{Existential Quantification}




    To give evidence for an existential quantifier, we package a
    witness \coqdocabbreviation{x} together with a proof that \coqdocabbreviation{x} satisfies the property
    \coqdocaxiom{P}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Ex}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ex} \{\coqdocvar{A} : \coqdockw{Type}\} (\coqdocvar{P} : \coqdocvar{A} \ensuremath{\rightarrow} \coqdockw{Prop}) : \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{ex\_intro} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} : \coqdocvar{A}, \coqdocvar{P} \coqdocvar{x} \ensuremath{\rightarrow} \coqdocvar{ex} \coqdocvar{P}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Ex}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This may benefit from a little unpacking.  The core definition is
    for a type former \coqdocinductive{ex} that can be used to build propositions of
    the form \coqdocinductive{ex} \coqdocaxiom{P}, where \coqdocaxiom{P} itself is a \textit{function} from witness
    values in the type \coqdocabbreviation{A} to propositions.  The \coqdocconstructor{ex\_intro}
    constructor then offers a way of constructing evidence for \coqdocinductive{ex} \coqdocaxiom{P},
    given a witness \coqdocabbreviation{x} and a proof of \coqdocaxiom{P} \coqdocabbreviation{x}.


    The more familiar form \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x}, \coqdocaxiom{P} \coqdocabbreviation{x} desugars to an expression
    involving \coqdocinductive{ex}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{ex} (\coqdockw{fun} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{ev} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here's how to define an explicit proof object involving \coqdocinductive{ex}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{some\_nat\_is\_even} : \coqdoctac{\ensuremath{\exists}} \coqdocvar{n}, \coqdocvar{ev} \coqdocvar{n} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ex\_intro} \coqdocvar{ev} 4 (\coqdocvar{ev\_SS} 2 (\coqdocvar{ev\_SS} 0 \coqdocvar{ev\_0})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (ex\_ev\_Sn)}

 Complete the definition of the following proof object: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ex\_ev\_Sn} : \coqdocvar{ex} (\coqdockw{fun} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{ev} (\coqdocvar{S} \coqdocvar{n})) \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{\texorpdfstring{\protect\coqdocinductive{True}}{True} and \texorpdfstring{\protect\coqdocinductive{False}}{False}}



 The inductive definition of the \coqdocinductive{True} proposition is simple: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{True} : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{I} : \coqdocvar{True}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It has one constructor (so every proof of \coqdocinductive{True} is the same, so
    being given a proof of \coqdocinductive{True} is not informative.) 

 \coqdocinductive{False} is equally simple -- indeed, so simple it may look
    syntactically wrong at first glance! \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{False} : \coqdockw{Prop} :=.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
That is, \coqdocinductive{False} is an inductive type with \textit{no} constructors --
    i.e., no way to build evidence for it. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Props}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Equality}



 Even Coq's equality relation is not built in.  It has the
    following inductive definition.  (Actually, the definition in the
    standard library is a small variant of this, which gives an
    induction principle that is slightly easier to use.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{MyEquality}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{eq} \{\coqdocvar{X}:\coqdockw{Type}\} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{X} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{eq\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{eq} \coqdocvar{x} \coqdocvar{x}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "x = y" := (\coqdocvar{eq} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{10.00em}
(\coqdoctac{at} \coqdockw{level} 70, \coqdockw{no} \coqdockw{associativity})\coqdoceol
\coqdocindent{10.00em}
: \coqdocvar{type\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The way to think about this definition is that, given a set \coqdocdefinition{X},
    it defines a \textit{family} of propositions ``\coqdocabbreviation{x} is equal to \coqdocabbreviation{y},''
    indexed by pairs of values (\coqdocabbreviation{x} and \coqdocabbreviation{y}) from \coqdocdefinition{X}.  There is just
    one way of constructing evidence for each member of this family:
    applying the constructor \coqdocconstructor{eq\_refl} to a type \coqdocdefinition{X} and a value \coqdocabbreviation{x} :
    \coqdocdefinition{X} yields evidence that \coqdocabbreviation{x} is equal to \coqdocabbreviation{x}. 

\paragraph{Exercise: 2 stars (leibniz\_equality)}

 The inductive definition of equality corresponds to \textit{Leibniz
    equality}: what we mean when we say ``\coqdocabbreviation{x} and \coqdocabbreviation{y} are equal'' is
    that every property on \coqdocaxiom{P} that is true of \coqdocabbreviation{x} is also true of
    \coqdocabbreviation{y}.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{leibniz\_equality} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X} : \coqdockw{Type}) (\coqdocvar{x} \coqdocvar{y}: \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x} = \coqdocvar{y} \ensuremath{\rightarrow} \coqdockw{\ensuremath{\forall}} \coqdocvar{P}:\coqdocvar{X}\ensuremath{\rightarrow}\coqdockw{Prop}, \coqdocvar{P} \coqdocvar{x} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 We can use \coqdocconstructor{eq\_refl} to construct evidence that, for example, 2 =
    2.  Can we also use it to construct evidence that 1 + 1 = 2?
    Yes, we can.  Indeed, it is the very same piece of evidence!  The
    reason is that Coq treats as ``the same'' any two terms that are
    \textit{convertible} according to a simple set of computation rules.
    These rules, which are similar to those used by \coqdockw{Compute}, include
    evaluation of function application, inlining of definitions, and
    simplification of \coqdockw{match}es.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{four}: 2 + 2 = 1 + 3.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{eq\_refl}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{reflexivity} tactic that we have used to prove equalities up
    to now is essentially just short-hand for \coqdoctac{apply} \coqexternalref{refl equal}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Logic}{\coqdocabbreviation{refl\_equal}}.


    In tactic-based proofs of equality, the conversion rules are
    normally hidden in uses of \coqdoctac{simpl} (either explicit or implicit in
    other tactics such as \coqdoctac{reflexivity}).  But you can see them
    directly at work in the following explicit proof objects: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{four'} : 2 + 2 = 1 + 3 :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{eq\_refl} 4.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{singleton} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Set}) (\coqdocvar{x}:\coqdocvar{X}), []++[\coqdocvar{x}] = \coqdocvar{x}::[]  :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} (\coqdocvar{X}:\coqdockw{Set}) (\coqdocvar{x}:\coqdocvar{X}) \ensuremath{\Rightarrow} \coqdocvar{eq\_refl} [\coqdocvar{x}].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{MyEquality}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{quiz6} : \coqdoctac{\ensuremath{\exists}} \coqdocvar{x},  \coqdocvar{x} + 3 = 4\coqdoceol
\coqdocindent{1.00em}
:= \coqdocvar{ex\_intro} (\coqdockw{fun} \coqdocvar{z} \ensuremath{\Rightarrow} (\coqdocvar{z} + 3 = 4)) 1 (\coqdocvar{refl\_equal} 4).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Inversion, Again}



 We've seen \coqdoctac{inversion} used with both equality hypotheses and
    hypotheses about inductively defined propositions.  Now that we've
    seen that these are actually the same thing, we're in a position
    to take a closer look at how \coqdoctac{inversion} behaves.


    In general, the \coqdoctac{inversion} tactic...



\begin{itemize}
\item  takes a hypothesis \coqdocvariable{H} whose type \coqdocaxiom{P} is inductively defined,
      and



\item  for each constructor \coqdocabbreviation{C} in \coqdocaxiom{P}'s definition,



\begin{itemize}
\item  generates a new subgoal in which we assume \coqdocvariable{H} was
        built with \coqdocabbreviation{C},



\item  adds the arguments (premises) of \coqdocabbreviation{C} to the context of
        the subgoal as extra hypotheses,



\item  matches the conclusion (result type) of \coqdocabbreviation{C} against the
        current goal and calculates a set of equalities that must
        hold in order for \coqdocabbreviation{C} to be applicable,



\item  adds these equalities to the context (and, for convenience,
        rewrites them in the goal), and



\item  if the equalities are not satisfiable (e.g., they involve
        things like \coqdocconstructor{S} \coqdocabbreviation{n} = \coqdocconstructor{O}), immediately solves the subgoal. 
\end{itemize}

\end{itemize}


 \textit{Example}: If we invert a hypothesis built with \coqdocinductive{or}, there are two
   constructors, so two subgoals get generated.  The
   conclusion (result type) of the constructor (\coqdocaxiom{P} \ensuremath{\lor} \coqdocvariable{Q}) doesn't
   place any restrictions on the form of \coqdocaxiom{P} or \coqdocvariable{Q}, so we don't get
   any extra equalities in the context of the subgoal.


   \textit{Example}: If we invert a hypothesis built with \coqdocinductive{and}, there is
   only one constructor, so only one subgoal gets generated.  Again,
   the conclusion (result type) of the constructor (\coqdocaxiom{P} \ensuremath{\land} \coqdocvariable{Q}) doesn't
   place any restrictions on the form of \coqdocaxiom{P} or \coqdocvariable{Q}, so we don't get
   any extra equalities in the context of the subgoal.  The
   constructor does have two arguments, though, and these can be seen
   in the context in the subgoal.


   \textit{Example}: If we invert a hypothesis built with \coqdocabbreviation{eq}, there is
   again only one constructor, so only one subgoal gets generated.
   Now, though, the form of the \coqexternalref{refl equal}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Logic}{\coqdocabbreviation{refl\_equal}} constructor does give us
   some extra information: it tells us that the two arguments to \coqdocabbreviation{eq}
   must be the same!  The \coqdoctac{inversion} tactic adds this fact to the
   context. 

 $Date: 2017-01-30 18:47:45 -0500 (Mon, 30 Jan 2017) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.IndPrinciples}{Library }{Top.IndPrinciples}

\begin{coqdoccode}
\end{coqdoccode}
\section{IndPrinciples: Induction Principles}



 With the Curry-Howard correspondence and its realization in Coq in
    mind, we can now take a deeper look at induction principles. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Export} \coqdocvar{ProofObjects}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Basics}



 Every time we declare a new \coqdockw{Inductive} datatype, Coq
    automatically generates an \textit{induction principle} for this type.
    This induction principle is a theorem like any other: If \coqdocvariable{t} is
    defined inductively, the corresponding induction principle is
    called \coqdocvar{t\_ind}.  Here is the one for natural numbers: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{nat\_ind}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{induction} tactic is a straightforward wrapper that, at its
    core, simply performs \coqdoctac{apply} \coqdocvar{t\_ind}.  To see this more clearly,
    let's experiment with directly using \coqdoctac{apply} \coqexternalref{nat ind}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocdefinition{nat\_ind}}, instead of
    the \coqdoctac{induction} tactic, to carry out some proofs.  Here, for
    example, is an alternate proof of a theorem that we saw in the
    \coqdoclibrary{Basics} chapter. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_0\_r'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} \ensuremath{\times} 0 = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{nat\_ind}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{n'} \coqdocvar{IHn'}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{IHn'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This proof is basically the same as the earlier one, but a
    few minor differences are worth noting.


    First, in the induction step of the proof (the "\coqdocconstructor{S}" case), we
    have to do a little bookkeeping manually (the \coqdoctac{intros}) that
    \coqdoctac{induction} does automatically.


    Second, we do not introduce \coqdocabbreviation{n} into the context before applying
    \coqexternalref{nat ind}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocdefinition{nat\_ind}} -- the conclusion of \coqexternalref{nat ind}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocdefinition{nat\_ind}} is a quantified formula,
    and \coqdoctac{apply} needs this conclusion to exactly match the shape of
    the goal state, including the quantifier.  By contrast, the
    \coqdoctac{induction} tactic works either with a variable in the context or
    a quantified variable in the goal.


    These conveniences make \coqdoctac{induction} nicer to use in practice than
    applying induction principles like \coqexternalref{nat ind}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocdefinition{nat\_ind}} directly.  But it is
    important to realize that, modulo these bits of bookkeeping,
    applying \coqexternalref{nat ind}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocdefinition{nat\_ind}} is what we are really doing. 

\paragraph{Exercise: 2 stars, optional (plus\_one\_r')}

 Complete this proof without using the \coqdoctac{induction} tactic. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_one\_r'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + 1 = \coqdocvar{S} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Coq generates induction principles for every datatype defined with
    \coqdockw{Inductive}, including those that aren't recursive.  Although of
    course we don't need induction to prove properties of
    non-recursive datatypes, the idea of an induction principle still
    makes sense for them: it gives a way to prove that a property
    holds for all values of the type.


    These generated principles follow a similar pattern. If we define
    a type \coqdocvariable{t} with constructors \coqdocconstructor{c1} ... \coqdocvar{cn}, Coq generates a
    theorem with this shape:


    t\_ind : forall P : t -> Prop,
              ... case for c1 ... ->
              ... case for c2 ... -> ...
              ... case for cn ... ->
              forall n : t, P n


    The specific shape of each case depends on the arguments to the
    corresponding constructor.  Before trying to write down a general
    rule, let's look at some more examples. First, an example where
    the constructors take no arguments: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{yesno} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{yes} : \coqdocvar{yesno}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdockw{no} : \coqdocvar{yesno}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{yesno\_ind}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional (rgb)}

 Write out the induction principle that Coq will generate for the
    following datatype.  Write down your answer on paper or type it
    into a comment, and then compare it with what Coq prints. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{rgb} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{red} : \coqdocvar{rgb}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{green} : \coqdocvar{rgb}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{blue} : \coqdocvar{rgb}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{rgb\_ind}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Here's another example, this time with one of the constructors
    taking some arguments. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{natlist} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nnil} : \coqdocvar{natlist}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ncons} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{natlist} \ensuremath{\rightarrow} \coqdocvar{natlist}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{natlist\_ind}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional (natlist1)}

 Suppose we had written the above definition a little
   differently: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{natlist1} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nnil1} : \coqdocvar{natlist1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nsnoc1} : \coqdocvar{natlist1} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{natlist1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now what will the induction principle look like?  \ensuremath{\Box} 

 From these examples, we can extract this general rule:



\begin{itemize}
\item  The type declaration gives several constructors; each
      corresponds to one clause of the induction principle.

\item  Each constructor \coqdocconstructor{c} takes argument types \coqdocvariable{a1} ... \coqdocvar{an}.

\item  Each \coqdocvar{ai} can be either \coqdocvariable{t} (the datatype we are defining) or
      some other type \coqdocdefinition{s}.

\item  The corresponding case of the induction principle says:



\begin{itemize}
\item  ``For all values \coqdocvariable{x1}...\coqdocvar{xn} of types \coqdocvariable{a1}...\coqdocvar{an}, if \coqdocaxiom{P}
          holds for each of the inductive arguments (each \coqdocvar{xi} of type
          \coqdocvariable{t}), then \coqdocaxiom{P} holds for \coqdocconstructor{c} \coqdocvariable{x1} ... \coqdocvar{xn}''.

\end{itemize}

\end{itemize}


\paragraph{Exercise: 1 star, optional (byntree\_ind)}

 Write out the induction principle that Coq will generate for the
    following datatype.  (Again, write down your answer on paper or
    type it into a comment, and then compare it with what Coq
    prints.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{byntree} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{0.50em}
\ensuremath{|} \coqdocvar{bempty} : \coqdocvar{byntree}\coqdoceol
\coqdocindent{0.50em}
\ensuremath{|} \coqdocvar{bleaf}  : \coqdocvar{yesno} \ensuremath{\rightarrow} \coqdocvar{byntree}\coqdoceol
\coqdocindent{0.50em}
\ensuremath{|} \coqdocvar{nbranch} : \coqdocvar{yesno} \ensuremath{\rightarrow} \coqdocvar{byntree} \ensuremath{\rightarrow} \coqdocvar{byntree} \ensuremath{\rightarrow} \coqdocvar{byntree}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star, optional (ex\_set)}

 Here is an induction principle for an inductively defined
    set.


      ExSet\_ind :
         forall P : ExSet -> Prop,
             (forall b : bool, P (con1 b)) ->
             (forall (n : nat) (e : ExSet), P e -> P (con2 n e)) ->
             forall e : ExSet, P e


    Give an \coqdockw{Inductive} definition of \coqdocinductive{ExSet}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ExSet} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocnoindent
.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Polymorphism}



 Next, what about polymorphic datatypes?


    The inductive definition of polymorphic lists


      Inductive list (X:Type) : Type :=
        | nil : list X
        | cons : X -> list X -> list X.


    is very similar to that of \coqdocinductive{natlist}.  The main difference is
    that, here, the whole definition is \textit{parameterized} on a set \coqdocdefinition{X}:
    that is, we are defining a \textit{family} of inductive types \coqdocinductive{list} \coqdocdefinition{X},
    one for each \coqdocdefinition{X}.  (Note that, wherever \coqdocinductive{list} appears in the body
    of the declaration, it is always applied to the parameter \coqdocdefinition{X}.)
    The induction principle is likewise parameterized on \coqdocdefinition{X}:


      list\_ind :
        forall (X : Type) (P : list X -> Prop),
           P \ensuremath{\Box} ->
           (forall (x : X) (l : list X), P l -> P (x :: l)) ->
           forall l : list X, P l


    Note that the \textit{whole} induction principle is parameterized on
    \coqdocdefinition{X}.  That is, \coqdocvar{list\_ind} can be thought of as a polymorphic
    function that, when applied to a type \coqdocdefinition{X}, gives us back an
    induction principle specialized to the type \coqdocinductive{list} \coqdocdefinition{X}. 

\paragraph{Exercise: 1 star, optional (tree)}

 Write out the induction principle that Coq will generate for
   the following datatype.  Compare your answer with what Coq
   prints. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tree} (\coqdocvar{X}:\coqdockw{Type}) : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{leaf} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{tree} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{node} : \coqdocvar{tree} \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{tree} \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{tree} \coqdocvar{X}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{tree\_ind}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star, optional (mytype)}

 Find an inductive definition that gives rise to the
    following induction principle:


      mytype\_ind :
        forall (X : Type) (P : mytype X -> Prop),
            (forall x : X, P (constr1 X x)) ->
            (forall n : nat, P (constr2 X n)) ->
            (forall m : mytype X, P m ->
               forall n : nat, P (constr3 X m n)) ->
            forall m : mytype X, P m
 \ensuremath{\Box} 

\paragraph{Exercise: 1 star, optional (foo)}

 Find an inductive definition that gives rise to the
    following induction principle:


      foo\_ind :
        forall (X Y : Type) (P : foo X Y -> Prop),
             (forall x : X, P (bar X Y x)) ->
             (forall y : Y, P (baz X Y y)) ->
             (forall f1 : nat -> foo X Y,
               (forall n : nat, P (f1 n)) -> P (quux X Y f1)) ->
             forall f2 : foo X Y, P f2
 \ensuremath{\Box} 

\paragraph{Exercise: 1 star, optional (foo')}

 Consider the following inductive definition: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{foo'} (\coqdocvar{X}:\coqdockw{Type}) : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{C1} : \coqdocvar{list} \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{foo'} \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{foo'} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{C2} : \coqdocvar{foo'} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
What induction principle will Coq generate for \coqdoclemma{foo'}?  Fill
   in the blanks, then check your answer with Coq.)


     foo'\_ind :
        forall (X : Type) (P : foo' X -> Prop),
              (forall (l : list X) (f : foo' X),
                    \textit{\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_} ->
                    \textit{\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_}   ) ->
             \textit{\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_} ->
             forall f : foo' X, \textit{\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_}


 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Induction Hypotheses}



 Where does the phrase ``induction hypothesis'' fit into this story?


    The induction principle for numbers


       forall P : nat -> Prop,
            P 0  ->
            (forall n : nat, P n -> P (S n))  ->
            forall n : nat, P n


   is a generic statement that holds for all propositions
   \coqdocaxiom{P} (or rather, strictly speaking, for all families of
   propositions \coqdocaxiom{P} indexed by a number \coqdocabbreviation{n}).  Each time we
   use this principle, we are choosing \coqdocaxiom{P} to be a particular
   expression of type \coqdocdefinition{nat}\ensuremath{\rightarrow}\coqdockw{Prop}.


   We can make proofs by induction more explicit by giving
   this expression a name.  For example, instead of stating
   the theorem \coqdoclemma{mult\_0\_r} as ``\coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n}, \coqdocabbreviation{n} \ensuremath{\times} 0 = 0,'' we can
   write it as ``\coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n}, \coqdocdefinition{P\_m0r} \coqdocabbreviation{n}'', where \coqdocdefinition{P\_m0r} is defined
   as... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{P\_m0r} (\coqdocvar{n}:\coqdocvar{nat}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} \ensuremath{\times} 0 = 0.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... or equivalently: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{P\_m0r'} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{n} \ensuremath{\times} 0 = 0.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now it is easier to see where \coqdocdefinition{P\_m0r} appears in the proof. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_0\_r'{}'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P\_m0r} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{nat\_ind}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{IHn}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{P\_m0r} \coqdoctac{in} \coqdocvar{IHn}. \coqdoctac{unfold} \coqdocvar{P\_m0r}. \coqdoctac{simpl}. \coqdoctac{apply} \coqdocvar{IHn}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This extra naming step isn't something that we do in
    normal proofs, but it is useful to do it explicitly for an example
    or two, because it allows us to see exactly what the induction
    hypothesis is.  If we prove \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n}, \coqdocdefinition{P\_m0r} \coqdocabbreviation{n} by induction on
    \coqdocabbreviation{n} (using either \coqdoctac{induction} or \coqdoctac{apply} \coqexternalref{nat ind}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocdefinition{nat\_ind}}), we see that the
    first subgoal requires us to prove \coqdocdefinition{P\_m0r} 0 (``\coqdocaxiom{P} holds for
    zero''), while the second subgoal requires us to prove \coqdockw{\ensuremath{\forall}} \coqdocvariable{n'},
    \coqdocdefinition{P\_m0r} \coqdocvariable{n'} \ensuremath{\rightarrow} \coqdocdefinition{P\_m0r} (\coqdocconstructor{S} \coqdocvariable{n'}) (that is ``\coqdocaxiom{P} holds of \coqdocconstructor{S} \coqdocvariable{n'} if it
    holds of \coqdocvariable{n'}'' or, more elegantly, ``\coqdocaxiom{P} is preserved by \coqdocconstructor{S}'').
    The \textit{induction hypothesis} is the premise of this latter
    implication -- the assumption that \coqdocaxiom{P} holds of \coqdocvariable{n'}, which we are
    allowed to use in proving that \coqdocaxiom{P} holds for \coqdocconstructor{S} \coqdocvariable{n'}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{More on the \texorpdfstring{\protect\coqdoctac{induction}}{induction} Tactic}



 The \coqdoctac{induction} tactic actually does even more low-level
    bookkeeping for us than we discussed above.


    Recall the informal statement of the induction principle for
    natural numbers:

\begin{itemize}
\item  If \coqdocaxiom{P} \coqdocabbreviation{n} is some proposition involving a natural number n, and
        we want to show that P holds for \textit{all} numbers n, we can
        reason like this:

\begin{itemize}
\item  show that \coqdocaxiom{P} \coqdocconstructor{O} holds

\item  show that, if \coqdocaxiom{P} \coqdocvariable{n'} holds, then so does \coqdocaxiom{P} (\coqdocconstructor{S} \coqdocvariable{n'})

\item  conclude that \coqdocaxiom{P} \coqdocabbreviation{n} holds for all n.

\end{itemize}

\end{itemize}
    So, when we begin a proof with \coqdoctac{intros} \coqdocabbreviation{n} and then \coqdoctac{induction} \coqdocabbreviation{n},
    we are first telling Coq to consider a \textit{particular} \coqdocabbreviation{n} (by
    introducing it into the context) and then telling it to prove
    something about \textit{all} numbers (by using induction).


    What Coq actually does in this situation, internally, is to
    ``re-generalize'' the variable we perform induction on.  For
    example, in our original proof that \coqdocdefinition{plus} is associative... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_assoc'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + (\coqdocvar{m} + \coqdocvar{p}) = (\coqdocvar{n} + \coqdocvar{m}) + \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{IHn'}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It also works to apply \coqdoctac{induction} to a variable that is
    quantified in the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_comm'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + \coqdocvar{m} = \coqdocvar{m} + \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{n} \coqdockw{as} [| \coqdocvar{n'}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{intros} \coqdocvar{m}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{plus\_n\_O}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{intros} \coqdocvar{m}. \coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{IHn'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{plus\_n\_Sm}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that \coqdoctac{induction} \coqdocabbreviation{n} leaves \coqdocabbreviation{m} still bound in the goal --
    i.e., what we are proving inductively is a statement beginning
    with \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{m}.


    If we do \coqdoctac{induction} on a variable that is quantified in the goal
    \textit{after} some other quantifiers, the \coqdoctac{induction} tactic will
    automatically introduce the variables bound by these quantifiers
    into the context. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus\_comm'{}'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} + \coqdocvar{m} = \coqdocvar{m} + \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{m} \coqdockw{as} [| \coqdocvar{m'}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{plus\_n\_O}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{IHm'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{plus\_n\_Sm}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional (plus\_explicit\_prop)}

 Rewrite both \coqdoclemma{plus\_assoc'} and \coqdoclemma{plus\_comm'} and their proofs in
    the same style as \coqdoclemma{mult\_0\_r'{}'} above -- that is, for each theorem,
    give an explicit \coqdockw{Definition} of the proposition being proved by
    induction, and state the theorem and proof in terms of this
    defined proposition.  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Induction Principles in \texorpdfstring{\protect\coqdockw{Prop}}{Prop}}



 Earlier, we looked in detail at the induction principles that Coq
    generates for inductively defined \textit{sets}.  The induction
    principles for inductively defined \textit{propositions} like \coqdocinductive{ev} are a
    tiny bit more complicated.  As with all induction principles, we
    want to use the induction principle on \coqdocinductive{ev} to prove things by
    inductively considering the possible shapes that something in \coqdocinductive{ev}
    can have.  Intuitively speaking, however, what we want to prove
    are not statements about \textit{evidence} but statements about
    \textit{numbers}: accordingly, we want an induction principle that lets
    us prove properties of numbers by induction on evidence.


    For example, from what we've said so far, you might expect the
    inductive definition of \coqdocinductive{ev}...


      Inductive ev : nat -> Prop :=
      | ev\_0 : ev 0
      | ev\_SS : forall n : nat, ev n -> ev (S (S n)).


    ...to give rise to an induction principle that looks like this...


    ev\_ind\_max : forall P : (forall n : nat, ev n -> Prop),
         P O ev\_0 ->
         (forall (m : nat) (E : ev m),
            P m E ->
            P (S (S m)) (ev\_SS m E)) ->
         forall (n : nat) (E : ev n),
         P n E


     ... because:



\begin{itemize}
\item  Since \coqdocinductive{ev} is indexed by a number \coqdocabbreviation{n} (every \coqdocinductive{ev} object \coqdocvar{E} is
       a piece of evidence that some particular number \coqdocabbreviation{n} is even),
       the proposition \coqdocaxiom{P} is parameterized by both \coqdocabbreviation{n} and \coqdocvar{E} --
       that is, the induction principle can be used to prove
       assertions involving both an even number and the evidence that
       it is even.



\item  Since there are two ways of giving evidence of evenness (\coqdocinductive{ev}
       has two constructors), applying the induction principle
       generates two subgoals:



\begin{itemize}
\item  We must prove that \coqdocaxiom{P} holds for \coqdocconstructor{O} and \coqdocconstructor{ev\_0}.



\item  We must prove that, whenever \coqdocabbreviation{n} is an even number and \coqdocvar{E}
           is an evidence of its evenness, if \coqdocaxiom{P} holds of \coqdocabbreviation{n} and
           \coqdocvar{E}, then it also holds of \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocabbreviation{n}) and \coqdocconstructor{ev\_SS} \coqdocabbreviation{n} \coqdocvar{E}.



\end{itemize}

\item  If these subgoals can be proved, then the induction principle
       tells us that \coqdocaxiom{P} is true for \textit{all} even numbers \coqdocabbreviation{n} and
       evidence \coqdocvar{E} of their evenness.

\end{itemize}


    This is more flexibility than we normally need or want: it is
    giving us a way to prove logical assertions where the assertion
    involves properties of some piece of \textit{evidence} of evenness, while
    all we really care about is proving properties of \textit{numbers} that
    are even -- we are interested in assertions about numbers, not
    about evidence.  It would therefore be more convenient to have an
    induction principle for proving propositions \coqdocaxiom{P} that are
    parameterized just by \coqdocabbreviation{n} and whose conclusion establishes \coqdocaxiom{P} for
    all even numbers \coqdocabbreviation{n}:


       forall P : nat -> Prop,
       ... ->
       forall n : nat,
       even n -> P n


    For this reason, Coq actually generates the following simplified
    induction principle for \coqdocinductive{ev}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{ev\_ind}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In particular, Coq has dropped the evidence term \coqdocvar{E} as a
    parameter of the the proposition \coqdocaxiom{P}. 

 In English, \coqdocdefinition{ev\_ind} says:



\begin{itemize}
\item  Suppose, \coqdocaxiom{P} is a property of natural numbers (that is, \coqdocaxiom{P} \coqdocabbreviation{n} is
      a \coqdockw{Prop} for every \coqdocabbreviation{n}).  To show that \coqdocaxiom{P} \coqdocabbreviation{n} holds whenever \coqdocabbreviation{n}
      is even, it suffices to show:



\begin{itemize}
\item  \coqdocaxiom{P} holds for 0,



\item  for any \coqdocabbreviation{n}, if \coqdocabbreviation{n} is even and \coqdocaxiom{P} holds for \coqdocabbreviation{n}, then \coqdocaxiom{P}
        holds for \coqdocconstructor{S} (\coqdocconstructor{S} \coqdocabbreviation{n}). 
\end{itemize}

\end{itemize}


 As expected, we can apply \coqdocdefinition{ev\_ind} directly instead of using
    \coqdoctac{induction}.  For example, we can use it to show that \coqdocinductive{ev'} (the
    slightly awkward alternate definition of evenness that we saw in
    an exercise in the \symbol{92}chap\{IndProp\} chapter) is equivalent to the
    cleaner inductive definition \coqdocinductive{ev}: \begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ev\_ev'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev'} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ev\_ind}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ev'\_0}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{m} \coqdocvar{Hm} \coqdocvar{IH}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} (\coqdocvar{ev'\_sum} 2 \coqdocvar{m}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{apply} \coqdocvar{ev'\_2}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{apply} \coqdocvar{IH}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The precise form of an \coqdockw{Inductive} definition can affect the
    induction principle Coq generates.


    For example, in chapter \coqdoclibrary{IndProp}, we defined \ensuremath{\le} as: \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
This definition can be streamlined a little by observing that the
    left-hand argument \coqdocabbreviation{n} is the same everywhere in the definition,
    so we can actually make it a ``general parameter'' to the whole
    definition, rather than an argument to each constructor. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{le} (\coqdocvar{n}:\coqdocvar{nat}) : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{le\_n} : \coqdocvar{le} \coqdocvar{n} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{le\_S} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m}, (\coqdocvar{le} \coqdocvar{n} \coqdocvar{m}) \ensuremath{\rightarrow} (\coqdocvar{le} \coqdocvar{n} (\coqdocvar{S} \coqdocvar{m})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "m <= n" := (\coqdocvar{le} \coqdocvar{m} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The second one is better, even though it looks less symmetric.
    Why?  Because it gives us a simpler induction principle. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{le\_ind}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Formal vs. Informal Proofs by Induction}



 Question: What is the relation between a formal proof of a
    proposition \coqdocaxiom{P} and an informal proof of the same proposition \coqdocaxiom{P}?


    Answer: The latter should \textit{teach} the reader how to produce the
    former.


    Question: How much detail is needed??


    Unfortunately, there is no single right answer; rather, there is a
    range of choices.


    At one end of the spectrum, we can essentially give the reader the
    whole formal proof (i.e., the ``informal'' proof will amount to just
    transcribing the formal one into words).  This may give the reader
    the ability to reproduce the formal one for themselves, but it
    probably doesn't \textit{teach} them anything much.


   At the other end of the spectrum, we can say ``The theorem is true
   and you can figure out why for yourself if you think about it hard
   enough.''  This is also not a good teaching strategy, because often
   writing the proof requires one or more significant insights into
   the thing we're proving, and most readers will give up before they
   rediscover all the same insights as we did.


   In the middle is the golden mean -- a proof that includes all of
   the essential insights (saving the reader the hard work that we
   went through to find the proof in the first place) plus high-level
   suggestions for the more routine parts to save the reader from
   spending too much time reconstructing these (e.g., what the IH says
   and what must be shown in each case of an inductive proof), but not
   so much detail that the main ideas are obscured.


   Since we've spent much of this chapter looking ``under the hood'' at
   formal proofs by induction, now is a good moment to talk a little
   about \textit{informal} proofs by induction.


   In the real world of mathematical communication, written proofs
   range from extremely longwinded and pedantic to extremely brief and
   telegraphic.  Although the ideal is somewhere in between, while one
   is getting used to the style it is better to start out at the
   pedantic end.  Also, during the learning phase, it is probably
   helpful to have a clear standard to compare against.  With this in
   mind, we offer two templates -- one for proofs by induction over
   \textit{data} (i.e., where the thing we're doing induction on lives in
   \coqdockw{Type}) and one for proofs by induction over \textit{evidence} (i.e.,
   where the inductively defined thing lives in \coqdockw{Prop}). \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Induction Over an Inductively Defined Set}



 \textit{Template}:



\begin{itemize}
\item  \textit{Theorem}: <Universally quantified proposition of the form
         ``For all \coqdocabbreviation{n}:\coqdocconstructor{S}, \coqdocaxiom{P}(\coqdocabbreviation{n}),'' where \coqdocconstructor{S} is some inductively defined
         set.>


         \textit{Proof}: By induction on \coqdocabbreviation{n}.


           <one case for each constructor \coqdocconstructor{c} of \coqdocconstructor{S}...>



\begin{itemize}
\item  Suppose \coqdocabbreviation{n} = \coqdocconstructor{c} \coqdocvariable{a1} ... \coqdocvar{ak}, where <...and here we state
             the IH for each of the \coqdocabbreviation{a}'s that has type \coqdocconstructor{S}, if any>.
             We must show <...and here we restate \coqdocaxiom{P}(\coqdocconstructor{c} \coqdocvariable{a1} ... \coqdocvar{ak})>.


             <go on and prove \coqdocaxiom{P}(\coqdocabbreviation{n}) to finish the case...>



\item  <other cases similarly...>                        \ensuremath{\Box}

\end{itemize}

\end{itemize}


    \textit{Example}:



\begin{itemize}
\item  \textit{Theorem}: For all sets \coqdocdefinition{X}, lists \coqdocabbreviation{l} : \coqdocinductive{list} \coqdocdefinition{X}, and numbers
        \coqdocabbreviation{n}, if \coqdocdefinition{length} \coqdocabbreviation{l} = \coqdocabbreviation{n} then \coqdocvar{index} (\coqdocconstructor{S} \coqdocabbreviation{n}) \coqdocabbreviation{l} = \coqdocconstructor{None}.


        \textit{Proof}: By induction on \coqdocabbreviation{l}.



\begin{itemize}
\item  Suppose \coqdocabbreviation{l} = [].  We must show, for all numbers \coqdocabbreviation{n},
          that, if \coqdocdefinition{length} [] = \coqdocabbreviation{n}, then \coqdocvar{index} (\coqdocconstructor{S} \coqdocabbreviation{n}) [] =
          \coqdocconstructor{None}.


          This follows immediately from the definition of \coqdocvar{index}.



\item  Suppose \coqdocabbreviation{l} = \coqdocabbreviation{x} :: \coqdocvariable{l'} for some \coqdocabbreviation{x} and \coqdocvariable{l'}, where
          \coqdocdefinition{length} \coqdocvariable{l'} = \coqdocvariable{n'} implies \coqdocvar{index} (\coqdocconstructor{S} \coqdocvariable{n'}) \coqdocvariable{l'} = \coqdocconstructor{None}, for
          any number \coqdocvariable{n'}.  We must show, for all \coqdocabbreviation{n}, that, if
          \coqdocdefinition{length} (\coqdocabbreviation{x}::\coqdocvariable{l'}) = \coqdocabbreviation{n} then \coqdocvar{index} (\coqdocconstructor{S} \coqdocabbreviation{n}) (\coqdocabbreviation{x}::\coqdocvariable{l'}) =
          \coqdocconstructor{None}.


          Let \coqdocabbreviation{n} be a number with \coqdocdefinition{length} \coqdocabbreviation{l} = \coqdocabbreviation{n}.  Since


            length l = length (x::l') = S (length l'),


          it suffices to show that


            index (S (length l')) l' = None.


          But this follows directly from the induction hypothesis,
          picking \coqdocvariable{n'} to be \coqdocdefinition{length} \coqdocvariable{l'}.  \ensuremath{\Box} 
\end{itemize}

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Induction Over an Inductively Defined Proposition}



 Since inductively defined proof objects are often called
    ``derivation trees,'' this form of proof is also known as \textit{induction
    on derivations}.


    \textit{Template}:



\begin{itemize}
\item  \textit{Theorem}: <Proposition of the form ``\coqdocvariable{Q} \ensuremath{\rightarrow} \coqdocaxiom{P},'' where \coqdocvariable{Q} is
         some inductively defined proposition (more generally,
         ``For all \coqdocabbreviation{x} \coqdocabbreviation{y} \coqdocabbreviation{z}, \coqdocvariable{Q} \coqdocabbreviation{x} \coqdocabbreviation{y} \coqdocabbreviation{z} \ensuremath{\rightarrow} \coqdocaxiom{P} \coqdocabbreviation{x} \coqdocabbreviation{y} \coqdocabbreviation{z}'')>


         \textit{Proof}: By induction on a derivation of \coqdocvariable{Q}.  <Or, more
         generally, ``Suppose we are given \coqdocabbreviation{x}, \coqdocabbreviation{y}, and \coqdocabbreviation{z}.  We
         show that \coqdocvariable{Q} \coqdocabbreviation{x} \coqdocabbreviation{y} \coqdocabbreviation{z} implies \coqdocaxiom{P} \coqdocabbreviation{x} \coqdocabbreviation{y} \coqdocabbreviation{z}, by induction on a
         derivation of \coqdocvariable{Q} \coqdocabbreviation{x} \coqdocabbreviation{y} \coqdocabbreviation{z}''...>


           <one case for each constructor \coqdocconstructor{c} of \coqdocvariable{Q}...>



\begin{itemize}
\item  Suppose the final rule used to show \coqdocvariable{Q} is \coqdocconstructor{c}.  Then
             <...and here we state the types of all of the \coqdocabbreviation{a}'s
             together with any equalities that follow from the
             definition of the constructor and the IH for each of
             the \coqdocabbreviation{a}'s that has type \coqdocvariable{Q}, if there are any>.  We must
             show <...and here we restate \coqdocaxiom{P}>.


             <go on and prove \coqdocaxiom{P} to finish the case...>



\item  <other cases similarly...>                        \ensuremath{\Box}

\end{itemize}

\end{itemize}


    \textit{Example}


\begin{itemize}
\item  \textit{Theorem}: The \ensuremath{\le} relation is transitive -- i.e., for all
         numbers \coqdocabbreviation{n}, \coqdocabbreviation{m}, and \coqdocvariable{o}, if \coqdocabbreviation{n} \ensuremath{\le} \coqdocabbreviation{m} and \coqdocabbreviation{m} \ensuremath{\le} \coqdocvariable{o}, then
         \coqdocabbreviation{n} \ensuremath{\le} \coqdocvariable{o}.


         \textit{Proof}: By induction on a derivation of \coqdocabbreviation{m} \ensuremath{\le} \coqdocvariable{o}.



\begin{itemize}
\item  Suppose the final rule used to show \coqdocabbreviation{m} \ensuremath{\le} \coqdocvariable{o} is
             \coqdocconstructor{le\_n}. Then \coqdocabbreviation{m} = \coqdocvariable{o} and we must show that \coqdocabbreviation{n} \ensuremath{\le} \coqdocabbreviation{m},
             which is immediate by hypothesis.



\item  Suppose the final rule used to show \coqdocabbreviation{m} \ensuremath{\le} \coqdocvariable{o} is
             \coqdocconstructor{le\_S}.  Then \coqdocvariable{o} = \coqdocconstructor{S} \coqdocvar{o'} for some \coqdocvar{o'} with \coqdocabbreviation{m} \ensuremath{\le} \coqdocvar{o'}.
             We must show that \coqdocabbreviation{n} \ensuremath{\le} \coqdocconstructor{S} \coqdocvar{o'}.
             By induction hypothesis, \coqdocabbreviation{n} \ensuremath{\le} \coqdocvar{o'}.


             But then, by \coqdocconstructor{le\_S}, \coqdocabbreviation{n} \ensuremath{\le} \coqdocconstructor{S} \coqdocvar{o'}.  \ensuremath{\Box} 
\end{itemize}

\end{itemize}


 $Date: 2016-09-27 11:35:13 -0400 (Tue, 27 Sep 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Rel}{Library }{Top.Rel}

\begin{coqdoccode}
\end{coqdoccode}
\section{Rel: Properties of Relations}



 This short (and optional) chapter develops some basic definitions
    and a few theorems about binary relations in Coq.  The key
    definitions are repeated where they are actually used (in the
    \coqdoclibrary{Smallstep} chapter), so readers who are already comfortable with
    these ideas can safely skim or skip this chapter.  However,
    relations are also a good source of exercises for developing
    facility with Coq's basic reasoning facilities, so it may be
    useful to look at this material just after the \coqdoclibrary{IndProp}
    chapter. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Export} \coqdocvar{IndProp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A binary \textit{relation} on a set \coqdocdefinition{X} is a family of propositions
    parameterized by two elements of \coqdocdefinition{X} -- i.e., a proposition about
    pairs of elements of \coqdocdefinition{X}.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{relation} (\coqdocvar{X}: \coqdockw{Type}) := \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{X} \ensuremath{\rightarrow} \coqdockw{Prop}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Confusingly, the Coq standard library hijacks the generic term
    ``relation'' for this specific instance of the idea. To maintain
    consistency with the library, we will do the same.  So, henceforth
    the Coq identifier \coqdocdefinition{relation} will always refer to a binary
    relation between some set and itself, whereas the English word
    ``relation'' can refer either to the specific Coq concept or the
    more general concept of a relation between any number of possibly
    different sets.  The context of the discussion should always make
    clear which is meant. 

 An example relation on \coqdocdefinition{nat} is \coqdocinductive{le}, the less-than-or-equal-to
    relation, which we usually write \coqdocvariable{n1} \ensuremath{\le} \coqdocvariable{n2}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Print} \coqdocvar{le}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{le} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{le} : \coqdocvar{relation} \coqdocvar{nat}.\coqdoceol
\end{coqdoccode}
(Why did we write it this way instead of starting with \coqdockw{Inductive}
    \coqdocinductive{le} : \coqdocdefinition{relation} \coqdocdefinition{nat}...?  Because we wanted to put the first \coqdocdefinition{nat}
    to the left of the :, which makes Coq generate a somewhat nicer
    induction principle for reasoning about \ensuremath{\le}.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Basic Properties}



 As anyone knows who has taken an undergraduate discrete math
    course, there is a lot to be said about relations in general,
    including ways of classifying relations (as reflexive, transitive,
    etc.), theorems that can be proved generically about certain sorts
    of relations, constructions that build one relation from another,
    etc.  For example... \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Partial Functions}



 A relation \coqdocdefinition{R} on a set \coqdocdefinition{X} is a \textit{partial function} if, for every
    \coqdocabbreviation{x}, there is at most one \coqdocabbreviation{y} such that \coqdocdefinition{R} \coqdocabbreviation{x} \coqdocabbreviation{y} -- i.e., \coqdocdefinition{R} \coqdocabbreviation{x} \coqdocvariable{y1}
    and \coqdocdefinition{R} \coqdocabbreviation{x} \coqdocvariable{y2} together imply \coqdocvariable{y1} = \coqdocvariable{y2}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{partial\_function} \{\coqdocvar{X}: \coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y1} \coqdocvar{y2} : \coqdocvar{X}, \coqdocvar{R} \coqdocvar{x} \coqdocvar{y1} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y2} \ensuremath{\rightarrow} \coqdocvar{y1} = \coqdocvar{y2}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For example, the \coqdocinductive{next\_nat} relation defined earlier is a partial
    function. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Print} \coqdocvar{next\_nat}.\coqdoceol
\coqdocnoindent
\coqdockw{Check} \coqdocvar{next\_nat} : \coqdocvar{relation} \coqdocvar{nat}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{next\_nat\_partial\_function} :\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{partial\_function} \coqdocvar{next\_nat}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{partial\_function}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{H1} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H1}. \coqdoctac{inversion} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, the \ensuremath{\le} relation on numbers is not a partial
    function.  (Assume, for a contradiction, that \ensuremath{\le} is a partial
    function.  But then, since 0 \ensuremath{\le} 0 and 0 \ensuremath{\le} 1, it follows that
    0 = 1.  This is nonsense, so our assumption was
    contradictory.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_not\_a\_partial\_function} :\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} (\coqdocvar{partial\_function} \coqdocvar{le}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{not}. \coqdoctac{unfold} \coqdocvar{partial\_function}. \coqdoctac{intros} \coqdocvar{Hc}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (0 = 1) \coqdockw{as} \coqdocvar{Nonsense}. \{ \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{Hc} \coqdockw{with} (\coqdocvar{x} := 0).\coqdoceol
\coqdocindent{2.00em}
- \coqdoctac{apply} \coqdocvar{le\_n}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoctac{apply} \coqdocvar{le\_S}. \coqdoctac{apply} \coqdocvar{le\_n}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{Nonsense}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional}

 Show that the \coqdocvar{total\_relation} defined in earlier is not a partial
    function. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional}

 Show that the \coqdocvar{empty\_relation} that we defined earlier is a
    partial function. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Reflexive Relations}



 A \textit{reflexive} relation on a set \coqdocdefinition{X} is one for which every element
    of \coqdocdefinition{X} is related to itself. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{reflexive} \{\coqdocvar{X}: \coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{a} : \coqdocvar{X}, \coqdocvar{R} \coqdocvar{a} \coqdocvar{a}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_reflexive} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{reflexive} \coqdocvar{le}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{reflexive}. \coqdoctac{intros} \coqdocvar{n}. \coqdoctac{apply} \coqdocvar{le\_n}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Transitive Relations}



 A relation \coqdocdefinition{R} is \textit{transitive} if \coqdocdefinition{R} \coqdocabbreviation{a} \coqdocconstructor{c} holds whenever \coqdocdefinition{R} \coqdocabbreviation{a} \coqdocconstructor{b}
    and \coqdocdefinition{R} \coqdocconstructor{b} \coqdocconstructor{c} do. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{transitive} \{\coqdocvar{X}: \coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{b} \coqdocvar{c} : \coqdocvar{X}, (\coqdocvar{R} \coqdocvar{a} \coqdocvar{b}) \ensuremath{\rightarrow} (\coqdocvar{R} \coqdocvar{b} \coqdocvar{c}) \ensuremath{\rightarrow} (\coqdocvar{R} \coqdocvar{a} \coqdocvar{c}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_trans} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{transitive} \coqdocvar{le}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{Hnm} \coqdocvar{Hmo}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hmo}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{Hnm}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{le\_S}. \coqdoctac{apply} \coqdocvar{IHHmo}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{lt\_trans}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{transitive} \coqdocvar{lt}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{lt}. \coqdoctac{unfold} \coqdocvar{transitive}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{Hnm} \coqdocvar{Hmo}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{le\_S} \coqdoctac{in} \coqdocvar{Hnm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{le\_trans} \coqdockw{with} (\coqdocvar{a} := (\coqdocvar{S} \coqdocvar{n})) (\coqdocvar{b} := (\coqdocvar{S} \coqdocvar{m})) (\coqdocvar{c} := \coqdocvar{o}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{Hnm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{Hmo}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional}

 We can also prove \coqdoclemma{lt\_trans} more laboriously by induction,
    without using \coqdoclemma{le\_trans}.  Do this.\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{lt\_trans'} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{transitive} \coqdocvar{lt}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{lt}. \coqdoctac{unfold} \coqdocvar{transitive}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{Hnm} \coqdocvar{Hmo}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hmo} \coqdockw{as} [| \coqdocvar{m'} \coqdocvar{Hm'o}].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional}

 Prove the same thing again by induction on \coqdocvariable{o}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{lt\_trans'{}'} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{transitive} \coqdocvar{lt}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{lt}. \coqdoctac{unfold} \coqdocvar{transitive}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{o} \coqdocvar{Hnm} \coqdocvar{Hmo}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{o} \coqdockw{as} [| \coqdocvar{o'}].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 The transitivity of \coqdocinductive{le}, in turn, can be used to prove some facts
    that will be useful later (e.g., for the proof of antisymmetry
    below)... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_Sn\_le} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{S} \coqdocvar{n} \ensuremath{\le} \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{n} \ensuremath{\le} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{le\_trans} \coqdockw{with} (\coqdocvar{S} \coqdocvar{n}).\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{le\_S}. \coqdoctac{apply} \coqdocvar{le\_n}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_S\_n} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{S} \coqdocvar{n} \ensuremath{\le} \coqdocvar{S} \coqdocvar{m}) \ensuremath{\rightarrow} (\coqdocvar{n} \ensuremath{\le} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (le\_Sn\_n\_inf)}

 Provide an informal proof of the following theorem:


    Theorem: For every \coqdocabbreviation{n}, \ensuremath{\lnot} (\coqdocconstructor{S} \coqdocabbreviation{n} \ensuremath{\le} \coqdocabbreviation{n})


    A formal proof of this is an optional exercise below, but try
    writing an informal proof without doing the formal proof first.


    Proof:
        \ensuremath{\Box}
 

\paragraph{Exercise: 1 star, optional}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_Sn\_n} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} (\coqdocvar{S} \coqdocvar{n} \ensuremath{\le} \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Reflexivity and transitivity are the main concepts we'll need for
    later chapters, but, for a bit of additional practice working with
    relations in Coq, let's look at a few other common ones... \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Symmetric and Antisymmetric Relations}



 A relation \coqdocdefinition{R} is \textit{symmetric} if \coqdocdefinition{R} \coqdocabbreviation{a} \coqdocconstructor{b} implies \coqdocdefinition{R} \coqdocconstructor{b} \coqdocabbreviation{a}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{symmetric} \{\coqdocvar{X}: \coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{b} : \coqdocvar{X}, (\coqdocvar{R} \coqdocvar{a} \coqdocvar{b}) \ensuremath{\rightarrow} (\coqdocvar{R} \coqdocvar{b} \coqdocvar{a}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_not\_symmetric} :\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} (\coqdocvar{symmetric} \coqdocvar{le}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 A relation \coqdocdefinition{R} is \textit{antisymmetric} if \coqdocdefinition{R} \coqdocabbreviation{a} \coqdocconstructor{b} and \coqdocdefinition{R} \coqdocconstructor{b} \coqdocabbreviation{a} together
    imply \coqdocabbreviation{a} = \coqdocconstructor{b} -- that is, if the only ``cycles'' in \coqdocdefinition{R} are trivial
    ones. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{antisymmetric} \{\coqdocvar{X}: \coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{b} : \coqdocvar{X}, (\coqdocvar{R} \coqdocvar{a} \coqdocvar{b}) \ensuremath{\rightarrow} (\coqdocvar{R} \coqdocvar{b} \coqdocvar{a}) \ensuremath{\rightarrow} \coqdocvar{a} = \coqdocvar{b}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_antisymmetric} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{antisymmetric} \coqdocvar{le}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_step} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} < \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{m} \ensuremath{\le} \coqdocvar{S} \coqdocvar{p} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} \ensuremath{\le} \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Equivalence Relations}



 A relation is an \textit{equivalence} if it's reflexive, symmetric, and
    transitive.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{equivalence} \{\coqdocvar{X}:\coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{reflexive} \coqdocvar{R}) \ensuremath{\land} (\coqdocvar{symmetric} \coqdocvar{R}) \ensuremath{\land} (\coqdocvar{transitive} \coqdocvar{R}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Partial Orders and Preorders}



 A relation is a \textit{partial order} when it's reflexive,
    \textit{anti}-symmetric, and transitive.  In the Coq standard library
    it's called just ``order'' for short. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{order} \{\coqdocvar{X}:\coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{reflexive} \coqdocvar{R}) \ensuremath{\land} (\coqdocvar{antisymmetric} \coqdocvar{R}) \ensuremath{\land} (\coqdocvar{transitive} \coqdocvar{R}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A preorder is almost like a partial order, but doesn't have to be
    antisymmetric. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{preorder} \{\coqdocvar{X}:\coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{reflexive} \coqdocvar{R}) \ensuremath{\land} (\coqdocvar{transitive} \coqdocvar{R}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{le\_order} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{order} \coqdocvar{le}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{order}. \coqdoctac{split}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{apply} \coqdocvar{le\_reflexive}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoctac{split}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{apply} \coqdocvar{le\_antisymmetric}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{apply} \coqdocvar{le\_trans}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Reflexive, Transitive Closure}



 The \textit{reflexive, transitive closure} of a relation \coqdocdefinition{R} is the
    smallest relation that contains \coqdocdefinition{R} and that is both reflexive and
    transitive.  Formally, it is defined like this in the Relations
    module of the Coq standard library: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{clos\_refl\_trans} \{\coqdocvar{A}: \coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{A}) : \coqdocvar{relation} \coqdocvar{A} :=\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{rt\_step} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y}, \coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{clos\_refl\_trans} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{rt\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{clos\_refl\_trans} \coqdocvar{R} \coqdocvar{x} \coqdocvar{x}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{rt\_trans} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} \coqdocvar{z},\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{clos\_refl\_trans} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{clos\_refl\_trans} \coqdocvar{R} \coqdocvar{y} \coqdocvar{z} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{clos\_refl\_trans} \coqdocvar{R} \coqdocvar{x} \coqdocvar{z}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For example, the reflexive and transitive closure of the
    \coqdocinductive{next\_nat} relation coincides with the \coqdocinductive{le} relation. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{next\_nat\_closure\_is\_le} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{n} \ensuremath{\le} \coqdocvar{m}) \ensuremath{\leftrightarrow} ((\coqdocvar{clos\_refl\_trans} \coqdocvar{next\_nat}) \coqdocvar{n} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intro} \coqdocvar{H}. \coqdoctac{induction} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{apply} \coqdocvar{rt\_refl}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{rt\_trans} \coqdockw{with} \coqdocvar{m}. \coqdoctac{apply} \coqdocvar{IHle}. \coqdoctac{apply} \coqdocvar{rt\_step}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{nn}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intro} \coqdocvar{H}. \coqdoctac{induction} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{le\_S}. \coqdoctac{apply} \coqdocvar{le\_n}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{apply} \coqdocvar{le\_n}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{le\_trans} \coqdockw{with} \coqdocvar{y}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHclos\_refl\_trans1}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHclos\_refl\_trans2}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The above definition of reflexive, transitive closure is natural:
    it says, explicitly, that the reflexive and transitive closure of
    \coqdocdefinition{R} is the least relation that includes \coqdocdefinition{R} and that is closed
    under rules of reflexivity and transitivity.  But it turns out
    that this definition is not very convenient for doing proofs,
    since the ``nondeterminism'' of the \coqdocconstructor{rt\_trans} rule can sometimes
    lead to tricky inductions.  Here is a more useful definition: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{clos\_refl\_trans\_1n} \{\coqdocvar{A} : \coqdockw{Type}\}\coqdoceol
\coqdocindent{14.50em}
(\coqdocvar{R} : \coqdocvar{relation} \coqdocvar{A}) (\coqdocvar{x} : \coqdocvar{A})\coqdoceol
\coqdocindent{14.50em}
: \coqdocvar{A} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{rt1n\_refl} : \coqdocvar{clos\_refl\_trans\_1n} \coqdocvar{R} \coqdocvar{x} \coqdocvar{x}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{rt1n\_trans} (\coqdocvar{y} \coqdocvar{z} : \coqdocvar{A}) :\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{clos\_refl\_trans\_1n} \coqdocvar{R} \coqdocvar{y} \coqdocvar{z} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{clos\_refl\_trans\_1n} \coqdocvar{R} \coqdocvar{x} \coqdocvar{z}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Our new definition of reflexive, transitive closure ``bundles''
    the \coqdocconstructor{rt\_step} and \coqdocconstructor{rt\_trans} rules into the single rule step.
    The left-hand premise of this step is a single use of \coqdocdefinition{R},
    leading to a much simpler induction principle.


    Before we go on, we should check that the two definitions do
    indeed define the same relation...


    First, we prove two lemmas showing that \coqdocinductive{clos\_refl\_trans\_1n} mimics
    the behavior of the two ``missing'' \coqdocinductive{clos\_refl\_trans}
    constructors.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{rsc\_R} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{R}:\coqdocvar{relation} \coqdocvar{X}) (\coqdocvar{x} \coqdocvar{y} : \coqdocvar{X}),\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{clos\_refl\_trans\_1n} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{X} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{rt1n\_trans} \coqdockw{with} \coqdocvar{y}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{rt1n\_refl}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (rsc\_trans)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{rsc\_trans} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) (\coqdocvar{x} \coqdocvar{y} \coqdocvar{z} : \coqdocvar{X}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{clos\_refl\_trans\_1n} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{clos\_refl\_trans\_1n} \coqdocvar{R} \coqdocvar{y} \coqdocvar{z} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{clos\_refl\_trans\_1n} \coqdocvar{R} \coqdocvar{x} \coqdocvar{z}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Then we use these facts to prove that the two definitions of
    reflexive, transitive closure do indeed define the same
    relation. 

\paragraph{Exercise: 3 stars, optional (rtc\_rsc\_coincide)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{rtc\_rsc\_coincide} :\coqdoceol
\coqdocindent{4.50em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) (\coqdocvar{x} \coqdocvar{y} : \coqdocvar{X}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clos\_refl\_trans} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \ensuremath{\leftrightarrow} \coqdocvar{clos\_refl\_trans\_1n} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-05-26 16:17:19 -0400 (Thu, 26 May 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Imp}{Library }{Top.Imp}

\begin{coqdoccode}
\end{coqdoccode}
\section{Imp: Simple Imperative Programs}



 In this chapter, we begin a new direction that will continue for
    the rest of the course.  Up to now most of our attention has been
    focused on various aspects of Coq itself, while from now on we'll
    mostly be using Coq to formalize other things.  (We'll continue to
    pause from time to time to introduce a few additional aspects of
    Coq.)


    Our first case study is a \textit{simple imperative programming language}
    called Imp, embodying a tiny core fragment of conventional
    mainstream languages such as C and Java.  Here is a familiar
    mathematical function written in Imp.


     Z ::= X;;
     Y ::= 1;;
     WHILE not (Z = 0) DO
       Y ::= Y * Z;;
       Z ::= Z - 1
     END


 This chapter looks at how to define the \textit{syntax} and \textit{semantics}
    of Imp; the chapters that follow develop a theory of \textit{program
    equivalence} and introduce \textit{Hoare Logic}, a widely used logic for
    reasoning about imperative programs. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Bool.Bool}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.EqNat}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Lists.List}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{ListNotations}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Arithmetic and Boolean Expressions}



 We'll present Imp in three parts: first a core language of
    \textit{arithmetic and boolean expressions}, then an extension of these
    expressions with \textit{variables}, and finally a language of \textit{commands}
    including assignment, conditions, sequencing, and loops. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Syntax}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{AExp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
These two definitions specify the \textit{abstract syntax} of
    arithmetic and boolean expressions. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{aexp} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ANum} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMinus} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMult} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{bexp} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BTrue} : \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BFalse} : \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BEq} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BLe} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BNot} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BAnd} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{bexp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In this chapter, we'll elide the translation from the
    concrete syntax that a programmer would actually write to these
    abstract syntax trees -- the process that, for example, would
    translate the string "1+2*3" to the AST


      APlus (ANum 1) (AMult (ANum 2) (ANum 3)).


    The optional chapter \coqdoclibrary{ImpParser} develops a simple
    implementation of a lexical analyzer and parser that can perform
    this translation.  You do \textit{not} need to understand that chapter to
    understand this one, but if you haven't taken a course where these
    techniques are covered (e.g., a compilers course) you may want to
    skim it. 

 For comparison, here's a conventional BNF (Backus-Naur Form)
    grammar defining the same abstract syntax:


    a ::= nat
        | a + a
        | a - a
        | a * a


    b ::= true
        | false
        | a = a
        | a <= a
        | not b
        | b and b


 Compared to the Coq version above...



\begin{itemize}
\item  The BNF is more informal -- for example, it gives some
         suggestions about the surface syntax of expressions (like the
         fact that the addition operation is written + and is an
         infix symbol) while leaving other aspects of lexical analysis
         and parsing (like the relative precedence of +, -, and
         \ensuremath{\times}, the use of parens to explicitly group subexpressions,
         etc.) unspecified.  Some additional information (and human
         intelligence) would be required to turn this description into
         a formal definition, for example when implementing a
         compiler.


         The Coq version consistently omits all this information and
         concentrates on the abstract syntax only.



\item  On the other hand, the BNF version is lighter and easier to
         read.  Its informality makes it flexible, a big advantage in
         situations like discussions at the blackboard, where
         conveying general ideas is more important than getting every
         detail nailed down precisely.


         Indeed, there are dozens of BNF-like notations and people
         switch freely among them, usually without bothering to say
         which form of BNF they're using because there is no need to:
         a rough-and-ready informal understanding is all that's
         important.

\end{itemize}


    It's good to be comfortable with both sorts of notations: informal
    ones for communicating between humans and formal ones for carrying
    out implementations and proofs. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Evaluation}



 \textit{Evaluating} an arithmetic expression produces a number. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{aeval} (\coqdocvar{a} : \coqdocvar{aexp}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{a} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ANum} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow} (\coqdocvar{aeval} \coqdocvar{a1}) + (\coqdocvar{aeval} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMinus} \coqdocvar{a1} \coqdocvar{a2}  \ensuremath{\Rightarrow} (\coqdocvar{aeval} \coqdocvar{a1}) - (\coqdocvar{aeval} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMult} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow} (\coqdocvar{aeval} \coqdocvar{a1}) \ensuremath{\times} (\coqdocvar{aeval} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_aeval1}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aeval} (\coqdocvar{APlus} (\coqdocvar{ANum} 2) (\coqdocvar{ANum} 2)) = 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Similarly, evaluating a boolean expression yields a boolean. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{beval} (\coqdocvar{b} : \coqdocvar{bexp}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{b} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BTrue}       \ensuremath{\Rightarrow} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BFalse}      \ensuremath{\Rightarrow} \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BEq} \coqdocvar{a1} \coqdocvar{a2}   \ensuremath{\Rightarrow} \coqdocvar{beq\_nat} (\coqdocvar{aeval} \coqdocvar{a1}) (\coqdocvar{aeval} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BLe} \coqdocvar{a1} \coqdocvar{a2}   \ensuremath{\Rightarrow} \coqdocvar{leb} (\coqdocvar{aeval} \coqdocvar{a1}) (\coqdocvar{aeval} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BNot} \coqdocvar{b1}     \ensuremath{\Rightarrow} \coqdocvar{negb} (\coqdocvar{beval} \coqdocvar{b1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BAnd} \coqdocvar{b1} \coqdocvar{b2}  \ensuremath{\Rightarrow} \coqdocvar{andb} (\coqdocvar{beval} \coqdocvar{b1}) (\coqdocvar{beval} \coqdocvar{b2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Optimization}



 We haven't defined very much yet, but we can already get
    some mileage out of the definitions.  Suppose we define a function
    that takes an arithmetic expression and slightly simplifies it,
    changing every occurrence of 0+\coqdocconstructor{e} (i.e., (\coqdocconstructor{APlus} (\coqdocconstructor{ANum} 0) \coqdocconstructor{e})
    into just \coqdocconstructor{e}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{optimize\_0plus} (\coqdocvar{a}:\coqdocvar{aexp}) : \coqdocvar{aexp} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{a} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ANum} \coqdocvar{n} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ANum} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} (\coqdocvar{ANum} 0) \coqdocvar{e2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{optimize\_0plus} \coqdocvar{e2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} \coqdocvar{e1} \coqdocvar{e2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{APlus} (\coqdocvar{optimize\_0plus} \coqdocvar{e1}) (\coqdocvar{optimize\_0plus} \coqdocvar{e2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMinus} \coqdocvar{e1} \coqdocvar{e2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{AMinus} (\coqdocvar{optimize\_0plus} \coqdocvar{e1}) (\coqdocvar{optimize\_0plus} \coqdocvar{e2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMult} \coqdocvar{e1} \coqdocvar{e2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{AMult} (\coqdocvar{optimize\_0plus} \coqdocvar{e1}) (\coqdocvar{optimize\_0plus} \coqdocvar{e2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To make sure our optimization is doing the right thing we
    can test it on some examples and see if the output looks OK. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_optimize\_0plus}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{optimize\_0plus} (\coqdocvar{APlus} (\coqdocvar{ANum} 2)\coqdoceol
\coqdocindent{12.00em}
(\coqdocvar{APlus} (\coqdocvar{ANum} 0)\coqdoceol
\coqdocindent{15.50em}
(\coqdocvar{APlus} (\coqdocvar{ANum} 0) (\coqdocvar{ANum} 1))))\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{APlus} (\coqdocvar{ANum} 2) (\coqdocvar{ANum} 1).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
But if we want to be sure the optimization is correct --
    i.e., that evaluating an optimized expression gives the same
    result as the original -- we should prove it. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{optimize\_0plus\_sound}: \coqdockw{\ensuremath{\forall}} \coqdocvar{a},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aeval} (\coqdocvar{optimize\_0plus} \coqdocvar{a}) = \coqdocvar{aeval} \coqdocvar{a}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{a}. \coqdoctac{induction} \coqdocvar{a}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{destruct} \coqdocvar{a1}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{destruct} \coqdocvar{n}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}   \coqdoctac{simpl}. \coqdoctac{apply} \coqdocvar{IHa2}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{IHa2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{IHa1}. \coqdoctac{rewrite} \coqdocvar{IHa1}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{IHa2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{IHa1}. \coqdoctac{rewrite} \coqdocvar{IHa1}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{IHa2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{IHa1}. \coqdoctac{rewrite} \coqdocvar{IHa1}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{IHa2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{IHa1}. \coqdoctac{rewrite} \coqdocvar{IHa2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{IHa1}. \coqdoctac{rewrite} \coqdocvar{IHa2}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Coq Automation}



 The amount of repetition in this last proof is a little
    annoying.  And if either the language of arithmetic expressions or
    the optimization being proved sound were significantly more
    complex, it would start to be a real problem.


    So far, we've been doing all our proofs using just a small handful
    of Coq's tactics and completely ignoring its powerful facilities
    for constructing parts of proofs automatically.  This section
    introduces some of these facilities, and we will see more over the
    next several chapters.  Getting used to them will take some
    energy -- Coq's automation is a power tool -- but it will allow us
    to scale up our efforts to more complex definitions and more
    interesting properties without becoming overwhelmed by boring,
    repetitive, low-level details. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Tacticals}



 \textit{Tacticals} is Coq's term for tactics that take other tactics as
    arguments -- ``higher-order tactics,'' if you will.  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{The \texorpdfstring{\protect\coqdoctac{try}}{try} Tactical}



 If \coqdocdefinition{T} is a tactic, then \coqdoctac{try} \coqdocdefinition{T} is a tactic that is just like \coqdocdefinition{T}
    except that, if \coqdocdefinition{T} fails, \coqdoctac{try} \coqdocdefinition{T} \textit{successfully} does nothing at
    all (instead of failing). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{silly1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ae}, \coqdocvar{aeval} \coqdocvar{ae} = \coqdocvar{aeval} \coqdocvar{ae}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{try} \coqdoctac{reflexivity}.  \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{silly2} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdockw{Prop}), \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{HP}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdoctac{reflexivity}. \coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{HP}. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
There is no real reason to use \coqdoctac{try} in completely manual
    proofs like these, but it is very useful for doing automated
    proofs in conjunction with the ; tactical, which we show
    next. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{The ; Tactical (Simple Form)}



 In its most common form, the ; tactical takes two tactics as
    arguments.  The compound tactic \coqdocdefinition{T};\coqdocvariable{T'} first performs \coqdocdefinition{T} and then
    performs \coqdocvariable{T'} on \textit{each subgoal} generated by \coqdocdefinition{T}. 

 For example, consider the following trivial lemma: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{foo} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{leb} 0 \coqdocvar{n} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{n}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{simpl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{simpl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can simplify this proof using the ; tactical: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{foo'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{leb} 0 \coqdocvar{n} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{n};\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl};\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Using \coqdoctac{try} and ; together, we can get rid of the repetition in
    the proof that was bothering us a little while ago. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{optimize\_0plus\_sound'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{a},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aeval} (\coqdocvar{optimize\_0plus} \coqdocvar{a}) = \coqdocvar{aeval} \coqdocvar{a}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{a}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{a};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{simpl}; \coqdoctac{rewrite} \coqdocvar{IHa1}; \coqdoctac{rewrite} \coqdocvar{IHa2}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{a1};\coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{try} (\coqdoctac{simpl}; \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{IHa1}; \coqdoctac{rewrite} \coqdocvar{IHa1};\coqdoceol
\coqdocindent{5.50em}
\coqdoctac{rewrite} \coqdocvar{IHa2}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{destruct} \coqdocvar{n};\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}; \coqdoctac{rewrite} \coqdocvar{IHa2}; \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Coq experts often use this ``...; \coqdoctac{try}... '' idiom after a tactic
    like \coqdoctac{induction} to take care of many similar cases all at once.
    Naturally, this practice has an analog in informal proofs.  For
    example, here is an informal proof of the optimization theorem
    that matches the structure of the formal one:


    \textit{Theorem}: For all arithmetic expressions \coqdocabbreviation{a},


       aeval (optimize\_0plus a) = aeval a.


    \textit{Proof}: By induction on \coqdocabbreviation{a}.  Most cases follow directly from the
    IH.  The remaining cases are as follows:



\begin{itemize}
\item  Suppose \coqdocabbreviation{a} = \coqdocconstructor{ANum} \coqdocabbreviation{n} for some \coqdocabbreviation{n}.  We must show


          aeval (optimize\_0plus (ANum n)) = aeval (ANum n).


        This is immediate from the definition of \coqdocdefinition{optimize\_0plus}.



\item  Suppose \coqdocabbreviation{a} = \coqdocconstructor{APlus} \coqdocvariable{a1} \coqdocvariable{a2} for some \coqdocvariable{a1} and \coqdocvariable{a2}.  We must
        show


          aeval (optimize\_0plus (APlus a1 a2)) = aeval (APlus a1 a2).


        Consider the possible forms of \coqdocvariable{a1}.  For most of them,
        \coqdocdefinition{optimize\_0plus} simply calls itself recursively for the
        subexpressions and rebuilds a new expression of the same form
        as \coqdocvariable{a1}; in these cases, the result follows directly from the
        IH.


        The interesting case is when \coqdocvariable{a1} = \coqdocconstructor{ANum} \coqdocabbreviation{n} for some \coqdocabbreviation{n}.  If
        \coqdocabbreviation{n} = \coqdocconstructor{ANum} 0, then


          optimize\_0plus (APlus a1 a2) = optimize\_0plus a2


        and the IH for \coqdocvariable{a2} is exactly what we need.  On the other
        hand, if \coqdocabbreviation{n} = \coqdocconstructor{S} \coqdocvariable{n'} for some \coqdocvariable{n'}, then again \coqdocdefinition{optimize\_0plus}
        simply calls itself recursively, and the result follows from
        the IH.  \ensuremath{\Box} 
\end{itemize}


 However, this proof can still be improved: the first case (for
    \coqdocabbreviation{a} = \coqdocconstructor{ANum} \coqdocabbreviation{n}) is very trivial -- even more trivial than the cases
    that we said simply followed from the IH -- yet we have chosen to
    write it out in full.  It would be better and clearer to drop it
    and just say, at the top, ``Most cases are either immediate or
    direct from the IH.  The only interesting case is the one for
    \coqdocconstructor{APlus}...''  We can make the same improvement in our formal proof
    too.  Here's how it looks: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{optimize\_0plus\_sound'{}'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{a},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aeval} (\coqdocvar{optimize\_0plus} \coqdocvar{a}) = \coqdocvar{aeval} \coqdocvar{a}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{a}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{a};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{simpl}; \coqdoctac{rewrite} \coqdocvar{IHa1}; \coqdoctac{rewrite} \coqdocvar{IHa2}; \coqdoctac{reflexivity});\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{a1}; \coqdoctac{try} (\coqdoctac{simpl}; \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{IHa1}; \coqdoctac{rewrite} \coqdocvar{IHa1};\coqdoceol
\coqdocindent{11.00em}
\coqdoctac{rewrite} \coqdocvar{IHa2}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{destruct} \coqdocvar{n};\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}; \coqdoctac{rewrite} \coqdocvar{IHa2}; \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{The ; Tactical (General Form)}



 The ; tactical also has a more general form than the simple
    \coqdocdefinition{T};\coqdocvariable{T'} we've seen above.  If \coqdocdefinition{T}, \coqdocvariable{T1}, ..., \coqdocvar{Tn} are tactics,
    then


      T; \coqdocvariable{T1} \ensuremath{|} \coqdocvariable{T2} \ensuremath{|} ... \ensuremath{|} \coqdocvar{Tn}


   is a tactic that first performs \coqdocdefinition{T} and then performs \coqdocvariable{T1} on the
   first subgoal generated by \coqdocdefinition{T}, performs \coqdocvariable{T2} on the second
   subgoal, etc.


   So \coqdocdefinition{T};\coqdocvariable{T'} is just special notation for the case when all of the
   \coqdocvariable{Ti}'s are the same tactic; i.e., \coqdocdefinition{T};\coqdocvariable{T'} is shorthand for:


      T; \coqdocvariable{T'} \ensuremath{|} \coqdocvariable{T'} \ensuremath{|} ... \ensuremath{|} \coqdocvariable{T'}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{The \texorpdfstring{\protect\coqdoctac{repeat}}{repeat} Tactical}



 The \coqdoctac{repeat} tactical takes another tactic and keeps applying this
    tactic until it fails. Here is an example showing that 10 is in
    a long list using repeat. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{In10} : \coqdocvar{In} 10 [1;2;3;4;5;6;7;8;9;10].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} (\coqdoctac{try} (\coqdoctac{left}; \coqdoctac{reflexivity}); \coqdoctac{right}).\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdoctac{repeat} \coqdocdefinition{T} never fails: if the tactic \coqdocdefinition{T} doesn't apply
    to the original goal, then repeat still succeeds without changing
    the original goal (i.e., it repeats zero times). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{In10'} : \coqdocvar{In} 10 [1;2;3;4;5;6;7;8;9;10].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} (\coqdoctac{left}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} (\coqdoctac{right}; \coqdoctac{try} (\coqdoctac{left}; \coqdoctac{reflexivity})).\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdoctac{repeat} \coqdocdefinition{T} also does not have any upper bound on the
    number of times it applies \coqdocdefinition{T}.  If \coqdocdefinition{T} is a tactic that always
    succeeds, then repeat \coqdocdefinition{T} will loop forever (e.g., \coqdoctac{repeat} \coqdoctac{simpl}
    loops forever, since \coqdoctac{simpl} always succeeds).  While evaluation
    in Coq's term language, Gallina, is guaranteed to terminate,
    tactic evaluation is not!  This does not affect Coq's logical
    consistency, however, since the job of \coqdoctac{repeat} and other tactics
    is to guide Coq in constructing proofs; if the construction
    process diverges, this simply means that we have failed to
    construct a proof, not that we have constructed a wrong one. 

\paragraph{Exercise: 3 stars (optimize\_0plus\_b)}

 Since the \coqdocdefinition{optimize\_0plus} transformation doesn't change the value
    of \coqdocinductive{aexp}s, we should be able to apply it to all the \coqdocinductive{aexp}s that
    appear in a \coqdocinductive{bexp} without changing the \coqdocinductive{bexp}'s value.  Write a
    function which performs that transformation on \coqdocinductive{bexp}s, and prove
    it is sound.  Use the tacticals we've just seen to make the proof
    as elegant as possible. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{optimize\_0plus\_b} (\coqdocvar{b} : \coqdocvar{bexp}) : \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{optimize\_0plus\_b\_sound} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beval} (\coqdocvar{optimize\_0plus\_b} \coqdocvar{b}) = \coqdocvar{beval} \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, optional (optimizer)}

 \textit{Design exercise}: The optimization implemented by our
    \coqdocdefinition{optimize\_0plus} function is only one of many possible
    optimizations on arithmetic and boolean expressions.  Write a more
    sophisticated optimizer and prove it correct.  (You will probably
    find it easiest to start small -- add just a single, simple
    optimization and prove it correct -- and build up to something
    more interesting incrementially.)


 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Defining New Tactic Notations}



 Coq also provides several ways of ``programming'' tactic scripts.



\begin{itemize}
\item  The \coqdockw{Tactic} \coqdockw{Notation} idiom illustrated below gives a handy way to
      define ``shorthand tactics'' that bundle several tactics into a
      single command.



\item  For more sophisticated programming, Coq offers a built-in
      programming language called \coqdockw{Ltac} with primitives that can
      examine and modify the proof state.  The details are a bit too
      complicated to get into here (and it is generally agreed that
      \coqdockw{Ltac} is not the most beautiful part of Coq's design!), but they
      can be found in the reference manual and other books on Coq, and
      there are many examples of \coqdockw{Ltac} definitions in the Coq standard
      library that you can use as examples.



\item  There is also an OCaml API, which can be used to build tactics
      that access Coq's internal structures at a lower level, but this
      is seldom worth the trouble for ordinary Coq users.

\end{itemize}


    The \coqdockw{Tactic} \coqdockw{Notation} mechanism is the easiest to come to grips with,
    and it offers plenty of power for many purposes.  Here's an example. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "simpl\_and\_try" \coqdocvar{tactic}(\coqdocvar{c}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdocvar{c}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This defines a new tactical called \coqdocvar{simpl\_and\_try} that takes one
    tactic \coqdocconstructor{c} as an argument and is defined to be equivalent to the
    tactic \coqdoctac{simpl}; \coqdoctac{try} \coqdocconstructor{c}.  Now writing ``\coqdocvar{simpl\_and\_try} \coqdoctac{reflexivity}.''
    in a proof will be the same as writing ``\coqdoctac{simpl}; \coqdoctac{try}
    \coqdoctac{reflexivity}.'' \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{The \texorpdfstring{\protect\coqdoctac{omega}}{omega} Tactic}



 The \coqdoctac{omega} tactic implements a decision procedure for a subset of
    first-order logic called \textit{Presburger arithmetic}.  It is based on
    the Omega algorithm invented in 1991 by William Pugh \coqdocvar{Pugh} 1991.


    If the goal is a universally quantified formula made out of



\begin{itemize}
\item  numeric constants, addition (+ and \coqdocconstructor{S}), subtraction (-
        and \coqdocdefinition{pred}), and multiplication by constants (this is what
        makes it Presburger arithmetic),



\item  equality (= and \ensuremath{\not=}) and inequality (\ensuremath{\le}), and



\item  the logical connectives \ensuremath{\land}, \ensuremath{\lor}, \ensuremath{\lnot}, and \ensuremath{\rightarrow},

\end{itemize}


    then invoking \coqdoctac{omega} will either solve the goal or tell you that
    it is actually false. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{silly\_presburger\_example} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{n} \coqdocvar{o} \coqdocvar{p},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{m} + \coqdocvar{n} \ensuremath{\le} \coqdocvar{n} + \coqdocvar{o} \ensuremath{\land} \coqdocvar{o} + 3 = \coqdocvar{p} + 3 \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{m} \ensuremath{\le} \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{A Few More Handy Tactics}



 Finally, here are some miscellaneous tactics that you may find
    convenient.



\begin{itemize}
\item  \coqdoctac{clear} \coqdocvariable{H}: Delete hypothesis \coqdocvariable{H} from the context.



\item  \coqdoctac{subst} \coqdocabbreviation{x}: Find an assumption \coqdocabbreviation{x} = \coqdocconstructor{e} or \coqdocconstructor{e} = \coqdocabbreviation{x} in the
       context, replace \coqdocabbreviation{x} with \coqdocconstructor{e} throughout the context and
       current goal, and clear the assumption.



\item  \coqdoctac{subst}: Substitute away \textit{all} assumptions of the form \coqdocabbreviation{x} = \coqdocconstructor{e}
       or \coqdocconstructor{e} = \coqdocabbreviation{x}.



\item  \coqdoctac{rename}... \coqdocvar{into}...: Change the name of a hypothesis in the
       proof context.  For example, if the context includes a variable
       named \coqdocabbreviation{x}, then \coqdoctac{rename} \coqdocabbreviation{x} \coqdocvar{into} \coqdocabbreviation{y} will change all occurrences
       of \coqdocabbreviation{x} to \coqdocabbreviation{y}.



\item  \coqdoctac{assumption}: Try to find a hypothesis \coqdocvariable{H} in the context that
       exactly matches the goal; if one is found, behave like \coqdoctac{apply}
       \coqdocvariable{H}.



\item  \coqdocvar{contradiction}: Try to find a hypothesis \coqdocvariable{H} in the current
       context that is logically equivalent to \coqdocinductive{False}.  If one is
       found, solve the goal.



\item  \coqdoctac{constructor}: Try to find a constructor \coqdocconstructor{c} (from some
       \coqdockw{Inductive} definition in the current environment) that can be
       applied to solve the current goal.  If one is found, behave
       like \coqdoctac{apply} \coqdocconstructor{c}.

\end{itemize}


    We'll see examples below. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Evaluation as a Relation}



 We have presented \coqdocdefinition{aeval} and \coqdocdefinition{beval} as functions defined by
    \coqdockw{Fixpoint}s.  Another way to think about evaluation -- one that we
    will see is often more flexible -- is as a \textit{relation} between
    expressions and their values.  This leads naturally to \coqdockw{Inductive}
    definitions like the following one for arithmetic expressions... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{aevalR\_first\_try}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{aevalR} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_ANum}  : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n}: \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aevalR} (\coqdocvar{ANum} \coqdocvar{n}) \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_APlus} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{e1} \coqdocvar{e2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2}: \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aevalR} \coqdocvar{e1} \coqdocvar{n1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aevalR} \coqdocvar{e2} \coqdocvar{n2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aevalR} (\coqdocvar{APlus} \coqdocvar{e1} \coqdocvar{e2}) (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_AMinus}: \coqdockw{\ensuremath{\forall}} (\coqdocvar{e1} \coqdocvar{e2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2}: \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aevalR} \coqdocvar{e1} \coqdocvar{n1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aevalR} \coqdocvar{e2} \coqdocvar{n2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aevalR} (\coqdocvar{AMinus} \coqdocvar{e1} \coqdocvar{e2}) (\coqdocvar{n1} - \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_AMult} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{e1} \coqdocvar{e2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2}: \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aevalR} \coqdocvar{e1} \coqdocvar{n1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aevalR} \coqdocvar{e2} \coqdocvar{n2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aevalR} (\coqdocvar{AMult} \coqdocvar{e1} \coqdocvar{e2}) (\coqdocvar{n1} \ensuremath{\times} \coqdocvar{n2}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It will be convenient to have an infix notation for
    \coqdocinductive{aevalR}.  We'll write \coqdocconstructor{e} \symbol{92}\symbol{92} \coqdocabbreviation{n} to mean that arithmetic expression
    \coqdocconstructor{e} evaluates to value \coqdocabbreviation{n}.  (This notation is one place where the
    limitation to ASCII symbols becomes a little bothersome.  The
    standard notation for the evaluation relation is a double
    down-arrow.  We'll typeset it like this in the HTML version of the
    notes and use a double slash as the closest approximation in .\coqdocvariable{v}
    files.)  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "e '\symbol{92}\symbol{92}' n"\coqdoceol
\coqdocindent{4.50em}
:= (\coqdocvar{aevalR} \coqdocvar{e} \coqdocvar{n})\coqdoceol
\coqdocindent{6.00em}
(\coqdoctac{at} \coqdockw{level} 50, \coqdoctac{left} \coqdockw{associativity})\coqdoceol
\coqdocindent{4.50em}
: \coqdocvar{type\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{aevalR\_first\_try}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In fact, Coq provides a way to use this notation in the
    definition of \coqdocinductive{aevalR} itself.  This reduces confusion by avoiding
    situations where we're working on a proof involving statements in
    the form \coqdocconstructor{e} \symbol{92}\symbol{92} \coqdocabbreviation{n} but we have to refer back to a definition
    written using the form \coqdocinductive{aevalR} \coqdocconstructor{e} \coqdocabbreviation{n}.


    We do this by first ``reserving'' the notation, then giving the
    definition together with a declaration of what the notation
    means. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "e '\symbol{92}\symbol{92}' n" (\coqdoctac{at} \coqdockw{level} 50, \coqdoctac{left} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{aevalR} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_ANum} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n}:\coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{ANum} \coqdocvar{n}) \symbol{92}\symbol{92} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_APlus} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{e1} \coqdocvar{e2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{e1} \symbol{92}\symbol{92} \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{e2} \symbol{92}\symbol{92} \coqdocvar{n2}) \ensuremath{\rightarrow} (\coqdocvar{APlus} \coqdocvar{e1} \coqdocvar{e2}) \symbol{92}\symbol{92} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_AMinus} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{e1} \coqdocvar{e2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{e1} \symbol{92}\symbol{92} \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{e2} \symbol{92}\symbol{92} \coqdocvar{n2}) \ensuremath{\rightarrow} (\coqdocvar{AMinus} \coqdocvar{e1} \coqdocvar{e2}) \symbol{92}\symbol{92} (\coqdocvar{n1} - \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_AMult} :  \coqdockw{\ensuremath{\forall}} (\coqdocvar{e1} \coqdocvar{e2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{e1} \symbol{92}\symbol{92} \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{e2} \symbol{92}\symbol{92} \coqdocvar{n2}) \ensuremath{\rightarrow} (\coqdocvar{AMult} \coqdocvar{e1} \coqdocvar{e2}) \symbol{92}\symbol{92} (\coqdocvar{n1} \ensuremath{\times} \coqdocvar{n2})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "e '\symbol{92}\symbol{92}' n" := (\coqdocvar{aevalR} \coqdocvar{e} \coqdocvar{n}) : \coqdocvar{type\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Inference Rule Notation}



 In informal discussions, it is convenient to write the rules for
    \coqdocinductive{aevalR} and similar relations in the more readable graphical form
    of \textit{inference rules}, where the premises above the line justify
    the conclusion below the line (we have already seen them in the
    \coqdockw{Prop} chapter). 

 For example, the constructor \coqdocconstructor{E\_APlus}...


      | E\_APlus : forall (e1 e2: aexp) (n1 n2: nat),
          aevalR e1 n1 ->
          aevalR e2 n2 ->
          aevalR (APlus e1 e2) (n1 + n2)


    ...would be written like this as an inference rule:


                               e1 \symbol{92}\symbol{92} n1
                               e2 \symbol{92}\symbol{92} n2
\par
\noindent\hrulefill\par
\noindent{}                         (E\_APlus)
                         APlus e1 e2 \symbol{92}\symbol{92} n1+n2


 Formally, there is nothing deep about inference rules: they
    are just implications.  You can read the rule name on the right as
    the name of the constructor and read each of the linebreaks
    between the premises above the line (as well as the line itself)
    as \ensuremath{\rightarrow}.  All the variables mentioned in the rule (\coqdocvariable{e1}, \coqdocvariable{n1},
    etc.) are implicitly bound by universal quantifiers at the
    beginning. (Such variables are often called \textit{metavariables} to
    distinguish them from the variables of the language we are
    defining.  At the moment, our arithmetic expressions don't include
    variables, but we'll soon be adding them.)  The whole collection
    of rules is understood as being wrapped in an \coqdockw{Inductive}
    declaration.  In informal prose, this is either elided or else
    indicated by saying something like ``Let \coqdocinductive{aevalR} be the smallest
    relation closed under the following rules...''. 

 For example, \symbol{92}\symbol{92} is the smallest relation closed under these
    rules:
\par
\noindent\hrulefill\par
\noindent{}                               (E\_ANum)
                             ANum n \symbol{92}\symbol{92} n


                               e1 \symbol{92}\symbol{92} n1
                               e2 \symbol{92}\symbol{92} n2
\par
\noindent\hrulefill\par
\noindent{}                         (E\_APlus)
                         APlus e1 e2 \symbol{92}\symbol{92} n1+n2


                               e1 \symbol{92}\symbol{92} n1
                               e2 \symbol{92}\symbol{92} n2
\par
\noindent\hrulefill\par
\noindent{}                        (E\_AMinus)
                        AMinus e1 e2 \symbol{92}\symbol{92} n1-n2


                               e1 \symbol{92}\symbol{92} n1
                               e2 \symbol{92}\symbol{92} n2
\par
\noindent\hrulefill\par
\noindent{}                         (E\_AMult)
                         AMult e1 e2 \symbol{92}\symbol{92} n1*n2
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Equivalence of the Definitions}



 It is straightforward to prove that the relational and functional
    definitions of evaluation agree: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{aeval\_iff\_aevalR} : \coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{a} \symbol{92}\symbol{92} \coqdocvar{n}) \ensuremath{\leftrightarrow} \coqdocvar{aeval} \coqdocvar{a} = \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{0.50em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{0.50em}
- \coqdoceol
\coqdocindent{1.50em}
\coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{induction} \coqdocvar{H}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.50em}
+ \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.50em}
+ \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{rewrite} \coqdocvar{IHaevalR1}. \coqdoctac{rewrite} \coqdocvar{IHaevalR2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.50em}
+ \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{rewrite} \coqdocvar{IHaevalR1}. \coqdoctac{rewrite} \coqdocvar{IHaevalR2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.50em}
+ \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{rewrite} \coqdocvar{IHaevalR1}. \coqdoctac{rewrite} \coqdocvar{IHaevalR2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{0.50em}
- \coqdoceol
\coqdocindent{1.50em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{n}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{induction} \coqdocvar{a};\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}; \coqdoctac{intros}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.50em}
+ \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{apply} \coqdocvar{E\_ANum}.\coqdoceol
\coqdocindent{1.50em}
+ \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{apply} \coqdocvar{E\_APlus}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHa1}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHa2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.50em}
+ \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{apply} \coqdocvar{E\_AMinus}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHa1}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHa2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.50em}
+ \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{apply} \coqdocvar{E\_AMult}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHa1}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHa2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can make the proof quite a bit shorter by making more
    use of tacticals. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{aeval\_iff\_aevalR'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{a} \symbol{92}\symbol{92} \coqdocvar{n}) \ensuremath{\leftrightarrow} \coqdocvar{aeval} \coqdocvar{a} = \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{H}; \coqdoctac{induction} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{n}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{induction} \coqdocvar{a}; \coqdoctac{simpl}; \coqdoctac{intros}; \coqdoctac{subst}; \coqdoctac{constructor};\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{try} \coqdoctac{apply} \coqdocvar{IHa1}; \coqdoctac{try} \coqdoctac{apply} \coqdocvar{IHa2}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars  (bevalR)}

 Write a relation \coqdocinductive{bevalR} in the same style as
    \coqdocinductive{aevalR}, and prove that it is equivalent to \coqdocdefinition{beval}.\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{bevalR}: \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{bool} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{beval\_iff\_bevalR} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{bv},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bevalR} \coqdocvar{b} \coqdocvar{bv} \ensuremath{\leftrightarrow} \coqdocvar{beval} \coqdocvar{b} = \coqdocvar{bv}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{AExp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Computational vs. Relational Definitions}



 For the definitions of evaluation for arithmetic and boolean
    expressions, the choice of whether to use functional or relational
    definitions is mainly a matter of taste: either way works.


    However, there are circumstances where relational definitions of
    evaluation work much better than functional ones.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{aevalR\_division}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For example, suppose that we wanted to extend the arithmetic
    operations by considering also a division operation:\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{aexp} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ANum} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMinus} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMult} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ADiv} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}. \coqdocemptyline
\end{coqdoccode}
Extending the definition of \coqdocdefinition{aeval} to handle this new operation
    would not be straightforward (what should we return as the result
    of \coqdocconstructor{ADiv} (\coqdocconstructor{ANum} 5) (\coqdocconstructor{ANum} 0)?).  But extending \coqdocinductive{aevalR} is
    straightforward. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "e '\symbol{92}\symbol{92}' n"\coqdoceol
\coqdocindent{9.00em}
(\coqdoctac{at} \coqdockw{level} 50, \coqdoctac{left} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{aevalR} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_ANum} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n}:\coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{ANum} \coqdocvar{n}) \symbol{92}\symbol{92} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_APlus} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{a1} \coqdocvar{a2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{a1} \symbol{92}\symbol{92} \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{a2} \symbol{92}\symbol{92} \coqdocvar{n2}) \ensuremath{\rightarrow} (\coqdocvar{APlus} \coqdocvar{a1} \coqdocvar{a2}) \symbol{92}\symbol{92} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_AMinus} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{a1} \coqdocvar{a2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{a1} \symbol{92}\symbol{92} \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{a2} \symbol{92}\symbol{92} \coqdocvar{n2}) \ensuremath{\rightarrow} (\coqdocvar{AMinus} \coqdocvar{a1} \coqdocvar{a2}) \symbol{92}\symbol{92} (\coqdocvar{n1} - \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_AMult} :  \coqdockw{\ensuremath{\forall}} (\coqdocvar{a1} \coqdocvar{a2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{a1} \symbol{92}\symbol{92} \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{a2} \symbol{92}\symbol{92} \coqdocvar{n2}) \ensuremath{\rightarrow} (\coqdocvar{AMult} \coqdocvar{a1} \coqdocvar{a2}) \symbol{92}\symbol{92} (\coqdocvar{n1} \ensuremath{\times} \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_ADiv} :  \coqdockw{\ensuremath{\forall}} (\coqdocvar{a1} \coqdocvar{a2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3}: \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{a1} \symbol{92}\symbol{92} \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{a2} \symbol{92}\symbol{92} \coqdocvar{n2}) \ensuremath{\rightarrow} (\coqdocvar{n2} > 0) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{mult} \coqdocvar{n2} \coqdocvar{n3} = \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{ADiv} \coqdocvar{a1} \coqdocvar{a2}) \symbol{92}\symbol{92} \coqdocvar{n3}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "a '\symbol{92}\symbol{92}' n" := (\coqdocvar{aevalR} \coqdocvar{a} \coqdocvar{n}) : \coqdocvar{type\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{aevalR\_division}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{aevalR\_extended}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Suppose, instead, that we want to extend the arithmetic operations
    by a nondeterministic number generator \coqdocvar{any} that, when evaluated,
    may yield any number.  (Note that this is not the same as making a
    \textit{probabilistic} choice among all possible numbers -- we're not
    specifying any particular distribution of results, but just saying
    what results are \textit{possible}.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "e '\symbol{92}\symbol{92}' n" (\coqdoctac{at} \coqdockw{level} 50, \coqdoctac{left} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{aexp} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AAny}  : \coqdocvar{aexp}                   \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ANum} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMinus} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMult} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Again, extending \coqdocdefinition{aeval} would be tricky, since now evaluation is
    \textit{not} a deterministic function from expressions to numbers, but
    extending \coqdocinductive{aevalR} is no problem: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{aevalR} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Any} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n}:\coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{AAny} \symbol{92}\symbol{92} \coqdocvar{n}                 \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_ANum} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{n}:\coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{ANum} \coqdocvar{n}) \symbol{92}\symbol{92} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_APlus} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{a1} \coqdocvar{a2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{a1} \symbol{92}\symbol{92} \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{a2} \symbol{92}\symbol{92} \coqdocvar{n2}) \ensuremath{\rightarrow} (\coqdocvar{APlus} \coqdocvar{a1} \coqdocvar{a2}) \symbol{92}\symbol{92} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_AMinus} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{a1} \coqdocvar{a2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{a1} \symbol{92}\symbol{92} \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{a2} \symbol{92}\symbol{92} \coqdocvar{n2}) \ensuremath{\rightarrow} (\coqdocvar{AMinus} \coqdocvar{a1} \coqdocvar{a2}) \symbol{92}\symbol{92} (\coqdocvar{n1} - \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_AMult} :  \coqdockw{\ensuremath{\forall}} (\coqdocvar{a1} \coqdocvar{a2}: \coqdocvar{aexp}) (\coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{a1} \symbol{92}\symbol{92} \coqdocvar{n1}) \ensuremath{\rightarrow} (\coqdocvar{a2} \symbol{92}\symbol{92} \coqdocvar{n2}) \ensuremath{\rightarrow} (\coqdocvar{AMult} \coqdocvar{a1} \coqdocvar{a2}) \symbol{92}\symbol{92} (\coqdocvar{n1} \ensuremath{\times} \coqdocvar{n2})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "a '\symbol{92}\symbol{92}' n" := (\coqdocvar{aevalR} \coqdocvar{a} \coqdocvar{n}) : \coqdocvar{type\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{aevalR\_extended}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
At this point you maybe wondering: which style should I use by
    default?  The examples above show that relational definitions are
    fundamentally more powerful than functional ones.  For situations
    like these, where the thing being defined is not easy to express
    as a function, or indeed where it is \textit{not} a function, there is no
    choice.  But what about when both styles are workable?


    One point in favor of relational definitions is that some people
    feel they are more elegant and easier to understand.  Another is
    that Coq automatically generates nice inversion and induction
    principles from \coqdockw{Inductive} definitions.


    On the other hand, functional definitions can often be more
    convenient:

\begin{itemize}
\item  Functions are by definition deterministic and defined on all
       arguments; for a relation we have to show these properties
       explicitly if we need them.

\item  With functions we can also take advantage of Coq's computation
       mechanism to simplify expressions during proofs.

\end{itemize}


    Furthermore, functions can be directly ``extracted'' to executable
    code in OCaml or Haskell.


    Ultimately, the choice often comes down to either the specifics of
    a particular situation or simply a question of taste.  Indeed, in
    large Coq developments it is common to see a definition given in
    \textit{both} functional and relational styles, plus a lemma stating that
    the two coincide, allowing further proofs to switch from one point
    of view to the other at will.\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Expressions With Variables}



 Let's turn our attention back to defining Imp.  The next thing we
    need to do is to enrich our arithmetic and boolean expressions
    with variables.  To keep things simple, we'll assume that all
    variables are global and that they only hold numbers. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{States}



 Since we'll want to look variables up to find out their current
    values, we'll reuse the type \coqdocinductive{id} from the \coqdoclibrary{Maps} chapter for the
    type of variables in Imp.


    A \textit{machine state} (or just \textit{state}) represents the current values
    of \textit{all} variables at some point in the execution of a program. 

 For simplicity, we assume that the state is defined for
    \textit{all} variables, even though any given program is only going to
    mention a finite number of them.  The state captures all of the
    information stored in memory.  For Imp programs, because each
    variable stores a natural number, we can represent the state as a
    mapping from identifiers to \coqdocdefinition{nat}.  For more complex programming
    languages, the state might have more structure. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{state} := \coqdocvar{total\_map} \coqdocvar{nat}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{empty\_state} : \coqdocvar{state} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t\_empty} 0.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Syntax}



 We can add variables to the arithmetic expressions we had before by
    simply adding one more constructor: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{aexp} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ANum} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AId} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp}                \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMinus} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMult} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Defining a few variable names as notational shorthands will make
    examples easier to read: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{W} : \coqdocvar{id} := \coqdocvar{Id} "W".\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{X} : \coqdocvar{id} := \coqdocvar{Id} "X".\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{Y} : \coqdocvar{id} := \coqdocvar{Id} "Y".\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{Z} : \coqdocvar{id} := \coqdocvar{Id} "Z".\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(This convention for naming program variables (\coqdocdefinition{X}, \coqdocdefinition{Y},
    \coqdocdefinition{Z}) clashes a bit with our earlier use of uppercase letters for
    types.  Since we're not using polymorphism heavily in the chapters
    devoped to Imp, this overloading should not cause confusion.) 

 The definition of \coqdocinductive{bexp}s is unchanged (except for using the new
    \coqdocinductive{aexp}s): \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{bexp} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BTrue} : \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BFalse} : \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BEq} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BLe} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BNot} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{bexp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BAnd} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{bexp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Evaluation}



 The arith and boolean evaluators are extended to handle
    variables in the obvious way, taking a state as an extra
    argument: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{aeval} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{a} : \coqdocvar{aexp}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{a} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ANum} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AId} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{x}                                \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1}) + (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMinus} \coqdocvar{a1} \coqdocvar{a2}  \ensuremath{\Rightarrow} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1}) - (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMult} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1}) \ensuremath{\times} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{beval} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{b} : \coqdocvar{bexp}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{b} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BTrue}       \ensuremath{\Rightarrow} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BFalse}      \ensuremath{\Rightarrow} \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BEq} \coqdocvar{a1} \coqdocvar{a2}   \ensuremath{\Rightarrow} \coqdocvar{beq\_nat} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1}) (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BLe} \coqdocvar{a1} \coqdocvar{a2}   \ensuremath{\Rightarrow} \coqdocvar{leb} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1}) (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BNot} \coqdocvar{b1}     \ensuremath{\Rightarrow} \coqdocvar{negb} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BAnd} \coqdocvar{b1} \coqdocvar{b2}  \ensuremath{\Rightarrow} \coqdocvar{andb} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1}) (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{aexp1} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aeval} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 5)\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{APlus} (\coqdocvar{ANum} 3) (\coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2)))\coqdoceol
\coqdocindent{1.00em}
= 13.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{bexp1} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beval} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 5)\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{BAnd} \coqdocvar{BTrue} (\coqdocvar{BNot} (\coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 4))))\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Commands}



 Now we are ready define the syntax and behavior of Imp
    \textit{commands} (sometimes called \textit{statements}). \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Syntax}



 Informally, commands \coqdocconstructor{c} are described by the following BNF
    grammar.  (We choose this slightly awkward concrete syntax for the
    sake of being able to define Imp syntax using Coq's Notation
    mechanism.  In particular, we use \coqdocvar{IFB} to avoid conflicting with
    the \coqdockw{if} notation from the standard library.)


     c ::= SKIP | x ::= a | c ;; c | IFB b THEN c ELSE c FI
         | WHILE b DO c END


    For example, here's factorial in Imp:


     Z ::= X;;
     Y ::= 1;;
     WHILE not (Z = 0) DO
       Y ::= Y * Z;;
       Z ::= Z - 1
     END


   When this command terminates, the variable \coqdocdefinition{Y} will contain the
   factorial of the initial value of \coqdocdefinition{X}. 

 Here is the formal definition of the abstract syntax of
    commands: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{com} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSkip} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CAss} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSeq} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CIf} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CWhile} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As usual, we can use a few \coqdockw{Notation} declarations to make things
    more readable.  To avoid conflicts with Coq's built-in notations,
    we keep this light -- in particular, we don't introduce any
    notations for \coqdocvar{aexps} and \coqdocvar{bexps} to avoid confusion with the
    numeric and boolean operators we've already defined. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'SKIP'" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{CSkip}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "x '::=' a" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CAss} \coqdocvar{x} \coqdocvar{a}) (\coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "c1 ;; c2" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CSeq} \coqdocvar{c1} \coqdocvar{c2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'WHILE' b 'DO' c 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CWhile} \coqdocvar{b} \coqdocvar{c}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'IFB' c1 'THEN' c2 'ELSE' c3 'FI'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CIf} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c3}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For example, here is the factorial function again, written as a
    formal definition to Coq: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{fact\_in\_coq} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= \coqdocvar{AId} \coqdocvar{X};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 1;;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{ANum} 0)) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{Z});;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{More Examples}



 Assignment: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{plus2} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= (\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2)).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{XtimesYinZ} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= (\coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{subtract\_slowly\_body} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{ANum} 1) ;;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Loops}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{subtract\_slowly} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0)) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{subtract\_slowly\_body}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{subtract\_3\_from\_5\_slowly} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{ANum} 3 ;;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= \coqdocvar{ANum} 5 ;;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtract\_slowly}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{An infinite loop:}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{loop} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BTrue} \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{SKIP}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Evaluating Commands}



 Next we need to define what it means to evaluate an Imp command.
    The fact that \coqdocvar{WHILE} loops don't necessarily terminate makes defining
    an evaluation function tricky... \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Evaluation as a Function (Failed Attempt)}



 Here's an attempt at defining an evaluation function for commands,
    omitting the \coqdocvar{WHILE} case. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{ceval\_fun\_no\_while} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{c} : \coqdocvar{com})\coqdoceol
\coqdocindent{13.00em}
: \coqdocvar{state} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{c} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{SKIP} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{st}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{x} ::= \coqdocvar{a1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{x} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{c1} ;; \coqdocvar{c2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdockw{let} \coqdocvar{st'} := \coqdocvar{ceval\_fun\_no\_while} \coqdocvar{st} \coqdocvar{c1} \coqdoctac{in}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{ceval\_fun\_no\_while} \coqdocvar{st'} \coqdocvar{c2}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdockw{if} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b})\coqdoceol
\coqdocindent{5.00em}
\coqdockw{then} \coqdocvar{ceval\_fun\_no\_while} \coqdocvar{st} \coqdocvar{c1}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{else} \coqdocvar{ceval\_fun\_no\_while} \coqdocvar{st} \coqdocvar{c2}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{st}  \coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In a traditional functional programming language like OCaml or
    Haskell we could add the \coqdocvar{WHILE} case as follows:


  Fixpoint ceval\_fun (st : state) (c : com) : state :=
    match c with
      ...
      | WHILE b DO c END =>
          if (beval st b)
            then ceval\_fun st (c; WHILE b DO c END)
            else st
    end.


    Coq doesn't accept such a definition (``Error: Cannot guess
    decreasing argument of fix'') because the function we want to
    define is not guaranteed to terminate. Indeed, it \textit{doesn't} always
    terminate: for example, the full version of the \coqdocvar{ceval\_fun}
    function applied to the \coqdocconstructor{loop} program above would never
    terminate. Since Coq is not just a functional programming
    language but also a consistent logic, any potentially
    non-terminating function needs to be rejected. Here is
    an (invalid!) program showing what would go wrong if Coq
    allowed non-terminating recursive functions:


         Fixpoint loop\_false (n : nat) : False := loop\_false n.


    That is, propositions like \coqdocinductive{False} would become provable
    (\coqdocvar{loop\_false} 0 would be a proof of \coqdocinductive{False}), which
    would be a disaster for Coq's logical consistency.


    Thus, because it doesn't terminate on all inputs,
    of \coqdocvar{ceval\_fun} cannot be written in Coq -- at least not without
    additional tricks and workarounds (see chapter \coqdoclibrary{ImpCEvalFun}
    if you're curious about what those might be). \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Evaluation as a Relation}



 Here's a better way: define \coqdocinductive{ceval} as a \textit{relation} rather than a
    \textit{function} -- i.e., define it in \coqdockw{Prop} instead of \coqdockw{Type}, as we
    did for \coqdocinductive{aevalR} above. 

 This is an important change.  Besides freeing us from awkward
    workarounds, it gives us a lot more flexibility in the definition.
    For example, if we add nondeterministic features like \coqdocvar{any} to the
    language, we want the definition of evaluation to be
    nondeterministic -- i.e., not only will it not be total, it will
    not even be a function! 

 We'll use the notation \coqdocconstructor{c} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'} for the \coqdocinductive{ceval} relation:
    \coqdocconstructor{c} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'} means that executing program \coqdocconstructor{c} in a starting
    state \coqdocvariable{st} results in an ending state \coqdocvariable{st'}.  This can be
    pronounced ``\coqdocconstructor{c} takes state \coqdocvariable{st} to \coqdocvariable{st'}''. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Operational Semantics}



 Here is an informal definition of evaluation, presented as inference
    rules for readability:
\par
\noindent\hrulefill\par
\noindent{}                            (E\_Skip)
                           SKIP / st \symbol{92}\symbol{92} st


                           aeval st a1 = n
\par
\noindent\hrulefill\par
\noindent{}                     (E\_Ass)
                   x := a1 / st \symbol{92}\symbol{92} (t\_update st x n)


                           c1 / st \symbol{92}\symbol{92} st'
                          c2 / st' \symbol{92}\symbol{92} st''
\par
\noindent\hrulefill\par
\noindent{}                            (E\_Seq)
                         c1;;c2 / st \symbol{92}\symbol{92} st''


                          beval st b1 = true
                           c1 / st \symbol{92}\symbol{92} st'
\par
\noindent\hrulefill\par
\noindent{}                (E\_IfTrue)
                IF b1 THEN c1 ELSE c2 FI / st \symbol{92}\symbol{92} st'


                         beval st b1 = false
                           c2 / st \symbol{92}\symbol{92} st'
\par
\noindent\hrulefill\par
\noindent{}               (E\_IfFalse)
                IF b1 THEN c1 ELSE c2 FI / st \symbol{92}\symbol{92} st'


                         beval st b = false
\par
\noindent\hrulefill\par
\noindent{}                 (E\_WhileEnd)
                    WHILE b DO c END / st \symbol{92}\symbol{92} st


                          beval st b = true
                           c / st \symbol{92}\symbol{92} st'
                  WHILE b DO c END / st' \symbol{92}\symbol{92} st''
\par
\noindent\hrulefill\par
\noindent{}               (E\_WhileLoop)
                    WHILE b DO c END / st \symbol{92}\symbol{92} st''


 Here is the formal definition.  Make sure you understand
    how it corresponds to the inference rules. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "c1 '/' st '\symbol{92}\symbol{92}' st'"\coqdoceol
\coqdocindent{9.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ceval} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{SKIP} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Ass}  : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{a1} \coqdocvar{n} \coqdocvar{x},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1} = \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{x} ::= \coqdocvar{a1}) / \coqdocvar{st} \symbol{92}\symbol{92} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{x} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Seq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st}  \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{c1} ;; \coqdocvar{c2}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{b} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{b} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileEnd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{st} \coqdocvar{c},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileLoop} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} \coqdocvar{b} \coqdocvar{c},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) / \coqdocvar{st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "c1 '/' st '\symbol{92}\symbol{92}' st'" := (\coqdocvar{ceval} \coqdocvar{c1} \coqdocvar{st} \coqdocvar{st'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The cost of defining evaluation as a relation instead of a
    function is that we now need to construct \textit{proofs} that some
    program evaluates to some result state, rather than just letting
    Coq's computation mechanism do it for us. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{ceval\_example1}:\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 2;;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{IFB} \coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{THEN} \coqdocvar{Y} ::= \coqdocvar{ANum} 3\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{ELSE} \coqdocvar{Z} ::= \coqdocvar{ANum} 4\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{FI})\coqdoceol
\coqdocindent{1.50em}
/ \coqdocvar{empty\_state}\coqdoceol
\coqdocindent{1.50em}
\symbol{92}\symbol{92} (\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 2) \coqdocvar{Z} 4).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{E\_Seq} \coqdockw{with} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 2).\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{E\_Ass}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{E\_IfFalse}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_Ass}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (ceval\_example2)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{ceval\_example2}:\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 0;; \coqdocvar{Y} ::= \coqdocvar{ANum} 1;; \coqdocvar{Z} ::= \coqdocvar{ANum} 2) / \coqdocvar{empty\_state} \symbol{92}\symbol{92}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{t\_update} (\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 0) \coqdocvar{Y} 1) \coqdocvar{Z} 2).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advanced (pup\_to\_n)}

 Write an Imp program that sums the numbers from 1 to
   \coqdocdefinition{X} (inclusive: 1 + 2 + ... + \coqdocdefinition{X}) in the variable \coqdocdefinition{Y}.
   Prove that this program executes as intended for \coqdocdefinition{X} = 2
   (this is trickier than you might expect). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pup\_to\_n} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pup\_to\_2\_ceval} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pup\_to\_n} / (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 2) \symbol{92}\symbol{92}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{t\_update} (\coqdocvar{t\_update} (\coqdocvar{t\_update} (\coqdocvar{t\_update} (\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{X} 2) \coqdocvar{Y} 0) \coqdocvar{Y} 2) \coqdocvar{X} 1) \coqdocvar{Y} 3) \coqdocvar{X} 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Determinism of Evaluation}



 Changing from a computational to a relational definition of
    evaluation is a good move because it frees us from the artificial
    requirement that evaluation should be a total function.  But it
    also raises a question: Is the second definition of evaluation
    really a partial function?  Or is it possible that, beginning from
    the same state \coqdocvariable{st}, we could evaluate some command \coqdocconstructor{c} in
    different ways to reach two different output states \coqdocvariable{st'} and
    \coqdocvariable{st'{}'}?


    In fact, this cannot happen: \coqdocinductive{ceval} \textit{is} a partial function: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1};\coqdoceol
\coqdocindent{5.50em}
\coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdoctac{inversion} \coqdocvar{E2}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1}.\coqdoceol
\coqdocindent{2.00em}
\{  \coqdoctac{apply} \coqdocvar{IHE1\_1}; \coqdoctac{assumption}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHE1\_2}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHE1}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHE1}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{inversion} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H4}. \coqdoctac{inversion} \coqdocvar{H4}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1}.\coqdoceol
\coqdocindent{3.00em}
\{  \coqdoctac{apply} \coqdocvar{IHE1\_1}; \coqdoctac{assumption}. \}\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHE1\_2}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Reasoning About Imp Programs}



 We'll get deeper into systematic techniques for reasoning about
    Imp programs in the following chapters, but we can do quite a bit
    just working with the bare definitions.  This section explores
    some examples. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{plus2\_spec} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{n} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{plus2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st'} \coqdocvar{X} = \coqdocvar{n} + 2.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{n} \coqdocvar{st'} \coqdocvar{HX} \coqdocvar{Heval}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Inverting \coqdocvar{Heval} essentially forces Coq to expand one step of
      the \coqdocinductive{ceval} computation -- in this case revealing that \coqdocvariable{st'}
      must be \coqdocvariable{st} extended with the new value of \coqdocdefinition{X}, since \coqdocdefinition{plus2}
      is an assignment \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{Heval}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{Heval}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{t\_update\_eq}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, recommendedM (XtimesYinZ\_spec)}

 State and prove a specification of \coqdocdefinition{XtimesYinZ}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, recommended (loop\_never\_stops)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{loop\_never\_stops} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\~{}(\coqdocvar{loop} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{contra}. \coqdoctac{unfold} \coqdocvar{loop} \coqdoctac{in} \coqdocvar{contra}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{WHILE} \coqdocvar{BTrue} \coqdocvar{DO} \coqdocvar{SKIP} \coqdocvar{END}) \coqdockw{as} \coqdocvar{loopdef}\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{eqn}:\coqdocvar{Heqloopdef}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Proceed by induction on the assumed derivation showing that
      \coqdocvar{loopdef} terminates.  Most of the cases are immediately
      contradictory (and so can be solved in one step with
      \coqdoctac{inversion}). \begin{coqdoccode}
\coqdocemptyline
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (no\_whilesR)}

 Consider the following function: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{no\_whiles} (\coqdocvar{c} : \coqdocvar{com}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{c} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{SKIP} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} ::= \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{c1} ;; \coqdocvar{c2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{andb} (\coqdocvar{no\_whiles} \coqdocvar{c1}) (\coqdocvar{no\_whiles} \coqdocvar{c2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{IFB} \coqdocvar{\_} \coqdocvar{THEN} \coqdocvar{ct} \coqdocvar{ELSE} \coqdocvar{cf} \coqdocvar{FI} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{andb} (\coqdocvar{no\_whiles} \coqdocvar{ct}) (\coqdocvar{no\_whiles} \coqdocvar{cf})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{WHILE} \coqdocvar{\_} \coqdocvar{DO} \coqdocvar{\_} \coqdocvar{END}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This predicate yields \coqdocconstructor{true} just on programs that have no while
    loops.  Using \coqdockw{Inductive}, write a property \coqdocinductive{no\_whilesR} such that
    \coqdocinductive{no\_whilesR} \coqdocconstructor{c} is provable exactly when \coqdocconstructor{c} is a program with no
    while loops.  Then prove its equivalence with \coqdocdefinition{no\_whiles}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{no\_whilesR}: \coqdocvar{com} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{0.50em}
\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{no\_whiles\_eqv}:\coqdoceol
\coqdocindent{1.50em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{c}, \coqdocvar{no\_whiles} \coqdocvar{c} = \coqdocvar{true} \ensuremath{\leftrightarrow} \coqdocvar{no\_whilesR} \coqdocvar{c}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 starsM (no\_whiles\_terminating)}

 Imp programs that don't involve while loops always terminate.
    State and prove a theorem \coqdocvar{no\_whiles\_terminating} that says this.  Use either \coqdocdefinition{no\_whiles} or \coqdocinductive{no\_whilesR}, as you prefer. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Additional Exercises}



\paragraph{Exercise: 3 stars (stack\_compiler)}

 HP Calculators, programming languages like Forth and Postscript
    and abstract machines like the Java Virtual Machine all evaluate
    arithmetic expressions using a stack. For instance, the expression


      (2*3)+(3*(4-2))


   would be entered as


      2 3 * 3 4 2 - * +


   and evaluated like this (where we show the program being evaluated
   on the right and the contents of the stack on the left):


                  |    2 3 * 3 4 2 - * +
      2           |    3 * 3 4 2 - * +
      3, 2        |    * 3 4 2 - * +
      6           |    3 4 2 - * +
      3, 6        |    4 2 - * +
      4, 3, 6     |    2 - * +
      2, 4, 3, 6  |    - * +
      2, 3, 6     |    * +
      6, 6        |    +
      12          |


  The task of this exercise is to write a small compiler that
  translates \coqdocinductive{aexp}s into stack machine instructions.


  The instruction set for our stack language will consist of the
  following instructions:

\begin{itemize}
\item  \coqdocconstructor{SPush} \coqdocabbreviation{n}: Push the number \coqdocabbreviation{n} on the stack.

\item  \coqdocconstructor{SLoad} \coqdocabbreviation{x}: Load the identifier \coqdocabbreviation{x} from the store and push it
                  on the stack

\item  \coqdocconstructor{SPlus}:   Pop the two top numbers from the stack, add them, and
                  push the result onto the stack.

\item  \coqdocconstructor{SMinus}:  Similar, but subtract.

\item  \coqdocconstructor{SMult}:   Similar, but multiply. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{sinstr} : \coqdockw{Type} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{SPush} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{sinstr}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{SLoad} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{sinstr}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{SPlus} : \coqdocvar{sinstr}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{SMinus} : \coqdocvar{sinstr}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{SMult} : \coqdocvar{sinstr}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Write a function to evaluate programs in the stack language. It
    should take as input a state, a stack represented as a list of
    numbers (top stack item is the head of the list), and a program
    represented as a list of instructions, and it should return the
    stack after executing the program.  Test your function on the
    examples below.


    Note that the specification leaves unspecified what to do when
    encountering an \coqdocconstructor{SPlus}, \coqdocconstructor{SMinus}, or \coqdocconstructor{SMult} instruction if the
    stack contains less than two elements.  In a sense, it is
    immaterial what we do, since our compiler will never emit such a
    malformed program. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{s\_execute} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{stack} : \coqdocvar{list} \coqdocvar{nat})\coqdoceol
\coqdocindent{9.50em}
(\coqdocvar{prog} : \coqdocvar{list} \coqdocvar{sinstr})\coqdoceol
\coqdocindent{8.50em}
: \coqdocvar{list} \coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{s\_execute1} :\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{s\_execute} \coqdocvar{empty\_state} []\coqdoceol
\coqdocindent{3.50em}
[\coqdocvar{SPush} 5; \coqdocvar{SPush} 3; \coqdocvar{SPush} 1; \coqdocvar{SMinus}]\coqdoceol
\coqdocindent{1.50em}
= [2; 5].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{s\_execute2} :\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{s\_execute} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 3) [3;4]\coqdoceol
\coqdocindent{3.50em}
[\coqdocvar{SPush} 4; \coqdocvar{SLoad} \coqdocvar{X}; \coqdocvar{SMult}; \coqdocvar{SPlus}]\coqdoceol
\coqdocindent{1.50em}
= [15; 4].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next, write a function that compiles an \coqdocinductive{aexp} into a stack
    machine program. The effect of running the program should be the
    same as pushing the value of the expression on the stack. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{s\_compile} (\coqdocvar{e} : \coqdocvar{aexp}) : \coqdocvar{list} \coqdocvar{sinstr}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
After you've defined \coqdocdefinition{s\_compile}, prove the following to test
    that it works. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{s\_compile1} :\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{s\_compile} (\coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AMult} (\coqdocvar{ANum} 2) (\coqdocvar{AId} \coqdocvar{Y})))\coqdoceol
\coqdocindent{1.00em}
= [\coqdocvar{SLoad} \coqdocvar{X}; \coqdocvar{SPush} 2; \coqdocvar{SLoad} \coqdocvar{Y}; \coqdocvar{SMult}; \coqdocvar{SMinus}].\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced (stack\_compiler\_correct)}

 Now we'll prove the correctness of the compiler implemented in the
    previous exercise.  Remember that the specification left
    unspecified what to do when encountering an \coqdocconstructor{SPlus}, \coqdocconstructor{SMinus}, or
    \coqdocconstructor{SMult} instruction if the stack contains less than two
    elements.  (In order to make your correctness proof easier you
    might find it helpful to go back and change your implementation!)


    Prove the following theorem.  You will need to start by stating a
    more general lemma to get a usable induction hypothesis; the main
    theorem will then be a simple corollary of this lemma. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{s\_compile\_correct} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{e} : \coqdocvar{aexp}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s\_execute} \coqdocvar{st} [] (\coqdocvar{s\_compile} \coqdocvar{e}) = [ \coqdocvar{aeval} \coqdocvar{st} \coqdocvar{e} ].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (short\_circuit)}

 Most modern programming languages use a ``short-circuit'' evaluation
    rule for boolean \coqdocinductive{and}: to evaluate \coqdocconstructor{BAnd} \coqdocvariable{b1} \coqdocvariable{b2}, first evaluate
    \coqdocvariable{b1}.  If it evaluates to \coqdocconstructor{false}, then the entire \coqdocconstructor{BAnd}
    expression evaluates to \coqdocconstructor{false} immediately, without evaluating
    \coqdocvariable{b2}.  Otherwise, \coqdocvariable{b2} is evaluated to determine the result of the
    \coqdocconstructor{BAnd} expression.


    Write an alternate version of \coqdocdefinition{beval} that performs short-circuit
    evaluation of \coqdocconstructor{BAnd} in this manner, and prove that it is
    equivalent to \coqdocdefinition{beval}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{BreakImp}.\coqdoceol
\end{coqdoccode}
\paragraph{Exercise: 4 stars, advanced (break\_imp)}



 Imperative languages like C and Java often include a \coqdocvar{break} or
    similar statement for interrupting the execution of loops. In this
    exercise we consider how to add \coqdocvar{break} to Imp.  First, we need to
    enrich the language of commands with an additional case. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{com} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSkip} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CBreak} : \coqdocvar{com}               \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CAss} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSeq} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CIf} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CWhile} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'SKIP'" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{CSkip}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'BREAK'" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{CBreak}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "x '::=' a" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CAss} \coqdocvar{x} \coqdocvar{a}) (\coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "c1 ;; c2" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CSeq} \coqdocvar{c1} \coqdocvar{c2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'WHILE' b 'DO' c 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CWhile} \coqdocvar{b} \coqdocvar{c}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'IFB' c1 'THEN' c2 'ELSE' c3 'FI'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CIf} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c3}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next, we need to define the behavior of \coqdocvar{BREAK}.  Informally,
    whenever \coqdocvar{BREAK} is executed in a sequence of commands, it stops
    the execution of that sequence and signals that the innermost
    enclosing loop should terminate.  (If there aren't any
    enclosing loops, then the whole program simply terminates.)  The
    final state should be the same as the one in which the \coqdocvar{BREAK}
    statement was executed.


    One important point is what to do when there are multiple loops
    enclosing a given \coqdocvar{BREAK}. In those cases, \coqdocvar{BREAK} should only
    terminate the \textit{innermost} loop. Thus, after executing the
    following...


       X ::= 0;;
       Y ::= 1;;
       WHILE 0 <> Y DO
         WHILE TRUE DO
           BREAK
         END;;
         X ::= 1;;
         Y ::= Y - 1
       END


    ... the value of \coqdocdefinition{X} should be 1, and not 0.


    One way of expressing this behavior is to add another parameter to
    the evaluation relation that specifies whether evaluation of a
    command executes a \coqdocvar{BREAK} statement: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{result} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{SContinue} : \coqdocvar{result}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{SBreak} : \coqdocvar{result}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "c1 '/' st '\symbol{92}\symbol{92}' s '/' st'"\coqdoceol
\coqdocindent{9.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st}, \coqdocvar{s} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Intuitively, \coqdocconstructor{c} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocdefinition{s} / \coqdocvariable{st'} means that, if \coqdocconstructor{c} is started in
    state \coqdocvariable{st}, then it terminates in state \coqdocvariable{st'} and either signals
    that the innermost surrounding loop (or the whole program) should
    exit immediately (\coqdocdefinition{s} = \coqdocconstructor{SBreak}) or that execution should continue
    normally (\coqdocdefinition{s} = \coqdocconstructor{SContinue}).


    The definition of the ``\coqdocconstructor{c} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocdefinition{s} / \coqdocvariable{st'}'' relation is very
    similar to the one we gave above for the regular evaluation
    relation (\coqdocconstructor{c} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}) -- we just need to handle the
    termination signals appropriately:



\begin{itemize}
\item  If the command is \coqdocvar{SKIP}, then the state doesn't change and
      execution of any enclosing loop can continue normally.



\item  If the command is \coqdocvar{BREAK}, the state stays unchanged but we
      signal a \coqdocconstructor{SBreak}.



\item  If the command is an assignment, then we update the binding for
      that variable in the state accordingly and signal that execution
      can continue normally.



\item  If the command is of the form \coqdocvar{IFB} \coqdocconstructor{b} \coqdocvar{THEN} \coqdocconstructor{c1} \coqdocvar{ELSE} \coqdocconstructor{c2} \coqdocvar{FI}, then
      the state is updated as in the original semantics of Imp, except
      that we also propagate the signal from the execution of
      whichever branch was taken.



\item  If the command is a sequence \coqdocconstructor{c1} ;; \coqdocconstructor{c2}, we first execute
      \coqdocconstructor{c1}.  If this yields a \coqdocconstructor{SBreak}, we skip the execution of \coqdocconstructor{c2}
      and propagate the \coqdocconstructor{SBreak} signal to the surrounding context;
      the resulting state is the same as the one obtained by
      executing \coqdocconstructor{c1} alone. Otherwise, we execute \coqdocconstructor{c2} on the state
      obtained after executing \coqdocconstructor{c1}, and propagate the signal
      generated there.



\item  Finally, for a loop of the form \coqdocvar{WHILE} \coqdocconstructor{b} \coqdocvar{DO} \coqdocconstructor{c} \coqdocvar{END}, the
      semantics is almost the same as before. The only difference is
      that, when \coqdocconstructor{b} evaluates to true, we execute \coqdocconstructor{c} and check the
      signal that it raises.  If that signal is \coqdocconstructor{SContinue}, then the
      execution proceeds as in the original semantics. Otherwise, we
      stop the execution of the loop, and the resulting state is the
      same as the one resulting from the execution of the current
      iteration.  In either case, since \coqdocvar{BREAK} only terminates the
      innermost loop, \coqdocvar{WHILE} signals \coqdocconstructor{SContinue}. 
\end{itemize}


 Based on the above description, complete the definition of the
    \coqdocinductive{ceval} relation. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ceval} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{result} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{CSkip} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{SContinue} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "c1 '/' st '\symbol{92}\symbol{92}' s '/' st'" := (\coqdocvar{ceval} \coqdocvar{c1} \coqdocvar{st} \coqdocvar{s} \coqdocvar{st'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now prove the following properties of your definition of \coqdocinductive{ceval}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{break\_ignore} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{s},\coqdoceol
\coqdocindent{2.50em}
(\coqdocvar{BREAK};; \coqdocvar{c}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{s} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st} = \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{while\_continue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{s},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{s} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{s} = \coqdocvar{SContinue}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{while\_stops\_on\_break} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{SBreak} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{SContinue} / \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advanced, optional (while\_break\_true)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{while\_break\_true} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{SContinue} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beval} \coqdocvar{st'} \coqdocvar{b} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{st'{}'}, \coqdocvar{c} / \coqdocvar{st'{}'} \symbol{92}\symbol{92} \coqdocvar{SBreak} / \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced, optional (ceval\_deterministic)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic}: \coqdockw{\ensuremath{\forall}} (\coqdocvar{c}:\coqdocvar{com}) \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{s1} \coqdocvar{s2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{s1} / \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{s2} / \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2} \ensuremath{\land} \coqdocvar{s1} = \coqdocvar{s2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocnoindent
\coqdockw{End} \coqdocvar{BreakImp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 4 stars, optional (add\_for\_loop)}

 Add C-style \coqdockw{for} loops to the language of commands, update the
    \coqdocinductive{ceval} definition to define the semantics of \coqdockw{for} loops, and add
    cases for \coqdockw{for} loops as needed so that all the proofs in this file
    are accepted by Coq.


    A \coqdockw{for} loop should be parameterized by (a) a statement executed
    initially, (b) a test that is run on each iteration of the loop to
    determine whether the loop should continue, (c) a statement
    executed at the end of each loop iteration, and (d) a statement
    that makes up the body of the loop.  (You don't need to worry
    about making up a concrete Notation for \coqdockw{for} loops, but feel free
    to play with this too if you like.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.ImpParser}{Library }{Top.ImpParser}

\begin{coqdoccode}
\end{coqdoccode}
\section{ImpParser: Lexing and Parsing in Coq}



 The development of the Imp language in \coqdocvar{Imp.v} completely ignores
    issues of concrete syntax -- how an ascii string that a programmer
    might write gets translated into abstract syntax trees defined by
    the datatypes \coqdocinductive{aexp}, \coqdocinductive{bexp}, and \coqdocinductive{com}.  In this chapter, we
    illustrate how the rest of the story can be filled in by building
    a simple lexical analyzer and parser using Coq's functional
    programming facilities.


    It is not important to understand all the details here (and
    accordingly, the explanations are fairly terse and there are no
    exercises).  The main point is simply to demonstrate that it can
    be done.  You are invited to look through the code -- most of it
    is not very complicated, though the parser relies on some
    ``monadic'' programming idioms that may require a little work to
    make out -- but most readers will probably want to just skim down
    to the Examples section at the very end to get the punchline. \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\section{Internals}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Strings.String}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Strings.Ascii}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.EqNat}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Lists.List}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{ListNotations}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Lexical Analysis}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{isWhite} (\coqdocvar{c} : \coqdocvar{ascii}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{n} := \coqdocvar{nat\_of\_ascii} \coqdocvar{c} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{orb} (\coqdocvar{orb} (\coqdocvar{beq\_nat} \coqdocvar{n} 32)   \coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{beq\_nat} \coqdocvar{n} 9))   \coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{orb} (\coqdocvar{beq\_nat} \coqdocvar{n} 10)   \coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{beq\_nat} \coqdocvar{n} 13)). \coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "x '<=?' y" := (\coqdocvar{leb} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 70, \coqdockw{no} \coqdockw{associativity}) : \coqdocvar{nat\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{isLowerAlpha} (\coqdocvar{c} : \coqdocvar{ascii}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{n} := \coqdocvar{nat\_of\_ascii} \coqdocvar{c} \coqdoctac{in}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{andb} (97 <=? \coqdocvar{n}) (\coqdocvar{n} <=? 122).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{isAlpha} (\coqdocvar{c} : \coqdocvar{ascii}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{n} := \coqdocvar{nat\_of\_ascii} \coqdocvar{c} \coqdoctac{in}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{orb} (\coqdocvar{andb} (65 <=? \coqdocvar{n}) (\coqdocvar{n} <=? 90))\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{andb} (97 <=? \coqdocvar{n}) (\coqdocvar{n} <=? 122)).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{isDigit} (\coqdocvar{c} : \coqdocvar{ascii}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{n} := \coqdocvar{nat\_of\_ascii} \coqdocvar{c} \coqdoctac{in}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{andb} (48 <=? \coqdocvar{n}) (\coqdocvar{n} <=? 57).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{chartype} := \coqdocvar{white} \ensuremath{|} \coqdocvar{alpha} \ensuremath{|} \coqdocvar{digit} \ensuremath{|} \coqdocvar{other}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{classifyChar} (\coqdocvar{c} : \coqdocvar{ascii}) : \coqdocvar{chartype} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{if} \coqdocvar{isWhite} \coqdocvar{c} \coqdockw{then}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{white}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{else} \coqdockw{if} \coqdocvar{isAlpha} \coqdocvar{c} \coqdockw{then}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{alpha}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{else} \coqdockw{if} \coqdocvar{isDigit} \coqdocvar{c} \coqdockw{then}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{digit}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{else}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{other}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{list\_of\_string} (\coqdocvar{s} : \coqdocvar{string}) : \coqdocvar{list} \coqdocvar{ascii} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{s} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{EmptyString} \ensuremath{\Rightarrow} []\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{String} \coqdocvar{c} \coqdocvar{s} \ensuremath{\Rightarrow} \coqdocvar{c} :: (\coqdocvar{list\_of\_string} \coqdocvar{s})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{string\_of\_list} (\coqdocvar{xs} : \coqdocvar{list} \coqdocvar{ascii}) : \coqdocvar{string} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fold\_right} \coqdocvar{String} \coqdocvar{EmptyString} \coqdocvar{xs}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{token} := \coqdocvar{string}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{tokenize\_helper} (\coqdocvar{cls} : \coqdocvar{chartype}) (\coqdocvar{acc} \coqdocvar{xs} : \coqdocvar{list} \coqdocvar{ascii})\coqdoceol
\coqdocindent{11.50em}
: \coqdocvar{list} (\coqdocvar{list} \coqdocvar{ascii}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{tk} := \coqdockw{match} \coqdocvar{acc} \coqdockw{with} [] \ensuremath{\Rightarrow} [] \ensuremath{|} \coqdocvar{\_}::\coqdocvar{\_} \ensuremath{\Rightarrow} [\coqdocvar{rev} \coqdocvar{acc}] \coqdockw{end} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{xs} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{tk}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{x}::\coqdocvar{xs'}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{cls}, \coqdocvar{classifyChar} \coqdocvar{x}, \coqdocvar{x} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_}, \coqdocvar{\_}, "("      \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tk} ++ ["("]::(\coqdocvar{tokenize\_helper} \coqdocvar{other} [] \coqdocvar{xs'})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_}, \coqdocvar{\_}, ")"      \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tk} ++ [")"]::(\coqdocvar{tokenize\_helper} \coqdocvar{other} [] \coqdocvar{xs'})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_}, \coqdocvar{white}, \coqdocvar{\_}    \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tk} ++ (\coqdocvar{tokenize\_helper} \coqdocvar{white} [] \coqdocvar{xs'})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{alpha},\coqdocvar{alpha},\coqdocvar{x}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tokenize\_helper} \coqdocvar{alpha} (\coqdocvar{x}::\coqdocvar{acc}) \coqdocvar{xs'}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{digit},\coqdocvar{digit},\coqdocvar{x}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tokenize\_helper} \coqdocvar{digit} (\coqdocvar{x}::\coqdocvar{acc}) \coqdocvar{xs'}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{other},\coqdocvar{other},\coqdocvar{x}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tokenize\_helper} \coqdocvar{other} (\coqdocvar{x}::\coqdocvar{acc}) \coqdocvar{xs'}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_},\coqdocvar{tp},\coqdocvar{x}         \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tk} ++ (\coqdocvar{tokenize\_helper} \coqdocvar{tp} [\coqdocvar{x}] \coqdocvar{xs'})\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end} \%\coqdocvar{char}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{tokenize} (\coqdocvar{s} : \coqdocvar{string}) : \coqdocvar{list} \coqdocvar{string} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{map} \coqdocvar{string\_of\_list} (\coqdocvar{tokenize\_helper} \coqdocvar{white} [] (\coqdocvar{list\_of\_string} \coqdocvar{s})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{tokenize\_ex1} :\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{tokenize} "abc12==3  223*(3+(a+c))" \%\coqdocvar{string}\coqdoceol
\coqdocindent{1.00em}
= ["abc"; "12"; "=="; "3"; "223";\coqdoceol
\coqdocindent{3.50em}
"*"; "("; "3"; "+"; "(";\coqdoceol
\coqdocindent{3.50em}
"a"; "+"; "c"; ")"; ")"]\%\coqdocvar{string}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Parsing}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Options With Errors}



 An \coqdocinductive{option} type with error messages: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{optionE} (\coqdocvar{X}:\coqdockw{Type}) : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{SomeE} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{optionE} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{NoneE} : \coqdocvar{string} \ensuremath{\rightarrow} \coqdocvar{optionE} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Implicit Arguments} \coqdocvar{SomeE} [[\coqdocvar{X}]].\coqdoceol
\coqdocnoindent
\coqdockw{Implicit Arguments} \coqdocvar{NoneE} [[\coqdocvar{X}]].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Some syntactic sugar to make writing nested match-expressions on
    optionE more convenient. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'DO' ( x , y ) <== e1 ; e2"\coqdoceol
\coqdocindent{1.50em}
:= (\coqdockw{match} \coqdocvar{e1} \coqdockw{with}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{SomeE} (\coqdocvar{x},\coqdocvar{y}) \ensuremath{\Rightarrow} \coqdocvar{e2}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{NoneE} \coqdocvar{err} \ensuremath{\Rightarrow} \coqdocvar{NoneE} \coqdocvar{err}\coqdoceol
\coqdocindent{3.50em}
\coqdockw{end})\coqdoceol
\coqdocindent{1.50em}
(\coqdoctac{right} \coqdockw{associativity}, \coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'DO' ( x , y ) <-- e1 ; e2 'OR' e3"\coqdoceol
\coqdocindent{1.50em}
:= (\coqdockw{match} \coqdocvar{e1} \coqdockw{with}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{SomeE} (\coqdocvar{x},\coqdocvar{y}) \ensuremath{\Rightarrow} \coqdocvar{e2}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{NoneE} \coqdocvar{err} \ensuremath{\Rightarrow} \coqdocvar{e3}\coqdoceol
\coqdocindent{3.50em}
\coqdockw{end})\coqdoceol
\coqdocindent{1.50em}
(\coqdoctac{right} \coqdockw{associativity}, \coqdoctac{at} \coqdockw{level} 60, \coqdocvar{e2} \coqdoctac{at} \coqdocvar{next} \coqdockw{level}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Generic Combinators for Building Parsers}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Open} \coqdockw{Scope} \coqdocvar{string\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{parser} (\coqdocvar{T} : \coqdockw{Type}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{list} \coqdocvar{token} \ensuremath{\rightarrow} \coqdocvar{optionE} (\coqdocvar{T} \ensuremath{\times} \coqdocvar{list} \coqdocvar{token}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{many\_helper} \{\coqdocvar{T}\} (\coqdocvar{p} : \coqdocvar{parser} \coqdocvar{T}) \coqdocvar{acc} \coqdocvar{steps} \coqdocvar{xs} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{steps}, \coqdocvar{p} \coqdocvar{xs} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0, \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{NoneE} "Too many recursive calls"\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_}, \coqdocvar{NoneE} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{SomeE} ((\coqdocvar{rev} \coqdocvar{acc}), \coqdocvar{xs})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{steps'}, \coqdocvar{SomeE} (\coqdocvar{t}, \coqdocvar{xs'}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{many\_helper} \coqdocvar{p} (\coqdocvar{t}::\coqdocvar{acc}) \coqdocvar{steps'} \coqdocvar{xs'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A (step-indexed) parser that expects zero or more \coqdocvariable{p}s: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{many} \{\coqdocvar{T}\} (\coqdocvar{p} : \coqdocvar{parser} \coqdocvar{T}) (\coqdocvar{steps} : \coqdocvar{nat}) : \coqdocvar{parser} (\coqdocvar{list} \coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{many\_helper} \coqdocvar{p} [] \coqdocvar{steps}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A parser that expects a given token, followed by \coqdocvariable{p}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{firstExpect} \{\coqdocvar{T}\} (\coqdocvar{t} : \coqdocvar{token}) (\coqdocvar{p} : \coqdocvar{parser} \coqdocvar{T})\coqdoceol
\coqdocindent{10.50em}
: \coqdocvar{parser} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} \coqdocvar{xs} \ensuremath{\Rightarrow} \coqdockw{match} \coqdocvar{xs} \coqdockw{with}\coqdoceol
\coqdocindent{6.00em}
\ensuremath{|} \coqdocvar{x}::\coqdocvar{xs'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{7.00em}
\coqdockw{if} \coqdocvar{string\_dec} \coqdocvar{x} \coqdocvar{t}\coqdoceol
\coqdocindent{7.00em}
\coqdockw{then} \coqdocvar{p} \coqdocvar{xs'}\coqdoceol
\coqdocindent{7.00em}
\coqdockw{else} \coqdocvar{NoneE} ("expected '" ++ \coqdocvar{t} ++ "'.")\coqdoceol
\coqdocindent{6.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{7.00em}
\coqdocvar{NoneE} ("expected '" ++ \coqdocvar{t} ++ "'.")\coqdoceol
\coqdocindent{6.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A parser that expects a particular token: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{expect} (\coqdocvar{t} : \coqdocvar{token}) : \coqdocvar{parser} \coqdocvar{unit} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{firstExpect} \coqdocvar{t} (\coqdockw{fun} \coqdocvar{xs} \ensuremath{\Rightarrow} \coqdocvar{SomeE}(\coqdocvar{tt}, \coqdocvar{xs})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{A Recursive-Descent Parser for Imp}



 Identifiers: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{parseIdentifier} (\coqdocvar{xs} : \coqdocvar{list} \coqdocvar{token})\coqdoceol
\coqdocindent{12.50em}
: \coqdocvar{optionE} (\coqdocvar{id} \ensuremath{\times} \coqdocvar{list} \coqdocvar{token}) :=\coqdoceol
\coqdocnoindent
\coqdockw{match} \coqdocvar{xs} \coqdockw{with}\coqdoceol
\coqdocnoindent
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{NoneE} "Expected identifier"\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{x}::\coqdocvar{xs'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{if} \coqdocvar{forallb} \coqdocvar{isLowerAlpha} (\coqdocvar{list\_of\_string} \coqdocvar{x}) \coqdockw{then}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{SomeE} (\coqdocvar{Id} \coqdocvar{x}, \coqdocvar{xs'})\coqdoceol
\coqdocindent{2.00em}
\coqdockw{else}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{NoneE} ("Illegal identifier:'" ++ \coqdocvar{x} ++ "'")\coqdoceol
\coqdocnoindent
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Numbers: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{parseNumber} (\coqdocvar{xs} : \coqdocvar{list} \coqdocvar{token})\coqdoceol
\coqdocindent{10.50em}
: \coqdocvar{optionE} (\coqdocvar{nat} \ensuremath{\times} \coqdocvar{list} \coqdocvar{token}) :=\coqdoceol
\coqdocnoindent
\coqdockw{match} \coqdocvar{xs} \coqdockw{with}\coqdoceol
\coqdocnoindent
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{NoneE} "Expected number"\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{x}::\coqdocvar{xs'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{if} \coqdocvar{forallb} \coqdocvar{isDigit} (\coqdocvar{list\_of\_string} \coqdocvar{x}) \coqdockw{then}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{SomeE} (\coqdocvar{fold\_left}\coqdoceol
\coqdocindent{7.50em}
(\coqdockw{fun} \coqdocvar{n} \coqdocvar{d} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{9.00em}
10 \ensuremath{\times} \coqdocvar{n} + (\coqdocvar{nat\_of\_ascii} \coqdocvar{d} -\coqdoceol
\coqdocindent{14.00em}
\coqdocvar{nat\_of\_ascii} "0"\%\coqdocvar{char}))\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{list\_of\_string} \coqdocvar{x})\coqdoceol
\coqdocindent{7.50em}
0,\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{xs'})\coqdoceol
\coqdocindent{2.00em}
\coqdockw{else}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{NoneE} "Expected number"\coqdoceol
\coqdocnoindent
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Parse arithmetic expressions \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{parsePrimaryExp} (\coqdocvar{steps}:\coqdocvar{nat}) \coqdoceol
\coqdocindent{12.50em}
(\coqdocvar{xs} : \coqdocvar{list} \coqdocvar{token})\coqdoceol
\coqdocindent{11.50em}
: \coqdocvar{optionE} (\coqdocvar{aexp} \ensuremath{\times} \coqdocvar{list} \coqdocvar{token}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{steps} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdocvar{NoneE} "Too many recursive calls"\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{steps'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{DO} (\coqdocvar{i}, \coqdocvar{rest}) <-- \coqdocvar{parseIdentifier} \coqdocvar{xs} ;\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{SomeE} (\coqdocvar{AId} \coqdocvar{i}, \coqdocvar{rest})\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{OR} \coqdocvar{DO} (\coqdocvar{n}, \coqdocvar{rest}) <-- \coqdocvar{parseNumber} \coqdocvar{xs} ;\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{SomeE} (\coqdocvar{ANum} \coqdocvar{n}, \coqdocvar{rest})\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{OR} (\coqdocvar{DO} (\coqdocvar{e}, \coqdocvar{rest}) <== \coqdocvar{firstExpect} "("\coqdoceol
\coqdocindent{11.50em}
(\coqdocvar{parseSumExp} \coqdocvar{steps'}) \coqdocvar{xs};\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{DO} (\coqdocvar{u}, \coqdocvar{rest'}) <== \coqdocvar{expect} ")" \coqdocvar{rest} ;\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{SomeE}(\coqdocvar{e},\coqdocvar{rest'}))\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{with} \coqdocvar{parseProductExp} (\coqdocvar{steps}:\coqdocvar{nat})\coqdoceol
\coqdocindent{10.50em}
(\coqdocvar{xs} : \coqdocvar{list} \coqdocvar{token}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{steps} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdocvar{NoneE} "Too many recursive calls"\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{steps'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{DO} (\coqdocvar{e}, \coqdocvar{rest}) <==\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{parsePrimaryExp} \coqdocvar{steps'} \coqdocvar{xs} ;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{DO} (\coqdocvar{es}, \coqdocvar{rest'}) <==\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{many} (\coqdocvar{firstExpect} "*" (\coqdocvar{parsePrimaryExp} \coqdocvar{steps'}))\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{steps'} \coqdocvar{rest};\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{SomeE} (\coqdocvar{fold\_left} \coqdocvar{AMult} \coqdocvar{es} \coqdocvar{e}, \coqdocvar{rest'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{with} \coqdocvar{parseSumExp} (\coqdocvar{steps}:\coqdocvar{nat}) (\coqdocvar{xs} : \coqdocvar{list} \coqdocvar{token})  :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{steps} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdocvar{NoneE} "Too many recursive calls"\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{steps'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{DO} (\coqdocvar{e}, \coqdocvar{rest}) <==\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{parseProductExp} \coqdocvar{steps'} \coqdocvar{xs} ;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{DO} (\coqdocvar{es}, \coqdocvar{rest'}) <==\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{many} (\coqdockw{fun} \coqdocvar{xs} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{DO} (\coqdocvar{e},\coqdocvar{rest'}) <--\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{firstExpect} "+"\coqdoceol
\coqdocindent{6.50em}
(\coqdocvar{parseProductExp} \coqdocvar{steps'}) \coqdocvar{xs};\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{SomeE} ( (\coqdocvar{true}, \coqdocvar{e}), \coqdocvar{rest'})\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{OR} \coqdocvar{DO} (\coqdocvar{e},\coqdocvar{rest'}) <==\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{firstExpect} "-"\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{parseProductExp} \coqdocvar{steps'}) \coqdocvar{xs};\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{SomeE} ( (\coqdocvar{false}, \coqdocvar{e}), \coqdocvar{rest'}))\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{steps'} \coqdocvar{rest};\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{SomeE} (\coqdocvar{fold\_left} (\coqdockw{fun} \coqdocvar{e0} \coqdocvar{term} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{13.00em}
\coqdockw{match} \coqdocvar{term} \coqdockw{with}\coqdoceol
\coqdocindent{14.00em}
(\coqdocvar{true},  \coqdocvar{e}) \ensuremath{\Rightarrow} \coqdocvar{APlus} \coqdocvar{e0} \coqdocvar{e}\coqdoceol
\coqdocindent{13.00em}
\ensuremath{|} (\coqdocvar{false}, \coqdocvar{e}) \ensuremath{\Rightarrow} \coqdocvar{AMinus} \coqdocvar{e0} \coqdocvar{e}\coqdoceol
\coqdocindent{13.00em}
\coqdockw{end})\coqdoceol
\coqdocindent{11.50em}
\coqdocvar{es} \coqdocvar{e},\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{rest'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{parseAExp} := \coqdocvar{parseSumExp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Parsing boolean expressions: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{parseAtomicExp} (\coqdocvar{steps}:\coqdocvar{nat})\coqdoceol
\coqdocindent{12.00em}
(\coqdocvar{xs} : \coqdocvar{list} \coqdocvar{token})  :=\coqdoceol
\coqdocnoindent
\coqdockw{match} \coqdocvar{steps} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdocvar{NoneE} "Too many recursive calls"\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{steps'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{DO}    (\coqdocvar{u},\coqdocvar{rest}) <-- \coqdocvar{expect} "true" \coqdocvar{xs};\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{SomeE} (\coqdocvar{BTrue},\coqdocvar{rest})\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{OR} \coqdocvar{DO} (\coqdocvar{u},\coqdocvar{rest}) <-- \coqdocvar{expect} "false" \coqdocvar{xs};\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{SomeE} (\coqdocvar{BFalse},\coqdocvar{rest})\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{OR} \coqdocvar{DO} (\coqdocvar{e},\coqdocvar{rest}) <-- \coqdoceol
\coqdocindent{6.00em}
\coqdocvar{firstExpect} "not" \coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{parseAtomicExp} \coqdocvar{steps'}) \coqdoceol
\coqdocindent{7.50em}
\coqdocvar{xs};\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{SomeE} (\coqdocvar{BNot} \coqdocvar{e}, \coqdocvar{rest})\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{OR} \coqdocvar{DO} (\coqdocvar{e},\coqdocvar{rest}) <-- \coqdoceol
\coqdocindent{7.00em}
\coqdocvar{firstExpect} "(" \coqdoceol
\coqdocindent{8.00em}
(\coqdocvar{parseConjunctionExp} \coqdocvar{steps'}) \coqdocvar{xs};\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{DO} (\coqdocvar{u},\coqdocvar{rest'}) <== \coqdocvar{expect} ")" \coqdocvar{rest}; \coqdoceol
\coqdocindent{7.00em}
\coqdocvar{SomeE} (\coqdocvar{e}, \coqdocvar{rest'}))\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{OR} \coqdocvar{DO} (\coqdocvar{e}, \coqdocvar{rest}) <== \coqdocvar{parseProductExp} \coqdocvar{steps'} \coqdocvar{xs};\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{DO} (\coqdocvar{e'}, \coqdocvar{rest'}) <--\coqdoceol
\coqdocindent{7.00em}
\coqdocvar{firstExpect} "==" \coqdoceol
\coqdocindent{8.00em}
(\coqdocvar{parseAExp} \coqdocvar{steps'}) \coqdocvar{rest};\coqdoceol
\coqdocindent{7.00em}
\coqdocvar{SomeE} (\coqdocvar{BEq} \coqdocvar{e} \coqdocvar{e'}, \coqdocvar{rest'})\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{OR} \coqdocvar{DO} (\coqdocvar{e'}, \coqdocvar{rest'}) <--\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{firstExpect} "<=" \coqdoceol
\coqdocindent{8.50em}
(\coqdocvar{parseAExp} \coqdocvar{steps'}) \coqdocvar{rest};\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{SomeE} (\coqdocvar{BLe} \coqdocvar{e} \coqdocvar{e'}, \coqdocvar{rest'})\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{OR}\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{NoneE} \coqdoceol
\coqdocindent{3.00em}
"Expected '==' or '<=' after arithmetic expression")\coqdoceol
\coqdocnoindent
\coqdockw{end}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{with} \coqdocvar{parseConjunctionExp} (\coqdocvar{steps}:\coqdocvar{nat})\coqdoceol
\coqdocindent{12.50em}
(\coqdocvar{xs} : \coqdocvar{list} \coqdocvar{token}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{steps} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdocvar{NoneE} "Too many recursive calls"\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{steps'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{DO} (\coqdocvar{e}, \coqdocvar{rest}) <==\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{parseAtomicExp} \coqdocvar{steps'} \coqdocvar{xs} ;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{DO} (\coqdocvar{es}, \coqdocvar{rest'}) <==\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{many} (\coqdocvar{firstExpect} "\&\&"\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{parseAtomicExp} \coqdocvar{steps'}))\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{steps'} \coqdocvar{rest};\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{SomeE} (\coqdocvar{fold\_left} \coqdocvar{BAnd} \coqdocvar{es} \coqdocvar{e}, \coqdocvar{rest'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{parseBExp} := \coqdocvar{parseConjunctionExp}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{parseConjunctionExp}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{testParsing} \{\coqdocvar{X} : \coqdockw{Type}\}\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{p} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdoceol
\coqdocindent{8.00em}
\coqdocvar{list} \coqdocvar{token} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{optionE} (\coqdocvar{X} \ensuremath{\times} \coqdocvar{list} \coqdocvar{token}))\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{s} : \coqdocvar{string}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{t} := \coqdocvar{tokenize} \coqdocvar{s} \coqdoctac{in} \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{p} 100 \coqdocvar{t}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
Parsing commands: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{parseSimpleCommand} (\coqdocvar{steps}:\coqdocvar{nat}) \coqdoceol
\coqdocindent{14.00em}
(\coqdocvar{xs} : \coqdocvar{list} \coqdocvar{token}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{steps} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdocvar{NoneE} "Too many recursive calls"\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{steps'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{DO} (\coqdocvar{u}, \coqdocvar{rest}) <-- \coqdocvar{expect} "SKIP" \coqdocvar{xs};\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{SomeE} (\coqdocvar{SKIP}, \coqdocvar{rest})\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{OR} \coqdocvar{DO} (\coqdocvar{e},\coqdocvar{rest}) <--\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{firstExpect} "IF" (\coqdocvar{parseBExp} \coqdocvar{steps'}) \coqdocvar{xs};\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{DO} (\coqdocvar{c},\coqdocvar{rest'})  <==\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{firstExpect} "THEN" \coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{parseSequencedCommand} \coqdocvar{steps'}) \coqdocvar{rest};\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{DO} (\coqdocvar{c'},\coqdocvar{rest'{}'}) <==\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{firstExpect} "ELSE" \coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{parseSequencedCommand} \coqdocvar{steps'}) \coqdocvar{rest'};\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{DO} (\coqdocvar{u},\coqdocvar{rest'{}'{}'}) <==\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{expect} "END" \coqdocvar{rest'{}'};\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{SomeE}(\coqdocvar{IFB} \coqdocvar{e} \coqdocvar{THEN} \coqdocvar{c} \coqdocvar{ELSE} \coqdocvar{c'} \coqdocvar{FI}, \coqdocvar{rest'{}'{}'})\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{OR} \coqdocvar{DO} (\coqdocvar{e},\coqdocvar{rest}) <--\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{firstExpect} "WHILE" \coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{parseBExp} \coqdocvar{steps'}) \coqdocvar{xs};\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{DO} (\coqdocvar{c},\coqdocvar{rest'}) <==\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{firstExpect} "DO" \coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{parseSequencedCommand} \coqdocvar{steps'}) \coqdocvar{rest};\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{DO} (\coqdocvar{u},\coqdocvar{rest'{}'}) <==\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{expect} "END" \coqdocvar{rest'};\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{SomeE}(\coqdocvar{WHILE} \coqdocvar{e} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}, \coqdocvar{rest'{}'})\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{OR} \coqdocvar{DO} (\coqdocvar{i}, \coqdocvar{rest}) <==\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{parseIdentifier} \coqdocvar{xs};\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{DO} (\coqdocvar{e}, \coqdocvar{rest'}) <==\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{firstExpect} ":=" (\coqdocvar{parseAExp} \coqdocvar{steps'}) \coqdocvar{rest};\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{SomeE}(\coqdocvar{i} ::= \coqdocvar{e}, \coqdocvar{rest'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{with} \coqdocvar{parseSequencedCommand} (\coqdocvar{steps}:\coqdocvar{nat})\coqdoceol
\coqdocindent{13.50em}
(\coqdocvar{xs} : \coqdocvar{list} \coqdocvar{token}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{steps} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdocvar{NoneE} "Too many recursive calls"\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{steps'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{DO} (\coqdocvar{c}, \coqdocvar{rest}) <==\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{parseSimpleCommand} \coqdocvar{steps'} \coqdocvar{xs};\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{DO} (\coqdocvar{c'}, \coqdocvar{rest'}) <--\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{firstExpect} ";" \coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{parseSequencedCommand} \coqdocvar{steps'}) \coqdocvar{rest};\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{SomeE}(\coqdocvar{c} ;; \coqdocvar{c'}, \coqdocvar{rest'})\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{OR}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{SomeE}(\coqdocvar{c}, \coqdocvar{rest})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{bignumber} := 1000.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{parse} (\coqdocvar{str} : \coqdocvar{string}) : \coqdocvar{optionE} (\coqdocvar{com} \ensuremath{\times} \coqdocvar{list} \coqdocvar{token}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{tokens} := \coqdocvar{tokenize} \coqdocvar{str} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{parseSequencedCommand} \coqdocvar{bignumber} \coqdocvar{tokens}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Examples}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocemptyline
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
$Date: 2017-01-31 19:12:59 -0500 (Tue, 31 Jan 2017) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.ImpCEvalFun}{Library }{Top.ImpCEvalFun}

\begin{coqdoccode}
\end{coqdoccode}
\section{ImpCEvalFun: Evaluation Function for Imp}



 We saw in the \coqdoclibrary{Imp} chapter how a naive approach to defining a
    function representing evaluation for Imp runs into difficulties.
    There, we adopted the solution of changing from a functional to a
    relational definition of evaluation.  In this optional chapter, we
    consider strategies for getting the functional approach to
    work. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{A Broken Evaluator}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here was our first try at an evaluation function for commands,
    omitting \coqdocvar{WHILE}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{ceval\_step1} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{c} : \coqdocvar{com}) : \coqdocvar{state} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{c} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{SKIP} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{st}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{l} ::= \coqdocvar{a1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{l} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{c1} ;; \coqdocvar{c2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdockw{let} \coqdocvar{st'} := \coqdocvar{ceval\_step1} \coqdocvar{st} \coqdocvar{c1} \coqdoctac{in}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{ceval\_step1} \coqdocvar{st'} \coqdocvar{c2}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdockw{if} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b})\coqdoceol
\coqdocindent{5.00em}
\coqdockw{then} \coqdocvar{ceval\_step1} \coqdocvar{st} \coqdocvar{c1}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{else} \coqdocvar{ceval\_step1} \coqdocvar{st} \coqdocvar{c2}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{st}  \coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As we remarked in chapter \coqdoclibrary{Imp}, in a traditional functional
    programming language like ML or Haskell we could write the WHILE
    case as follows:


    | WHILE b1 DO c1 END => if (beval st b1) then ceval\_step1 st (c1;;
        WHILE b1 DO c1 END) else st


    Coq doesn't accept such a definition (\coqdocvar{Error}: \coqdocvar{Cannot} \coqdocvar{guess}
    \coqdocvar{decreasing} \coqdocvar{argument} \coqdocvar{of} \coqdockw{fix}) because the function we want to
    define is not guaranteed to terminate. Indeed, the changed
    \coqdocdefinition{ceval\_step1} function applied to the \coqdocconstructor{loop} program from \coqdocvar{Imp.v}
    would never terminate. Since Coq is not just a functional
    programming language, but also a consistent logic, any potentially
    non-terminating function needs to be rejected. Here is an
    invalid(!) Coq program showing what would go wrong if Coq allowed
    non-terminating recursive functions:


     Fixpoint loop\_false (n : nat) : False := loop\_false n.


    That is, propositions like \coqdocinductive{False} would become
    provable (e.g., \coqdocvar{loop\_false} 0 would be a proof of \coqdocinductive{False}), which
    would be a disaster for Coq's logical consistency.


    Thus, because it doesn't terminate on all inputs, the full version
    of \coqdocdefinition{ceval\_step1} cannot be written in Coq -- at least not without
    one additional trick... \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{A Step-Indexed Evaluator}



 The trick we need is to pass an \textit{additional} parameter to the
    evaluation function that tells it how long to run.  Informally, we
    start the evaluator with a certain amount of ``gas'' in its tank,
    and we allow it to run until either it terminates in the usual way
    \textit{or} it runs out of gas, at which point we simply stop evaluating
    and say that the final result is the empty memory.  (We could also
    say that the result is the current state at the point where the
    evaluator runs out fo gas -- it doesn't really matter because the
    result is going to be wrong in either case!) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{ceval\_step2} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{c} : \coqdocvar{com}) (\coqdocvar{i} : \coqdocvar{nat}) : \coqdocvar{state} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{i} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{empty\_state}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{i'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{c} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{SKIP} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{st}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{l} ::= \coqdocvar{a1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{l} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{c1} ;; \coqdocvar{c2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{let} \coqdocvar{st'} := \coqdocvar{ceval\_step2} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i'} \coqdoctac{in}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{ceval\_step2} \coqdocvar{st'} \coqdocvar{c2} \coqdocvar{i'}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{if} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b})\coqdoceol
\coqdocindent{6.00em}
\coqdockw{then} \coqdocvar{ceval\_step2} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i'}\coqdoceol
\coqdocindent{6.00em}
\coqdockw{else} \coqdocvar{ceval\_step2} \coqdocvar{st} \coqdocvar{c2} \coqdocvar{i'}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{if} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1})\coqdoceol
\coqdocindent{5.00em}
\coqdockw{then} \coqdockw{let} \coqdocvar{st'} := \coqdocvar{ceval\_step2} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i'} \coqdoctac{in}\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{ceval\_step2} \coqdocvar{st'} \coqdocvar{c} \coqdocvar{i'}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{else} \coqdocvar{st}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\textit{Note}: It is tempting to think that the index \coqdocabbreviation{i} here is
    counting the ``number of steps of evaluation.''  But if you look
    closely you'll see that this is not the case: for example, in the
    rule for sequencing, the same \coqdocabbreviation{i} is passed to both recursive
    calls.  Understanding the exact way that \coqdocabbreviation{i} is treated will be
    important in the proof of \coqdoclemma{ceval\_\_ceval\_step}, which is given as
    an exercise below.


    One thing that is not so nice about this evaluator is that we
    can't tell, from its result, whether it stopped because the
    program terminated normally or because it ran out of gas.  Our
    next version returns an \coqdocinductive{option} \coqdocdefinition{state} instead of just a \coqdocdefinition{state},
    so that we can distinguish between normal and abnormal
    termination. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{ceval\_step3} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{c} : \coqdocvar{com}) (\coqdocvar{i} : \coqdocvar{nat})\coqdoceol
\coqdocindent{10.00em}
: \coqdocvar{option} \coqdocvar{state} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{i} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{i'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{c} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{SKIP} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{Some} \coqdocvar{st}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{l} ::= \coqdocvar{a1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{Some} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{l} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1}))\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{c1} ;; \coqdocvar{c2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{match} (\coqdocvar{ceval\_step3} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i'}) \coqdockw{with}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{st'} \ensuremath{\Rightarrow} \coqdocvar{ceval\_step3} \coqdocvar{st'} \coqdocvar{c2} \coqdocvar{i'}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{if} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b})\coqdoceol
\coqdocindent{6.00em}
\coqdockw{then} \coqdocvar{ceval\_step3} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i'}\coqdoceol
\coqdocindent{6.00em}
\coqdockw{else} \coqdocvar{ceval\_step3} \coqdocvar{st} \coqdocvar{c2} \coqdocvar{i'}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{if} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1})\coqdoceol
\coqdocindent{5.00em}
\coqdockw{then} \coqdockw{match} (\coqdocvar{ceval\_step3} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i'}) \coqdockw{with}\coqdoceol
\coqdocindent{7.50em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{st'} \ensuremath{\Rightarrow} \coqdocvar{ceval\_step3} \coqdocvar{st'} \coqdocvar{c} \coqdocvar{i'}\coqdoceol
\coqdocindent{7.50em}
\ensuremath{|} \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{7.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{else} \coqdocvar{Some} \coqdocvar{st}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can improve the readability of this version by introducing a
    bit of auxiliary notation to hide the plumbing involved in
    repeatedly matching against optional states. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'LETOPT' x <== e1 'IN' e2"\coqdoceol
\coqdocindent{1.50em}
:= (\coqdockw{match} \coqdocvar{e1} \coqdockw{with}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{x} \ensuremath{\Rightarrow} \coqdocvar{e2}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.50em}
\coqdockw{end})\coqdoceol
\coqdocindent{1.50em}
(\coqdoctac{right} \coqdockw{associativity}, \coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{ceval\_step} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{c} : \coqdocvar{com}) (\coqdocvar{i} : \coqdocvar{nat})\coqdoceol
\coqdocindent{10.00em}
: \coqdocvar{option} \coqdocvar{state} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{i} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{i'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{c} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{SKIP} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{Some} \coqdocvar{st}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{l} ::= \coqdocvar{a1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{Some} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{l} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1}))\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{c1} ;; \coqdocvar{c2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{LETOPT} \coqdocvar{st'} <== \coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i'} \coqdocvar{IN}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{ceval\_step} \coqdocvar{st'} \coqdocvar{c2} \coqdocvar{i'}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{if} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b})\coqdoceol
\coqdocindent{6.00em}
\coqdockw{then} \coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i'}\coqdoceol
\coqdocindent{6.00em}
\coqdockw{else} \coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c2} \coqdocvar{i'}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{if} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1})\coqdoceol
\coqdocindent{5.00em}
\coqdockw{then} \coqdocvar{LETOPT} \coqdocvar{st'} <== \coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i'} \coqdocvar{IN}\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{ceval\_step} \coqdocvar{st'} \coqdocvar{c} \coqdocvar{i'}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{else} \coqdocvar{Some} \coqdocvar{st}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{test\_ceval} (\coqdocvar{st}:\coqdocvar{state}) (\coqdocvar{c}:\coqdocvar{com}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c} 500 \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{None}    \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{Some} (\coqdocvar{st} \coqdocvar{X}, \coqdocvar{st} \coqdocvar{Y}, \coqdocvar{st} \coqdocvar{Z})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, recommended (pup\_to\_n)}

 Write an Imp program that sums the numbers from 1 to
   \coqdocdefinition{X} (inclusive: 1 + 2 + ... + \coqdocdefinition{X}) in the variable \coqdocdefinition{Y}.  Make sure
   your solution satisfies the test that follows. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pup\_to\_n} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (peven)}

 Write a \coqdocvar{While} program that sets \coqdocdefinition{Z} to 0 if \coqdocdefinition{X} is even and
    sets \coqdocdefinition{Z} to 1 otherwise.  Use \coqdocvar{ceval\_test} to test your
    program. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Relational vs. Step-Indexed Evaluation}



 As for arithmetic and boolean expressions, we'd hope that
    the two alternative definitions of evaluation would actually
    amount to the same thing in the end.  This section shows that this
    is the case. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_step\_\_ceval}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{3.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{i}, \coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c} \coqdocvar{i} = \coqdocvar{Some} \coqdocvar{st'}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{i} \coqdocvar{E}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{c}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{i} \coqdockw{as} [| \coqdocvar{i'} ].\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{c};\coqdoceol
\coqdocindent{5.50em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H}; \coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{apply} \coqdocvar{E\_Skip}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{apply} \coqdocvar{E\_Ass}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocemptyline
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i'}) \coqdocvar{eqn}:\coqdocvar{Heqr1}.\coqdoceol
\coqdocindent{4.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{E\_Seq} \coqdockw{with} \coqdocvar{s}.\coqdoceol
\coqdocindent{6.00em}
\coqdoctac{apply} \coqdocvar{IHi'}. \coqdoctac{rewrite} \coqdocvar{Heqr1}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{6.00em}
\coqdoctac{apply} \coqdocvar{IHi'}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H1}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{4.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{5.00em}
\coqdoctac{inversion} \coqdocvar{H1}.\coqdoceol
\coqdocemptyline
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b}) \coqdocvar{eqn}:\coqdocvar{Heqr}.\coqdoceol
\coqdocindent{4.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{E\_IfTrue}. \coqdoctac{rewrite} \coqdocvar{Heqr}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{IHi'}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{4.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{E\_IfFalse}. \coqdoctac{rewrite} \coqdocvar{Heqr}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{IHi'}. \coqdoctac{assumption}.\coqdoceol
\coqdocemptyline
\coqdocindent{3.00em}
+  \coqdoctac{destruct} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b}) \coqdocvar{eqn} :\coqdocvar{Heqr}.\coqdoceol
\coqdocindent{4.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.50em}
\coqdoctac{destruct} (\coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c} \coqdocvar{i'}) \coqdocvar{eqn}:\coqdocvar{Heqr1}.\coqdoceol
\coqdocindent{4.50em}
\{ \coqdoceol
\coqdocindent{5.50em}
\coqdoctac{apply} \coqdocvar{E\_WhileLoop} \coqdockw{with} \coqdocvar{s}. \coqdoctac{rewrite} \coqdocvar{Heqr}.\coqdoceol
\coqdocindent{5.50em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{5.50em}
\coqdoctac{apply} \coqdocvar{IHi'}. \coqdoctac{rewrite} \coqdocvar{Heqr1}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{5.50em}
\coqdoctac{apply} \coqdocvar{IHi'}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H1}. \coqdoctac{assumption}. \}\coqdoceol
\coqdocindent{4.50em}
\{  \coqdoctac{inversion} \coqdocvar{H1}. \}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{5.00em}
\coqdoctac{inversion} \coqdocvar{H1}.\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{E\_WhileEnd}.\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Heqr}. \coqdoctac{subst}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 4 stars (ceval\_step\_\_ceval\_inf)}

 Write an informal proof of \coqdoclemma{ceval\_step\_\_ceval}, following the
    usual template.  (The template for case analysis on an inductively
    defined value should look the same as for induction, except that
    there is no induction hypothesis.)  Make your proof communicate
    the main ideas to a human reader; do not simply transcribe the
    steps of the formal proof.


\ensuremath{\Box}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_step\_more}: \coqdockw{\ensuremath{\forall}} \coqdocvar{i1} \coqdocvar{i2} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{i1} \ensuremath{\le} \coqdocvar{i2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c} \coqdocvar{i1} = \coqdocvar{Some} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c} \coqdocvar{i2} = \coqdocvar{Some} \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocnoindent
\coqdoctac{induction} \coqdocvar{i1} \coqdockw{as} [|\coqdocvar{i1'}]; \coqdoctac{intros} \coqdocvar{i2} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{c} \coqdocvar{Hle} \coqdocvar{Hceval}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hceval}. \coqdoctac{inversion} \coqdocvar{Hceval}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{i2} \coqdockw{as} [|\coqdocvar{i2'}]. \coqdoctac{inversion} \coqdocvar{Hle}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{Hle'}: \coqdocvar{i1'} \ensuremath{\le} \coqdocvar{i2'}) \coqdoctac{by} \coqdoctac{omega}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{c}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hceval}. \coqdoctac{inversion} \coqdocvar{Hceval}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hceval}. \coqdoctac{inversion} \coqdocvar{Hceval}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hceval}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{i1'}) \coqdocvar{eqn}:\coqdocvar{Heqst1'o}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} (\coqdocvar{IHi1'} \coqdocvar{i2'}) \coqdoctac{in} \coqdocvar{Heqst1'o}; \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \coqdocvar{Heqst1'o}. \coqdoctac{simpl}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hceval}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} (\coqdocvar{IHi1'} \coqdocvar{i2'}) \coqdoctac{in} \coqdocvar{Hceval}; \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{Hceval}.\coqdoceol
\coqdocemptyline
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hceval}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b}); \coqdoctac{apply} (\coqdocvar{IHi1'} \coqdocvar{i2'}) \coqdoctac{in} \coqdocvar{Hceval};\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocemptyline
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hceval}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b}); \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c} \coqdocvar{i1'}) \coqdocvar{eqn}: \coqdocvar{Heqst1'o}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} (\coqdocvar{IHi1'} \coqdocvar{i2'}) \coqdoctac{in} \coqdocvar{Heqst1'o}; \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{Heqst1'o}. \coqdoctac{simpl}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hceval}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} (\coqdocvar{IHi1'} \coqdocvar{i2'}) \coqdoctac{in} \coqdocvar{Hceval}; \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hceval}. \coqdoctac{inversion} \coqdocvar{Hceval}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, recommended (ceval\_\_ceval\_step)}

 Finish the following proof.  You'll need \coqdoclemma{ceval\_step\_more} in a
    few places, as well as some basic facts about \ensuremath{\le} and \coqdocdefinition{plus}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_\_ceval\_step}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{i}, \coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c} \coqdocvar{i} = \coqdocvar{Some} \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{Hce}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hce}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_and\_ceval\_step\_coincide}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\leftrightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{i}, \coqdocvar{ceval\_step} \coqdocvar{st} \coqdocvar{c} \coqdocvar{i} = \coqdocvar{Some} \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}. \coqdoctac{apply} \coqdocvar{ceval\_\_ceval\_step}. \coqdoctac{apply} \coqdocvar{ceval\_step\_\_ceval}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Determinism of Evaluation Again}



 Using the fact that the relational and step-indexed definition of
    evaluation are the same, we can give a slicker proof that the
    evaluation \textit{relation} is deterministic. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{He1} \coqdocvar{He2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ceval\_\_ceval\_step} \coqdoctac{in} \coqdocvar{He1}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ceval\_\_ceval\_step} \coqdoctac{in} \coqdocvar{He2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{He1} \coqdockw{as} [\coqdocvar{i1} \coqdocvar{E1}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{He2} \coqdockw{as} [\coqdocvar{i2} \coqdocvar{E2}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ceval\_step\_more} \coqdockw{with} (\coqdocvar{i2} := \coqdocvar{i1} + \coqdocvar{i2}) \coqdoctac{in} \coqdocvar{E1}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ceval\_step\_more} \coqdockw{with} (\coqdocvar{i2} := \coqdocvar{i1} + \coqdocvar{i2}) \coqdoctac{in} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{E1} \coqdoctac{in} \coqdocvar{E2}. \coqdoctac{inversion} \coqdocvar{E2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{omega}. \coqdoctac{omega}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
$Date: 2016-10-22 20:19:37 -0400 (Sat, 22 Oct 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Extraction}{Library }{Top.Extraction}

\begin{coqdoccode}
\end{coqdoccode}
\section{Extraction: Extracting ML from Coq}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\section{Basic Extraction}



 In its simplest form, extracting an efficient program from one
    written in Coq is completely straightforward. 


    First we say what language we want to extract into.  Options are
    OCaml (the most mature), Haskell (which mostly works), and
    Scheme (a bit out of date). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Extraction} \coqdocvar{Language} \coqdocvar{Ocaml}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now we load up the Coq environment with some definitions, either
    directly or by importing them from other modules. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.EqNat}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{ImpCEvalFun}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Finally, we tell Coq the name of a definition to extract and the
    name of a file to put the extracted code into. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Extraction} "imp1.ml" \coqdocvar{ceval\_step}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
When Coq processes this command, it generates a file \coqdocvar{imp1.ml}
    containing an extracted version of \coqdocdefinition{ceval\_step}, together with
    everything that it recursively depends on.  Compile the present
    .\coqdocvariable{v} file and have a look at \coqdocvar{imp1.ml} now. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Controlling Extraction of Specific Types}



 We can tell Coq to extract certain \coqdockw{Inductive} definitions to
    specific OCaml types.  For each one, we must say

\begin{itemize}
\item  how the Coq type itself should be represented in OCaml, and

\item  how each constructor should be translated. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Extract} \coqdockw{Inductive} \coqdocvar{bool} \ensuremath{\Rightarrow} "bool" [ "true" "false" ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Also, for non-enumeration types (where the constructors take
    arguments), we give an OCaml expression that can be used as a
    ``recursor'' over elements of the type.  (Think Church numerals.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Extract} \coqdockw{Inductive} \coqdocvar{nat} \ensuremath{\Rightarrow} "int"\coqdoceol
\coqdocindent{1.00em}
[ "0" "(fun x -> x + 1)" ]\coqdoceol
\coqdocindent{1.00em}
"(fun zero succ n ->
      if n=0 then zero () else succ (n-1))".\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can also extract defined constants to specific OCaml terms or
    operators. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Extract} \coqdocvar{Constant} \coqdocvar{plus} \ensuremath{\Rightarrow} "( + )".\coqdoceol
\coqdocnoindent
\coqdockw{Extract} \coqdocvar{Constant} \coqdocvar{mult} \ensuremath{\Rightarrow} "( * )".\coqdoceol
\coqdocnoindent
\coqdockw{Extract} \coqdocvar{Constant} \coqdocvar{beq\_nat} \ensuremath{\Rightarrow} "( = )".\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Important: It is entirely \textit{your responsibility} to make sure that
    the translations you're proving make sense.  For example, it might
    be tempting to include this one


      Extract Constant minus => ``( - )''.


    but doing so could lead to serious confusion!  (Why?)
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Extraction} "imp2.ml" \coqdocvar{ceval\_step}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Have a look at the file \coqdocvar{imp2.ml}.  Notice how the fundamental
    definitions have changed from \coqdocvar{imp1.ml}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{A Complete Example}



 To use our extracted evaluator to run Imp programs, all we need to
    add is a tiny driver program that calls the evaluator and prints
    out the result.


    For simplicity, we'll print results by dumping out the first four
    memory locations in the final state.


    Also, to make it easier to type in examples, let's extract a
    parser from the \coqdoclibrary{ImpParser} Coq module.  To do this, we need a few
    magic declarations to set up the right correspondence between Coq
    strings and lists of OCaml characters. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Ascii} \coqdocvar{String}.\coqdoceol
\coqdocnoindent
\coqdockw{Extract} \coqdockw{Inductive} \coqdocvar{ascii} \ensuremath{\Rightarrow} \coqdocvar{char}\coqdoceol
\coqdocnoindent
[\coqdoceol
\coqdocnoindent
"(* If this appears, you're using Ascii internals. Please don't *) (fun (b0,b1,b2,b3,b4,b5,b6,b7) -> let f b i = if b then 1 lsl i else 0 in Char.chr (f b0 0 + f b1 1 + f b2 2 + f b3 3 + f b4 4 + f b5 5 + f b6 6 + f b7 7))"\coqdoceol
\coqdocnoindent
]\coqdoceol
\coqdocnoindent
"(* If this appears, you're using Ascii internals. Please don't *) (fun f c -> let n = Char.code c in let h i = (n land (1 lsl i)) <> 0 in f (h 0) (h 1) (h 2) (h 3) (h 4) (h 5) (h 6) (h 7))".\coqdoceol
\coqdocnoindent
\coqdockw{Extract} \coqdocvar{Constant} \coqdocvar{zero} \ensuremath{\Rightarrow} "'\symbol{92}000'".\coqdoceol
\coqdocnoindent
\coqdockw{Extract} \coqdocvar{Constant} \coqdocvar{one} \ensuremath{\Rightarrow} "'\symbol{92}001'".\coqdoceol
\coqdocnoindent
\coqdockw{Extract} \coqdocvar{Constant} \coqdocvar{shift} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{0.50em}
"fun b c -> Char.chr (((Char.code c) lsl 1) land 255 + if b then 1 else 0)".\coqdoceol
\coqdocnoindent
\coqdockw{Extract} \coqdocvar{Inlined} \coqdocvar{Constant} \coqdocvar{ascii\_dec} \ensuremath{\Rightarrow} "(=)".\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We also need one more variant of booleans. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Extract} \coqdockw{Inductive} \coqdocvar{sumbool} \ensuremath{\Rightarrow} "bool" ["true" "false"].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The extraction is the same as always. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{ImpParser}.\coqdoceol
\coqdocnoindent
\coqdockw{Extraction} "imp.ml" \coqdocvar{empty\_state} \coqdocvar{ceval\_step} \coqdocvar{parse}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now let's run our generated Imp evaluator.  First, have a look at
    \coqdocvar{impdriver.ml}.  (This was written by hand, not extracted.)


    Next, compile the driver together with the extracted code and
    execute it, as follows.


        ocamlc -w -20 -w -26 -o impdriver imp.mli imp.ml impdriver.ml
        ./impdriver


    (The -\coqdocvariable{w} flags to \coqdocvar{ocamlc} are just there to suppress a few
    spurious warnings.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Discussion}



 Since we've proved that the \coqdocdefinition{ceval\_step} function behaves the same
    as the \coqdocinductive{ceval} relation in an appropriate sense, the extracted
    program can be viewed as a \textit{certified} Imp interpreter.  Of
    course, the parser we're using is not certified, since we didn't
    prove anything about it! \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
$Date: 2017-01-31 19:12:59 -0500 (Tue, 31 Jan 2017) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Equiv}{Library }{Top.Equiv}

\begin{coqdoccode}
\end{coqdoccode}
\section{Equiv: Program Equivalence}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Bool.Bool}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.EqNat}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Lists.List}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Logic.FunctionalExtensionality}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{ListNotations}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Some Advice for Working on Exercises:}





\begin{itemize}
\item  Most of the Coq proofs we ask you to do are similar to proofs
      that we've provided.  Before starting to work on exercises
      problems, take the time to work through our proofs (both
      informally, on paper, and in Coq) and make sure you understand
      them in detail.  This will save you a lot of time.



\item  The Coq proofs we're doing now are sufficiently complicated that
      it is more or less impossible to complete them simply by random
      experimentation or ``following your nose.''  You need to start
      with an idea about why the property is true and how the proof is
      going to go.  The best way to do this is to write out at least a
      sketch of an informal proof on paper -- one that intuitively
      convinces you of the truth of the theorem -- before starting to
      work on the formal one.  Alternately, grab a friend and try to
      convince them that the theorem is true; then try to formalize
      your explanation.



\item  Use automation to save work!  The proofs in this chapter's
      exercises can get pretty long if you try to write out all the
      cases explicitly. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Behavioral Equivalence}



 In an earlier chapter, we investigated the correctness of a very
    simple program transformation: the \coqdocdefinition{optimize\_0plus} function.  The
    programming language we were considering was the first version of
    the language of arithmetic expressions -- with no variables -- so
    in that setting it was very easy to define what it means for a
    program transformation to be correct: it should always yield a
    program that evaluates to the same number as the original.


    To talk about the correctness of program transformations for the
    full Imp language, including assignment and other commands, we
    need to consider the role of variables and state. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Definitions}



 For \coqdocinductive{aexp}s and \coqdocinductive{bexp}s with variables, the definition we want is
    clear.  We say that two \coqdocinductive{aexp}s or \coqdocinductive{bexp}s are \textit{behaviorally
    equivalent} if they evaluate to the same result in every state. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{aequiv} (\coqdocvar{a1} \coqdocvar{a2} : \coqdocvar{aexp}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{st}:\coqdocvar{state}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1} = \coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a2}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{bequiv} (\coqdocvar{b1} \coqdocvar{b2} : \coqdocvar{bexp}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{st}:\coqdocvar{state}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{beval} \coqdocvar{st} \coqdocvar{b2}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here are some simple examples of equivalences of arithmetic
    and boolean expressions. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{aequiv\_example}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aequiv} (\coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{X})) (\coqdocvar{ANum} 0).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{st}. \coqdoctac{simpl}. \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{bequiv\_example}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bequiv} (\coqdocvar{BEq} (\coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{X})) (\coqdocvar{ANum} 0)) \coqdocvar{BTrue}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{st}. \coqdoctac{unfold} \coqdocvar{beval}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{aequiv\_example}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For commands, the situation is a little more subtle.  We can't
    simply say ``two commands are behaviorally equivalent if they
    evaluate to the same ending state whenever they are started in the
    same initial state,'' because some commands, when run in some
    starting states, don't terminate in any final state at all!  What
    we need instead is this: two commands are behaviorally equivalent
    if, for any given starting state, they either (1) both diverge
    or (2) both terminate in the same final state.  A compact way to
    express this is ``if the first one terminates in a particular state
    then so does the second, and vice versa.'' \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{cequiv} (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} : \coqdocvar{state}),\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}) \ensuremath{\leftrightarrow} (\coqdocvar{c2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Simple Examples}



 For examples of command equivalence, let's start by looking at
    some trivial program transformations involving \coqdocvar{SKIP}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{skip\_left}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.50em}
(\coqdocvar{SKIP};; \coqdocvar{c})\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; \coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H2}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{E\_Seq} \coqdockw{with} \coqdocvar{st}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{E\_Skip}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (skip\_right)}

 Prove that adding a \coqdocvar{SKIP} after a command results in an
    equivalent program \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{skip\_right}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{c} ;; \coqdocvar{SKIP})\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{c}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Similarly, here is a simple transformation that optimizes \coqdocvar{IFB}
    commands: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{IFB\_true\_simple}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{IFB} \coqdocvar{BTrue} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI})\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{c1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c1} \coqdocvar{c2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; \coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}. \coqdoctac{assumption}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{E\_IfTrue}. \coqdoctac{reflexivity}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Of course, few programmers would be tempted to write a conditional
    whose guard is literally \coqdocconstructor{BTrue}.  A more interesting case is when
    the guard is \textit{equivalent} to true:  \textit{Theorem}: If \coqdocconstructor{b} is equivalent to \coqdocconstructor{BTrue}, then \coqdocvar{IFB} \coqdocconstructor{b} \coqdocvar{THEN} \coqdocconstructor{c1}
    \coqdocvar{ELSE} \coqdocconstructor{c2} \coqdocvar{FI} is equivalent to \coqdocconstructor{c1}. 

   \textit{Proof}:



\begin{itemize}
\item  (\ensuremath{\rightarrow}) We must show, for all \coqdocvariable{st} and \coqdocvariable{st'}, that if \coqdocvar{IFB} \coqdocconstructor{b}
       \coqdocvar{THEN} \coqdocconstructor{c1} \coqdocvar{ELSE} \coqdocconstructor{c2} \coqdocvar{FI} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'} then \coqdocconstructor{c1} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}.


       Proceed by cases on the rules that could possibly have been
       used to show \coqdocvar{IFB} \coqdocconstructor{b} \coqdocvar{THEN} \coqdocconstructor{c1} \coqdocvar{ELSE} \coqdocconstructor{c2} \coqdocvar{FI} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}, namely
       \coqdocconstructor{E\_IfTrue} and \coqdocconstructor{E\_IfFalse}.



\begin{itemize}
\item  Suppose the final rule rule in the derivation of \coqdocvar{IFB} \coqdocconstructor{b} \coqdocvar{THEN}
         \coqdocconstructor{c1} \coqdocvar{ELSE} \coqdocconstructor{c2} \coqdocvar{FI} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'} was \coqdocconstructor{E\_IfTrue}.  We then have, by
         the premises of \coqdocconstructor{E\_IfTrue}, that \coqdocconstructor{c1} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}.  This is
         exactly what we set out to prove.



\item  On the other hand, suppose the final rule in the derivation
         of \coqdocvar{IFB} \coqdocconstructor{b} \coqdocvar{THEN} \coqdocconstructor{c1} \coqdocvar{ELSE} \coqdocconstructor{c2} \coqdocvar{FI} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'} was \coqdocconstructor{E\_IfFalse}.
         We then know that \coqdocdefinition{beval} \coqdocvariable{st} \coqdocconstructor{b} = \coqdocconstructor{false} and \coqdocconstructor{c2} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}.


         Recall that \coqdocconstructor{b} is equivalent to \coqdocconstructor{BTrue}, i.e., forall \coqdocvariable{st},
         \coqdocdefinition{beval} \coqdocvariable{st} \coqdocconstructor{b} = \coqdocdefinition{beval} \coqdocvariable{st} \coqdocconstructor{BTrue}.  In particular, this means
         that \coqdocdefinition{beval} \coqdocvariable{st} \coqdocconstructor{b} = \coqdocconstructor{true}, since \coqdocdefinition{beval} \coqdocvariable{st} \coqdocconstructor{BTrue} = \coqdocconstructor{true}.  But
         this is a contradiction, since \coqdocconstructor{E\_IfFalse} requires that
         \coqdocdefinition{beval} \coqdocvariable{st} \coqdocconstructor{b} = \coqdocconstructor{false}.  Thus, the final rule could not have
         been \coqdocconstructor{E\_IfFalse}.



\end{itemize}

\item  (\ensuremath{\leftarrow}) We must show, for all \coqdocvariable{st} and \coqdocvariable{st'}, that if \coqdocconstructor{c1} / \coqdocvariable{st}
       \symbol{92}\symbol{92} \coqdocvariable{st'} then \coqdocvar{IFB} \coqdocconstructor{b} \coqdocvar{THEN} \coqdocconstructor{c1} \coqdocvar{ELSE} \coqdocconstructor{c2} \coqdocvar{FI} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}.


       Since \coqdocconstructor{b} is equivalent to \coqdocconstructor{BTrue}, we know that \coqdocdefinition{beval} \coqdocvariable{st} \coqdocconstructor{b} =
       \coqdocdefinition{beval} \coqdocvariable{st} \coqdocconstructor{BTrue} = \coqdocconstructor{true}.  Together with the assumption that
       \coqdocconstructor{c1} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}, we can apply \coqdocconstructor{E\_IfTrue} to derive \coqdocvar{IFB} \coqdocconstructor{b} \coqdocvar{THEN}
       \coqdocconstructor{c1} \coqdocvar{ELSE} \coqdocconstructor{c2} \coqdocvar{FI} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}.  \ensuremath{\Box}

\end{itemize}


   Here is the formal version of this proof: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{IFB\_true}: \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{bequiv} \coqdocvar{b} \coqdocvar{BTrue}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI})\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{c1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{Hb}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; \coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{unfold} \coqdocvar{bequiv} \coqdoctac{in} \coqdocvar{Hb}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hb}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{Hb} \coqdoctac{in} \coqdocvar{H5}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{E\_IfTrue}; \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{bequiv} \coqdoctac{in} \coqdocvar{Hb}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hb}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{Hb}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, recommended (IFB\_false)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{IFB\_false}: \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bequiv} \coqdocvar{b} \coqdocvar{BFalse}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI})\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{c2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (swap\_if\_branches)}

 Show that we can swap the branches of an IF if we also negate its
    guard. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{swap\_if\_branches}: \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{e1} \coqdocvar{e2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{e1} \coqdocvar{ELSE} \coqdocvar{e2} \coqdocvar{FI})\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{IFB} \coqdocvar{BNot} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{e2} \coqdocvar{ELSE} \coqdocvar{e1} \coqdocvar{FI}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 For \coqdocvar{WHILE} loops, we can give a similar pair of theorems.  A loop
    whose guard is equivalent to \coqdocconstructor{BFalse} is equivalent to \coqdocvar{SKIP},
    while a loop whose guard is equivalent to \coqdocconstructor{BTrue} is equivalent to
    \coqdocvar{WHILE} \coqdocconstructor{BTrue} \coqdocvar{DO} \coqdocvar{SKIP} \coqdocvar{END} (or any other non-terminating program).
    The first of these facts is easy. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{WHILE\_false} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bequiv} \coqdocvar{b} \coqdocvar{BFalse} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END})\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{SKIP}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{c} \coqdocvar{Hb}. \coqdoctac{split}; \coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_Skip}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{Hb} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{inversion} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{E\_WhileEnd}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{Hb}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, advanced, optional (WHILE\_false\_informal)}

 Write an informal proof of \coqdoclemma{WHILE\_false}.


\ensuremath{\Box}


 To prove the second fact, we need an auxiliary lemma stating that
    \coqdocvar{WHILE} loops whose guards are equivalent to \coqdocconstructor{BTrue} never
    terminate. 

 \textit{Lemma}: If \coqdocconstructor{b} is equivalent to \coqdocconstructor{BTrue}, then it cannot be the
    case that (\coqdocvar{WHILE} \coqdocconstructor{b} \coqdocvar{DO} \coqdocconstructor{c} \coqdocvar{END}) / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}.


    \textit{Proof}: Suppose that (\coqdocvar{WHILE} \coqdocconstructor{b} \coqdocvar{DO} \coqdocconstructor{c} \coqdocvar{END}) / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}.  We show,
    by induction on a derivation of (\coqdocvar{WHILE} \coqdocconstructor{b} \coqdocvar{DO} \coqdocconstructor{c} \coqdocvar{END}) / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'},
    that this assumption leads to a contradiction.



\begin{itemize}
\item  Suppose (\coqdocvar{WHILE} \coqdocconstructor{b} \coqdocvar{DO} \coqdocconstructor{c} \coqdocvar{END}) / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'} is proved using rule
        \coqdocconstructor{E\_WhileEnd}.  Then by assumption \coqdocdefinition{beval} \coqdocvariable{st} \coqdocconstructor{b} = \coqdocconstructor{false}.  But
        this contradicts the assumption that \coqdocconstructor{b} is equivalent to
        \coqdocconstructor{BTrue}.



\item  Suppose (\coqdocvar{WHILE} \coqdocconstructor{b} \coqdocvar{DO} \coqdocconstructor{c} \coqdocvar{END}) / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'} is proved using rule
        \coqdocconstructor{E\_WhileLoop}.  Then we are given the induction hypothesis
        that (\coqdocvar{WHILE} \coqdocconstructor{b} \coqdocvar{DO} \coqdocconstructor{c} \coqdocvar{END}) / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'} is contradictory, which
        is exactly what we are trying to prove!



\item  Since these are the only rules that could have been used to
        prove (\coqdocvar{WHILE} \coqdocconstructor{b} \coqdocvar{DO} \coqdocconstructor{c} \coqdocvar{END}) / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}, the other cases of
        the induction are immediately contradictory. \ensuremath{\Box} 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{WHILE\_true\_nonterm} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bequiv} \coqdocvar{b} \coqdocvar{BTrue} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\~{}( (\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} ).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{Hb}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) \coqdockw{as} \coqdocvar{cw} \coqdocvar{eqn}:\coqdocvar{Heqcw}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqcw}; \coqdoctac{subst}; \coqdoctac{clear} \coqdocvar{Heqcw}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{bequiv} \coqdoctac{in} \coqdocvar{Hb}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{Hb} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHceval2}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (WHILE\_true\_nonterm\_informal)}

 Explain what the lemma \coqdoclemma{WHILE\_true\_nonterm} means in English.


 \ensuremath{\Box} 

\paragraph{Exercise: 2 stars, recommended (WHILE\_true)}

 Prove the following theorem. \textit{Hint}: You'll want to use
    \coqdoclemma{WHILE\_true\_nonterm} here. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{WHILE\_true}: \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bequiv} \coqdocvar{b} \coqdocvar{BTrue}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END})\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{WHILE} \coqdocvar{BTrue} \coqdocvar{DO} \coqdocvar{SKIP} \coqdocvar{END}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 A more interesting fact about \coqdocvar{WHILE} commands is that any finite
    number of copies of the body can be ``unrolled'' without changing
    meaning.  Unrolling is a common transformation in real compilers. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{loop\_unrolling}: \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END})\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} (\coqdocvar{c} ;; \coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) \coqdocvar{ELSE} \coqdocvar{SKIP} \coqdocvar{FI}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; \coqdoctac{intros} \coqdocvar{Hce}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Hce}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_IfFalse}. \coqdoctac{assumption}. \coqdoctac{apply} \coqdocvar{E\_Skip}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_IfTrue}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_Seq} \coqdockw{with} (\coqdocvar{st'} := \coqdocvar{st'0}). \coqdoctac{assumption}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Hce}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H5}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_WhileLoop} \coqdockw{with} (\coqdocvar{st'} := \coqdocvar{st'0}).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assumption}. \coqdoctac{assumption}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H5}; \coqdoctac{subst}. \coqdoctac{apply} \coqdocvar{E\_WhileEnd}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (seq\_assoc)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{seq\_assoc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c3},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} ((\coqdocvar{c1};;\coqdocvar{c2});;\coqdocvar{c3}) (\coqdocvar{c1};;(\coqdocvar{c2};;\coqdocvar{c3})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Proving program properties involving assignments is one place
    where the Functional Extensionality axiom often comes in handy. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{identity\_assignment} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdocvar{id}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{AId} \coqdocvar{X})\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{SKIP}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{intros}. \coqdoctac{split}; \coqdoctac{intro} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.50em}
- \coqdoceol
\coqdocindent{3.50em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{replace} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} (\coqdocvar{st} \coqdocvar{X})) \coqdockw{with} \coqdocvar{st}.\coqdoceol
\coqdocindent{3.50em}
+ \coqdoctac{constructor}.\coqdoceol
\coqdocindent{3.50em}
+ \coqdoctac{apply} \coqdocvar{functional\_extensionality}. \coqdoctac{intro}.\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{rewrite} \coqdocvar{t\_update\_same}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.50em}
- \coqdoceol
\coqdocindent{3.50em}
\coqdoctac{replace} \coqdocvar{st'} \coqdockw{with} (\coqdocvar{t\_update} \coqdocvar{st'} \coqdocvar{X} (\coqdocvar{aeval} \coqdocvar{st'} (\coqdocvar{AId} \coqdocvar{X}))).\coqdoceol
\coqdocindent{3.50em}
+ \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}. \coqdoctac{apply} \coqdocvar{E\_Ass}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.50em}
+ \coqdoctac{apply} \coqdocvar{functional\_extensionality}. \coqdoctac{intro}.\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{rewrite} \coqdocvar{t\_update\_same}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, recommended (assign\_aequiv)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{assign\_aequiv} : \coqdockw{\ensuremath{\forall}} \coqdocvar{X} \coqdocvar{e},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aequiv} (\coqdocvar{AId} \coqdocvar{X}) \coqdocvar{e} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} \coqdocvar{SKIP} (\coqdocvar{X} ::= \coqdocvar{e}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars (equiv\_classes)}



 Given the following programs, group together those that are
    equivalent in Imp. Your answer should be given as a list of lists,
    where each sub-list represents a group of equivalent programs. For
    example, if you think programs (a) through (h) are all equivalent
    to each other, but not to (i), your answer should look like this:


        [\coqdocdefinition{prog\_a};\coqdocdefinition{prog\_b};\coqdocdefinition{prog\_c};\coqdocdefinition{prog\_d};\coqdocdefinition{prog\_e};\coqdocdefinition{prog\_f};\coqdocdefinition{prog\_g};\coqdocdefinition{prog\_h}] ;
         [\coqdocdefinition{prog\_i}] 


    Write down your answer below in the definition of
    \coqdocdefinition{equiv\_classes}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prog\_a} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0)) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prog\_b} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{IFB} \coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0) \coqdocvar{THEN}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1);;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 1\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ELSE}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{FI};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y});;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 0.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prog\_c} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{SKIP}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prog\_d} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0)) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prog\_e} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 0.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prog\_f} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1);;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prog\_g} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BTrue} \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{SKIP}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prog\_h} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{X})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prog\_i} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{equiv\_classes} : \coqdocvar{list} (\coqdocvar{list} \coqdocvar{com})\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Properties of Behavioral Equivalence}



 We next consider some fundamental properties of the program
    equivalence relations. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Behavioral Equivalence Is an Equivalence}



 First, we verify that the equivalences on \coqdocvar{aexps}, \coqdocvar{bexps}, and
    \coqdocinductive{com}s really are \textit{equivalences} -- i.e., that they are reflexive,
    symmetric, and transitive.  The proofs are all easy. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{refl\_aequiv} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{a} : \coqdocvar{aexp}), \coqdocvar{aequiv} \coqdocvar{a} \coqdocvar{a}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{a} \coqdocvar{st}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{sym\_aequiv} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{a1} \coqdocvar{a2} : \coqdocvar{aexp}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aequiv} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\rightarrow} \coqdocvar{aequiv} \coqdocvar{a2} \coqdocvar{a1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{a1} \coqdocvar{a2} \coqdocvar{H}. \coqdoctac{intros} \coqdocvar{st}. \coqdoctac{symmetry}. \coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{trans\_aequiv} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{a1} \coqdocvar{a2} \coqdocvar{a3} : \coqdocvar{aexp}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aequiv} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\rightarrow} \coqdocvar{aequiv} \coqdocvar{a2} \coqdocvar{a3} \ensuremath{\rightarrow} \coqdocvar{aequiv} \coqdocvar{a1} \coqdocvar{a3}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{aequiv}. \coqdoctac{intros} \coqdocvar{a1} \coqdocvar{a2} \coqdocvar{a3} \coqdocvar{H12} \coqdocvar{H23} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} (\coqdocvar{H12} \coqdocvar{st}). \coqdoctac{rewrite} (\coqdocvar{H23} \coqdocvar{st}). \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{refl\_bequiv} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{b} : \coqdocvar{bexp}), \coqdocvar{bequiv} \coqdocvar{b} \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bequiv}. \coqdoctac{intros} \coqdocvar{b} \coqdocvar{st}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{sym\_bequiv} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{b1} \coqdocvar{b2} : \coqdocvar{bexp}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bequiv} \coqdocvar{b1} \coqdocvar{b2} \ensuremath{\rightarrow} \coqdocvar{bequiv} \coqdocvar{b2} \coqdocvar{b1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bequiv}. \coqdoctac{intros} \coqdocvar{b1} \coqdocvar{b2} \coqdocvar{H}. \coqdoctac{intros} \coqdocvar{st}. \coqdoctac{symmetry}. \coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{trans\_bequiv} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{b1} \coqdocvar{b2} \coqdocvar{b3} : \coqdocvar{bexp}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bequiv} \coqdocvar{b1} \coqdocvar{b2} \ensuremath{\rightarrow} \coqdocvar{bequiv} \coqdocvar{b2} \coqdocvar{b3} \ensuremath{\rightarrow} \coqdocvar{bequiv} \coqdocvar{b1} \coqdocvar{b3}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bequiv}. \coqdoctac{intros} \coqdocvar{b1} \coqdocvar{b2} \coqdocvar{b3} \coqdocvar{H12} \coqdocvar{H23} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} (\coqdocvar{H12} \coqdocvar{st}). \coqdoctac{rewrite} (\coqdocvar{H23} \coqdocvar{st}). \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{refl\_cequiv} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{c} : \coqdocvar{com}), \coqdocvar{cequiv} \coqdocvar{c} \coqdocvar{c}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{cequiv}. \coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'}. \coqdoctac{apply} \coqdocvar{iff\_refl}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{sym\_cequiv} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} \coqdocvar{c1} \coqdocvar{c2} \ensuremath{\rightarrow} \coqdocvar{cequiv} \coqdocvar{c2} \coqdocvar{c1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{cequiv}. \coqdoctac{intros} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{H} \coqdocvar{st} \coqdocvar{st'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\leftrightarrow} \coqdocvar{c2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}) \coqdockw{as} \coqdocvar{H'}.\coqdoceol
\coqdocindent{1.00em}
\{  \coqdoctac{apply} \coqdocvar{H}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{iff\_sym}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{iff\_trans} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P1} \coqdocvar{P2} \coqdocvar{P3} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P1} \ensuremath{\leftrightarrow} \coqdocvar{P2}) \ensuremath{\rightarrow} (\coqdocvar{P2} \ensuremath{\leftrightarrow} \coqdocvar{P3}) \ensuremath{\rightarrow} (\coqdocvar{P1} \ensuremath{\leftrightarrow} \coqdocvar{P3}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P1} \coqdocvar{P2} \coqdocvar{P3} \coqdocvar{H12} \coqdocvar{H23}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H12}. \coqdoctac{inversion} \coqdocvar{H23}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; \coqdoctac{intros} \coqdocvar{A}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H1}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{A}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H0}. \coqdoctac{apply} \coqdocvar{H2}. \coqdoctac{apply} \coqdocvar{A}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{trans\_cequiv} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c3} : \coqdocvar{com}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} \coqdocvar{c1} \coqdocvar{c2} \ensuremath{\rightarrow} \coqdocvar{cequiv} \coqdocvar{c2} \coqdocvar{c3} \ensuremath{\rightarrow} \coqdocvar{cequiv} \coqdocvar{c1} \coqdocvar{c3}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{cequiv}. \coqdoctac{intros} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c3} \coqdocvar{H12} \coqdocvar{H23} \coqdocvar{st} \coqdocvar{st'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{iff\_trans} \coqdockw{with} (\coqdocvar{c2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}). \coqdoctac{apply} \coqdocvar{H12}. \coqdoctac{apply} \coqdocvar{H23}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Behavioral Equivalence Is a Congruence}



 Less obviously, behavioral equivalence is also a \textit{congruence}.
    That is, the equivalence of two subprograms implies the
    equivalence of the larger programs in which they are embedded:


              aequiv a1 a1'
\par
\noindent\hrulefill\par
\noindent{}
      cequiv (i ::= a1) (i ::= a1')


              cequiv c1 c1'
              cequiv c2 c2'
\par
\noindent\hrulefill\par
\noindent{}
         cequiv (c1;;c2) (c1';;c2')


    ...and so on for the other forms of commands. 

 (Note that we are using the inference rule notation here not
    as part of a definition, but simply to write down some valid
    implications in a readable format. We prove these implications
    below.) 

 We will see a concrete example of why these congruence
    properties are important in the following section (in the proof of
    \coqdoclemma{fold\_constants\_com\_sound}), but the main idea is that they allow
    us to replace a small part of a large program with an equivalent
    small part and know that the whole large programs are equivalent
    \textit{without} doing an explicit proof about the non-varying parts --
    i.e., the ``proof burden'' of a small change to a large program is
    proportional to the size of the change, not the program. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{CAss\_congruence} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{a1} \coqdocvar{a1'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aequiv} \coqdocvar{a1} \coqdocvar{a1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} (\coqdocvar{CAss} \coqdocvar{i} \coqdocvar{a1}) (\coqdocvar{CAss} \coqdocvar{i} \coqdocvar{a1'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{i} \coqdocvar{a1} \coqdocvar{a2} \coqdocvar{Heqv} \coqdocvar{st} \coqdocvar{st'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; \coqdoctac{intros} \coqdocvar{Hceval}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Hceval}. \coqdoctac{subst}. \coqdoctac{apply} \coqdocvar{E\_Ass}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{Heqv}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Hceval}. \coqdoctac{subst}. \coqdoctac{apply} \coqdocvar{E\_Ass}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{Heqv}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The congruence property for loops is a little more interesting,
    since it requires induction.


    \textit{Theorem}: Equivalence is a congruence for \coqdocvar{WHILE} -- that is, if
    \coqdocvariable{b1} is equivalent to \coqdocvariable{b1'} and \coqdocconstructor{c1} is equivalent to \coqdocvariable{c1'}, then
    \coqdocvar{WHILE} \coqdocvariable{b1} \coqdocvar{DO} \coqdocconstructor{c1} \coqdocvar{END} is equivalent to \coqdocvar{WHILE} \coqdocvariable{b1'} \coqdocvar{DO} \coqdocvariable{c1'} \coqdocvar{END}.


    \textit{Proof}: Suppose \coqdocvariable{b1} is equivalent to \coqdocvariable{b1'} and \coqdocconstructor{c1} is
    equivalent to \coqdocvariable{c1'}.  We must show, for every \coqdocvariable{st} and \coqdocvariable{st'}, that
    \coqdocvar{WHILE} \coqdocvariable{b1} \coqdocvar{DO} \coqdocconstructor{c1} \coqdocvar{END} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'} iff \coqdocvar{WHILE} \coqdocvariable{b1'} \coqdocvar{DO} \coqdocvariable{c1'} \coqdocvar{END} / \coqdocvariable{st}
    \symbol{92}\symbol{92} \coqdocvariable{st'}.  We consider the two directions separately.



\begin{itemize}
\item  (\ensuremath{\rightarrow}) We show that \coqdocvar{WHILE} \coqdocvariable{b1} \coqdocvar{DO} \coqdocconstructor{c1} \coqdocvar{END} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'} implies
        \coqdocvar{WHILE} \coqdocvariable{b1'} \coqdocvar{DO} \coqdocvariable{c1'} \coqdocvar{END} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}, by induction on a
        derivation of \coqdocvar{WHILE} \coqdocvariable{b1} \coqdocvar{DO} \coqdocconstructor{c1} \coqdocvar{END} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}.  The only
        nontrivial cases are when the final rule in the derivation is
        \coqdocconstructor{E\_WhileEnd} or \coqdocconstructor{E\_WhileLoop}.



\begin{itemize}
\item  \coqdocconstructor{E\_WhileEnd}: In this case, the form of the rule gives us
            \coqdocdefinition{beval} \coqdocvariable{st} \coqdocvariable{b1} = \coqdocconstructor{false} and \coqdocvariable{st} = \coqdocvariable{st'}.  But then, since
            \coqdocvariable{b1} and \coqdocvariable{b1'} are equivalent, we have \coqdocdefinition{beval} \coqdocvariable{st} \coqdocvariable{b1'} =
            \coqdocconstructor{false}, and \coqdocvar{E}-\coqdocvar{WhileEnd} applies, giving us \coqdocvar{WHILE} \coqdocvariable{b1'} \coqdocvar{DO}
            \coqdocvariable{c1'} \coqdocvar{END} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}, as required.



\item  \coqdocconstructor{E\_WhileLoop}: The form of the rule now gives us \coqdocdefinition{beval} \coqdocvariable{st}
            \coqdocvariable{b1} = \coqdocconstructor{true}, with \coqdocconstructor{c1} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvar{st'0} and \coqdocvar{WHILE} \coqdocvariable{b1} \coqdocvar{DO} \coqdocconstructor{c1}
            \coqdocvar{END} / \coqdocvar{st'0} \symbol{92}\symbol{92} \coqdocvariable{st'} for some state \coqdocvar{st'0}, with the
            induction hypothesis \coqdocvar{WHILE} \coqdocvariable{b1'} \coqdocvar{DO} \coqdocvariable{c1'} \coqdocvar{END} / \coqdocvar{st'0} \symbol{92}\symbol{92}
            \coqdocvariable{st'}.


            Since \coqdocconstructor{c1} and \coqdocvariable{c1'} are equivalent, we know that \coqdocvariable{c1'} /
            \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvar{st'0}.  And since \coqdocvariable{b1} and \coqdocvariable{b1'} are equivalent, we
            have \coqdocdefinition{beval} \coqdocvariable{st} \coqdocvariable{b1'} = \coqdocconstructor{true}.  Now \coqdocvar{E}-\coqdocvar{WhileLoop} applies,
            giving us \coqdocvar{WHILE} \coqdocvariable{b1'} \coqdocvar{DO} \coqdocvariable{c1'} \coqdocvar{END} / \coqdocvariable{st} \symbol{92}\symbol{92} \coqdocvariable{st'}, as
            required.



\end{itemize}

\item  (\ensuremath{\leftarrow}) Similar. \ensuremath{\Box} 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{CWhile\_congruence} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b1} \coqdocvar{b1'} \coqdocvar{c1} \coqdocvar{c1'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bequiv} \coqdocvar{b1} \coqdocvar{b1'} \ensuremath{\rightarrow} \coqdocvar{cequiv} \coqdocvar{c1} \coqdocvar{c1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) (\coqdocvar{WHILE} \coqdocvar{b1'} \coqdocvar{DO} \coqdocvar{c1'} \coqdocvar{END}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bequiv},\coqdocvar{cequiv}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b1} \coqdocvar{b1'} \coqdocvar{c1} \coqdocvar{c1'} \coqdocvar{Hb1e} \coqdocvar{Hc1e} \coqdocvar{st} \coqdocvar{st'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; \coqdoctac{intros} \coqdocvar{Hce}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) \coqdockw{as} \coqdocvar{cwhile}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{eqn}:\coqdocvar{Heqcwhile}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{induction} \coqdocvar{Hce}; \coqdoctac{inversion} \coqdocvar{Heqcwhile}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_WhileEnd}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Hb1e}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_WhileLoop} \coqdockw{with} (\coqdocvar{st'} := \coqdocvar{st'}).\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Hb1e}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} (\coqdocvar{Hc1e} \coqdocvar{st} \coqdocvar{st'}). \coqdoctac{apply} \coqdocvar{Hce1}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} \coqdocvar{IHHce2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{WHILE} \coqdocvar{b1'} \coqdocvar{DO} \coqdocvar{c1'} \coqdocvar{END}) \coqdockw{as} \coqdocvar{c'while}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{eqn}:\coqdocvar{Heqc'while}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{induction} \coqdocvar{Hce}; \coqdoctac{inversion} \coqdocvar{Heqc'while}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_WhileEnd}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{Hb1e}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_WhileLoop} \coqdockw{with} (\coqdocvar{st'} := \coqdocvar{st'}).\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{Hb1e}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} (\coqdocvar{Hc1e} \coqdocvar{st} \coqdocvar{st'}). \coqdoctac{apply} \coqdocvar{Hce1}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} \coqdocvar{IHHce2}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, optional (CSeq\_congruence)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{CSeq\_congruence} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c1} \coqdocvar{c1'} \coqdocvar{c2} \coqdocvar{c2'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} \coqdocvar{c1} \coqdocvar{c1'} \ensuremath{\rightarrow} \coqdocvar{cequiv} \coqdocvar{c2} \coqdocvar{c2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} (\coqdocvar{c1};;\coqdocvar{c2}) (\coqdocvar{c1'};;\coqdocvar{c2'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (CIf\_congruence)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{CIf\_congruence} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{b'} \coqdocvar{c1} \coqdocvar{c1'} \coqdocvar{c2} \coqdocvar{c2'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bequiv} \coqdocvar{b} \coqdocvar{b'} \ensuremath{\rightarrow} \coqdocvar{cequiv} \coqdocvar{c1} \coqdocvar{c1'} \ensuremath{\rightarrow} \coqdocvar{cequiv} \coqdocvar{c2} \coqdocvar{c2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} (\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI})\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{IFB} \coqdocvar{b'} \coqdocvar{THEN} \coqdocvar{c1'} \coqdocvar{ELSE} \coqdocvar{c2'} \coqdocvar{FI}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 For example, here are two equivalent programs and a proof of their
    equivalence... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{congruence\_example}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 0;;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{IFB} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0))\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{THEN}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{ELSE}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 42\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{FI})\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 0;;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{IFB} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0))\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{THEN}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Y} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{X})   \coqdoceol
\coqdocindent{2.50em}
\coqdocvar{ELSE}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 42\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{FI}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{CSeq\_congruence}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{refl\_cequiv}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{CIf\_congruence}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{refl\_bequiv}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{CAss\_congruence}. \coqdoctac{unfold} \coqdocvar{aequiv}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{symmetry}. \coqdoctac{apply} \coqdocvar{minus\_diag}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{refl\_cequiv}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, advanced, optional (not\_congr)}

 We've shown that the \coqdocdefinition{cequiv} relation is both an equivalence and
    a congruence on commands.  Can you think of a relation on commands
    that is an equivalence but \textit{not} a congruence? \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Program Transformations}



 A \textit{program transformation} is a function that takes a program as
    input and produces some variant of the program as output.
    Compiler optimizations such as constant folding are a canonical
    example, but there are many others. 

 A program transformation is \textit{sound} if it preserves the
    behavior of the original program. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{atrans\_sound} (\coqdocvar{atrans} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{a} : \coqdocvar{aexp}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{aequiv} \coqdocvar{a} (\coqdocvar{atrans} \coqdocvar{a}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{btrans\_sound} (\coqdocvar{btrans} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{bexp}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{b} : \coqdocvar{bexp}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{bequiv} \coqdocvar{b} (\coqdocvar{btrans} \coqdocvar{b}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ctrans\_sound} (\coqdocvar{ctrans} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{c} : \coqdocvar{com}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{cequiv} \coqdocvar{c} (\coqdocvar{ctrans} \coqdocvar{c}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Constant-Folding Transformation}



 An expression is \textit{constant} when it contains no variable
    references.


    Constant folding is an optimization that finds constant
    expressions and replaces them by their values. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{fold\_constants\_aexp} (\coqdocvar{a} : \coqdocvar{aexp}) : \coqdocvar{aexp} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{a} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ANum} \coqdocvar{n}       \ensuremath{\Rightarrow} \coqdocvar{ANum} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AId} \coqdocvar{i}        \ensuremath{\Rightarrow} \coqdocvar{AId} \coqdocvar{i}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} \coqdocvar{a1} \coqdocvar{a2}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} (\coqdocvar{fold\_constants\_aexp} \coqdocvar{a1}, \coqdocvar{fold\_constants\_aexp} \coqdocvar{a2})\coqdoceol
\coqdocindent{2.00em}
\coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{ANum} \coqdocvar{n1}, \coqdocvar{ANum} \coqdocvar{n2}) \ensuremath{\Rightarrow} \coqdocvar{ANum} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{a1'}, \coqdocvar{a2'}) \ensuremath{\Rightarrow} \coqdocvar{APlus} \coqdocvar{a1'} \coqdocvar{a2'}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMinus} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} (\coqdocvar{fold\_constants\_aexp} \coqdocvar{a1}, \coqdocvar{fold\_constants\_aexp} \coqdocvar{a2})\coqdoceol
\coqdocindent{2.00em}
\coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{ANum} \coqdocvar{n1}, \coqdocvar{ANum} \coqdocvar{n2}) \ensuremath{\Rightarrow} \coqdocvar{ANum} (\coqdocvar{n1} - \coqdocvar{n2})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{a1'}, \coqdocvar{a2'}) \ensuremath{\Rightarrow} \coqdocvar{AMinus} \coqdocvar{a1'} \coqdocvar{a2'}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMult} \coqdocvar{a1} \coqdocvar{a2}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} (\coqdocvar{fold\_constants\_aexp} \coqdocvar{a1}, \coqdocvar{fold\_constants\_aexp} \coqdocvar{a2})\coqdoceol
\coqdocindent{2.00em}
\coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{ANum} \coqdocvar{n1}, \coqdocvar{ANum} \coqdocvar{n2}) \ensuremath{\Rightarrow} \coqdocvar{ANum} (\coqdocvar{n1} \ensuremath{\times} \coqdocvar{n2})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{a1'}, \coqdocvar{a2'}) \ensuremath{\Rightarrow} \coqdocvar{AMult} \coqdocvar{a1'} \coqdocvar{a2'}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{fold\_aexp\_ex1} :\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fold\_constants\_aexp}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{AMult} (\coqdocvar{APlus} (\coqdocvar{ANum} 1) (\coqdocvar{ANum} 2)) (\coqdocvar{AId} \coqdocvar{X}))\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{AMult} (\coqdocvar{ANum} 3) (\coqdocvar{AId} \coqdocvar{X}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that this version of constant folding doesn't eliminate
    trivial additions, etc. -- we are focusing attention on a single
    optimization for the sake of simplicity.  It is not hard to
    incorporate other ways of simplifying expressions; the definitions
    and proofs just get longer. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{fold\_aexp\_ex2} :\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fold\_constants\_aexp}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{APlus} (\coqdocvar{AMult} (\coqdocvar{ANum} 0) (\coqdocvar{ANum} 6))\coqdoceol
\coqdocindent{14.50em}
(\coqdocvar{AId} \coqdocvar{Y})))\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{APlus} (\coqdocvar{ANum} 0) (\coqdocvar{AId} \coqdocvar{Y})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Not only can we lift \coqdocdefinition{fold\_constants\_aexp} to \coqdocinductive{bexp}s (in the
    \coqdocconstructor{BEq} and \coqdocconstructor{BLe} cases); we can also look for constant \textit{boolean}
    expressions and evaluate them in-place. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{fold\_constants\_bexp} (\coqdocvar{b} : \coqdocvar{bexp}) : \coqdocvar{bexp} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{b} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BTrue}        \ensuremath{\Rightarrow} \coqdocvar{BTrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BFalse}       \ensuremath{\Rightarrow} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BEq} \coqdocvar{a1} \coqdocvar{a2}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{fold\_constants\_aexp} \coqdocvar{a1}, \coqdocvar{fold\_constants\_aexp} \coqdocvar{a2}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{ANum} \coqdocvar{n1}, \coqdocvar{ANum} \coqdocvar{n2}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{if} \coqdocvar{beq\_nat} \coqdocvar{n1} \coqdocvar{n2} \coqdockw{then} \coqdocvar{BTrue} \coqdockw{else} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{a1'}, \coqdocvar{a2'}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{BEq} \coqdocvar{a1'} \coqdocvar{a2'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BLe} \coqdocvar{a1} \coqdocvar{a2}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{fold\_constants\_aexp} \coqdocvar{a1}, \coqdocvar{fold\_constants\_aexp} \coqdocvar{a2}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{ANum} \coqdocvar{n1}, \coqdocvar{ANum} \coqdocvar{n2}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{if} \coqdocvar{leb} \coqdocvar{n1} \coqdocvar{n2} \coqdockw{then} \coqdocvar{BTrue} \coqdockw{else} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{a1'}, \coqdocvar{a2'}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{BLe} \coqdocvar{a1'} \coqdocvar{a2'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BNot} \coqdocvar{b1}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{fold\_constants\_bexp} \coqdocvar{b1}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{BTrue} \ensuremath{\Rightarrow} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{BFalse} \ensuremath{\Rightarrow} \coqdocvar{BTrue}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{b1'} \ensuremath{\Rightarrow} \coqdocvar{BNot} \coqdocvar{b1'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BAnd} \coqdocvar{b1} \coqdocvar{b2}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{fold\_constants\_bexp} \coqdocvar{b1}, \coqdocvar{fold\_constants\_bexp} \coqdocvar{b2}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{BTrue}, \coqdocvar{BTrue}) \ensuremath{\Rightarrow} \coqdocvar{BTrue}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{BTrue}, \coqdocvar{BFalse}) \ensuremath{\Rightarrow} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{BFalse}, \coqdocvar{BTrue}) \ensuremath{\Rightarrow} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{BFalse}, \coqdocvar{BFalse}) \ensuremath{\Rightarrow} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{b1'}, \coqdocvar{b2'}) \ensuremath{\Rightarrow} \coqdocvar{BAnd} \coqdocvar{b1'} \coqdocvar{b2'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{fold\_bexp\_ex1} :\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fold\_constants\_bexp} (\coqdocvar{BAnd} \coqdocvar{BTrue} (\coqdocvar{BNot} (\coqdocvar{BAnd} \coqdocvar{BFalse} \coqdocvar{BTrue})))\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{BTrue}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{fold\_bexp\_ex2} :\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fold\_constants\_bexp}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{BAnd} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y}))\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{BEq} (\coqdocvar{ANum} 0)\coqdoceol
\coqdocindent{8.50em}
(\coqdocvar{AMinus} (\coqdocvar{ANum} 2) (\coqdocvar{APlus} (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{20.50em}
(\coqdocvar{ANum} 1)))))\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{BAnd} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})) \coqdocvar{BTrue}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To fold constants in a command, we apply the appropriate folding
    functions on all embedded expressions. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{fold\_constants\_com} (\coqdocvar{c} : \coqdocvar{com}) : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{c} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{SKIP}      \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{SKIP}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{i} ::= \coqdocvar{a}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{CAss} \coqdocvar{i} (\coqdocvar{fold\_constants\_aexp} \coqdocvar{a})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{c1} ;; \coqdocvar{c2}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{fold\_constants\_com} \coqdocvar{c1}) ;; (\coqdocvar{fold\_constants\_com} \coqdocvar{c2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{fold\_constants\_bexp} \coqdocvar{b} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{BTrue} \ensuremath{\Rightarrow} \coqdocvar{fold\_constants\_com} \coqdocvar{c1}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{BFalse} \ensuremath{\Rightarrow} \coqdocvar{fold\_constants\_com} \coqdocvar{c2}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{b'} \ensuremath{\Rightarrow} \coqdocvar{IFB} \coqdocvar{b'} \coqdocvar{THEN} \coqdocvar{fold\_constants\_com} \coqdocvar{c1}\coqdoceol
\coqdocindent{10.50em}
\coqdocvar{ELSE} \coqdocvar{fold\_constants\_com} \coqdocvar{c2} \coqdocvar{FI}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{fold\_constants\_bexp} \coqdocvar{b} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{BTrue} \ensuremath{\Rightarrow} \coqdocvar{WHILE} \coqdocvar{BTrue} \coqdocvar{DO} \coqdocvar{SKIP} \coqdocvar{END}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{BFalse} \ensuremath{\Rightarrow} \coqdocvar{SKIP}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{b'} \ensuremath{\Rightarrow} \coqdocvar{WHILE} \coqdocvar{b'} \coqdocvar{DO} (\coqdocvar{fold\_constants\_com} \coqdocvar{c}) \coqdocvar{END}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{fold\_com\_ex1} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fold\_constants\_com}\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{ANum} 4) (\coqdocvar{ANum} 5);;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Y} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 3);;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{IFB} \coqdocvar{BEq} (\coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y}))\coqdoceol
\coqdocindent{6.50em}
(\coqdocvar{APlus} (\coqdocvar{ANum} 2) (\coqdocvar{ANum} 4)) \coqdocvar{THEN}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{SKIP}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{ELSE}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{FI};;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{IFB} \coqdocvar{BLe} (\coqdocvar{ANum} 0)\coqdoceol
\coqdocindent{6.50em}
(\coqdocvar{AMinus} (\coqdocvar{ANum} 4) (\coqdocvar{APlus} (\coqdocvar{ANum} 2) (\coqdocvar{ANum} 1)))\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{THEN}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{ELSE}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{SKIP}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{FI};;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{WHILE} \coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 0) \coqdocvar{DO}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{END})\coqdoceol
\coqdocindent{1.00em}
= \coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 9;;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Y} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 3);;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{IFB} \coqdocvar{BEq} (\coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})) (\coqdocvar{ANum} 6) \coqdocvar{THEN}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{SKIP}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{ELSE}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{Y} ::= \coqdocvar{ANum} 0)\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{FI};;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 0;;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{WHILE} \coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 0) \coqdocvar{DO}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{END}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Soundness of Constant Folding}



 Now we need to show that what we've done is correct. 

 Here's the proof for arithmetic expressions: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{fold\_constants\_aexp\_sound} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{atrans\_sound} \coqdocvar{fold\_constants\_aexp}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{atrans\_sound}. \coqdoctac{intros} \coqdocvar{a}. \coqdoctac{unfold} \coqdocvar{aequiv}. \coqdoctac{intros} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{a}; \coqdoctac{simpl};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{reflexivity};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{destruct} (\coqdocvar{fold\_constants\_aexp} \coqdocvar{a1});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{destruct} (\coqdocvar{fold\_constants\_aexp} \coqdocvar{a2});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{rewrite} \coqdocvar{IHa1}; \coqdoctac{rewrite} \coqdocvar{IHa2}; \coqdoctac{reflexivity}). \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, optional (fold\_bexp\_Eq\_informal)}

 Here is an informal proof of the \coqdocconstructor{BEq} case of the soundness
    argument for boolean expression constant folding.  Read it
    carefully and compare it to the formal proof that follows.  Then
    fill in the \coqdocconstructor{BLe} case of the formal proof (without looking at the
    \coqdocconstructor{BEq} case, if possible).


   \textit{Theorem}: The constant folding function for booleans,
   \coqdocdefinition{fold\_constants\_bexp}, is sound.


   \textit{Proof}: We must show that \coqdocconstructor{b} is equivalent to \coqdocdefinition{fold\_constants\_bexp},
   for all boolean expressions \coqdocconstructor{b}.  Proceed by induction on \coqdocconstructor{b}.  We
   show just the case where \coqdocconstructor{b} has the form \coqdocconstructor{BEq} \coqdocvariable{a1} \coqdocvariable{a2}.


   In this case, we must show


       beval st (BEq a1 a2)
     = beval st (fold\_constants\_bexp (BEq a1 a2)).


   There are two cases to consider:



\begin{itemize}
\item  First, suppose \coqdocdefinition{fold\_constants\_aexp} \coqdocvariable{a1} = \coqdocconstructor{ANum} \coqdocvariable{n1} and
       \coqdocdefinition{fold\_constants\_aexp} \coqdocvariable{a2} = \coqdocconstructor{ANum} \coqdocvariable{n2} for some \coqdocvariable{n1} and \coqdocvariable{n2}.


       In this case, we have


           fold\_constants\_bexp (BEq a1 a2)
         = if beq\_nat n1 n2 then BTrue else BFalse


       and


           beval st (BEq a1 a2)
         = beq\_nat (aeval st a1) (aeval st a2).


       By the soundness of constant folding for arithmetic
       expressions (Lemma \coqdoclemma{fold\_constants\_aexp\_sound}), we know


           aeval st a1
         = aeval st (fold\_constants\_aexp a1)
         = aeval st (ANum n1)
         = n1


       and


           aeval st a2
         = aeval st (fold\_constants\_aexp a2)
         = aeval st (ANum n2)
         = n2,


       so


           beval st (BEq a1 a2)
         = beq\_nat (aeval a1) (aeval a2)
         = beq\_nat n1 n2.


       Also, it is easy to see (by considering the cases \coqdocvariable{n1} = \coqdocvariable{n2} and
       \coqdocvariable{n1} \ensuremath{\not=} \coqdocvariable{n2} separately) that


           beval st (if beq\_nat n1 n2 then BTrue else BFalse)
         = if beq\_nat n1 n2 then beval st BTrue else beval st BFalse
         = if beq\_nat n1 n2 then true else false
         = beq\_nat n1 n2.


       So


           beval st (BEq a1 a2)
         = beq\_nat n1 n2.
         = beval st (if beq\_nat n1 n2 then BTrue else BFalse),


       as required.



\item  Otherwise, one of \coqdocdefinition{fold\_constants\_aexp} \coqdocvariable{a1} and
       \coqdocdefinition{fold\_constants\_aexp} \coqdocvariable{a2} is not a constant.  In this case, we
       must show


           beval st (BEq a1 a2)
         = beval st (BEq (fold\_constants\_aexp a1)
                         (fold\_constants\_aexp a2)),


       which, by the definition of \coqdocdefinition{beval}, is the same as showing


           beq\_nat (aeval st a1) (aeval st a2)
         = beq\_nat (aeval st (fold\_constants\_aexp a1))
                   (aeval st (fold\_constants\_aexp a2)).


       But the soundness of constant folding for arithmetic
       expressions (\coqdoclemma{fold\_constants\_aexp\_sound}) gives us


         aeval st a1 = aeval st (fold\_constants\_aexp a1)
         aeval st a2 = aeval st (fold\_constants\_aexp a2),


       completing the case.  \ensuremath{\Box}

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{fold\_constants\_bexp\_sound}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{btrans\_sound} \coqdocvar{fold\_constants\_bexp}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{btrans\_sound}. \coqdoctac{intros} \coqdocvar{b}. \coqdoctac{unfold} \coqdocvar{bequiv}. \coqdoctac{intros} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{b};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{a} \coqdocvar{into} \coqdocvar{a1}. \coqdoctac{rename} \coqdocvar{a0} \coqdocvar{into} \coqdocvar{a2}. \coqdoctac{simpl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(Doing induction when there are a lot of constructors makes
    specifying variable names a chore, but Coq doesn't always
    choose nice variable names.  We can rename entries in the
    context with the \coqdoctac{rename} tactic: \coqdoctac{rename} \coqdocabbreviation{a} \coqdocvar{into} \coqdocvariable{a1} will
    change \coqdocabbreviation{a} to \coqdocvariable{a1} in the current goal and context.) \begin{coqdoccode}
\coqdocemptyline
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{fold\_constants\_aexp} \coqdocvar{a1}) \coqdockw{as} \coqdocvar{a1'} \coqdocvar{eqn}:\coqdocvar{Heqa1'}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{fold\_constants\_aexp} \coqdocvar{a2}) \coqdockw{as} \coqdocvar{a2'} \coqdocvar{eqn}:\coqdocvar{Heqa2'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{replace} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1}) \coqdockw{with} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1'}) \coqdoctac{by}\coqdoceol
\coqdocindent{3.50em}
(\coqdoctac{subst} \coqdocvar{a1'}; \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{fold\_constants\_aexp\_sound}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{replace} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a2}) \coqdockw{with} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a2'}) \coqdoctac{by}\coqdoceol
\coqdocindent{3.50em}
(\coqdoctac{subst} \coqdocvar{a2'}; \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{fold\_constants\_aexp\_sound}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{a1'}; \coqdoctac{destruct} \coqdocvar{a2'}; \coqdoctac{try} \coqdoctac{reflexivity}.\coqdoceol
\coqdocemptyline
\coqdocindent{3.00em}
\coqdoctac{simpl}. \coqdoctac{destruct} (\coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{n0}); \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
 \coqdocvar{admit}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdocvar{remember} (\coqdocvar{fold\_constants\_bexp} \coqdocvar{b}) \coqdockw{as} \coqdocvar{b'} \coqdocvar{eqn}:\coqdocvar{Heqb'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{IHb}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{b'}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{fold\_constants\_bexp} \coqdocvar{b1}) \coqdockw{as} \coqdocvar{b1'} \coqdocvar{eqn}:\coqdocvar{Heqb1'}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{fold\_constants\_bexp} \coqdocvar{b2}) \coqdockw{as} \coqdocvar{b2'} \coqdocvar{eqn}:\coqdocvar{Heqb2'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{IHb1}. \coqdoctac{rewrite} \coqdocvar{IHb2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{b1'}; \coqdoctac{destruct} \coqdocvar{b2'}; \coqdoctac{reflexivity}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (fold\_constants\_com\_sound)}

 Complete the \coqdocvar{WHILE} case of the following proof. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{fold\_constants\_com\_sound} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ctrans\_sound} \coqdocvar{fold\_constants\_com}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{ctrans\_sound}. \coqdoctac{intros} \coqdocvar{c}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{c}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{refl\_cequiv}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{CAss\_congruence}.\coqdoceol
\coqdocindent{7.00em}
\coqdoctac{apply} \coqdocvar{fold\_constants\_aexp\_sound}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{CSeq\_congruence}; \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{bequiv} \coqdocvar{b} (\coqdocvar{fold\_constants\_bexp} \coqdocvar{b})). \{\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{fold\_constants\_bexp\_sound}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{fold\_constants\_bexp} \coqdocvar{b}) \coqdocvar{eqn}:\coqdocvar{Heqb};\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{try} (\coqdoctac{apply} \coqdocvar{CIf\_congruence}; \coqdoctac{assumption}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{trans\_cequiv} \coqdockw{with} \coqdocvar{c1}; \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IFB\_true}; \coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{trans\_cequiv} \coqdockw{with} \coqdocvar{c2}; \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IFB\_false}; \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Soundness of (0 + n) Elimination, Redux}



\paragraph{Exercise: 4 stars, advanced, optional (optimize\_0plus)}

 Recall the definition \coqdocdefinition{optimize\_0plus} from the \coqdoclibrary{Imp} chapter:


    Fixpoint optimize\_0plus (e:aexp) : aexp :=
      match e with
      | ANum n =>
          ANum n
      | APlus (ANum 0) e2 =>
          optimize\_0plus e2
      | APlus e1 e2 =>
          APlus (optimize\_0plus e1) (optimize\_0plus e2)
      | AMinus e1 e2 =>
          AMinus (optimize\_0plus e1) (optimize\_0plus e2)
      | AMult e1 e2 =>
          AMult (optimize\_0plus e1) (optimize\_0plus e2)
      end.


   Note that this function is defined over the old \coqdocinductive{aexp}s,
   without states.


   Write a new version of this function that accounts for variables,
   plus analogous ones for \coqdocinductive{bexp}s and commands:


     optimize\_0plus\_aexp
     optimize\_0plus\_bexp
     optimize\_0plus\_com


   Prove that these three functions are sound, as we did for
   \coqdocvar{fold\_constants\_}\ensuremath{\times}.  Make sure you use the congruence lemmas in
   the proof of \coqdocvar{optimize\_0plus\_com} -- otherwise it will be \textit{long}!


   Then define an optimizer on commands that first folds
   constants (using \coqdocdefinition{fold\_constants\_com}) and then eliminates 0 + \coqdocabbreviation{n}
   terms (using \coqdocvar{optimize\_0plus\_com}).



\begin{itemize}
\item  Give a meaningful example of this optimizer's output.



\item  Prove that the optimizer is sound.  (This part should be \textit{very}
     easy.)  
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Proving That Programs Are \textit{Not} Equivalent}



 Suppose that \coqdocconstructor{c1} is a command of the form \coqdocdefinition{X} ::= \coqdocvariable{a1};; \coqdocdefinition{Y} ::= \coqdocvariable{a2}
    and \coqdocconstructor{c2} is the command \coqdocdefinition{X} ::= \coqdocvariable{a1};; \coqdocdefinition{Y} ::= \coqdocvariable{a2'}, where \coqdocvariable{a2'} is
    formed by substituting \coqdocvariable{a1} for all occurrences of \coqdocdefinition{X} in \coqdocvariable{a2}.
    For example, \coqdocconstructor{c1} and \coqdocconstructor{c2} might be:


       c1  =  (X ::= 42 + 53;;
               Y ::= Y + X)
       c2  =  (X ::= 42 + 53;;
               Y ::= Y + (42 + 53))


    Clearly, this \textit{particular} \coqdocconstructor{c1} and \coqdocconstructor{c2} are equivalent.  Is this
    true in general? 

 We will see in a moment that it is not, but it is worthwhile
    to pause, now, and see if you can find a counter-example on your
    own. 

 More formally, here is the function that substitutes an arithmetic
    expression for each occurrence of a given variable in another
    expression: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{subst\_aexp} (\coqdocvar{i} : \coqdocvar{id}) (\coqdocvar{u} : \coqdocvar{aexp}) (\coqdocvar{a} : \coqdocvar{aexp}) : \coqdocvar{aexp} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{a} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ANum} \coqdocvar{n}       \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ANum} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AId} \coqdocvar{i'}       \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{i'} \coqdockw{then} \coqdocvar{u} \coqdockw{else} \coqdocvar{AId} \coqdocvar{i'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} \coqdocvar{a1} \coqdocvar{a2}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{APlus} (\coqdocvar{subst\_aexp} \coqdocvar{i} \coqdocvar{u} \coqdocvar{a1}) (\coqdocvar{subst\_aexp} \coqdocvar{i} \coqdocvar{u} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMinus} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{AMinus} (\coqdocvar{subst\_aexp} \coqdocvar{i} \coqdocvar{u} \coqdocvar{a1}) (\coqdocvar{subst\_aexp} \coqdocvar{i} \coqdocvar{u} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMult} \coqdocvar{a1} \coqdocvar{a2}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{AMult} (\coqdocvar{subst\_aexp} \coqdocvar{i} \coqdocvar{u} \coqdocvar{a1}) (\coqdocvar{subst\_aexp} \coqdocvar{i} \coqdocvar{u} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{subst\_aexp\_ex} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subst\_aexp} \coqdocvar{X} (\coqdocvar{APlus} (\coqdocvar{ANum} 42) (\coqdocvar{ANum} 53))\coqdoceol
\coqdocindent{6.50em}
(\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{X}))\coqdoceol
\coqdocnoindent
= (\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{APlus} (\coqdocvar{ANum} 42) (\coqdocvar{ANum} 53))).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
And here is the property we are interested in, expressing the
    claim that commands \coqdocconstructor{c1} and \coqdocconstructor{c2} as described above are
    always equivalent.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{subst\_equiv\_property} := \coqdockw{\ensuremath{\forall}} \coqdocvar{i1} \coqdocvar{i2} \coqdocvar{a1} \coqdocvar{a2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} (\coqdocvar{i1} ::= \coqdocvar{a1};; \coqdocvar{i2} ::= \coqdocvar{a2})\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{i1} ::= \coqdocvar{a1};; \coqdocvar{i2} ::= \coqdocvar{subst\_aexp} \coqdocvar{i1} \coqdocvar{a1} \coqdocvar{a2}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Sadly, the property does \textit{not} always hold -- i.e., it is not the
    case that, for all \coqdocabbreviation{i1}, \coqdocabbreviation{i2}, \coqdocvariable{a1}, and \coqdocvariable{a2},


      cequiv (i1 ::= a1;; i2 ::= a2)
             (i1 ::= a1;; i2 ::= subst\_aexp i1 a1 a2).


    To see this, suppose (for a contradiction) that for all \coqdocabbreviation{i1}, \coqdocabbreviation{i2},
    \coqdocvariable{a1}, and \coqdocvariable{a2}, we have


      cequiv (i1 ::= a1;; i2 ::= a2)
             (i1 ::= a1;; i2 ::= subst\_aexp i1 a1 a2).


    Consider the following program:


       X ::= APlus (AId X) (ANum 1);; Y ::= AId X


    Note that


       (X ::= APlus (AId X) (ANum 1);; Y ::= AId X)
       / empty\_state \symbol{92}\symbol{92} st1,


    where \coqdocvariable{st1} = \{ \coqdocdefinition{X} |-> 1, \coqdocdefinition{Y} |-> 1 \}.


    By assumption, we know that


      cequiv (X ::= APlus (AId X) (ANum 1);;
              Y ::= AId X)
             (X ::= APlus (AId X) (ANum 1);;
              Y ::= APlus (AId X) (ANum 1))


    so, by the definition of \coqdocdefinition{cequiv}, we have


      (X ::= APlus (AId X) (ANum 1);; Y ::= APlus (AId X) (ANum 1))
      / empty\_state \symbol{92}\symbol{92} st1.


    But we can also derive


      (X ::= APlus (AId X) (ANum 1);; Y ::= APlus (AId X) (ANum 1))
      / empty\_state \symbol{92}\symbol{92} st2,


    where \coqdocvariable{st2} = \{ \coqdocdefinition{X} |-> 1, \coqdocdefinition{Y} |-> 2 \}.  But \coqdocvariable{st1} \ensuremath{\not=} \coqdocvariable{st2}, which is a
    contradiction, since \coqdocinductive{ceval} is deterministic!  \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{subst\_inequiv} :\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdocvar{subst\_equiv\_property}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{subst\_equiv\_property}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Contra}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1);;\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{Y} ::= \coqdocvar{AId} \coqdocvar{X})\coqdoceol
\coqdocindent{3.00em}
\coqdockw{as} \coqdocvar{c1}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1);;\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1))\coqdoceol
\coqdocindent{3.00em}
\coqdockw{as} \coqdocvar{c2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{cequiv} \coqdocvar{c1} \coqdocvar{c2}) \coqdoctac{by} (\coqdoctac{subst}; \coqdoctac{apply} \coqdocvar{Contra}).\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 1) \coqdocvar{Y} 1) \coqdockw{as} \coqdocvar{st1}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 1) \coqdocvar{Y} 2) \coqdockw{as} \coqdocvar{st2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H1}: \coqdocvar{c1} / \coqdocvar{empty\_state} \symbol{92}\symbol{92} \coqdocvar{st1});\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H2}: \coqdocvar{c2} / \coqdocvar{empty\_state} \symbol{92}\symbol{92} \coqdocvar{st2});\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} (\coqdoctac{subst};\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{apply} \coqdocvar{E\_Seq} \coqdockw{with} (\coqdocvar{st'} := (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 1));\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{apply} \coqdocvar{E\_Ass}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H1}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{Hcontra}: \coqdocvar{st1} = \coqdocvar{st2})\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{by} (\coqdoctac{apply} (\coqdocvar{ceval\_deterministic} \coqdocvar{c2} \coqdocvar{empty\_state}); \coqdoctac{assumption}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{Hcontra'}: \coqdocvar{st1} \coqdocvar{Y} = \coqdocvar{st2} \coqdocvar{Y})\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{by} (\coqdoctac{rewrite} \coqdocvar{Hcontra}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{subst}. \coqdoctac{inversion} \coqdocvar{Hcontra'}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 4 stars, optional (better\_subst\_equiv)}

 The equivalence we had in mind above was not complete nonsense --
    it was actually almost right.  To make it correct, we just need to
    exclude the case where the variable \coqdocdefinition{X} occurs in the
    right-hand-side of the first assignment statement. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{var\_not\_used\_in\_aexp} (\coqdocvar{X}:\coqdocvar{id}) : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{VNUNum}: \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} (\coqdocvar{ANum} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{VNUId}: \coqdockw{\ensuremath{\forall}} \coqdocvar{Y}, \coqdocvar{X} \ensuremath{\not=} \coqdocvar{Y} \ensuremath{\rightarrow} \coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} (\coqdocvar{AId} \coqdocvar{Y})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{VNUPlus}: \coqdockw{\ensuremath{\forall}} \coqdocvar{a1} \coqdocvar{a2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} \coqdocvar{a1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} \coqdocvar{a2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} (\coqdocvar{APlus} \coqdocvar{a1} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{VNUMinus}: \coqdockw{\ensuremath{\forall}} \coqdocvar{a1} \coqdocvar{a2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} \coqdocvar{a1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} \coqdocvar{a2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} (\coqdocvar{AMinus} \coqdocvar{a1} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{VNUMult}: \coqdockw{\ensuremath{\forall}} \coqdocvar{a1} \coqdocvar{a2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} \coqdocvar{a1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} \coqdocvar{a2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{X} (\coqdocvar{AMult} \coqdocvar{a1} \coqdocvar{a2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{aeval\_weakening} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{st} \coqdocvar{a} \coqdocvar{ni},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{i} \coqdocvar{a} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aeval} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{i} \coqdocvar{ni}) \coqdocvar{a} = \coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Using \coqdocinductive{var\_not\_used\_in\_aexp}, formalize and prove a correct verson
    of \coqdocdefinition{subst\_equiv\_property}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (inequiv\_exercise)}

 Prove that an infinite loop is not equivalent to \coqdocvar{SKIP} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{inequiv\_exercise}:\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdocvar{cequiv} (\coqdocvar{WHILE} \coqdocvar{BTrue} \coqdocvar{DO} \coqdocvar{SKIP} \coqdocvar{END}) \coqdocvar{SKIP}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Extended Exercise: Nondeterministic Imp}



 As we have seen (in theorem \coqdoclemma{ceval\_deterministic} in the \coqdoclibrary{Imp}
    chapter), Imp's evaluation relation is deterministic.  However,
    \textit{non}-determinism is an important part of the definition of many
    real programming languages. For example, in many imperative
    languages (such as C and its relatives), the order in which
    function arguments are evaluated is unspecified.  The program
    fragment


      x = 0;;
      f(++x, x)


    might call \coqdocabbreviation{f} with arguments (1, 0) or (1, 1), depending how
    the compiler chooses to order things.  This can be a little
    confusing for programmers, but it gives the compiler writer useful
    freedom.


    In this exercise, we will extend Imp with a simple
    nondeterministic command and study how this change affects
    program equivalence.  The new command has the syntax \coqdocvar{HAVOC} \coqdocdefinition{X},
    where \coqdocdefinition{X} is an identifier. The effect of executing \coqdocvar{HAVOC} \coqdocdefinition{X} is
    to assign an \textit{arbitrary} number to the variable \coqdocdefinition{X},
    nondeterministically. For example, after executing the program:


      HAVOC Y;;
      Z ::= Y * 2


    the value of \coqdocdefinition{Y} can be any number, while the value of \coqdocdefinition{Z} is
    twice that of \coqdocdefinition{Y} (so \coqdocdefinition{Z} is always even). Note that we are not
    saying anything about the \textit{probabilities} of the outcomes -- just
    that there are (infinitely) many different outcomes that can
    possibly happen after executing this nondeterministic code.


    In a sense, a variable on which we do \coqdocvar{HAVOC} roughly corresponds
    to an unitialized variable in a low-level language like C.  After
    the \coqdocvar{HAVOC}, the variable holds a fixed but arbitrary number.  Most
    sources of nondeterminism in language definitions are there
    precisely because programmers don't care which choice is made (and
    so it is good to leave it open to the compiler to choose whichever
    will run faster).


    We call this new language \textit{Himp} (``Imp extended with \coqdocvar{HAVOC}''). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Himp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To formalize Himp, we first add a clause to the definition of
    commands. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{com} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSkip} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CAss} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSeq} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CIf} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CWhile} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CHavoc} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{com}. \coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'SKIP'" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{CSkip}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "X '::=' a" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CAss} \coqdocvar{X} \coqdocvar{a}) (\coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "c1 ;; c2" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CSeq} \coqdocvar{c1} \coqdocvar{c2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'WHILE' b 'DO' c 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CWhile} \coqdocvar{b} \coqdocvar{c}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'IFB' e1 'THEN' e2 'ELSE' e3 'FI'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CIf} \coqdocvar{e1} \coqdocvar{e2} \coqdocvar{e3}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'HAVOC' l" := (\coqdocvar{CHavoc} \coqdocvar{l}) (\coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (himp\_ceval)}

 Now, we must extend the operational semantics. We have provided
   a template for the \coqdocinductive{ceval} relation below, specifying the big-step
   semantics. What rule(s) must be added to the definition of \coqdocinductive{ceval}
   to formalize the behavior of the \coqdocvar{HAVOC} command? \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "c1 '/' st '\symbol{92}\symbol{92}' st'"\coqdoceol
\coqdocindent{9.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ceval} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} : \coqdocvar{state}, \coqdocvar{SKIP} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Ass} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{a1} : \coqdocvar{aexp}) (\coqdocvar{n} : \coqdocvar{nat}) (\coqdocvar{X} : \coqdocvar{id}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1} = \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{X} ::= \coqdocvar{a1}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Seq} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}) (\coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} : \coqdocvar{state}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{c1} ;; \coqdocvar{c2}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfTrue} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} : \coqdocvar{state}) (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfFalse} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} : \coqdocvar{state}) (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileEnd} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{c1} : \coqdocvar{com}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileLoop} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} : \coqdocvar{state}) (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{c1} : \coqdocvar{com}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "c1 '/' st '\symbol{92}\symbol{92}' st'" := (\coqdocvar{ceval} \coqdocvar{c1} \coqdocvar{st} \coqdocvar{st'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As a sanity check, the following claims should be provable for
    your definition: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{havoc\_example1} : (\coqdocvar{HAVOC} \coqdocvar{X}) / \coqdocvar{empty\_state} \symbol{92}\symbol{92} \coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{havoc\_example2} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{SKIP};; \coqdocvar{HAVOC} \coqdocvar{Z}) / \coqdocvar{empty\_state} \symbol{92}\symbol{92} \coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{Z} 42.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Finally, we repeat the definition of command equivalence from above: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{cequiv} (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}) : \coqdockw{Prop} := \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} : \coqdocvar{state},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\leftrightarrow} \coqdocvar{c2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Let's apply this definition to prove some nondeterministic
    programs equivalent / inequivalent. 

\paragraph{Exercise: 3 stars (havoc\_swap)}

 Are the following two programs equivalent? \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pXY} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{HAVOC} \coqdocvar{X};; \coqdocvar{HAVOC} \coqdocvar{Y}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pYX} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{HAVOC} \coqdocvar{Y};; \coqdocvar{HAVOC} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If you think they are equivalent, prove it. If you think they are
    not, prove that. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pXY\_cequiv\_pYX} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} \coqdocvar{pXY} \coqdocvar{pYX} \ensuremath{\lor} \ensuremath{\lnot}\coqdocvar{cequiv} \coqdocvar{pXY} \coqdocvar{pYX}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, optional (havoc\_copy)}

 Are the following two programs equivalent? \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ptwice} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{HAVOC} \coqdocvar{X};; \coqdocvar{HAVOC} \coqdocvar{Y}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pcopy} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{HAVOC} \coqdocvar{X};; \coqdocvar{Y} ::= \coqdocvar{AId} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If you think they are equivalent, then prove it. If you think they
    are not, then prove that.  (Hint: You may find the \coqdoctac{assert} tactic
    useful.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ptwice\_cequiv\_pcopy} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} \coqdocvar{ptwice} \coqdocvar{pcopy} \ensuremath{\lor} \ensuremath{\lnot}\coqdocvar{cequiv} \coqdocvar{ptwice} \coqdocvar{pcopy}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 The definition of program equivalence we are using here has some
    subtle consequences on programs that may loop forever.  What
    \coqdocdefinition{cequiv} says is that the set of possible \textit{terminating} outcomes
    of two equivalent programs is the same. However, in a language
    with nondeterminism, like Himp, some programs always terminate,
    some programs always diverge, and some programs can
    nondeterministically terminate in some runs and diverge in
    others. The final part of the following exercise illustrates this
    phenomenon.


\paragraph{Exercise: 4 stars, advanced (p1\_p2\_term)}

 Consider the following commands: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{p1} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} (\coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0))) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{HAVOC} \coqdocvar{Y};;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{p2} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} (\coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0))) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{SKIP}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Intuitively, \coqdocdefinition{p1} and \coqdocdefinition{p2} have the same termination behavior:
    either they loop forever, or they terminate in the same state they
    started in.  We can capture the termination behavior of \coqdocdefinition{p1} and
    \coqdocdefinition{p2} individually with these lemmas: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{p1\_may\_diverge} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'}, \coqdocvar{st} \coqdocvar{X} \ensuremath{\not=} 0 \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdocvar{p1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{p2\_may\_diverge} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'}, \coqdocvar{st} \coqdocvar{X} \ensuremath{\not=} 0 \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdocvar{p2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced (p1\_p2\_equiv)}

 Use these two lemmas to prove that \coqdocdefinition{p1} and \coqdocdefinition{p2} are actually
    equivalent. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{p1\_p2\_equiv} : \coqdocvar{cequiv} \coqdocvar{p1} \coqdocvar{p2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advancedM (p3\_p4\_inequiv)}

 Prove that the following programs are \textit{not} equivalent.  (Hint:
    What should the value of \coqdocdefinition{Z} be when \coqdocdefinition{p3} terminates?  What about
    \coqdocdefinition{p4}?) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{p3} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= \coqdocvar{ANum} 1;;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} (\coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0))) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{HAVOC} \coqdocvar{X};;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{HAVOC} \coqdocvar{Z}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{p4} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= (\coqdocvar{ANum} 0);;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= (\coqdocvar{ANum} 1).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{p3\_p4\_inequiv} : \ensuremath{\lnot} \coqdocvar{cequiv} \coqdocvar{p3} \coqdocvar{p4}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars, advanced, optional (p5\_p6\_equiv)}

 Prove that the following commands are equivalent.  (Hint: As
    mentioned above, our definition of \coqdocdefinition{cequiv} for Himp only takes
    into account the sets of possible terminating configurations: two
    programs are equivalent if and only if when given a same starting
    state \coqdocvariable{st}, the set of possible terminating states is the same for
    both programs. If \coqdocdefinition{p5} terminates, what should the final state be?
    Conversely, is it always possible to make \coqdocdefinition{p5} terminate?) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{p5} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} (\coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1))) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{HAVOC} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{p6} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{ANum} 1.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{p5\_p6\_equiv} : \coqdocvar{cequiv} \coqdocvar{p5} \coqdocvar{p6}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Himp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Additional Exercises}



\paragraph{Exercise: 4 stars, optional (for\_while\_equiv)}

 This exercise extends the optional \coqdocvar{add\_for\_loop} exercise from
    the \coqdoclibrary{Imp} chapter, where you were asked to extend the language
    of commands with C-style \coqdockw{for} loops.  Prove that the command:


      for (c1 ; b ; c2) \{
          c3
      \}


    is equivalent to:


       c1 ;
       WHILE b DO
         c3 ;
         c2
       END
\begin{coqdoccode}
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (swap\_noninterfering\_assignments)}

 (Hint: You'll need \coqdocaxiom{functional\_extensionality} for this one.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{swap\_noninterfering\_assignments}: \coqdockw{\ensuremath{\forall}} \coqdocvar{l1} \coqdocvar{l2} \coqdocvar{a1} \coqdocvar{a2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l1} \ensuremath{\not=} \coqdocvar{l2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{l1} \coqdocvar{a2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{var\_not\_used\_in\_aexp} \coqdocvar{l2} \coqdocvar{a1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{l1} ::= \coqdocvar{a1};; \coqdocvar{l2} ::= \coqdocvar{a2})\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{l2} ::= \coqdocvar{a2};; \coqdocvar{l1} ::= \coqdocvar{a1}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced, optional (capprox)}

 In this exercise we define an asymmetric variant of program
    equivalence we call \textit{program approximation}. We say that a
    program \coqdocconstructor{c1} \textit{approximates} a program \coqdocconstructor{c2} when, for each of
    the initial states for which \coqdocconstructor{c1} terminates, \coqdocconstructor{c2} also terminates
    and produces the same final state. Formally, program approximation
    is defined as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{capprox} (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}) : \coqdockw{Prop} := \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} : \coqdocvar{state}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow} \coqdocvar{c2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For example, the program \coqdocconstructor{c1} = \coqdocvar{WHILE} \coqdocdefinition{X} \ensuremath{\not=} 1 \coqdocvar{DO} \coqdocdefinition{X} ::= \coqdocdefinition{X} - 1 \coqdocvar{END}
    approximates \coqdocconstructor{c2} = \coqdocdefinition{X} ::= 1, but \coqdocconstructor{c2} does not approximate \coqdocconstructor{c1}
    since \coqdocconstructor{c1} does not terminate when \coqdocdefinition{X} = 0 but \coqdocconstructor{c2} does.  If two
    programs approximate each other in both directions, then they are
    equivalent. 

 Find two programs \coqdocdefinition{c3} and \coqdocdefinition{c4} such that neither approximates
    the other. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{c3} : \coqdocvar{com} . \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{c4} : \coqdocvar{com} . \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{c3\_c4\_different} : \ensuremath{\lnot} \coqdocvar{capprox} \coqdocvar{c3} \coqdocvar{c4} \ensuremath{\land} \ensuremath{\lnot} \coqdocvar{capprox} \coqdocvar{c4} \coqdocvar{c3}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Find a program \coqdocdefinition{cmin} that approximates every other program. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{cmin} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{cmin\_minimal} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c}, \coqdocvar{capprox} \coqdocvar{cmin} \coqdocvar{c}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Finally, find a non-trivial property which is preserved by
    program approximation (when going from left to right). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{zprop} (\coqdocvar{c} : \coqdocvar{com}) : \coqdockw{Prop}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{zprop\_preserving} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{c'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{zprop} \coqdocvar{c} \ensuremath{\rightarrow} \coqdocvar{capprox} \coqdocvar{c} \coqdocvar{c'} \ensuremath{\rightarrow} \coqdocvar{zprop} \coqdocvar{c'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-12-20 10:47:46 -0500 (Tue, 20 Dec 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Hoare}{Library }{Top.Hoare}

\begin{coqdoccode}
\end{coqdoccode}
\section{Hoare: Hoare Logic, Part I}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Bool.Bool}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.EqNat}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In the past couple of chapters, we've begun applying the
    mathematical tools developed in the first part of the course to
    studying the theory of a small programming language, Imp.



\begin{itemize}
\item  We defined a type of \textit{abstract syntax trees} for Imp, together
      with an \textit{evaluation relation} (a partial function on states)
      that specifies the \textit{operational semantics} of programs.


      The language we defined, though small, captures some of the key
      features of full-blown languages like C, C++, and Java,
      including the fundamental notion of mutable state and some
      common control structures.



\item  We proved a number of \textit{metatheoretic properties} -- ``meta'' in
      the sense that they are properties of the language as a whole,
      rather than of particular programs in the language.  These
      included:



\begin{itemize}
\item  determinism of evaluation



\item  equivalence of some different ways of writing down the
          definitions (e.g., functional and relational definitions of
          arithmetic expression evaluation)



\item  guaranteed termination of certain classes of programs



\item  correctness (in the sense of preserving meaning) of a number
          of useful program transformations



\item  behavioral equivalence of programs (in the \coqdoclibrary{Equiv} chapter). 

\end{itemize}

\end{itemize}


    If we stopped here, we would already have something useful: a set
    of tools for defining and discussing programming languages and
    language features that are mathematically precise, flexible, and
    easy to work with, applied to a set of key properties.  All of
    these properties are things that language designers, compiler
    writers, and users might care about knowing.  Indeed, many of them
    are so fundamental to our understanding of the programming
    languages we deal with that we might not consciously recognize
    them as ``theorems.''  But properties that seem intuitively obvious
    can sometimes be quite subtle (sometimes also subtly wrong!).


    We'll return to the theme of metatheoretic properties of whole
    languages later in the book when we discuss \textit{types} and \textit{type
    soundness}.  In this chapter, though, we turn to a different set
    of issues.


    Our goal is to carry out some simple examples of \textit{program
    verification} -- i.e., to use the precise definition of Imp to
    prove formally that particular programs satisfy particular
    specifications of their behavior.  We'll develop a reasoning
    system called \textit{Floyd-Hoare Logic} -- often shortened to just
    \textit{Hoare Logic} -- in which each of the syntactic constructs of Imp
    is equipped with a generic ``proof rule'' that can be used to reason
    compositionally about the correctness of programs involving this
    construct.


    Hoare Logic originated in the 1960s, and it continues to be the
    subject of intensive research right up to the present day.  It
    lies at the core of a multitude of tools that are being used in
    academia and industry to specify and verify real software
    systems. 


    Hoare Logic combines two beautiful ideas: a natural way of
    writing down \textit{specifications} of programs, and a \textit{compositional
    proof technique} for proving that programs are correct with
    respect to such specifications -- where by ``compositional'' we mean
    that the structure of proofs directly mirrors the structure of the
    programs that they are about. 

 This chapter:

\begin{itemize}
\item  A systematic method for reasoning about the correctness of
         particular programs in Imp

\end{itemize}


    Goals:

\begin{itemize}
\item  a natural notation for \textit{program specifications} and

\item  a \textit{compositional} proof technique for program correctness

\end{itemize}


    Plan:

\begin{itemize}
\item  assertions (Hoare Triples)

\item  proof rules

\item  decorated programs

\item  loop invariants

\item  examples 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Assertions}



 To talk about specifications of programs, the first thing we
    need is a way of making \textit{assertions} about properties that hold at
    particular points during a program's execution -- i.e., claims
    about the current state of the memory when execution reaches that
    point.  Formally, an assertion is just a family of propositions
    indexed by a \coqdocdefinition{state}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{Assertion} := \coqdocvar{state} \ensuremath{\rightarrow} \coqdockw{Prop}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional (assertions)}

 Paraphrase the following assertions in English (or your favorite
    natural language). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{ExAssertions}.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{as1} : \coqdocvar{Assertion} := \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 3.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{as2} : \coqdocvar{Assertion} := \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{st} \coqdocvar{Y}.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{as3} : \coqdocvar{Assertion} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 3 \ensuremath{\lor} \coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{st} \coqdocvar{Y}.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{as4} : \coqdocvar{Assertion} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} \ensuremath{\times} \coqdocvar{st} \coqdocvar{Z} \ensuremath{\le} \coqdocvar{st} \coqdocvar{X} \ensuremath{\land}\coqdoceol
\coqdocindent{6.00em}
\ensuremath{\lnot} (((\coqdocvar{S} (\coqdocvar{st} \coqdocvar{Z})) \ensuremath{\times} (\coqdocvar{S} (\coqdocvar{st} \coqdocvar{Z}))) \ensuremath{\le} \coqdocvar{st} \coqdocvar{X}).\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{as5} : \coqdocvar{Assertion} := \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{as6} : \coqdocvar{Assertion} := \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{False}.\coqdoceol
\coqdocnoindent
\coqdockw{End} \coqdocvar{ExAssertions}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 This way of writing assertions can be a little bit heavy,
    for two reasons: (1) every single assertion that we ever write is
    going to begin with \coqdockw{fun} \coqdocvariable{st} \ensuremath{\Rightarrow} ; and (2) this state \coqdocvariable{st} is the
    only one that we ever use to look up variables in assertions (we
    will never need to talk about two different memory states at the
    same time).  For discussing examples informally, we'll adopt some
    simplifying conventions: we'll drop the initial \coqdockw{fun} \coqdocvariable{st} \ensuremath{\Rightarrow}, and
    we'll write just \coqdocdefinition{X} to mean \coqdocvariable{st} \coqdocdefinition{X}.  Thus, instead of writing 

      fun st => (st Z) * (st Z) <= m /\symbol{92}
                \~{} ((S (st Z)) * (S (st Z)) <= m)


    we'll write just


      Z * Z <= m /\symbol{92} \~{}((S Z) * (S Z) <= m).


 This example also illustrates a convention that we'll use
    throughout the Hoare Logic chapters: in informal assertions,
    capital letters like \{X], \coqdocdefinition{Y}, and \coqdocdefinition{Z} are Imp variables, while
    lowercase letters like \coqdocabbreviation{x}, \coqdocabbreviation{y}, \coqdocabbreviation{m}, and \coqdocabbreviation{n} are ordinary Coq
    variables (of type \coqdocdefinition{nat}).  This is why, when translating from
    informal to formal, we replace \coqdocdefinition{X} with \coqdocvariable{st} \coqdocdefinition{X} but leave \coqdocabbreviation{m}
    alone. 

 Given two assertions \coqdocaxiom{P} and \coqdocvariable{Q}, we say that \coqdocaxiom{P} \textit{implies} \coqdocvariable{Q},
    written \coqdocaxiom{P} ->> \coqdocvariable{Q} (in ASCII, \coqdocaxiom{P} ->> \coqdocvariable{Q}), if, whenever \coqdocaxiom{P}
    holds in some state \coqdocvariable{st}, \coqdocvariable{Q} also holds. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{assert\_implies} (\coqdocvar{P} \coqdocvar{Q} : \coqdocvar{Assertion}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st}, \coqdocvar{P} \coqdocvar{st} \ensuremath{\rightarrow} \coqdocvar{Q} \coqdocvar{st}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "P ->> Q" := (\coqdocvar{assert\_implies} \coqdocvar{P} \coqdocvar{Q})\coqdoceol
\coqdocindent{11.00em}
(\coqdoctac{at} \coqdockw{level} 80) : \coqdocvar{hoare\_spec\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Open} \coqdockw{Scope} \coqdocvar{hoare\_spec\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(The \coqdocvar{hoare\_spec\_scope} annotation here tells Coq that this
    notation is not global but is intended to be used in particular
    contexts.  The \coqdockw{Open} \coqdockw{Scope} tells Coq that this file is one such
    context.) 

 We'll also want the ``iff'' variant of implication between
    assertions: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "P <<->> Q" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} ->> \coqdocvar{Q} \ensuremath{\land} \coqdocvar{Q} ->> \coqdocvar{P}) (\coqdoctac{at} \coqdockw{level} 80) : \coqdocvar{hoare\_spec\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Hoare Triples}



 Next, we need a way of making formal claims about the
    behavior of commands. 

 In general, the behavior of a command is to transform one state to
    another, so it is natural to express claims about commands in
    terms of assertions that are true before and after the command
    executes:



\begin{itemize}
\item  ``If command \coqdocconstructor{c} is started in a state satisfying assertion
        \coqdocaxiom{P}, and if \coqdocconstructor{c} eventually terminates in some final state,
        then this final state will satisfy the assertion \coqdocvariable{Q}.''

\end{itemize}


    Such a claim is called a \textit{Hoare Triple}.  The property \coqdocaxiom{P} is
    called the \textit{precondition} of \coqdocconstructor{c}, while \coqdocvariable{Q} is the
    \textit{postcondition}.  Formally: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{hoare\_triple}\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{P}:\coqdocvar{Assertion}) (\coqdocvar{c}:\coqdocvar{com}) (\coqdocvar{Q}:\coqdocvar{Assertion}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{P} \coqdocvar{st}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Q} \coqdocvar{st'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Since we'll be working a lot with Hoare triples, it's useful to
    have a compact notation:


       \footnote{\url{P}} c \footnote{\url{Q}}.
 (The traditional notation is \{\coqdocaxiom{P}\} \coqdocconstructor{c} \{\coqdocvariable{Q}\}, but single braces
    are already used for other things in Coq.)  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "\{\{ P \}\}  c  \{\{ Q \}\}" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{hoare\_triple} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q}) (\coqdoctac{at} \coqdockw{level} 90, \coqdocvar{c} \coqdoctac{at} \coqdocvar{next} \coqdockw{level})\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{hoare\_spec\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional (triples)}

 Paraphrase the following Hoare triples in English.


   1) \footnote{\url{True}} c \footnote{\url{X = 5}}


   2) \footnote{\url{X = m}} c \footnote{\url{X = m + 5)}}


   3) \footnote{\url{X <= Y}} c \footnote{\url{Y <= X}}


   4) \footnote{\url{True}} c \footnote{\url{False}}


   5) \footnote{\url{X = m}}
      c
      \footnote{\url{Y = real_fact m}}    


   6) \footnote{\url{True}}
      c
      \footnote{\url{(Z * Z) <= m /\ ~ (((S Z) * (S Z)) <= m)}}


 \ensuremath{\Box} 

\paragraph{Exercise: 1 star, optional (valid\_triples)}

 Which of the following Hoare triples are \textit{valid} -- i.e., the
    claimed relation between \coqdocaxiom{P}, \coqdocconstructor{c}, and \coqdocvariable{Q} is true?


   1) \footnote{\url{True}} X ::= 5 \footnote{\url{X = 5}}


   2) \footnote{\url{X = 2}} X ::= X + 1 \footnote{\url{X = 3}}


   3) \footnote{\url{True}} X ::= 5; Y ::= 0 \footnote{\url{X = 5}}


   4) \footnote{\url{X = 2 /\ X = 3}} X ::= 5 \footnote{\url{X = 0}}


   5) \footnote{\url{True}} SKIP \footnote{\url{False}}


   6) \footnote{\url{False}} SKIP \footnote{\url{True}}


   7) \footnote{\url{True}} WHILE True DO SKIP END \footnote{\url{False}}


   8) \footnote{\url{X = 0}}
      WHILE X == 0 DO X ::= X + 1 END
      \footnote{\url{X = 1}}


   9) \footnote{\url{X = 1}}
      WHILE X <> 0 DO X ::= X + 1 END
      \footnote{\url{X = 100}}
 \ensuremath{\Box} 

 (Note that we're using informal mathematical notations for
   expressions inside of commands, for readability, rather than their
   formal \coqdocinductive{aexp} and \coqdocinductive{bexp} encodings.  We'll continue doing so
   throughout the chapter.) 


   To get us warmed up for what's coming, here are two simple
   facts about Hoare triples. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_post\_true} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} : \coqdocvar{Assertion}) \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{st}, \coqdocvar{Q} \coqdocvar{st}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{c} \coqdocvar{H}. \coqdoctac{unfold} \coqdocvar{hoare\_triple}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{Heval} \coqdocvar{HP}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_pre\_false} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} : \coqdocvar{Assertion}) \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{st}, \~{}(\coqdocvar{P} \coqdocvar{st})) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{c} \coqdocvar{H}. \coqdoctac{unfold} \coqdocvar{hoare\_triple}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{Heval} \coqdocvar{HP}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{not} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{H} \coqdoctac{in} \coqdocvar{HP}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{HP}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Proof Rules}



 The goal of Hoare logic is to provide a \textit{compositional}
    method for proving the validity of specific Hoare triples.  That
    is, we want the structure of a program's correctness proof to
    mirror the structure of the program itself.  To this end, in the
    sections below, we'll introduce a rule for reasoning about each of
    the different syntactic forms of commands in Imp -- one for
    assignment, one for sequencing, one for conditionals, etc. -- plus
    a couple of ``structural'' rules for gluing things together.  We
    will then be able to prove programs correct using these proof
    rules, without ever unfolding the definition of \coqdocdefinition{hoare\_triple}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Assignment}



 The rule for assignment is the most fundamental of the Hoare logic
    proof rules.  Here's how it works.


    Consider this valid Hoare triple:


       \footnote{\url{ Y = 1 }}  X ::= Y  \footnote{\url{ X = 1 }}


    In English: if we start out in a state where the value of \coqdocdefinition{Y}
    is 1 and we assign \coqdocdefinition{Y} to \coqdocdefinition{X}, then we'll finish in a
    state where \coqdocdefinition{X} is 1.  
    That is, the property of being equal to 1 gets transferred 
    from \coqdocdefinition{Y} to \coqdocdefinition{X}. 


    Similarly, in


       \footnote{\url{ Y + Z = 1 }}  X ::= Y + Z  \footnote{\url{ X = 1 }}


    the same property (being equal to one) gets transferred to
    \coqdocdefinition{X} from the expression \coqdocdefinition{Y} + \coqdocdefinition{Z} on the right-hand side of
    the assignment. 

 More generally, if \coqdocabbreviation{a} is \textit{any} arithmetic expression, then


       \footnote{\url{ a = 1 }}  X ::= a \footnote{\url{ X = 1 }}


    is a valid Hoare triple. 

 This can be made even more general. To conclude that an
    arbitrary property \coqdocvariable{Q} holds after \coqdocdefinition{X} ::= \coqdocabbreviation{a}, we need to assume
    that \coqdocvariable{Q} holds before \coqdocdefinition{X} ::= \coqdocabbreviation{a}, but \textit{with all occurrences of} \coqdocdefinition{X}
    replaced by \coqdocabbreviation{a} in \coqdocvariable{Q}. This leads to the Hoare rule for
    assignment


      \footnote{\url{ Q [X |-> a] }} X ::= a \footnote{\url{ Q }}


    where ``\coqdocvariable{Q} [\coqdocdefinition{X} |-> \coqdocabbreviation{a}]'' is pronounced ``\coqdocvariable{Q} where \coqdocabbreviation{a} is substituted
    for \coqdocdefinition{X}''. 

 For example, these are valid applications of the assignment
    rule:


      \footnote{\url{ (X <= 5) [X |-> X + 1]
         i.e., X + 1 <= 5 }}
      X ::= X + 1
      \footnote{\url{ X <= 5 }}


      \footnote{\url{ (X = 3) [X |-> 3]
         i.e., 3 = 3}}
      X ::= 3
      \footnote{\url{ X = 3 }}


      \footnote{\url{ (0 <= X /\ X <= 5) [X |-> 3]
         i.e., (0 <= 3 /\ 3 <= 5)}}
      X ::= 3
      \footnote{\url{ 0 <= X /\ X <= 5 }}


 To formalize the rule, we must first formalize the idea of
    ``substituting an expression for an Imp variable in an assertion.''
    That is, given a proposition \coqdocaxiom{P}, a variable \coqdocdefinition{X}, and an
    arithmetic expression \coqdocabbreviation{a}, we want to derive another proposition
    \coqdocvariable{P'} that is just the same as \coqdocaxiom{P} except that, wherever \coqdocaxiom{P}
    mentions \coqdocdefinition{X}, \coqdocvariable{P'} should instead mention \coqdocabbreviation{a}.


    Since \coqdocaxiom{P} is an arbitrary Coq proposition, we can't directly
    ``edit'' its text.  Instead, we can achieve the same effect by
    evaluating \coqdocaxiom{P} in an updated state: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{assn\_sub} \coqdocvar{X} \coqdocvar{a} \coqdocvar{P} : \coqdocvar{Assertion} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} (\coqdocvar{st} : \coqdocvar{state}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{P} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "P [ X |-> a ]" := (\coqdocvar{assn\_sub} \coqdocvar{X} \coqdocvar{a} \coqdocvar{P}) (\coqdoctac{at} \coqdockw{level} 10).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
That is, \coqdocaxiom{P} [\coqdocdefinition{X} |-> \coqdocabbreviation{a}] stands for an assertion -- let's call it \coqdocvariable{P'} -- 
    that is just like \coqdocaxiom{P} except that, wherever \coqdocaxiom{P} looks up the 
    variable \coqdocdefinition{X} in the current state, \coqdocvariable{P'} instead uses the value 
    of the expression \coqdocabbreviation{a}. 

 To see how this works, let's calculate what happens with a couple
    of examples.  First, suppose \coqdocvariable{P'} is (\coqdocdefinition{X} \ensuremath{\le} 5) [\coqdocdefinition{X} |-> 3] -- that
    is, more formally, \coqdocvariable{P'} is the Coq expression


    fun st =>
      (fun st' => st' X <= 5)
      (t\_update st X (aeval st (ANum 3))),


    which simplifies to


    fun st =>
      (fun st' => st' X <= 5)
      (t\_update st X 3)


    and further simplifies to


    fun st =>
      ((t\_update st X 3) X) <= 5)


    and finally to


    fun st =>
      (3 <= 5).


    That is, \coqdocvariable{P'} is the assertion that 3 is less than or equal to
    5 (as expected). 

 For a more interesting example, suppose \coqdocvariable{P'} is (\coqdocdefinition{X} \ensuremath{\le} 5) [\coqdocdefinition{X} |->
    \coqdocdefinition{X}+1].  Formally, \coqdocvariable{P'} is the Coq expression


    fun st =>
      (fun st' => st' X <= 5)
      (t\_update st X (aeval st (APlus (AId X) (ANum 1)))),


    which simplifies to


    fun st =>
      (((t\_update st X (aeval st (APlus (AId X) (ANum 1))))) X) <= 5


    and further simplifies to


    fun st =>
      (aeval st (APlus (AId X) (ANum 1))) <= 5.


    That is, \coqdocvariable{P'} is the assertion that \coqdocdefinition{X}+1 is at most 5.


 Now, using the concept of substitution, we can give the precise 
    proof rule for assignment:
\par
\noindent\hrulefill\par
\noindent{} (hoare\_asgn)
      \footnote{\url{Q [X |-> a]}} X ::= a \footnote{\url{Q}}


 We can prove formally that this rule is indeed valid. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_asgn} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Q} \coqdocvar{X} \coqdocvar{a},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{Q} [\coqdocvar{X} |-> \coqdocvar{a}]\}\} (\coqdocvar{X} ::= \coqdocvar{a}) \{\{\coqdocvar{Q}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{hoare\_triple}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Q} \coqdocvar{X} \coqdocvar{a} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{HE} \coqdocvar{HQ}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{HE}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{assn\_sub} \coqdoctac{in} \coqdocvar{HQ}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here's a first formal proof using this rule. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{assn\_sub\_example} :\coqdoceol
\coqdocindent{1.00em}
\{\{(\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 3) [\coqdocvar{X} |-> \coqdocvar{ANum} 3]\}\}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{X} ::= (\coqdocvar{ANum} 3))\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 3\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_asgn}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 starsM (hoare\_asgn\_examples)}

 Translate these informal Hoare triples...


    1) \footnote{\url{ (X <= 5) [X |-> X + 1] }}
       X ::= X + 1
       \footnote{\url{ X <= 5 }}


    2) \footnote{\url{ (0 <= X /\ X <= 5) [X |-> 3] }}
       X ::= 3
       \footnote{\url{ 0 <= X /\ X <= 5 }}


   ...into formal statements (use the names \coqdocvar{assn\_sub\_ex1} 
   and \coqdocvar{assn\_sub\_ex2}) and use \coqdoclemma{hoare\_asgn} to prove them. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, recommendedM (hoare\_asgn\_wrong)}

 The assignment rule looks backward to almost everyone the first
    time they see it.  If it still seems puzzling, it may help
    to think a little about alternative ``forward'' rules.  Here is a
    seemingly natural one:
\par
\noindent\hrulefill\par
\noindent{} (hoare\_asgn\_wrong)
      \footnote{\url{ True }} X ::= a \footnote{\url{ X = a }}


    Give a counterexample showing that this rule is incorrect and 
    argue informally that it is really a counterexample.  (Hint: 
    The rule universally quantifies over the arithmetic expression 
    \coqdocabbreviation{a}, and your counterexample needs to exhibit an \coqdocabbreviation{a} for which 
    the rule doesn't work.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advanced (hoare\_asgn\_fwd)}

 However, by using a \textit{parameter} \coqdocabbreviation{m} (a Coq number) to remember the 
    original value of \coqdocdefinition{X} we can define a Hoare rule for assignment 
    that does, intuitively, ``work forwards'' rather than backwards.
\par
\noindent\hrulefill\par
\noindent{} (hoare\_asgn\_fwd)
       \footnote{\url{fun st => P st /\ st X = m}}
         X ::= a
       \footnote{\url{fun st => P st' /\ st X = aeval st' a }}
       (where st' = t\_update st X m)


    Note that we use the original value of \coqdocdefinition{X} to reconstruct the
    state \coqdocvariable{st'} before the assignment took place. Prove that this rule
    is correct.  (Also note that this rule is more complicated than 
    \coqdoclemma{hoare\_asgn}.)
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_asgn\_fwd} :\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \{\coqdocvar{X} \coqdocvar{Y}: \coqdockw{Type}\} \{\coqdocvar{f} \coqdocvar{g} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{Y}\},\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} (\coqdocvar{x}: \coqdocvar{X}), \coqdocvar{f} \coqdocvar{x} = \coqdocvar{g} \coqdocvar{x}) \ensuremath{\rightarrow}  \coqdocvar{f} = \coqdocvar{g}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{a} \coqdocvar{P},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m}\}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{a}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} \coqdocvar{m}) \coqdoceol
\coqdocindent{6.00em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{aeval} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} \coqdocvar{m}) \coqdocvar{a} \}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, advanced (hoare\_asgn\_fwd\_exists)}

 Another way to define a forward rule for assignment is to
    existentially quantify over the previous value of the assigned
    variable.
\par
\noindent\hrulefill\par
\noindent{} (hoare\_asgn\_fwd\_exists)
      \footnote{\url{fun st => P st}}
        X ::= a
      \footnote{\url{fun st => exists m, P (t_update st X m) /\
                     st X = aeval (t_update st X m) a }}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_asgn\_fwd\_exists} :\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \{\coqdocvar{X} \coqdocvar{Y}: \coqdockw{Type}\} \{\coqdocvar{f} \coqdocvar{g} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{Y}\},\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} (\coqdocvar{x}: \coqdocvar{X}), \coqdocvar{f} \coqdocvar{x} = \coqdocvar{g} \coqdocvar{x}) \ensuremath{\rightarrow}  \coqdocvar{f} = \coqdocvar{g}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{P},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st}\}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{a}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{m}, \coqdocvar{P} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} \coqdocvar{m}) \ensuremath{\land}\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{st} \coqdocvar{X} = \coqdocvar{aeval} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} \coqdocvar{m}) \coqdocvar{a} \}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{functional\_extensionality} \coqdocvar{a} \coqdocvar{P}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Consequence}



 Sometimes the preconditions and postconditions we get from the
    Hoare rules won't quite be the ones we want in the particular
    situation at hand -- they may be logically equivalent but have a
    different syntactic form that fails to unify with the goal we are
    trying to prove, or they actually may be logically weaker (for
    preconditions) or stronger (for postconditions) than what we need.


    For instance, while


      \footnote{\url{(X = 3) [X |-> 3]}} X ::= 3 \footnote{\url{X = 3}},


    follows directly from the assignment rule,


      \footnote{\url{True}} X ::= 3 \footnote{\url{X = 3}}


    does not.  This triple is valid, but it is not an instance of
    \coqdoclemma{hoare\_asgn} because \coqdocinductive{True} and (\coqdocdefinition{X} = 3) [\coqdocdefinition{X} |-> 3] are not
    syntactically equal assertions.  However, they are logically
    \textit{equivalent}, so if one triple is valid, then the other must
    certainly be as well.  We can capture this observation with the
    following rule:


                \footnote{\url{P'}} c \footnote{\url{Q}}
                  P \texttt{-} P'
\par
\noindent\hrulefill\par
\noindent{}   (hoare\_consequence\_pre\_equiv)
                \footnote{\url{P}} c \footnote{\url{Q}}


 Taking this line of thought a bit further, we can see that
    strengthening the precondition or weakening the postcondition of a
    valid triple always produces another valid triple. This
    observation is captured by two \textit{Rules of Consequence}.


                \footnote{\url{P'}} c \footnote{\url{Q}}
                   P ->> P'
\par
\noindent\hrulefill\par
\noindent{}   (hoare\_consequence\_pre)
                \footnote{\url{P}} c \footnote{\url{Q}}


                \footnote{\url{P}} c \footnote{\url{Q'}}
                  Q' ->> Q
\par
\noindent\hrulefill\par
\noindent{}    (hoare\_consequence\_post)
                \footnote{\url{P}} c \footnote{\url{Q}}


 Here are the formal versions: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_consequence\_pre} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{P'} \coqdocvar{Q} : \coqdocvar{Assertion}) \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P'}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} ->> \coqdocvar{P'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{P'} \coqdocvar{Q} \coqdocvar{c} \coqdocvar{Hhoare} \coqdocvar{Himp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{Hc} \coqdocvar{HP}. \coqdoctac{apply} (\coqdocvar{Hhoare} \coqdocvar{st} \coqdocvar{st'}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assumption}. \coqdoctac{apply} \coqdocvar{Himp}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_consequence\_post} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} \coqdocvar{Q'} : \coqdocvar{Assertion}) \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} \coqdocvar{c} \{\{\coqdocvar{Q'}\}\} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Q'} ->> \coqdocvar{Q} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{Q'} \coqdocvar{c} \coqdocvar{Hhoare} \coqdocvar{Himp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{Hc} \coqdocvar{HP}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{Himp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{Hhoare} \coqdocvar{st} \coqdocvar{st'}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assumption}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For example, we can use the first consequence rule like this:


                \footnote{\url{ True }} ->>
                \footnote{\url{ 1 = 1 }}
    X ::= 1
                \footnote{\url{ X = 1 }}


    Or, formally... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{hoare\_asgn\_example1} :\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True}\}\} (\coqdocvar{X} ::= (\coqdocvar{ANum} 1)) \{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 1\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_consequence\_pre}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{with} (\coqdocvar{P'} := (\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 1) [\coqdocvar{X} |-> \coqdocvar{ANum} 1]).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_asgn}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{H}. \coqdoctac{unfold} \coqdocvar{assn\_sub}, \coqdocvar{t\_update}. \coqdoctac{simpl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Finally, for convenience in proofs, we can state a combined
    rule of consequence that allows us to vary both the precondition
    and the postcondition at the same time.


                \footnote{\url{P'}} c \footnote{\url{Q'}}
                   P ->> P'
                   Q' ->> Q
\par
\noindent\hrulefill\par
\noindent{}   (hoare\_consequence)
                \footnote{\url{P}} c \footnote{\url{Q}}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_consequence} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{P'} \coqdocvar{Q} \coqdocvar{Q'} : \coqdocvar{Assertion}) \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P'}\}\} \coqdocvar{c} \{\{\coqdocvar{Q'}\}\} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} ->> \coqdocvar{P'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Q'} ->> \coqdocvar{Q} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{P'} \coqdocvar{Q} \coqdocvar{Q'} \coqdocvar{c} \coqdocvar{Hht} \coqdocvar{HPP'} \coqdocvar{HQ'Q}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_consequence\_pre} \coqdockw{with} (\coqdocvar{P'} := \coqdocvar{P'}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_consequence\_post} \coqdockw{with} (\coqdocvar{Q'} := \coqdocvar{Q'}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assumption}. \coqdoctac{assumption}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Digression: The \texorpdfstring{\protect\coqdoctac{eapply}}{eapply} Tactic}



 This is a good moment to take another look at the \coqdoctac{eapply} tactic,
    which we introduced briefly in the \coqdoclibrary{Auto} chapter.


    We had to write ``\coqdockw{with} (\coqdocvariable{P'} := ...)'' explicitly in the proof of
    \coqdocdefinition{hoare\_asgn\_example1} and \coqdoclemma{hoare\_consequence} above, to make sure
    that all of the metavariables in the premises to the
    \coqdoclemma{hoare\_consequence\_pre} rule would be set to specific
    values.  (Since \coqdocvariable{P'} doesn't appear in the conclusion of
    \coqdoclemma{hoare\_consequence\_pre}, the process of unifying the conclusion
    with the current goal doesn't constrain \coqdocvariable{P'} to a specific
    assertion.)


    This is annoying, both because the assertion is a bit long and
    also because, in \coqdocdefinition{hoare\_asgn\_example1}, the very next thing we are
    going to do -- applying the \coqdoclemma{hoare\_asgn} rule -- will tell us
    exactly what it should be!  We can use \coqdoctac{eapply} instead of \coqdoctac{apply}
    to tell Coq, essentially, ``Be patient: The missing part is going
    to be filled in later in the proof.'' \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{hoare\_asgn\_example1'} :\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True}\}\}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{X} ::= (\coqdocvar{ANum} 1))\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 1\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_asgn}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{H}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In general, \coqdoctac{eapply} \coqdocvariable{H} tactic works just like \coqdoctac{apply} \coqdocvariable{H} except
    that, instead of failing if unifying the goal with the conclusion
    of \coqdocvariable{H} does not determine how to instantiate all of the variables
    appearing in the premises of \coqdocvariable{H}, \coqdoctac{eapply} \coqdocvariable{H} will replace these
    variables with \textit{existential variables} (written ?\coqdocvar{nnn}), which
    function as placeholders for expressions that will be
    determined (by further unification) later in the proof. 

 In order for \coqdockw{Qed} to succeed, all existential variables need to
    be determined by the end of the proof. Otherwise Coq
    will (rightly) refuse to accept the proof. Remember that the Coq
    tactics build proof objects, and proof objects containing
    existential variables are not complete. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{silly1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvar{Q} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} : \coqdocvar{nat}, \coqdocvar{P} \coqdocvar{x} \coqdocvar{y}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} : \coqdocvar{nat}, \coqdocvar{P} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{Q} \coqdocvar{x}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Q} 42.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{HP} \coqdocvar{HQ}. \coqdoctac{eapply} \coqdocvar{HQ}. \coqdoctac{apply} \coqdocvar{HP}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Coq gives a warning after \coqdoctac{apply} \coqdocvar{HP}.  (The warnings look
    different between Coq 8.4 and Coq 8.5.  In 8.4, the warning says
    ``No more subgoals but non-instantiated existential variables.''  In
    8.5, it says ``All the remaining goals are on the shelf,'' meaning
    that we've finished all our top-level proof obligations but along
    the way we've put some aside to be done later, and we have not
    finished those.)  Trying to close the proof with \coqdockw{Qed} gives an
    error. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
An additional constraint is that existential variables cannot be
    instantiated with terms containing ordinary variables that did not
    exist at the time the existential variable was created.  (The
    reason for this technical restriction is that allowing such
    instantiation would lead to inconsistency of Coq's logic.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{silly2} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvar{Q} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{y}, \coqdocvar{P} 42 \coqdocvar{y}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} : \coqdocvar{nat}, \coqdocvar{P} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{Q} \coqdocvar{x}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Q} 42.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{HP} \coqdocvar{HQ}. \coqdoctac{eapply} \coqdocvar{HQ}. \coqdoctac{destruct} \coqdocvar{HP} \coqdockw{as} [\coqdocvar{y} \coqdocvar{HP'}].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Doing \coqdoctac{apply} \coqdocvar{HP'} above fails with the following error:


     Error: Impossible to unify ``?175'' with ``y''.


    In this case there is an easy fix: doing \coqdoctac{destruct} \coqdocvar{HP} \textit{before}
    doing \coqdoctac{eapply} \coqdocvar{HQ}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{silly2\_fixed} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvar{Q} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{y}, \coqdocvar{P} 42 \coqdocvar{y}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} : \coqdocvar{nat}, \coqdocvar{P} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{Q} \coqdocvar{x}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Q} 42.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{HP} \coqdocvar{HQ}. \coqdoctac{destruct} \coqdocvar{HP} \coqdockw{as} [\coqdocvar{y} \coqdocvar{HP'}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{HQ}. \coqdoctac{apply} \coqdocvar{HP'}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{apply} \coqdocvar{HP'} in the last step unifies the existential variable
    in the goal with the variable \coqdocabbreviation{y}.


    Note that the \coqdoctac{assumption} tactic doesn't work in this case, since
    it cannot handle existential variables.  However, Coq also
    provides an \coqdocvar{eassumption} tactic that solves the goal if one of
    the premises matches the goal up to instantiations of existential
    variables. We can use it instead of \coqdoctac{apply} \coqdocvar{HP'} if we like. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{silly2\_eassumption} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvar{Q} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{y}, \coqdocvar{P} 42 \coqdocvar{y}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} : \coqdocvar{nat}, \coqdocvar{P} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{Q} \coqdocvar{x}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Q} 42.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{HP} \coqdocvar{HQ}. \coqdoctac{destruct} \coqdocvar{HP} \coqdockw{as} [\coqdocvar{y} \coqdocvar{HP'}]. \coqdoctac{eapply} \coqdocvar{HQ}. \coqdocvar{eassumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 starsM (hoare\_asgn\_examples\_2)}

 Translate these informal Hoare triples...


       \footnote{\url{ X + 1 <= 5 }}  X ::= X + 1  \footnote{\url{ X <= 5 }}
       \footnote{\url{ 0 <= 3 /\ 3 <= 5 }}  X ::= 3  \footnote{\url{ 0 <= X /\ X <= 5 }}


   ...into formal statements (name them \coqdocvar{assn\_sub\_ex1'} and 
   \coqdocvar{assn\_sub\_ex2'}) and use \coqdoclemma{hoare\_asgn} and \coqdoclemma{hoare\_consequence\_pre} 
   to prove them. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Skip}



 Since \coqdocvar{SKIP} doesn't change the state, it preserves any
    property \coqdocaxiom{P}:
\par
\noindent\hrulefill\par
\noindent{}  (hoare\_skip)
      \footnote{\url{ P }} SKIP \footnote{\url{ P }}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P},\coqdoceol
\coqdocindent{2.50em}
\{\{\coqdocvar{P}\}\} \coqdocvar{SKIP} \{\{\coqdocvar{P}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{H} \coqdocvar{HP}. \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Sequencing}



 More interestingly, if the command \coqdocconstructor{c1} takes any state where
    \coqdocaxiom{P} holds to a state where \coqdocvariable{Q} holds, and if \coqdocconstructor{c2} takes any
    state where \coqdocvariable{Q} holds to one where \coqdocdefinition{R} holds, then doing \coqdocconstructor{c1}
    followed by \coqdocconstructor{c2} will take any state where \coqdocaxiom{P} holds to one
    where \coqdocdefinition{R} holds:


        \footnote{\url{ P }} c1 \footnote{\url{ Q }}
        \footnote{\url{ Q }} c2 \footnote{\url{ R }}
\par
\noindent\hrulefill\par
\noindent{}  (hoare\_seq)
       \footnote{\url{ P }} c1;;c2 \footnote{\url{ R }}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_seq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{2.50em}
\{\{\coqdocvar{Q}\}\} \coqdocvar{c2} \{\{\coqdocvar{R}\}\} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\{\{\coqdocvar{P}\}\} \coqdocvar{c1} \{\{\coqdocvar{Q}\}\} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\{\{\coqdocvar{P}\}\} \coqdocvar{c1};;\coqdocvar{c2} \{\{\coqdocvar{R}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{H1} \coqdocvar{H2} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{H12} \coqdocvar{Pre}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H12}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{H1} \coqdocvar{st'0} \coqdocvar{st'}); \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{H2} \coqdocvar{st} \coqdocvar{st'0}); \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that, in the formal rule \coqdoclemma{hoare\_seq}, the premises are
    given in backwards order (\coqdocconstructor{c2} before \coqdocconstructor{c1}).  This matches the
    natural flow of information in many of the situations where we'll
    use the rule, since the natural way to construct a Hoare-logic
    proof is to begin at the end of the program (with the final
    postcondition) and push postconditions backwards through commands
    until we reach the beginning. 

 Informally, a nice way of displaying a proof using the sequencing
    rule is as a ``decorated program'' where the intermediate assertion
    \coqdocvariable{Q} is written between \coqdocconstructor{c1} and \coqdocconstructor{c2}:


      \footnote{\url{ a = n }}
    X ::= a;;
      \footnote{\url{ X = n }}    <---- decoration for Q
    SKIP
      \footnote{\url{ X = n }}


 Here's an example of a program involving both assignment and
    sequencing. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{hoare\_asgn\_example3} : \coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a} = \coqdocvar{n}\}\}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{X} ::= \coqdocvar{a};; \coqdocvar{SKIP})\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{a} \coqdocvar{n}. \coqdoctac{eapply} \coqdocvar{hoare\_seq}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{hoare\_skip}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}. \coqdoctac{apply} \coqdocvar{hoare\_asgn}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{H}. \coqdoctac{subst}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We typically use \coqdoclemma{hoare\_seq} in conjunction with
    \coqdoclemma{hoare\_consequence\_pre} and the \coqdoctac{eapply} tactic, as in this
    example. 

\paragraph{Exercise: 2 stars, recommended (hoare\_asgn\_example4)}

 Translate this ``decorated program'' into a formal proof:


                   \footnote{\url{ True }} ->>
                   \footnote{\url{ 1 = 1 }}
    X ::= 1;;
                   \footnote{\url{ X = 1 }} ->>
                   \footnote{\url{ X = 1 /\ 2 = 2 }}
    Y ::= 2
                   \footnote{\url{ X = 1 /\ Y = 2 }}


   (Note the use of ``->>'' decorations, each marking a use of 
   \coqdoclemma{hoare\_consequence\_pre}.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{hoare\_asgn\_example4} :\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True}\}\} (\coqdocvar{X} ::= (\coqdocvar{ANum} 1);; \coqdocvar{Y} ::= (\coqdocvar{ANum} 2))\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 1 \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 2\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (swap\_exercise)}

 Write an Imp program \coqdocconstructor{c} that swaps the values of \coqdocdefinition{X} and \coqdocdefinition{Y} and
    show that it satisfies the following specification:


      \footnote{\url{X <= Y}} c \footnote{\url{Y <= X}}


    Your proof should not need to use \coqdoctac{unfold} \coqdocdefinition{hoare\_triple}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{swap\_program} : \coqdocvar{com} \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{swap\_exercise} :\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{st} \coqdocvar{Y}\}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{swap\_program}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\le} \coqdocvar{st} \coqdocvar{X}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 starsM (hoarestate1)}

 Explain why the following proposition can't be proven:


      forall (a : aexp) (n : nat),
         \footnote{\url{fun st => aeval st a = n}}
         (X ::= (ANum 3);; Y ::= a)
         \footnote{\url{fun st => st Y = n}}.
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Conditionals}



 What sort of rule do we want for reasoning about conditional
    commands?  


    Certainly, if the same assertion \coqdocvariable{Q} holds after executing 
    either of the branches, then it holds after the whole conditional.  
    So we might be tempted to write:


              \footnote{\url{P}} c1 \footnote{\url{Q}}
              \footnote{\url{P}} c2 \footnote{\url{Q}}
\par
\noindent\hrulefill\par
\noindent{}
      \footnote{\url{P}} IFB b THEN c1 ELSE c2 \footnote{\url{Q}}


 However, this is rather weak. For example, using this rule,
   we cannot show 


     \footnote{\url{ True }}
     IFB X == 0
     THEN Y ::= 2
     ELSE Y ::= X + 1
     FI
     \footnote{\url{ X <= Y }}


   since the rule tells us nothing about the state in which the
   assignments take place in the ``then'' and ``else'' branches. 

 Fortunately, we can say something more precise.  In the
    ``then'' branch, we know that the boolean expression \coqdocconstructor{b} evaluates to
    \coqdocconstructor{true}, and in the ``else'' branch, we know it evaluates to \coqdocconstructor{false}.
    Making this information available in the premises of the rule gives
    us more information to work with when reasoning about the behavior
    of \coqdocconstructor{c1} and \coqdocconstructor{c2} (i.e., the reasons why they establish the
    postcondition \coqdocvariable{Q}). 

              \footnote{\url{P /\  b}} c1 \footnote{\url{Q}}
              \footnote{\url{P /\ ~b}} c2 \footnote{\url{Q}}
\par
\noindent\hrulefill\par
\noindent{}  (hoare\_if)
      \footnote{\url{P}} IFB b THEN c1 ELSE c2 FI \footnote{\url{Q}}


 To interpret this rule formally, we need to do a little work.
    Strictly speaking, the assertion we've written, \coqdocaxiom{P} \ensuremath{\land} \coqdocconstructor{b}, is the
    conjunction of an assertion and a boolean expression -- i.e., it
    doesn't typecheck.  To fix this, we need a way of formally
    ``lifting'' any bexp \coqdocconstructor{b} to an assertion.  We'll write \coqdocdefinition{bassn} \coqdocconstructor{b} for
    the assertion ``the boolean expression \coqdocconstructor{b} evaluates to \coqdocconstructor{true} (in
    the given state).'' \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{bassn} \coqdocvar{b} : \coqdocvar{Assertion} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} = \coqdocvar{true}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A couple of useful facts about \coqdocdefinition{bassn}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{bexp\_eval\_true} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} = \coqdocvar{true} \ensuremath{\rightarrow} (\coqdocvar{bassn} \coqdocvar{b}) \coqdocvar{st}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{st} \coqdocvar{Hbe}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bassn}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{bexp\_eval\_false} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} = \coqdocvar{false} \ensuremath{\rightarrow} \ensuremath{\lnot} ((\coqdocvar{bassn} \coqdocvar{b}) \coqdocvar{st}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{st} \coqdocvar{Hbe} \coqdocvar{contra}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bassn} \coqdoctac{in} \coqdocvar{contra}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{contra} \coqdoctac{in} \coqdocvar{Hbe}. \coqdoctac{inversion} \coqdocvar{Hbe}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now we can formalize the Hoare proof rule for conditionals
    and prove it correct. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_if} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{b} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st}\}\} \coqdocvar{c1} \{\{\coqdocvar{Q}\}\} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \~{}(\coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st})\}\} \coqdocvar{c2} \{\{\coqdocvar{Q}\}\} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} (\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) \{\{\coqdocvar{Q}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{b} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{HTrue} \coqdocvar{HFalse} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{HE} \coqdocvar{HP}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} (\coqdocvar{HTrue} \coqdocvar{st} \coqdocvar{st'}).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{split}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{6.50em}
\coqdoctac{apply} \coqdocvar{bexp\_eval\_true}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} (\coqdocvar{HFalse} \coqdocvar{st} \coqdocvar{st'}).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{split}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{6.50em}
\coqdoctac{apply} \coqdocvar{bexp\_eval\_false}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Example}



 Here is a formal proof that the program we used to motivate the
    rule satisfies the specification we gave. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{if\_example} :\coqdoceol
\coqdocindent{2.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True}\}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{IFB} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0))\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{THEN} (\coqdocvar{Y} ::= (\coqdocvar{ANum} 2))\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{ELSE} (\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1))\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{FI}\coqdoceol
\coqdocindent{2.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{st} \coqdocvar{Y}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_if}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}. \coqdoctac{apply} \coqdocvar{hoare\_asgn}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{bassn}, \coqdocvar{assn\_sub}, \coqdocvar{t\_update}, \coqdocvar{assert\_implies}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{st} [\coqdocvar{\_} \coqdocvar{H}].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{beq\_nat\_true} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{omega}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}. \coqdoctac{apply} \coqdocvar{hoare\_asgn}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{assn\_sub}, \coqdocvar{t\_update}, \coqdocvar{assert\_implies}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}; \coqdoctac{intros} \coqdocvar{st} \coqdocvar{\_}. \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (if\_minus\_plus)}

 Prove the following hoare triple using \coqdoclemma{hoare\_if}.  Do not
    use \coqdoctac{unfold} \coqdocdefinition{hoare\_triple}.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{if\_minus\_plus} :\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True}\}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{IFB} (\coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y}))\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{THEN} (\coqdocvar{Z} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{X}))\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{ELSE} (\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Z}))\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{FI}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{st} \coqdocvar{Z}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Exercise: One-sided conditionals}



\paragraph{Exercise: 4 starsM (if1\_hoare)}

 In this exercise we consider extending Imp with ``one-sided
    conditionals'' of the form \coqdocvar{IF1} \coqdocconstructor{b} \coqdocvar{THEN} \coqdocconstructor{c} \coqdocvar{FI}. Here \coqdocconstructor{b} is a
    boolean expression, and \coqdocconstructor{c} is a command. If \coqdocconstructor{b} evaluates to
    \coqdocconstructor{true}, then command \coqdocconstructor{c} is evaluated. If \coqdocconstructor{b} evaluates to
    \coqdocconstructor{false}, then \coqdocvar{IF1} \coqdocconstructor{b} \coqdocvar{THEN} \coqdocconstructor{c} \coqdocvar{FI} does nothing.


    We recommend that you do this exercise before the ones that
    follow, as it should help solidify your understanding of the
    material. 

 The first step is to extend the syntax of commands and introduce
    the usual notations.  (We've done this for you.  We use a separate
    module to prevent polluting the global name space.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{If1}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{com} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSkip} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CAss} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSeq} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CIf} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CWhile} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CIf1} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'SKIP'" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{CSkip}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "c1 ;; c2" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CSeq} \coqdocvar{c1} \coqdocvar{c2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "X '::=' a" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CAss} \coqdocvar{X} \coqdocvar{a}) (\coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'WHILE' b 'DO' c 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CWhile} \coqdocvar{b} \coqdocvar{c}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'IFB' e1 'THEN' e2 'ELSE' e3 'FI'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CIf} \coqdocvar{e1} \coqdocvar{e2} \coqdocvar{e3}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'IF1' b 'THEN' c 'FI'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CIf1} \coqdocvar{b} \coqdocvar{c}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next we need to extend the evaluation relation to accommodate
    \coqdocvar{IF1} branches.  This is for you to do... What rule(s) need to be
    added to \coqdocinductive{ceval} to evaluate one-sided conditionals? \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "c1 '/' st '\symbol{92}\symbol{92}' st'" (\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ceval} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} : \coqdocvar{state}, \coqdocvar{SKIP} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Ass} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{a1} : \coqdocvar{aexp}) (\coqdocvar{n} : \coqdocvar{nat}) (\coqdocvar{X} : \coqdocvar{id}),\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1} = \coqdocvar{n} \ensuremath{\rightarrow} (\coqdocvar{X} ::= \coqdocvar{a1}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Seq} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}) (\coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} : \coqdocvar{state}),\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow} \coqdocvar{c2} / \coqdocvar{st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \ensuremath{\rightarrow} (\coqdocvar{c1} ;; \coqdocvar{c2}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfTrue} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} : \coqdocvar{state}) (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}),\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow} (\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfFalse} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} : \coqdocvar{state}) (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}),\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{c2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow} (\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileEnd} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{c1} : \coqdocvar{com}),\coqdoceol
\coqdocindent{8.50em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow} (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileLoop} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} : \coqdocvar{state}) (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{c1} : \coqdocvar{com}),\coqdoceol
\coqdocindent{9.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{9.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{9.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{9.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "c1 '/' st '\symbol{92}\symbol{92}' st'" := (\coqdocvar{ceval} \coqdocvar{c1} \coqdocvar{st} \coqdocvar{st'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now we repeat (verbatim) the definition and notation of Hoare triples. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{hoare\_triple} (\coqdocvar{P}:\coqdocvar{Assertion}) (\coqdocvar{c}:\coqdocvar{com}) (\coqdocvar{Q}:\coqdocvar{Assertion}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{P} \coqdocvar{st}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Q} \coqdocvar{st'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "\{\{ P \}\}  c  \{\{ Q \}\}" := (\coqdocvar{hoare\_triple} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q})\coqdoceol
\coqdocindent{17.00em}
(\coqdoctac{at} \coqdockw{level} 90, \coqdocvar{c} \coqdoctac{at} \coqdocvar{next} \coqdockw{level})\coqdoceol
\coqdocindent{17.00em}
: \coqdocvar{hoare\_spec\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Finally, we (i.e., you) need to state and prove a theorem,
    \coqdocvar{hoare\_if1}, that expresses an appropriate Hoare logic proof rule
    for one-sided conditionals. Try to come up with a rule that is
    both sound and as precise as possible. \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
For full credit, prove formally \coqdoclemma{hoare\_if1\_good} that your rule is
    precise enough to show the following valid Hoare triple:


  \footnote{\url{ X + Y = Z }}
  IF1 Y <> 0 THEN
    X ::= X + Y
  FI
  \footnote{\url{ X = Z }}


 Hint: Your proof of this triple may need to use the other proof
    rules also. Because we're working in a separate module, you'll
    need to copy here the rules you find necessary. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{hoare\_if1\_good} :\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} + \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{Z} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{IF1} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 0)) \coqdocvar{THEN}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{FI}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{st} \coqdocvar{Z} \}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{If1}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Loops}



 Finally, we need a rule for reasoning about while loops. 

 Suppose we have a loop


      WHILE b DO c END


    and we want to find a pre-condition \coqdocaxiom{P} and a post-condition
    \coqdocvariable{Q} such that


      \footnote{\url{P}} WHILE b DO c END \footnote{\url{Q}}


    is a valid triple. 

 First of all, let's think about the case where \coqdocconstructor{b} is false at the
    beginning -- i.e., let's assume that the loop body never executes
    at all.  In this case, the loop behaves like \coqdocvar{SKIP}, so we might
    be tempted to write: 



      \footnote{\url{P}} WHILE b DO c END \footnote{\url{P}}.


 But, as we remarked above for the conditional, we know a
    little more at the end -- not just \coqdocaxiom{P}, but also the fact
    that \coqdocconstructor{b} is false in the current state.  So we can enrich the
    postcondition a little: 

      \footnote{\url{P}} WHILE b DO c END \footnote{\url{P /\ ~b}}


 What about the case where the loop body \textit{does} get executed?
    In order to ensure that \coqdocaxiom{P} holds when the loop finally
    exits, we certainly need to make sure that the command \coqdocconstructor{c}
    guarantees that \coqdocaxiom{P} holds whenever \coqdocconstructor{c} is finished.
    Moreover, since \coqdocaxiom{P} holds at the beginning of the first
    execution of \coqdocconstructor{c}, and since each execution of \coqdocconstructor{c}
    re-establishes \coqdocaxiom{P} when it finishes, we can always assume
    that \coqdocaxiom{P} holds at the beginning of \coqdocconstructor{c}.  This leads us to the
    following rule: 

                   \footnote{\url{P}} c \footnote{\url{P}}
\par
\noindent\hrulefill\par
\noindent{}
        \footnote{\url{P}} WHILE b DO c END \footnote{\url{P /\ ~b}}
 This is almost the rule we want, but again it can be improved a
    little: at the beginning of the loop body, we know not only that
    \coqdocaxiom{P} holds, but also that the guard \coqdocconstructor{b} is true in the current
    state.  This gives us a little more information to use in
    reasoning about \coqdocconstructor{c} (showing that it establishes the invariant by
    the time it finishes).  This gives us the final version of the
    rule:


               \footnote{\url{P /\ b}} c \footnote{\url{P}}
\par
\noindent\hrulefill\par
\noindent{}  (hoare\_while)
        \footnote{\url{P}} WHILE b DO c END \footnote{\url{P /\ ~b}}


    The proposition \coqdocaxiom{P} is called an \textit{invariant} of the loop.
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{hoare\_while} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{b} \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st}\}\} \coqdocvar{c} \{\{\coqdocvar{P}\}\} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} \coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END} \{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \ensuremath{\lnot} (\coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st})\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{b} \coqdocvar{c} \coqdocvar{Hhoare} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{He} \coqdocvar{HP}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) \coqdockw{as} \coqdocvar{wcom} \coqdocvar{eqn}:\coqdocvar{Heqwcom}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{He};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{inversion} \coqdocvar{Heqwcom}); \coqdoctac{subst}; \coqdoctac{clear} \coqdocvar{Heqwcom}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{split}. \coqdoctac{assumption}. \coqdoctac{apply} \coqdocvar{bexp\_eval\_false}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHHe2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} (\coqdocvar{Hhoare} \coqdocvar{st} \coqdocvar{st'}). \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{split}. \coqdoctac{assumption}. \coqdoctac{apply} \coqdocvar{bexp\_eval\_true}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
One subtlety in the terminology is that calling some assertion \coqdocaxiom{P}
    a ``loop invariant'' doesn't just mean that it is preserved by the
    body of the loop in question (i.e., \{\{\coqdocaxiom{P}\}\} \coqdocconstructor{c} \{\{\coqdocaxiom{P}\}\}, where \coqdocconstructor{c} is
    the loop body), but rather that \coqdocaxiom{P} \textit{together with the fact that
    the loop's guard is true} is a sufficient precondition for \coqdocconstructor{c} to
    ensure \coqdocaxiom{P} as a postcondition.


    This is a slightly (but significantly) weaker requirement.  For
    example, if \coqdocaxiom{P} is the assertion \coqdocdefinition{X} = 0, then \coqdocaxiom{P} \textit{is} an
    invariant of the loop


    WHILE X = 2 DO X := 1 END


    although it is clearly \textit{not} preserved by the body of the
    loop. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{while\_example} :\coqdoceol
\coqdocindent{2.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} \ensuremath{\le} 3\}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} (\coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2))\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{DO} \coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1) \coqdocvar{END}\coqdoceol
\coqdocindent{2.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 3\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_post}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_while}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_asgn}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bassn}, \coqdocvar{assn\_sub}, \coqdocvar{assert\_implies}, \coqdocvar{t\_update}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st} [\coqdocvar{H1} \coqdocvar{H2}]. \coqdoctac{apply} \coqdocvar{leb\_complete} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{omega}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bassn}, \coqdocvar{assert\_implies}. \coqdoctac{intros} \coqdocvar{st} [\coqdocvar{Hle} \coqdocvar{Hb}].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hb}. \coqdoctac{destruct} (\coqdocvar{leb} (\coqdocvar{st} \coqdocvar{X}) 2) \coqdocvar{eqn} : \coqdocvar{Heqle}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{exfalso}. \coqdoctac{apply} \coqdocvar{Hb}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{leb\_iff\_conv} \coqdoctac{in} \coqdocvar{Heqle}. \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\end{coqdoccode}
We can use the WHILE rule to prove the following Hoare triple... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{always\_loop\_hoare} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} \coqdocvar{WHILE} \coqdocvar{BTrue} \coqdocvar{DO} \coqdocvar{SKIP} \coqdocvar{END} \{\{\coqdocvar{Q}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_consequence\_pre} \coqdockw{with} (\coqdocvar{P'} := \coqdockw{fun} \coqdocvar{st} : \coqdocvar{state} \ensuremath{\Rightarrow} \coqdocvar{True}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_post}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_while}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{hoare\_post\_true}. \coqdoctac{intros} \coqdocvar{st}. \coqdoctac{apply} \coqdocvar{I}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{intros} \coqdocvar{st} [\coqdocvar{Hinv} \coqdocvar{Hguard}].\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{exfalso}. \coqdoctac{apply} \coqdocvar{Hguard}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{H}. \coqdoctac{constructor}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Of course, this result is not surprising if we remember that
    the definition of \coqdocdefinition{hoare\_triple} asserts that the postcondition
    must hold \textit{only} when the command terminates.  If the command
    doesn't terminate, we can prove anything we like about the
    post-condition. 

 Hoare rules that only talk about terminating commands are
    often said to describe a logic of ``partial'' correctness.  It is
    also possible to give Hoare rules for ``total'' correctness, which
    build in the fact that the commands terminate. However, in this
    course we will only talk about partial correctness. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Exercise: \texorpdfstring{\protect}{REPEAT}\coqdocvar{REPEAT}}



\paragraph{Exercise: 4 stars, advancedM (hoare\_repeat)}

 In this exercise, we'll add a new command to our language of
    commands: \coqdocvar{REPEAT} c \coqdocvar{UNTIL} a \coqdocvar{END}. You will write the
    evaluation rule for \coqdoctac{repeat} and add a new Hoare rule to the
    language for programs involving it.  (You may recall that the
    evaluation rule is given in an example in the \coqdoclibrary{Auto} chapter.
    Try to figure it out yourself here rather than peeking.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{RepeatExercise}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{com} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSkip} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CAsgn} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSeq} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CIf} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CWhile} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CRepeat} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{REPEAT} behaves like \coqdocvar{WHILE}, except that the loop guard is
    checked \textit{after} each execution of the body, with the loop
    repeating as long as the guard stays \textit{false}.  Because of this,
    the body will always execute at least once. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'SKIP'" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{CSkip}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "c1 ;; c2" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CSeq} \coqdocvar{c1} \coqdocvar{c2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "X '::=' a" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CAsgn} \coqdocvar{X} \coqdocvar{a}) (\coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'WHILE' b 'DO' c 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CWhile} \coqdocvar{b} \coqdocvar{c}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'IFB' e1 'THEN' e2 'ELSE' e3 'FI'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CIf} \coqdocvar{e1} \coqdocvar{e2} \coqdocvar{e3}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'REPEAT' e1 'UNTIL' b2 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CRepeat} \coqdocvar{e1} \coqdocvar{b2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Add new rules for \coqdocvar{REPEAT} to \coqdocinductive{ceval} below.  You can use the rules
    for \coqdocvar{WHILE} as a guide, but remember that the body of a \coqdocvar{REPEAT}
    should always execute at least once, and that the loop ends when
    the guard becomes true.  Then update the \coqdocvar{ceval\_cases} tactic to
    handle these added cases.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ceval} : \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{SKIP} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Ass}  : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{a1} \coqdocvar{n} \coqdocvar{X},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1} = \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{X} ::= \coqdocvar{a1}) (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Seq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st'} \coqdocvar{c2} \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{c1} ;; \coqdocvar{c2}) \coqdocvar{st'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c2} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileEnd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b1} \coqdocvar{st} \coqdocvar{c1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileLoop} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} \coqdocvar{b1} \coqdocvar{c1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st'} (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) \coqdocvar{st'{}'}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A couple of definitions from above, copied here so they use the
    new \coqdocinductive{ceval}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "c1 '/' st '\symbol{92}\symbol{92}' st'" := (\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{st'})\coqdoceol
\coqdocindent{16.50em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{hoare\_triple} (\coqdocvar{P}:\coqdocvar{Assertion}) (\coqdocvar{c}:\coqdocvar{com}) (\coqdocvar{Q}:\coqdocvar{Assertion})\coqdoceol
\coqdocindent{12.00em}
: \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'}, (\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}) \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\rightarrow} \coqdocvar{Q} \coqdocvar{st'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "\{\{ P \}\}  c  \{\{ Q \}\}" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{hoare\_triple} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q}) (\coqdoctac{at} \coqdockw{level} 90, \coqdocvar{c} \coqdoctac{at} \coqdocvar{next} \coqdockw{level}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To make sure you've got the evaluation rules for \coqdocvar{REPEAT} right,
    prove that \coqdocdefinition{ex1\_repeat} evaluates correctly. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ex1\_repeat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{REPEAT}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{ANum} 1;;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{UNTIL} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)) \coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ex1\_repeat\_works} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ex1\_repeat} / \coqdocvar{empty\_state} \symbol{92}\symbol{92}\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 1) \coqdocvar{Y} 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now state and prove a theorem, \coqdocvar{hoare\_repeat}, that expresses an
    appropriate proof rule for \coqdoctac{repeat} commands.  Use \coqdoclemma{hoare\_while}
    as a model, and try to make your rule as precise as possible. \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
For full credit, make sure (informally) that your rule can be used
    to prove the following valid Hoare triple:


  \footnote{\url{ X > 0 }}
  REPEAT
    Y ::= X;;
    X ::= X - 1
  UNTIL X = 0 END
  \footnote{\url{ X = 0 /\ Y > 0 }}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{RepeatExercise}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Summary}



 So far, we've introduced Hoare Logic as a tool for reasoning about
    Imp programs.  In the reminder of this chapter we'll explore a
    systematic way to use Hoare Logic to prove properties about
    programs. The rules of Hoare Logic are:
\par
\noindent\hrulefill\par
\noindent{} (hoare\_asgn)
             \footnote{\url{Q [X |-> a]}} X::=a \footnote{\url{Q}}
\par
\noindent\hrulefill\par
\noindent{}  (hoare\_skip)
             \footnote{\url{ P }} SKIP \footnote{\url{ P }}


               \footnote{\url{ P }} c1 \footnote{\url{ Q }}
               \footnote{\url{ Q }} c2 \footnote{\url{ R }}
\par
\noindent\hrulefill\par
\noindent{}  (hoare\_seq)
              \footnote{\url{ P }} c1;;c2 \footnote{\url{ R }}


              \footnote{\url{P /\  b}} c1 \footnote{\url{Q}}
              \footnote{\url{P /\ ~b}} c2 \footnote{\url{Q}}
\par
\noindent\hrulefill\par
\noindent{}  (hoare\_if)
      \footnote{\url{P}} IFB b THEN c1 ELSE c2 FI \footnote{\url{Q}}


               \footnote{\url{P /\ b}} c \footnote{\url{P}}
\par
\noindent\hrulefill\par
\noindent{}  (hoare\_while)
        \footnote{\url{P}} WHILE b DO c END \footnote{\url{P /\ ~b}}


                \footnote{\url{P'}} c \footnote{\url{Q'}}
                   P ->> P'
                   Q' ->> Q
\par
\noindent\hrulefill\par
\noindent{}   (hoare\_consequence)
                \footnote{\url{P}} c \footnote{\url{Q}}


    In the next chapter, we'll see how these rules are used to prove
    that programs satisfy specifications of their behavior. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Additional Exercises}



\paragraph{Exercise: 3 stars (himp\_hoare)}

 In this exercise, we will derive proof rules for the \coqdocvar{HAVOC}
    command, which we studied in the last chapter.


    First, we enclose this work in a separate module, and recall the
    syntax and big-step semantics of Himp commands. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Himp}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{com} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSkip} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CAsgn} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSeq} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CIf} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CWhile} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CHavoc} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{com}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'SKIP'" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{CSkip}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "X '::=' a" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CAsgn} \coqdocvar{X} \coqdocvar{a}) (\coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "c1 ;; c2" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CSeq} \coqdocvar{c1} \coqdocvar{c2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'WHILE' b 'DO' c 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CWhile} \coqdocvar{b} \coqdocvar{c}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'IFB' e1 'THEN' e2 'ELSE' e3 'FI'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CIf} \coqdocvar{e1} \coqdocvar{e2} \coqdocvar{e3}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'HAVOC' X" := (\coqdocvar{CHavoc} \coqdocvar{X}) (\coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "c1 '/' st '\symbol{92}\symbol{92}' st'" (\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ceval} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} : \coqdocvar{state}, \coqdocvar{SKIP} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Ass} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{a1} : \coqdocvar{aexp}) (\coqdocvar{n} : \coqdocvar{nat}) (\coqdocvar{X} : \coqdocvar{id}),\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1} = \coqdocvar{n} \ensuremath{\rightarrow} (\coqdocvar{X} ::= \coqdocvar{a1}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Seq} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}) (\coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} : \coqdocvar{state}),\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow} \coqdocvar{c2} / \coqdocvar{st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \ensuremath{\rightarrow} (\coqdocvar{c1} ;; \coqdocvar{c2}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfTrue} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} : \coqdocvar{state}) (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}),\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow} (\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfFalse} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} : \coqdocvar{state}) (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{c1} \coqdocvar{c2} : \coqdocvar{com}),\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{c2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow} (\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileEnd} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{c1} : \coqdocvar{com}),\coqdoceol
\coqdocindent{8.50em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow} (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileLoop} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} : \coqdocvar{state}) (\coqdocvar{b1} : \coqdocvar{bexp}) (\coqdocvar{c1} : \coqdocvar{com}),\coqdoceol
\coqdocindent{9.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{9.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{9.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{9.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Havoc} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st} : \coqdocvar{state}) (\coqdocvar{X} : \coqdocvar{id}) (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{HAVOC} \coqdocvar{X}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} \coqdocvar{n}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "c1 '/' st '\symbol{92}\symbol{92}' st'" := (\coqdocvar{ceval} \coqdocvar{c1} \coqdocvar{st} \coqdocvar{st'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The definition of Hoare triples is exactly as before. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{hoare\_triple} (\coqdocvar{P}:\coqdocvar{Assertion}) (\coqdocvar{c}:\coqdocvar{com}) (\coqdocvar{Q}:\coqdocvar{Assertion}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'}, \coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\rightarrow} \coqdocvar{Q} \coqdocvar{st'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "\{\{ P \}\}  c  \{\{ Q \}\}" := (\coqdocvar{hoare\_triple} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q})\coqdoceol
\coqdocindent{17.00em}
(\coqdoctac{at} \coqdockw{level} 90, \coqdocvar{c} \coqdoctac{at} \coqdocvar{next} \coqdockw{level})\coqdoceol
\coqdocindent{17.00em}
: \coqdocvar{hoare\_spec\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Complete the Hoare rule for \coqdocvar{HAVOC} commands below by defining
    \coqdocdefinition{havoc\_pre} and prove that the resulting rule is correct. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{havoc\_pre} (\coqdocvar{X} : \coqdocvar{id}) (\coqdocvar{Q} : \coqdocvar{Assertion}) : \coqdocvar{Assertion} \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_havoc} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{Q} : \coqdocvar{Assertion}) (\coqdocvar{X} : \coqdocvar{id}),\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdocvar{havoc\_pre} \coqdocvar{X} \coqdocvar{Q} \}\} \coqdocvar{HAVOC} \coqdocvar{X} \{\{ \coqdocvar{Q} \}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Himp}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2017-02-02 10:32:28 -0500 (Thu, 02 Feb 2017) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Hoare2}{Library }{Top.Hoare2}

\begin{coqdoccode}
\end{coqdoccode}
\section{Hoare2: Hoare Logic, Part II}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Bool.Bool}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.EqNat}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Hoare}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Decorated Programs}



 The beauty of Hoare Logic is that it is \textit{compositional}: the
    structure of proofs exactly follows the structure of programs.
    This suggests that we can record the essential ideas of a proof
    informally (leaving out some low-level calculational details) by
    decorating a program with appropriate assertions on each of its
    commands.  Such a \textit{decorated program} carries with it
    an (informal) proof of its own correctness.


    For example, consider the program: 

    X ::= m;; 
    Z ::= p; 
    WHILE X <> 0 DO 
      Z ::= Z - 1;; 
      X ::= X - 1 
    END


   (Note the \textit{parameters} \coqdocabbreviation{m} and \coqdocvariable{p}, which stand for
   fixed-but-arbitrary numbers.  Formally, they are simply Coq
   variables of type \coqdocdefinition{nat}.)
 One possible specification for this program: 

      \footnote{\url{ True }} 
    X ::= m;; 
    Z ::= p; 
    WHILE X <> 0 DO 
      Z ::= Z - 1;;
      X ::= X - 1 
    END 
      \footnote{\url{ Z = p - m }}
 Finally, here is a decorated version of the program, embodying a
    proof of this specification: 

      \footnote{\url{ True }} ->> 
      \footnote{\url{ m = m }} 
    X ::= m;; 
      \footnote{\url{ X = m }} ->> 
      \footnote{\url{ X = m /\ p = p }} 
    Z ::= p; 
      \footnote{\url{ X = m /\ Z = p }} ->> 
      \footnote{\url{ Z - X = p - m }}
    WHILE X <> 0 DO 
      \footnote{\url{ Z - X = p - m /\ X <> 0 }} ->> 
      \footnote{\url{ (Z - 1) - (X - 1) = p - m }} 
    Z ::= Z - 1;; 
      \footnote{\url{ Z - (X - 1) = p - m }}
    X ::= X - 1 
      \footnote{\url{ Z - X = p - m }} 
    END 
      \footnote{\url{ Z - X = p - m /\ ~ (X <> 0) }} ->> \footnote{\url{ Z = p - m }}


 Concretely, a decorated program consists of the program text
    interleaved with assertions (either a single assertion or possibly
    two assertions separated by an implication).  To check that a
    decorated program represents a valid proof, we check that each
    individual command is \textit{locally consistent} with its nearby
    assertions in the following sense: 


\begin{itemize}
\item  \coqdocvar{SKIP} is locally consistent if its precondition and
      postcondition are the same:


          \footnote{\url{ P }} SKIP \footnote{\url{ P }}

\end{itemize}



\begin{itemize}
\item  The sequential composition of \coqdocconstructor{c1} and \coqdocconstructor{c2} is locally
      consistent (with respect to assertions \coqdocaxiom{P} and \coqdocdefinition{R}) if \coqdocconstructor{c1} is
      locally consistent (with respect to \coqdocaxiom{P} and \coqdocvariable{Q}) and \coqdocconstructor{c2} is
      locally consistent (with respect to \coqdocvariable{Q} and \coqdocdefinition{R}):


          \footnote{\url{ P }} c1;; \footnote{\url{ Q }} c2 \footnote{\url{ R }}

\end{itemize}



\begin{itemize}
\item  An assignment is locally consistent if its precondition is the
      appropriate substitution of its postcondition:


          \footnote{\url{ P [X |-> a] }}
          X ::= a
          \footnote{\url{ P }}

\end{itemize}



\begin{itemize}
\item  A conditional is locally consistent (with respect to assertions
      \coqdocaxiom{P} and \coqdocvariable{Q}) if the assertions at the top of its ``then'' and
      ``else'' branches are exactly \coqdocaxiom{P} \ensuremath{\land} \coqdocconstructor{b} and \coqdocaxiom{P} \ensuremath{\land} \ensuremath{\lnot}\coqdocconstructor{b} and if its
      ``then'' branch is locally consistent (with respect to \coqdocaxiom{P} \ensuremath{\land} \coqdocconstructor{b}
      and \coqdocvariable{Q}) and its ``else'' branch is locally consistent (with
      respect to \coqdocaxiom{P} \ensuremath{\land} \ensuremath{\lnot}\coqdocconstructor{b} and \coqdocvariable{Q}):


          \footnote{\url{ P }}
          IFB b THEN
            \footnote{\url{ P /\ b }}
            c1
            \footnote{\url{ Q }}
          ELSE
            \footnote{\url{ P /\ ~b }}
            c2
            \footnote{\url{ Q }}
          FI
          \footnote{\url{ Q }}

\end{itemize}



\begin{itemize}
\item  A while loop with precondition \coqdocaxiom{P} is locally consistent if its
      postcondition is \coqdocaxiom{P} \ensuremath{\land} \ensuremath{\lnot}\coqdocconstructor{b}, if the pre- and postconditions of
      its body are exactly \coqdocaxiom{P} \ensuremath{\land} \coqdocconstructor{b} and \coqdocaxiom{P}, and if its body is
      locally consistent:


          \footnote{\url{ P }}
          WHILE b DO
            \footnote{\url{ P /\ b }}
            c1
            \footnote{\url{ P }}
          END
          \footnote{\url{ P /\ ~b }}

\end{itemize}



\begin{itemize}
\item  A pair of assertions separated by ->> is locally consistent if
      the first implies the second:


          \footnote{\url{ P }} ->> 
          \footnote{\url{ P' }}


      This corresponds to the application of \coqdoclemma{hoare\_consequence} and
      is the only place in a decorated program where checking whether
      decorations are correct is not fully mechanical and syntactic,
      but rather may involve logical and/or arithmetic reasoning. 
\end{itemize}


 The above essentially describes a procedure for \textit{verifying}
    the correctness of a given proof involves checking that every
    single command is locally consistent with the accompanying
    assertions.  If we are instead interested in \textit{finding} a proof for
    a given specification, we need to discover the right assertions.
    This can be done in an almost mechanical way, with the exception
    of finding loop invariants, which is the subject of the next
    section.  In the remainder of this section we explain in detail
    how to construct decorations for several simple programs that
    don't involve non-trivial loop invariants. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Example: Swapping Using Addition and Subtraction}



 Here is a program that swaps the values of two variables using
    addition and subtraction (instead of by assigning to a temporary
    variable).


       X ::= X + Y;; 
       Y ::= X - Y;; 
       X ::= X - Y


    We can prove using decorations that this program is correct --
    i.e., it always swaps the values of variables \coqdocdefinition{X} and \coqdocdefinition{Y}. 



[ 
    (1)     \{\{ \coqdocdefinition{X} = \coqdocabbreviation{m} \ensuremath{\land} \coqdocdefinition{Y} = \coqdocabbreviation{n} \}\} ->>
    (2)     \{\{ (\coqdocdefinition{X} + \coqdocdefinition{Y}) - ((\coqdocdefinition{X} + \coqdocdefinition{Y}) - \coqdocdefinition{Y}) = \coqdocabbreviation{n} \ensuremath{\land} (\coqdocdefinition{X} + \coqdocdefinition{Y}) - \coqdocdefinition{Y} = \coqdocabbreviation{m} \}\}
           \coqdocdefinition{X} ::= \coqdocdefinition{X} + \coqdocdefinition{Y};;
    (3)     \{\{ \coqdocdefinition{X} - (\coqdocdefinition{X} - \coqdocdefinition{Y}) = \coqdocabbreviation{n} \ensuremath{\land} \coqdocdefinition{X} - \coqdocdefinition{Y} = \coqdocabbreviation{m} \}\}
           \coqdocdefinition{Y} ::= \coqdocdefinition{X} - \coqdocdefinition{Y};;
    (4)     \{\{ \coqdocdefinition{X} - \coqdocdefinition{Y} = \coqdocabbreviation{n} \ensuremath{\land} \coqdocdefinition{Y} = \coqdocabbreviation{m} \}\}
           \coqdocdefinition{X} ::= \coqdocdefinition{X} - \coqdocdefinition{Y}
    (5)     \{\{ \coqdocdefinition{X} = \coqdocabbreviation{n} \ensuremath{\land} \coqdocdefinition{Y} = \coqdocabbreviation{m} \}\}

    \coqdocvar{These} \coqdocvar{decorations} \coqdocvar{can} \coqdocvar{be} \coqdocvar{constructed} \coqdockw{as} \coqdocvar{follows}:
      - \coqdocvar{We} \coqdocvar{begin} \coqdockw{with} \coqdocvar{the} \coqdocvar{undecorated} \coqdocdefinition{program} (\coqdocvar{the} \coqdocvar{unnumbered} \coqdocvar{lines}).
      - \coqdocvar{We} \coqdocdefinition{add} \coqdocvar{the} \coqdocvar{specification} -- \coqdocvar{i.e}., \coqdocvar{the} \coqdocvar{outer} \coqdocvar{precondition} (1)
        \coqdocinductive{and} \coqdocvar{postcondition} (5). \coqdocdefinition{In} \coqdocvar{the} \coqdocvar{precondition} \coqdocvar{we} \coqdocvar{use} \coqdocvar{parameters}
        [\coqdocabbreviation{m}] \coqdocinductive{and} [\coqdocabbreviation{n}] \coqdocvar{to} \coqdocvar{remember} \coqdocvar{the} \coqdocvar{initial} \coqdocvar{values} \coqdocvar{of} \coqdocvar{variables} [\coqdocdefinition{X}]
        \coqdocinductive{and} [\coqdocdefinition{Y}], \coqdocvar{so} \coqdocvar{that} \coqdocvar{we} \coqdocvar{can} \coqdocvar{refer} \coqdocvar{to} \coqdocvar{them} \coqdoctac{in} \coqdocvar{the}
        \coqdocvar{postcondition} (5).
      - \coqdocvar{We} \coqdocvar{work} \coqdocvar{backwards} \coqdocvar{mechanically}, \coqdocvar{starting} \coqdocvar{from} (5) \coqdocinductive{and}
        \coqdocvar{proceeding} \coqdoctac{until} \coqdocvar{we} \coqdocvar{get} \coqdocvar{to} (2). \coqdocvar{At} \coqdocvar{each} \coqdocinductive{step}, \coqdocvar{we} \coqdocvar{obtain} \coqdocvar{the}
        \coqdocvar{precondition} \coqdocvar{of} \coqdocvar{the} \coqdocvar{assignment} \coqdocvar{from} \coqdocvar{its} \coqdocvar{postcondition} \coqdoctac{by}
        \coqdocvar{substituting} \coqdocvar{the} \coqdocdefinition{assigned} \coqdocvar{variable} \coqdockw{with} \coqdocvar{the} \coqdoctac{right}-\coqdocvar{hand}-\coqdocvar{side} \coqdocvar{of}
        \coqdocvar{the} \coqdocvar{assignment}. \coqdocvar{For} \coqdocvar{instance}, \coqdocvar{we} \coqdocvar{obtain} (4) \coqdoctac{by} \coqdocvar{substituting}
        [\coqdocdefinition{X}] \coqdockw{with} [\coqdocdefinition{X} - \coqdocdefinition{Y}] \coqdoctac{in} (5), \coqdocinductive{and} (3) \coqdoctac{by} \coqdocvar{substituting} [\coqdocdefinition{Y}] \coqdockw{with} [\coqdocdefinition{X} -
        \coqdocdefinition{Y}] \coqdoctac{in} (4).
      - \coqdocvar{Finally}, \coqdocvar{we} \coqdocvar{verify} \coqdocvar{that} (1) \coqdocvar{logically} \coqdocvar{implies} (2) -- \coqdocvar{i.e}.,
        \coqdocvar{that} \coqdocvar{the} \coqdocinductive{step} \coqdocvar{from} (1) \coqdocvar{to} (2) \coqdocvar{is} \coqdocabbreviation{a} \coqdocvar{valid} \coqdocvar{use} \coqdocvar{of} \coqdocvar{the} \coqdocvar{law} \coqdocvar{of}
        \coqdocvar{consequence}. \coqdocvar{For} \coqdocvar{this} \coqdocvar{we} \coqdocvar{substitute} [\coqdocdefinition{X}] \coqdoctac{by} [\coqdocabbreviation{m}] \coqdocinductive{and} [\coqdocdefinition{Y}] \coqdoctac{by} [\coqdocabbreviation{n}]
        \coqdocinductive{and} \coqdocvar{calculate} \coqdockw{as} \coqdocvar{follows}:

            (\coqdocabbreviation{m} + \coqdocabbreviation{n}) - ((\coqdocabbreviation{m} + \coqdocabbreviation{n}) - \coqdocabbreviation{n}) = \coqdocabbreviation{n} \ensuremath{\land} (\coqdocabbreviation{m} + \coqdocabbreviation{n}) - \coqdocabbreviation{n} = \coqdocabbreviation{m} 
            (\coqdocabbreviation{m} + \coqdocabbreviation{n}) - \coqdocabbreviation{m} = \coqdocabbreviation{n} \ensuremath{\land} \coqdocabbreviation{m} = \coqdocabbreviation{m} 
            \coqdocabbreviation{n} = \coqdocabbreviation{n} \ensuremath{\land} \coqdocabbreviation{m} = \coqdocabbreviation{m}

    \coqdocvar{Note} \coqdocvar{that}, \coqdocvar{since} \coqdocvar{we} \coqdocvar{are} \coqdocvar{working} \coqdockw{with} \coqdocvar{natural} \coqdocvar{numbers} \coqdocvar{rather} \coqdocvar{than}
    \coqdocvar{fixed}-\coqdocvar{width} \coqdocvar{machine} \coqdocvar{integers}, \coqdocvar{we} \coqdocvar{don't} \coqdocvar{need} \coqdocvar{to} \coqdocvar{worry} \coqdocvar{about} \coqdocvar{the}
    \coqdocvar{possibility} \coqdocvar{of} \coqdocvar{arithmetic} \coqdocvar{overflow} \coqdocvar{anywhere} \coqdoctac{in} \coqdocvar{this} \coqdocvar{argument}.
    \coqdocvar{This} \coqdocvar{makes} \coqdocvar{life} \coqdocvar{quite} \coqdocabbreviation{a} \coqdocvar{bit} \coqdocvar{simpler}! \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Example: Simple Conditionals}



 Here is a simple decorated program using conditionals:


      (1)     \footnote{\url{True}}
            IFB X <= Y THEN
      (2)       \footnote{\url{True /\ X <= Y}} ->>
      (3)       \footnote{\url{(Y - X) + X = Y \/ (Y - X) + Y = X}}
              Z ::= Y - X
      (4)       \footnote{\url{Z + X = Y \/ Z + Y = X}}
            ELSE
      (5)       \footnote{\url{True /\ ~(X <= Y) }} ->>
      (6)       \footnote{\url{(X - Y) + X = Y \/ (X - Y) + Y = X}}
              Z ::= X - Y
      (7)       \footnote{\url{Z + X = Y \/ Z + Y = X}}
            FI
      (8)     \footnote{\url{Z + X = Y \/ Z + Y = X}}


These decorations were constructed as follows:

\begin{itemize}
\item  We start with the outer precondition (1) and postcondition (8).

\item  We follow the format dictated by the \coqdoclemma{hoare\_if} rule and copy the
    postcondition (8) to (4) and (7). We conjoin the precondition (1)
    with the guard of the conditional to obtain (2). We conjoin (1)
    with the negated guard of the conditional to obtain (5).

\item  In order to use the assignment rule and obtain (3), we substitute
    \coqdocdefinition{Z} by \coqdocdefinition{Y} - \coqdocdefinition{X} in (4). To obtain (6) we substitute \coqdocdefinition{Z} by \coqdocdefinition{X} - \coqdocdefinition{Y}
    in (7).

\item  Finally, we verify that (2) implies (3) and (5) implies (6). Both
    of these implications crucially depend on the ordering of \coqdocdefinition{X} and
    \coqdocdefinition{Y} obtained from the guard. For instance, knowing that \coqdocdefinition{X} \ensuremath{\le} \coqdocdefinition{Y}
    ensures that subtracting \coqdocdefinition{X} from \coqdocdefinition{Y} and then adding back \coqdocdefinition{X}
    produces \coqdocdefinition{Y}, as required by the first disjunct of (3). Similarly,
    knowing that \ensuremath{\lnot} (\coqdocdefinition{X} \ensuremath{\le} \coqdocdefinition{Y}) ensures that subtracting \coqdocdefinition{Y} from \coqdocdefinition{X}
    and then adding back \coqdocdefinition{Y} produces \coqdocdefinition{X}, as needed by the second
    disjunct of (6). Note that \coqdocabbreviation{n} - \coqdocabbreviation{m} + \coqdocabbreviation{m} = \coqdocabbreviation{n} does \textit{not} hold for
    arbitrary natural numbers \coqdocabbreviation{n} and \coqdocabbreviation{m} (for example, 3 - 5 + 5 =
    5). 
\end{itemize}


\paragraph{Exercise: 2 starsM (if\_minus\_plus\_reloaded)}

 Fill in valid decorations for the following program:


       \footnote{\url{ True }}
      IFB X <= Y THEN
          \footnote{\url{                         }} ->>
          \footnote{\url{                         }}
        Z ::= Y - X
          \footnote{\url{                         }}
      ELSE
          \footnote{\url{                         }} ->>
          \footnote{\url{                         }}
        Y ::= X + Z
          \footnote{\url{                         }}
      FI
        \footnote{\url{ Y = X + Z }}
 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Example: Reduce to Zero}



 Here is a \coqdocvar{WHILE} loop that is so simple it needs no
    invariant (i.e., the invariant \coqdocinductive{True} will do the job).


        (1)      \footnote{\url{ True }}
               WHILE X <> 0 DO
        (2)        \footnote{\url{ True /\ X <> 0 }} ->>
        (3)        \footnote{\url{ True }}
                 X ::= X - 1
        (4)        \footnote{\url{ True }}
               END
        (5)      \footnote{\url{ True /\ X = 0 }} ->>
        (6)      \footnote{\url{ X = 0 }}


The decorations can be constructed as follows:

\begin{itemize}
\item  Start with the outer precondition (1) and postcondition (6).

\item  Following the format dictated by the \coqdoclemma{hoare\_while} rule, we
    copy (1) to (4). We conjoin (1) with the guard to obtain (2) and
    with the negation of the guard to obtain (5). Note that, because
    the outer postcondition (6) does not syntactically match (5), we
    need a trivial use of the consequence rule from (5) to (6).

\item  Assertion (3) is the same as (4), because \coqdocdefinition{X} does not appear in
    4, so the substitution in the assignment rule is trivial.

\item  Finally, the implication between (2) and (3) is also trivial. 
\end{itemize}


 From this informal proof, it is easy to read off a formal proof
    using the Coq versions of the Hoare rules.  Note that we do \textit{not}
    unfold the definition of \coqdocdefinition{hoare\_triple} anywhere in this proof --
    the idea is to use the Hoare rules as a ``self-contained'' logic for
    reasoning about programs. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{reduce\_to\_zero'} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0)) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{reduce\_to\_zero\_correct'} :\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True}\}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{reduce\_to\_zero'}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 0\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{reduce\_to\_zero'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_post}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{hoare\_while}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}. \coqdoctac{apply} \coqdocvar{hoare\_asgn}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st} [\coqdocvar{HT} \coqdocvar{Hbp}]. \coqdoctac{unfold} \coqdocvar{assn\_sub}. \coqdoctac{apply} \coqdocvar{I}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st} [\coqdocvar{Inv} \coqdocvar{GuardFalse}].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{bassn} \coqdoctac{in} \coqdocvar{GuardFalse}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{GuardFalse}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{not\_true\_iff\_false} \coqdoctac{in} \coqdocvar{GuardFalse}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{negb\_false\_iff} \coqdoctac{in} \coqdocvar{GuardFalse}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{beq\_nat\_true} \coqdoctac{in} \coqdocvar{GuardFalse}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{GuardFalse}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Example: Division}



 The following Imp program calculates the integer quotient and
    remainder of two numbers \coqdocabbreviation{m} and \coqdocabbreviation{n} that are arbitrary constants
    in the program.


       X ::= m;;
       Y ::= 0;;
       WHILE n <= X DO
         X ::= X - n;;
         Y ::= Y + 1
       END;


    In we replace \coqdocabbreviation{m} and \coqdocabbreviation{n} by concrete numbers and execute the
    program, it will terminate with the variable \coqdocdefinition{X} set to the
    remainder when \coqdocabbreviation{m} is divided by \coqdocabbreviation{n} and \coqdocdefinition{Y} set to the
    quotient. 

 In order to give a specification to this program we need to
    remember that dividing \coqdocabbreviation{m} by \coqdocabbreviation{n} produces a reminder \coqdocdefinition{X} and a
    quotient \coqdocdefinition{Y} such that \coqdocabbreviation{n} \ensuremath{\times} \coqdocdefinition{Y} + \coqdocdefinition{X} = \coqdocabbreviation{m} \ensuremath{\land} \coqdocdefinition{X} < \coqdocabbreviation{n}.


    It turns out that we get lucky with this program and don't have to
    think very hard about the loop invariant: the invariant is just
    the first conjunct \coqdocabbreviation{n} \ensuremath{\times} \coqdocdefinition{Y} + \coqdocdefinition{X} = \coqdocabbreviation{m}, and we can use this to
    decorate the program.


      (1)    \footnote{\url{ True }} ->>
      (2)    \footnote{\url{ n * 0 + m = m }}
           X ::= m;;
      (3)    \footnote{\url{ n * 0 + X = m }}
           Y ::= 0;;
      (4)    \footnote{\url{ n * Y + X = m }}
           WHILE n <= X DO
      (5)      \footnote{\url{ n * Y + X = m /\ n <= X }} ->>
      (6)      \footnote{\url{ n * (Y + 1) + (X - n) = m }}
             X ::= X - n;;
      (7)      \footnote{\url{ n * (Y + 1) + X = m }}
             Y ::= Y + 1
      (8)      \footnote{\url{ n * Y + X = m }}
           END
      (9)    \footnote{\url{ n * Y + X = m /\ X < n }}


    Assertions (4), (5), (8), and (9) are derived mechanically from
    the invariant and the loop's guard.  Assertions (8), (7), and (6)
    are derived using the assignment rule going backwards from (8)
    to (6).  Assertions (4), (3), and (2) are again backwards
    applications of the assignment rule.


    Now that we've decorated the program it only remains to check that
    the two uses of the consequence rule are correct -- i.e., that (1)
    implies (2) and that (5) implies (6).  This is indeed the case, so
    we have a valid decorated program. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Finding Loop Invariants}



 Once the outermost precondition and postcondition are
    chosen, the only creative part in verifying programs using Hoare
    Logic is finding the right loop invariants.  The reason this is
    difficult is the same as the reason that inductive mathematical
    proofs are: strengthening the loop invariant (or the induction
    hypothesis) means that you have a stronger assumption to work with
    when trying to establish the postcondition of the loop body (or
    complete the induction step of the proof), but it also means that
    the loop body's postcondition (or the statement being proved
    inductively) is stronger and thus harder to prove!


    This section explains how to approach the challenge of finding loop
    invariants through a series of examples and exercises. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Example: Slow Subtraction}



 The following program subtracts the value of \coqdocdefinition{X} from the value of
    \coqdocdefinition{Y} by repeatedly decrementing both \coqdocdefinition{X} and \coqdocdefinition{Y}.  We want to verify its
    correctness with respect to the following specification:


             \footnote{\url{ X = m /\ Y = n }}
           WHILE X <> 0 DO
             Y ::= Y - 1;;
             X ::= X - 1
           END
             \footnote{\url{ Y = n - m }}


    To verify this program, we need to find an invariant \coqdocconstructor{I} for the
    loop.  As a first step we can leave \coqdocconstructor{I} as an unknown and build a
    \textit{skeleton} for the proof by applying (backward) the rules for local
    consistency.  This process leads to the following skeleton:


        (1)      \footnote{\url{ X = m /\ Y = n }}  ->>             (a)
        (2)      \footnote{\url{ I }}
               WHILE X <> 0 DO
        (3)        \footnote{\url{ I /\ X <> 0 }}  ->>              (c)
        (4)        \footnote{\url{ I [X |-> X-1] [Y |-> Y-1] }}
                 Y ::= Y - 1;;
        (5)        \footnote{\url{ I [X |-> X-1] }}
                 X ::= X - 1
        (6)        \footnote{\url{ I }}
               END
        (7)      \footnote{\url{ I /\ ~ (X <> 0) }}  ->>            (b)
        (8)      \footnote{\url{ Y = n - m }}


    By examining this skeleton, we can see that any valid \coqdocconstructor{I} will
    have to respect three conditions:

\begin{itemize}
\item  (a) it must be weak enough to be implied by the loop's
      precondition, i.e., (1) must imply (2);

\item  (b) it must be strong enough to imply the program's postcondition,
      i.e., (7) must imply (8);

\item  (c) it must be preserved by one iteration of the loop, i.e., (3)
      must imply (4). 
\end{itemize}


 These conditions are actually independent of the particular
    program and specification we are considering. Indeed, every loop
    invariant has to satisfy them. One way to find an invariant that
    simultaneously satisfies these three conditions is by using an
    iterative process: start with a ``candidate'' invariant (e.g., a
    guess or a heuristic choice) and check the three conditions above;
    if any of the checks fails, try to use the information that we get
    from the failure to produce another -- hopefully better -- candidate
    invariant, and repeat the process.


    For instance, in the reduce-to-zero example above, we saw that,
    for a very simple loop, choosing \coqdocinductive{True} as an invariant did the
    job.  So let's try instantiating \coqdocconstructor{I} with \coqdocinductive{True} in the skeleton 
    above see what we get...


        (1)      \footnote{\url{ X = m /\ Y = n }} ->>       (a - OK)
        (2)      \footnote{\url{ True }}
               WHILE X <> 0 DO
        (3)        \footnote{\url{ True /\ X <> 0 }}  ->>    (c - OK)
        (4)        \footnote{\url{ True }}
                 Y ::= Y - 1;;
        (5)        \footnote{\url{ True }}
                 X ::= X - 1
        (6)        \footnote{\url{ True }}
               END
        (7)      \footnote{\url{ True /\ X = 0 }}  ->>       (b - WRONG!)
        (8)      \footnote{\url{ Y = n - m }}


    While conditions (a) and (c) are trivially satisfied,
    condition (b) is wrong, i.e., it is not the case that (7) \coqdocinductive{True} \ensuremath{\land}
    \coqdocdefinition{X} = 0 implies (8) \coqdocdefinition{Y} = \coqdocabbreviation{n} - \coqdocabbreviation{m}.  In fact, the two assertions are
    completely unrelated, so it is very easy to find a counterexample 
    to the implication (say, \coqdocdefinition{Y} = \coqdocdefinition{X} = \coqdocabbreviation{m} = 0 and \coqdocabbreviation{n} = 1).


    If we want (b) to hold, we need to strengthen the invariant so
    that it implies the postcondition (8).  One simple way to do
    this is to let the invariant \textit{be} the postcondition.  So let's
    return to our skeleton, instantiate \coqdocconstructor{I} with \coqdocdefinition{Y} = \coqdocabbreviation{n} - \coqdocabbreviation{m}, and
    check conditions (a) to (c) again.


    (1)      \footnote{\url{ X = m /\ Y = n }}  ->>          (a - WRONG!)
    (2)      \footnote{\url{ Y = n - m }}
           WHILE X <> 0 DO
    (3)        \footnote{\url{ Y = n - m /\ X <> 0 }}  ->>   (c - WRONG!)
    (4)        \footnote{\url{ Y - 1 = n - m }}
             Y ::= Y - 1;;
    (5)        \footnote{\url{ Y = n - m }}
             X ::= X - 1
    (6)        \footnote{\url{ Y = n - m }}
           END
    (7)      \footnote{\url{ Y = n - m /\ X = 0 }}  ->>      (b - OK)
    (8)      \footnote{\url{ Y = n - m }}


    This time, condition (b) holds trivially, but (a) and (c) are
    broken. Condition (a) requires that (1) \coqdocdefinition{X} = \coqdocabbreviation{m} \ensuremath{\land} \coqdocdefinition{Y} = \coqdocabbreviation{n}
    implies (2) \coqdocdefinition{Y} = \coqdocabbreviation{n} - \coqdocabbreviation{m}.  If we substitute \coqdocdefinition{Y} by \coqdocabbreviation{n} we have to
    show that \coqdocabbreviation{n} = \coqdocabbreviation{n} - \coqdocabbreviation{m} for arbitrary \coqdocabbreviation{m} and \coqdocabbreviation{n}, which is not 
    the case (for instance, when \coqdocabbreviation{m} = \coqdocabbreviation{n} = 1).  Condition (c) requires 
    that \coqdocabbreviation{n} - \coqdocabbreviation{m} - 1 = \coqdocabbreviation{n} - \coqdocabbreviation{m}, which fails, for instance, for \coqdocabbreviation{n} = 1 
    and \coqdocabbreviation{m} = 0. So, although \coqdocdefinition{Y} = \coqdocabbreviation{n} - \coqdocabbreviation{m} holds at the end of the loop, 
    it does not hold from the start, and it doesn't hold on each 
    iteration; it is not a correct invariant.


    This failure is not very surprising: the variable \coqdocdefinition{Y} changes
    during the loop, while \coqdocabbreviation{m} and \coqdocabbreviation{n} are constant, so the assertion
    we chose didn't have much chance of being an invariant!


    To do better, we need to generalize (8) to some statement that is
    equivalent to (8) when \coqdocdefinition{X} is 0, since this will be the case
    when the loop terminates, and that ``fills the gap'' in some
    appropriate way when \coqdocdefinition{X} is nonzero.  Looking at how the loop
    works, we can observe that \coqdocdefinition{X} and \coqdocdefinition{Y} are decremented together
    until \coqdocdefinition{X} reaches 0.  So, if \coqdocdefinition{X} = 2 and \coqdocdefinition{Y} = 5 initially,
    after one iteration of the loop we obtain \coqdocdefinition{X} = 1 and \coqdocdefinition{Y} = 4;
    after two iterations \coqdocdefinition{X} = 0 and \coqdocdefinition{Y} = 3; and then the loop stops.
    Notice that the difference between \coqdocdefinition{Y} and \coqdocdefinition{X} stays constant
    between iterations: initially, \coqdocdefinition{Y} = \coqdocabbreviation{n} and \coqdocdefinition{X} = \coqdocabbreviation{m}, and the
    difference is always \coqdocabbreviation{n} - \coqdocabbreviation{m}.  So let's try instantiating \coqdocconstructor{I} in
    the skeleton above with \coqdocdefinition{Y} - \coqdocdefinition{X} = \coqdocabbreviation{n} - \coqdocabbreviation{m}.


    (1)      \footnote{\url{ X = m /\ Y = n }}  ->>               (a - OK)
    (2)      \footnote{\url{ Y - X = n - m }}
           WHILE X <> 0 DO
    (3)        \footnote{\url{ Y - X = n - m /\ X <> 0 }}  ->>    (c - OK)
    (4)        \footnote{\url{ (Y - 1) - (X - 1) = n - m }}
             Y ::= Y - 1;;
    (5)        \footnote{\url{ Y - (X - 1) = n - m }}
             X ::= X - 1
    (6)        \footnote{\url{ Y - X = n - m }}
           END
    (7)      \footnote{\url{ Y - X = n - m /\ X = 0 }}  ->>       (b - OK)
    (8)      \footnote{\url{ Y = n - m }}


    Success!  Conditions (a), (b) and (c) all hold now.  (To
    verify (c), we need to check that, under the assumption that \coqdocdefinition{X} \ensuremath{\not=}
    0, we have \coqdocdefinition{Y} - \coqdocdefinition{X} = (\coqdocdefinition{Y} - 1) - (\coqdocdefinition{X} - 1); this holds for all
    natural numbers \coqdocdefinition{X} and \coqdocdefinition{Y}.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Exercise: Slow Assignment}



\paragraph{Exercise: 2 starsM (slow\_assignment)}

 A roundabout way of assigning a number currently stored in \coqdocdefinition{X} to
    the variable \coqdocdefinition{Y} is to start \coqdocdefinition{Y} at 0, then decrement \coqdocdefinition{X} until
    it hits 0, incrementing \coqdocdefinition{Y} at each step. Here is a program that
    implements this idea:


        \footnote{\url{ X = m }}
      Y ::= 0;;
      WHILE X <> 0 DO
        X ::= X - 1;;
        Y ::= Y + 1
      END
        \footnote{\url{ Y = m }}


    Write an informal decorated program showing that this procedure 
    is correct. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Exercise: Slow Addition}



\paragraph{Exercise: 3 stars, optional (add\_slowly\_decoration)}

 The following program adds the variable X into the variable Z
    by repeatedly decrementing X and incrementing Z.


      WHILE X <> 0 DO
         Z ::= Z + 1;;
         X ::= X - 1
      END


    Following the pattern of the \coqdocdefinition{subtract\_slowly} example above, pick
    a precondition and postcondition that give an appropriate
    specification of \coqdocvar{add\_slowly}; then (informally) decorate the
    program accordingly. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Example: Parity}



 Here is a cute little program for computing the parity of the
    value initially stored in \coqdocdefinition{X} (due to Daniel Cristofani).


         \footnote{\url{ X = m }}
       WHILE 2 <= X DO
         X ::= X - 2
       END
         \footnote{\url{ X = parity m }}


    The mathematical \coqdocdefinition{parity} function used in the specification is
    defined in Coq as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{parity} \coqdocvar{x} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{x} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} 0\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 1 \ensuremath{\Rightarrow} 1\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} (\coqdocvar{S} \coqdocvar{x'}) \ensuremath{\Rightarrow} \coqdocvar{parity} \coqdocvar{x'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The postcondition does not hold at the beginning of the loop,
    since \coqdocabbreviation{m} = \coqdocdefinition{parity} \coqdocabbreviation{m} does not hold for an arbitrary \coqdocabbreviation{m}, so we
    cannot use that as an invariant.  To find an invariant that works,
    let's think a bit about what this loop does.  On each iteration it
    decrements \coqdocdefinition{X} by 2, which preserves the parity of \coqdocdefinition{X}.  So the
    parity of \coqdocdefinition{X} does not change, i.e., it is invariant.  The initial
    value of \coqdocdefinition{X} is \coqdocabbreviation{m}, so the parity of \coqdocdefinition{X} is always equal to the
    parity of \coqdocabbreviation{m}. Using \coqdocdefinition{parity} \coqdocdefinition{X} = \coqdocdefinition{parity} \coqdocabbreviation{m} as an invariant we
    obtain the following decorated program:


        \footnote{\url{ X = m }} ->>                               (a - OK)
        \footnote{\url{ parity X = parity m }}
      WHILE 2 <= X DO
          \footnote{\url{ parity X = parity m /\ 2 <= X }}  ->>    (c - OK)
          \footnote{\url{ parity (X-2) = parity m }}
        X ::= X - 2
          \footnote{\url{ parity X = parity m }}
      END
        \footnote{\url{ parity X = parity m /\ X < 2 }}  ->>       (b - OK)
        \footnote{\url{ X = parity m }}


    With this invariant, conditions (a), (b), and (c) are all
    satisfied. For verifying (b), we observe that, when \coqdocdefinition{X} < 2, we
    have \coqdocdefinition{parity} \coqdocdefinition{X} = \coqdocdefinition{X} (we can easily see this in the definition of
    \coqdocdefinition{parity}).  For verifying (c), we observe that, when 2 \ensuremath{\le} \coqdocdefinition{X}, we
    have \coqdocdefinition{parity} \coqdocdefinition{X} = \coqdocdefinition{parity} (\coqdocdefinition{X}-2). 

\paragraph{Exercise: 3 stars, optional (parity\_formal)}

 Translate this proof to Coq. Refer to the \coqdocvar{reduce\_to\_zero} example
    for ideas. You may find the following two lemmas useful: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{parity\_ge\_2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{1.00em}
2 \ensuremath{\le} \coqdocvar{x} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{parity} (\coqdocvar{x} - 2) = \coqdocvar{parity} \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{x}; \coqdoctac{intro}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{x}. \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H1}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{minus\_n\_O}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{parity\_lt\_2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} 2 \ensuremath{\le} \coqdocvar{x} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{parity} (\coqdocvar{x}) = \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{induction} \coqdocvar{x}. \coqdoctac{reflexivity}. \coqdoctac{destruct} \coqdocvar{x}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{exfalso}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{parity\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BLe} (\coqdocvar{ANum} 2) (\coqdocvar{AId} \coqdocvar{X}) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{parity} \coqdocvar{m} \}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Example: Finding Square Roots}



 The following program computes the square root of \coqdocdefinition{X}
    by naive iteration:


      \footnote{\url{ X=m }}
    Z ::= 0;;
    WHILE (Z+1)*(Z+1) <= X DO
      Z ::= Z+1
    END
      \footnote{\url{ Z*Z<=m /\ m<(Z+1)*(Z+1) }}


 As above, we can try to use the postcondition as a candidate
    invariant, obtaining the following decorated program:


    (1)  \footnote{\url{ X=m }}  ->>           (a - second conjunct of (2) WRONG!)
    (2)  \footnote{\url{ 0*0 <= m /\ m<1*1 }}
       Z ::= 0;;
    (3)  \footnote{\url{ Z*Z <= m /\ m<(Z+1)*(Z+1) }}
       WHILE (Z+1)*(Z+1) <= X DO
    (4)    \footnote{\url{ Z*Z<=m /\ (Z+1)*(Z+1)<=X }}  ->>             (c - WRONG!)
    (5)    \footnote{\url{ (Z+1)*(Z+1)<=m /\ m<(Z+2)*(Z+2) }}
         Z ::= Z+1
    (6)    \footnote{\url{ Z*Z<=m /\ m<(Z+1)*(Z+1) }}
       END
    (7)  \footnote{\url{ Z*Z<=m /\ m<(Z+1)*(Z+1) /\ ~((Z+1)*(Z+1)<=X) }}  ->> (b - OK)
    (8)  \footnote{\url{ Z*Z<=m /\ m<(Z+1)*(Z+1) }}


    This didn't work very well: conditions (a) and (c) both failed.
    Looking at condition (c), we see that the second conjunct of (4)
    is almost the same as the first conjunct of (5), except that (4)
    mentions \coqdocdefinition{X} while (5) mentions \coqdocabbreviation{m}. But note that \coqdocdefinition{X} is never
    assigned in this program, so we should always have \coqdocdefinition{X}=\coqdocabbreviation{m}, but we 
    didn't propagate this information from (1) into the loop invariant.


    Also, looking at the second conjunct of (8), it seems quite
    hopeless as an invariant (why?); fortunately, we don't need it, 
    since we can obtain it from the negation of the guard -- the third 
    conjunct in (7) -- again under the assumption that \coqdocdefinition{X}=\coqdocabbreviation{m}.


    So we now try \coqdocdefinition{X}=\coqdocabbreviation{m} \ensuremath{\land} \coqdocdefinition{Z}\ensuremath{\times}\coqdocdefinition{Z} \ensuremath{\le} \coqdocabbreviation{m} as the loop invariant:


      \footnote{\url{ X=m }}  ->>                                      (a - OK)
      \footnote{\url{ X=m /\ 0*0 <= m }}
    Z ::= 0;
      \footnote{\url{ X=m /\ Z*Z <= m }}
    WHILE (Z+1)*(Z+1) <= X DO
        \footnote{\url{ X=m /\ Z*Z<=m /\ (Z+1)*(Z+1)<=X }}  ->>        (c - OK)
        \footnote{\url{ X=m /\ (Z+1)*(Z+1)<=m }}
      Z ::= Z+1
        \footnote{\url{ X=m /\ Z*Z<=m }}
    END
      \footnote{\url{ X=m /\ Z*Z<=m /\ X<(Z+1)*(Z+1) }}  ->>           (b - OK)
      \footnote{\url{ Z*Z<=m /\ m<(Z+1)*(Z+1) }}


    This works, since conditions (a), (b), and (c) are now all
    trivially satisfied.


    Very often, even if a variable is used in a loop in a read-only
    fashion (i.e., it is referred to by the program or by the
    specification and it is not changed by the loop), it is necessary
    to add the fact that it doesn't change to the loop invariant. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Example: Squaring}



 Here is a program that squares \coqdocdefinition{X} by repeated addition:


    \footnote{\url{ X = m }}
  Y ::= 0;;
  Z ::= 0;;
  WHILE  Y <> X  DO
    Z ::= Z + X;;
    Y ::= Y + 1
  END
    \footnote{\url{ Z = m*m }}


 The first thing to note is that the loop reads \coqdocdefinition{X} but doesn't
    change its value. As we saw in the previous example, it is a good idea
    in such cases to add \coqdocdefinition{X} = \coqdocabbreviation{m} to the invariant.  The other thing
    that we know is often useful in the invariant is the postcondition, 
    so let's add that too, leading to the invariant candidate
    \coqdocdefinition{Z} = \coqdocabbreviation{m} \ensuremath{\times} \coqdocabbreviation{m} \ensuremath{\land} \coqdocdefinition{X} = \coqdocabbreviation{m}.


      \footnote{\url{ X = m }} ->>                            (a - WRONG)
      \footnote{\url{ 0 = m*m /\ X = m }}
    Y ::= 0;;
      \footnote{\url{ 0 = m*m /\ X = m }}
    Z ::= 0;;
      \footnote{\url{ Z = m*m /\ X = m }}
    WHILE Y <> X DO
        \footnote{\url{ Z = Y*m /\ X = m /\ Y <> X }} ->>     (c - WRONG)
        \footnote{\url{ Z+X = m*m /\ X = m }}
      Z ::= Z + X;;
        \footnote{\url{ Z = m*m /\ X = m }}
      Y ::= Y + 1
        \footnote{\url{ Z = m*m /\ X = m }}
    END
      \footnote{\url{ Z = m*m /\ X = m /\ ~(Y <> X) }} ->>         (b - OK)
      \footnote{\url{ Z = m*m }}


    Conditions (a) and (c) fail because of the \coqdocdefinition{Z} = \coqdocabbreviation{m}\ensuremath{\times}\coqdocabbreviation{m} part.  While
    \coqdocdefinition{Z} starts at 0 and works itself up to \coqdocabbreviation{m}\ensuremath{\times}\coqdocabbreviation{m}, we can't expect
    \coqdocdefinition{Z} to be \coqdocabbreviation{m}\ensuremath{\times}\coqdocabbreviation{m} from the start.  If we look at how \coqdocdefinition{Z} progesses
    in the loop, after the 1st iteration \coqdocdefinition{Z} = \coqdocabbreviation{m}, after the 2nd
    iteration \coqdocdefinition{Z} = 2*\coqdocabbreviation{m}, and at the end \coqdocdefinition{Z} = \coqdocabbreviation{m}\ensuremath{\times}\coqdocabbreviation{m}.  Since the variable
    \coqdocdefinition{Y} tracks how many times we go through the loop, this leads us to
    derive a new invariant candidate: \coqdocdefinition{Z} = \coqdocdefinition{Y}\ensuremath{\times}\coqdocabbreviation{m} \ensuremath{\land} \coqdocdefinition{X} = \coqdocabbreviation{m}.


      \footnote{\url{ X = m }} ->>                               (a - OK)
      \footnote{\url{ 0 = 0*m /\ X = m }}
    Y ::= 0;;
      \footnote{\url{ 0 = Y*m /\ X = m }}
    Z ::= 0;;
      \footnote{\url{ Z = Y*m /\ X = m }}
    WHILE Y <> X DO
        \footnote{\url{ Z = Y*m /\ X = m /\ Y <> X }} ->>        (c - OK)
        \footnote{\url{ Z+X = (Y+1)*m /\ X = m }}
      Z ::= Z + X;
        \footnote{\url{ Z = (Y+1)*m /\ X = m }}
      Y ::= Y + 1
        \footnote{\url{ Z = Y*m /\ X = m }}
    END
      \footnote{\url{ Z = Y*m /\ X = m /\ ~(Y <> X) }} ->>           (b - OK)
      \footnote{\url{ Z = m*m }}


    This new invariant makes the proof go through: all three
    conditions are easy to check.


    It is worth comparing the postcondition \coqdocdefinition{Z} = \coqdocabbreviation{m}\ensuremath{\times}\coqdocabbreviation{m} and the \coqdocdefinition{Z} =
    \coqdocdefinition{Y}\ensuremath{\times}\coqdocabbreviation{m} conjunct of the invariant. It is often the case that one has
    to replace parameters with variables -- or
    with expressions involving both variables and parameters, like
    \coqdocabbreviation{m} - \coqdocdefinition{Y} -- when going from postconditions to invariants. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Exercise: Factorial}



\paragraph{Exercise: 3 starsM (factorial)}

 Recall that \coqdocabbreviation{n}! denotes the factorial of \coqdocabbreviation{n} (i.e., \coqdocabbreviation{n}! =
    1*2*...*\coqdocabbreviation{n}).  Here is an Imp program that calculates the factorial
    of the number initially stored in the variable \coqdocdefinition{X} and puts it in
    the variable \coqdocdefinition{Y}:


    \footnote{\url{ X = m }}
  Y ::= 1 ;;
  WHILE X <> 0
  DO
     Y ::= Y * X ;;
     X ::= X - 1
  END
    \footnote{\url{ Y = m! }}


    Fill in the blanks in following decorated program:


    \footnote{\url{ X = m }} ->>
    \footnote{\url{                                      }}
  Y ::= 1;;
    \footnote{\url{                                      }}
  WHILE X <> 0
  DO   \footnote{\url{                                      }} ->>
       \footnote{\url{                                      }}
     Y ::= Y * X;;
       \footnote{\url{                                      }}
     X ::= X - 1
       \footnote{\url{                                      }}
  END
    \footnote{\url{                                      }} ->>
    \footnote{\url{ Y = m! }}


 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Exercise: Min}



\paragraph{Exercise: 3 starsM (Min\_Hoare)}

 Fill in valid decorations for the following program.
  For the \ensuremath{\Rightarrow} steps in your annotations, you may rely (silently) 
  on the following facts about min


  Lemma lemma1 : forall x y,
    (x=0 \symbol{92}/ y=0) -> min x y = 0.
  Lemma lemma2 : forall x y,
    min (x-1) (y-1) = (min x y) - 1.


  plus standard high-school algebra, as always.


  \footnote{\url{ True }} ->>
  \footnote{\url{                    }}
  X ::= a;;
  \footnote{\url{                       }}
  Y ::= b;;
  \footnote{\url{                       }}
  Z ::= 0;;
  \footnote{\url{                       }}
  WHILE (X <> 0 /\symbol{92} Y <> 0) DO
  \footnote{\url{                                     }} ->>
  \footnote{\url{                                }}
  X := X - 1;;
  \footnote{\url{                            }}
  Y := Y - 1;;
  \footnote{\url{                        }}
  Z := Z + 1
  \footnote{\url{                       }}
  END
  \footnote{\url{                            }} ->>
  \footnote{\url{ Z = min a b }}


 \ensuremath{\Box} 

\paragraph{Exercise: 3 starsM (two\_loops)}

 Here is a very inefficient way of adding 3 numbers:


  X ::= 0;;
  Y ::= 0;;
  Z ::= c;;
  WHILE X <> a DO
    X ::= X + 1;;
    Z ::= Z + 1
  END;;
  WHILE Y <> b DO
    Y ::= Y + 1;;
    Z ::= Z + 1
  END


    Show that it does what it should by filling in the blanks in the
    following decorated program.


    \footnote{\url{ True }} ->>
    \footnote{\url{                                        }}
  X ::= 0;;
    \footnote{\url{                                        }}
  Y ::= 0;;
    \footnote{\url{                                        }}
  Z ::= c;;
    \footnote{\url{                                        }}
  WHILE X <> a DO
      \footnote{\url{                                        }} ->>
      \footnote{\url{                                        }}
    X ::= X + 1;;
      \footnote{\url{                                        }}
    Z ::= Z + 1
      \footnote{\url{                                        }}
  END;;
    \footnote{\url{                                        }} ->>
    \footnote{\url{                                        }}
  WHILE Y <> b DO
      \footnote{\url{                                        }} ->>
      \footnote{\url{                                        }}
    Y ::= Y + 1;;
      \footnote{\url{                                        }}
    Z ::= Z + 1
      \footnote{\url{                                        }}
  END
    \footnote{\url{                                        }} ->>
    \footnote{\url{ Z = a + b + c }}


 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Exercise: Power Series}



\paragraph{Exercise: 4 stars, optional (dpow2\_down)}

 Here is a program that computes the series:
    1 + 2 + 2\^{}2 + ... + 2\^{}\coqdocabbreviation{m} = 2\^{}(\coqdocabbreviation{m}+1) - 1


    X ::= 0;;
    Y ::= 1;;
    Z ::= 1;;
    WHILE X <> m DO
      Z ::= 2 * Z;;
      Y ::= Y + Z;;
      X ::= X + 1
    END


    Write a decorated program for this. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Weakest Preconditions (Optional)}



 Some Hoare triples are more interesting than others.
    For example,


      \footnote{\url{ False }}  X ::= Y + 1  \footnote{\url{ X <= 5 }}


    is \textit{not} very interesting: although it is perfectly valid, it
    tells us nothing useful.  Since the precondition isn't satisfied
    by any state, it doesn't describe any situations where we can use
    the command \coqdocdefinition{X} ::= \coqdocdefinition{Y} + 1 to achieve the postcondition \coqdocdefinition{X} \ensuremath{\le} 5.


    By contrast,


      \footnote{\url{ Y <= 4 /\ Z = 0 }}  X ::= Y + 1 \footnote{\url{ X <= 5 }}


    is useful: it tells us that, if we can somehow create a situation
    in which we know that \coqdocdefinition{Y} \ensuremath{\le} 4 \ensuremath{\land} \coqdocdefinition{Z} = 0, then running this command
    will produce a state satisfying the postcondition.  However, this
    triple is still not as useful as it could be, because the \coqdocdefinition{Z} = 0
    clause in the precondition actually has nothing to do with the
    postcondition \coqdocdefinition{X} \ensuremath{\le} 5.  The \textit{most} useful triple (for this
    command and postcondition) is this one:


      \footnote{\url{ Y <= 4 }}  X ::= Y + 1  \footnote{\url{ X <= 5 }}


    In other words, \coqdocdefinition{Y} \ensuremath{\le} 4 is the \textit{weakest} valid precondition of
    the command \coqdocdefinition{X} ::= \coqdocdefinition{Y} + 1 for the postcondition \coqdocdefinition{X} \ensuremath{\le} 5. 

 In general, we say that ``\coqdocaxiom{P} is the weakest precondition of
    command \coqdocconstructor{c} for postcondition \coqdocvariable{Q}'' if \{\{\coqdocaxiom{P}\}\} \coqdocconstructor{c} \{\{\coqdocvariable{Q}\}\} and if,
    whenever \coqdocvariable{P'} is an assertion such that \{\{\coqdocvariable{P'}\}\} \coqdocconstructor{c} \{\{\coqdocvariable{Q}\}\}, it is
    the case that \coqdocvariable{P'} \coqdocvariable{st} implies \coqdocaxiom{P} \coqdocvariable{st} for all states \coqdocvariable{st}.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{is\_wp} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q} :=\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\} \ensuremath{\land}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{P'}, \{\{\coqdocvar{P'}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\} \ensuremath{\rightarrow} (\coqdocvar{P'} ->> \coqdocvar{P}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
That is, \coqdocaxiom{P} is the weakest precondition of \coqdocconstructor{c} for \coqdocvariable{Q}
    if (a) \coqdocaxiom{P} \textit{is} a precondition for \coqdocvariable{Q} and \coqdocconstructor{c}, and (b) \coqdocaxiom{P} is the
    \textit{weakest} (easiest to satisfy) assertion that guarantees that 
    \coqdocvariable{Q} will hold after executing \coqdocconstructor{c}. 

\paragraph{Exercise: 1 star, optional (wp)}

 What are the weakest preconditions of the following commands
   for the following postconditions?


  1) \footnote{\url{ ? }}  SKIP  \footnote{\url{ X = 5 }}


  2) \footnote{\url{ ? }}  X ::= Y + Z \footnote{\url{ X = 5 }}


  3) \footnote{\url{ ? }}  X ::= Y  \footnote{\url{ X = Y }}


  4) \footnote{\url{ ? }}
     IFB X == 0 THEN Y ::= Z + 1 ELSE Y ::= W + 2 FI
     \footnote{\url{ Y = 5 }}


  5) \footnote{\url{ ? }}
     X ::= 5
     \footnote{\url{ X = 0 }}


  6) \footnote{\url{ ? }}
     WHILE True DO X ::= 0 END
     \footnote{\url{ X = 0 }}
\begin{coqdoccode}
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advanced, optional (is\_wp\_formal)}

 Prove formally, using the definition of \coqdocdefinition{hoare\_triple}, that \coqdocdefinition{Y} \ensuremath{\le} 4
   is indeed the weakest precondition of \coqdocdefinition{X} ::= \coqdocdefinition{Y} + 1 with respect to
   postcondition \coqdocdefinition{X} \ensuremath{\le} 5. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{is\_wp\_example} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{is\_wp} (\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\le} 4)\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 1)) (\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} \ensuremath{\le} 5).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, advanced, optional (hoare\_asgn\_weakest)}

 Show that the precondition in the rule \coqdoclemma{hoare\_asgn} is in fact the
    weakest precondition. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_asgn\_weakest} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Q} \coqdocvar{X} \coqdocvar{a},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{is\_wp} (\coqdocvar{Q} [\coqdocvar{X} |-> \coqdocvar{a}]) (\coqdocvar{X} ::= \coqdocvar{a}) \coqdocvar{Q}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, advanced, optional (hoare\_havoc\_weakest)}

 Show that your \coqdocdefinition{havoc\_pre} rule from the \coqdocvar{himp\_hoare} exercise
    in the \coqdoclibrary{Hoare} chapter returns the weakest precondition. \begin{coqdoccode}
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Himp2}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{Himp}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{hoare\_havoc\_weakest} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} : \coqdocvar{Assertion}) (\coqdocvar{X} : \coqdocvar{id}),\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdocvar{P} \}\} \coqdocvar{HAVOC} \coqdocvar{X} \{\{ \coqdocvar{Q} \}\} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} ->> \coqdocvar{havoc\_pre} \coqdocvar{X} \coqdocvar{Q}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{End} \coqdocvar{Himp2}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Formal Decorated Programs (Optional)}



 Our informal conventions for decorated programs amount to a
    way of displaying Hoare triples, in which commands are annotated
    with enough embedded assertions that checking the validity of a
    triple is reduced to simple logical and algebraic calculations
    showing that some assertions imply others.  In this section, we
    show that this informal presentation style can actually be made
    completely formal and indeed that checking the validity of
    decorated programs can mostly be automated.  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Syntax}



 The first thing we need to do is to formalize a variant of the
    syntax of commands with embedded assertions.  We call the new
    commands \textit{decorated commands}, or \coqdocinductive{dcom}s. 

 We don't want both preconditions and postconditions on each
    command, because a sequence of two commands would contain
    redundant decorations, the postcondition of the first likely
    being the same as the precondition of the second. Instead,
    decorations are added corresponding to each postcondition.
    A separate type, \coqdocinductive{decorated}, is used to add the precondition
    for the entire program. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{dcom} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCSkip} :  \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdocvar{dcom}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCSeq} : \coqdocvar{dcom} \ensuremath{\rightarrow} \coqdocvar{dcom} \ensuremath{\rightarrow} \coqdocvar{dcom}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCAsgn} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow}  \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdocvar{dcom}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCIf} : \coqdocvar{bexp} \ensuremath{\rightarrow}  \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdocvar{dcom} \ensuremath{\rightarrow}  \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdocvar{dcom}\coqdoceol
\coqdocindent{5.50em}
\ensuremath{\rightarrow} \coqdocvar{Assertion}\ensuremath{\rightarrow} \coqdocvar{dcom}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCWhile} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdocvar{dcom} \ensuremath{\rightarrow} \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdocvar{dcom}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCPre} : \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdocvar{dcom} \ensuremath{\rightarrow} \coqdocvar{dcom}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCPost} : \coqdocvar{dcom} \ensuremath{\rightarrow} \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{decorated} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Decorated} : \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdocvar{dcom} \ensuremath{\rightarrow} \coqdocvar{decorated}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'SKIP' \{\{ P \}\}"\coqdoceol
\coqdocindent{3.00em}
:= (\coqdocvar{DCSkip} \coqdocvar{P})\coqdoceol
\coqdocindent{3.00em}
(\coqdoctac{at} \coqdockw{level} 10) : \coqdocvar{dcom\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "l '::=' a \{\{ P \}\}"\coqdoceol
\coqdocindent{3.00em}
:= (\coqdocvar{DCAsgn} \coqdocvar{l} \coqdocvar{a} \coqdocvar{P})\coqdoceol
\coqdocindent{3.00em}
(\coqdoctac{at} \coqdockw{level} 60, \coqdocvar{a} \coqdoctac{at} \coqdocvar{next} \coqdockw{level}) : \coqdocvar{dcom\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'WHILE' b 'DO' \{\{ Pbody \}\} d 'END' \{\{ Ppost \}\}"\coqdoceol
\coqdocindent{3.00em}
:= (\coqdocvar{DCWhile} \coqdocvar{b} \coqdocvar{Pbody} \coqdocvar{d} \coqdocvar{Ppost})\coqdoceol
\coqdocindent{3.00em}
(\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}) : \coqdocvar{dcom\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'IFB' b 'THEN' \{\{ P \}\} d 'ELSE' \{\{ P' \}\} d' 'FI' \{\{ Q \}\}"\coqdoceol
\coqdocindent{3.00em}
:= (\coqdocvar{DCIf} \coqdocvar{b} \coqdocvar{P} \coqdocvar{d} \coqdocvar{P'} \coqdocvar{d'} \coqdocvar{Q})\coqdoceol
\coqdocindent{3.00em}
(\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity})  : \coqdocvar{dcom\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'->>' \{\{ P \}\} d"\coqdoceol
\coqdocindent{3.00em}
:= (\coqdocvar{DCPre} \coqdocvar{P} \coqdocvar{d})\coqdoceol
\coqdocindent{3.00em}
(\coqdoctac{at} \coqdockw{level} 90, \coqdoctac{right} \coqdockw{associativity})  : \coqdocvar{dcom\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "d '->>' \{\{ P \}\}"\coqdoceol
\coqdocindent{3.00em}
:= (\coqdocvar{DCPost} \coqdocvar{d} \coqdocvar{P})\coqdoceol
\coqdocindent{3.00em}
(\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity})  : \coqdocvar{dcom\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} " d ;; d' "\coqdoceol
\coqdocindent{3.00em}
:= (\coqdocvar{DCSeq} \coqdocvar{d} \coqdocvar{d'})\coqdoceol
\coqdocindent{3.00em}
(\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity})  : \coqdocvar{dcom\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "\{\{ P \}\} d"\coqdoceol
\coqdocindent{3.00em}
:= (\coqdocvar{Decorated} \coqdocvar{P} \coqdocvar{d})\coqdoceol
\coqdocindent{3.00em}
(\coqdoctac{at} \coqdockw{level} 90)  : \coqdocvar{dcom\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Delimit} \coqdockw{Scope} \coqdocvar{dcom\_scope} \coqdockw{with} \coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To avoid clashing with the existing \coqdockw{Notation} definitions
    for ordinary \coqdocinductive{com}mands, we introduce these notations in a special
    scope called \coqdocvar{dcom\_scope}, and we wrap examples with the
    declaration \% \coqdocinductive{dcom} to signal that we want the notations to be
    interpreted in this scope.


    Careful readers will note that we've defined two notations for the
    \coqdocconstructor{DCPre} constructor, one with and one without a ->>.  The
    ``without'' version is intended to be used to supply the initial
    precondition at the very top of the program. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{dec\_while} : \coqdocvar{decorated} := (\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} (\coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0)))\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} \ensuremath{\not=} 0\}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= (\coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1))\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{True} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = 0\}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 0 \}\}\coqdoceol
\coqdocnoindent
) \% \coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It is easy to go from a \coqdocinductive{dcom} to a \coqdocinductive{com} by erasing all
    annotations. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{extract} (\coqdocvar{d}:\coqdocvar{dcom}) : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{d} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCSkip} \coqdocvar{\_}           \ensuremath{\Rightarrow} \coqdocvar{SKIP}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCSeq} \coqdocvar{d1} \coqdocvar{d2}        \ensuremath{\Rightarrow} (\coqdocvar{extract} \coqdocvar{d1} ;; \coqdocvar{extract} \coqdocvar{d2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCAsgn} \coqdocvar{X} \coqdocvar{a} \coqdocvar{\_}       \ensuremath{\Rightarrow} \coqdocvar{X} ::= \coqdocvar{a}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCIf} \coqdocvar{b} \coqdocvar{\_} \coqdocvar{d1} \coqdocvar{\_} \coqdocvar{d2} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{extract} \coqdocvar{d1} \coqdocvar{ELSE} \coqdocvar{extract} \coqdocvar{d2} \coqdocvar{FI}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCWhile} \coqdocvar{b} \coqdocvar{\_} \coqdocvar{d} \coqdocvar{\_}    \ensuremath{\Rightarrow} \coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{extract} \coqdocvar{d} \coqdocvar{END}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCPre} \coqdocvar{\_} \coqdocvar{d}          \ensuremath{\Rightarrow} \coqdocvar{extract} \coqdocvar{d}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCPost} \coqdocvar{d} \coqdocvar{\_}         \ensuremath{\Rightarrow} \coqdocvar{extract} \coqdocvar{d}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{extract\_dec} (\coqdocvar{dec} : \coqdocvar{decorated}) : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{dec} \coqdockw{with} \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Decorated} \coqdocvar{P} \coqdocvar{d} \ensuremath{\Rightarrow} \coqdocvar{extract} \coqdocvar{d}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The choice of exactly where to put assertions in the definition of
    \coqdocinductive{dcom} is a bit subtle.  The simplest thing to do would be to
    annotate every \coqdocinductive{dcom} with a precondition and postcondition.  But
    this would result in very verbose programs with a lot of repeated
    annotations: for example, a program like \coqdocvar{SKIP};\coqdocvar{SKIP} would have to
    be annotated as


        \footnote{\url{P}} (\footnote{\url{P}} SKIP \footnote{\url{P}}) ;; (\footnote{\url{P}} SKIP \footnote{\url{P}}) \footnote{\url{P}},


    with pre- and post-conditions on each \coqdocvar{SKIP}, plus identical pre-
    and post-conditions on the semicolon!


    Instead, the rule we've followed is this:



\begin{itemize}
\item  The \textit{post}-condition expected by each \coqdocinductive{dcom} \coqdocconstructor{d} is embedded
         in \coqdocconstructor{d}.



\item  The \textit{pre}-condition is supplied by the context. 
\end{itemize}


 In other words, the invariant of the representation is that a
    \coqdocinductive{dcom} \coqdocconstructor{d} together with a precondition \coqdocaxiom{P} determines a Hoare
    triple \{\{\coqdocaxiom{P}\}\} (\coqdocdefinition{extract} \coqdocconstructor{d}) \{\{\coqdocdefinition{post} \coqdocconstructor{d}\}\}, where \coqdocdefinition{post} is defined as
    follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{post} (\coqdocvar{d}:\coqdocvar{dcom}) : \coqdocvar{Assertion} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{d} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCSkip} \coqdocvar{P}                \ensuremath{\Rightarrow} \coqdocvar{P}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCSeq} \coqdocvar{d1} \coqdocvar{d2}             \ensuremath{\Rightarrow} \coqdocvar{post} \coqdocvar{d2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCAsgn} \coqdocvar{X} \coqdocvar{a} \coqdocvar{Q}            \ensuremath{\Rightarrow} \coqdocvar{Q}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCIf}  \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{d1} \coqdocvar{\_} \coqdocvar{d2} \coqdocvar{Q}     \ensuremath{\Rightarrow} \coqdocvar{Q}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCWhile} \coqdocvar{b} \coqdocvar{Pbody} \coqdocvar{c} \coqdocvar{Ppost} \ensuremath{\Rightarrow} \coqdocvar{Ppost}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCPre} \coqdocvar{\_} \coqdocvar{d}               \ensuremath{\Rightarrow} \coqdocvar{post} \coqdocvar{d}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCPost} \coqdocvar{c} \coqdocvar{Q}              \ensuremath{\Rightarrow} \coqdocvar{Q}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It is straightforward to extract the precondition and
    postcondition from a decorated program. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pre\_dec} (\coqdocvar{dec} : \coqdocvar{decorated}) : \coqdocvar{Assertion} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{dec} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Decorated} \coqdocvar{P} \coqdocvar{d} \ensuremath{\Rightarrow} \coqdocvar{P}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{post\_dec} (\coqdocvar{dec} : \coqdocvar{decorated}) : \coqdocvar{Assertion} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{dec} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Decorated} \coqdocvar{P} \coqdocvar{d} \ensuremath{\Rightarrow} \coqdocvar{post} \coqdocvar{d}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can express what it means for a decorated program to be
    correct as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{dec\_correct} (\coqdocvar{dec} : \coqdocvar{decorated}) :=\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{pre\_dec} \coqdocvar{dec}\}\} (\coqdocvar{extract\_dec} \coqdocvar{dec}) \{\{\coqdocvar{post\_dec} \coqdocvar{dec}\}\}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To check whether this Hoare triple is \textit{valid}, we need a way to
    extract the ``proof obligations'' from a decorated program.  These
    obligations are often called \textit{verification conditions}, because
    they are the facts that must be verified to see that the
    decorations are logically consistent and thus add up to a complete
    proof of correctness. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Extracting Verification Conditions}



 The function \coqdocdefinition{verification\_conditions} takes a \coqdocinductive{dcom} \coqdocconstructor{d} together
    with a precondition \coqdocaxiom{P} and returns a \textit{proposition} that, if it
    can be proved, implies that the triple \{\{\coqdocaxiom{P}\}\} (\coqdocdefinition{extract} \coqdocconstructor{d}) \{\{\coqdocdefinition{post} \coqdocconstructor{d}\}\}
    is valid. 

 It does this by walking over \coqdocconstructor{d} and generating a big
    conjunction including all the ``local checks'' that we listed when
    we described the informal rules for decorated programs.  (Strictly
    speaking, we need to massage the informal rules a little bit to
    add some uses of the rule of consequence, but the correspondence
    should be clear.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{verification\_conditions} (\coqdocvar{P} : \coqdocvar{Assertion}) (\coqdocvar{d}:\coqdocvar{dcom})\coqdoceol
\coqdocindent{15.50em}
: \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{d} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCSkip} \coqdocvar{Q} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{P} ->> \coqdocvar{Q})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCSeq} \coqdocvar{d1} \coqdocvar{d2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{verification\_conditions} \coqdocvar{P} \coqdocvar{d1}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\land} \coqdocvar{verification\_conditions} (\coqdocvar{post} \coqdocvar{d1}) \coqdocvar{d2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCAsgn} \coqdocvar{X} \coqdocvar{a} \coqdocvar{Q} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{P} ->> \coqdocvar{Q} [\coqdocvar{X} |-> \coqdocvar{a}])\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCIf} \coqdocvar{b} \coqdocvar{P1} \coqdocvar{d1} \coqdocvar{P2} \coqdocvar{d2} \coqdocvar{Q} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
((\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st}) ->> \coqdocvar{P1})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\land} ((\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \ensuremath{\lnot} (\coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st})) ->> \coqdocvar{P2})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\land} (\coqdocvar{post} \coqdocvar{d1} ->> \coqdocvar{Q}) \ensuremath{\land} (\coqdocvar{post} \coqdocvar{d2} ->> \coqdocvar{Q})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\land} \coqdocvar{verification\_conditions} \coqdocvar{P1} \coqdocvar{d1}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\land} \coqdocvar{verification\_conditions} \coqdocvar{P2} \coqdocvar{d2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCWhile} \coqdocvar{b} \coqdocvar{Pbody} \coqdocvar{d} \coqdocvar{Ppost} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{P} ->> \coqdocvar{post} \coqdocvar{d})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\land} ((\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{post} \coqdocvar{d} \coqdocvar{st} \ensuremath{\land} \coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st}) ->> \coqdocvar{Pbody})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\land} ((\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{post} \coqdocvar{d} \coqdocvar{st} \ensuremath{\land} \~{}(\coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st})) ->> \coqdocvar{Ppost})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\land} \coqdocvar{verification\_conditions} \coqdocvar{Pbody} \coqdocvar{d}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCPre} \coqdocvar{P'} \coqdocvar{d} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{P} ->> \coqdocvar{P'}) \ensuremath{\land} \coqdocvar{verification\_conditions} \coqdocvar{P'} \coqdocvar{d}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{DCPost} \coqdocvar{d} \coqdocvar{Q} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{verification\_conditions} \coqdocvar{P} \coqdocvar{d} \ensuremath{\land} (\coqdocvar{post} \coqdocvar{d} ->> \coqdocvar{Q})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
And now the key theorem, stating that \coqdocdefinition{verification\_conditions}
    does its job correctly.  Not surprisingly, we need to use each of
    the Hoare Logic rules at some point in the proof. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{verification\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{d} \coqdocvar{P},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{verification\_conditions} \coqdocvar{P} \coqdocvar{d} \ensuremath{\rightarrow} \{\{\coqdocvar{P}\}\} (\coqdocvar{extract} \coqdocvar{d}) \{\{\coqdocvar{post} \coqdocvar{d}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{d}; \coqdoctac{intros} \coqdocvar{P} \coqdocvar{H}; \coqdoctac{simpl} \coqdoctac{in} *.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{hoare\_skip}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{H1} \coqdocvar{H2}]. \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_seq}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHd2}. \coqdoctac{apply} \coqdocvar{H2}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHd1}. \coqdoctac{apply} \coqdocvar{H1}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{hoare\_asgn}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{HPre1} [\coqdocvar{HPre2} [\coqdocvar{Hd1} [\coqdocvar{Hd2} [\coqdocvar{HThen} \coqdocvar{HElse}]]]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHd1} \coqdoctac{in} \coqdocvar{HThen}. \coqdoctac{clear} \coqdocvar{IHd1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHd2} \coqdoctac{in} \coqdocvar{HElse}. \coqdoctac{clear} \coqdocvar{IHd2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{hoare\_if}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoctac{eapply} \coqdocvar{hoare\_consequence\_post} \coqdockw{with} (\coqdocvar{Q'}:=\coqdocvar{post} \coqdocvar{d1}); \coqdoctac{eauto}.\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoctac{eapply} \coqdocvar{hoare\_consequence\_post} \coqdockw{with} (\coqdocvar{Q'}:=\coqdocvar{post} \coqdocvar{d2}); \coqdoctac{eauto}.\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{Hpre} [\coqdocvar{Hbody1} [\coqdocvar{Hpost1}  \coqdocvar{Hd}]]]. \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_post}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{hoare\_while}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{HP} \coqdocvar{Hd}]; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_pre}. \coqdoctac{apply} \coqdocvar{IHd}. \coqdoctac{apply} \coqdocvar{Hd}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{Hd} \coqdocvar{HQ}]; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{hoare\_consequence\_post}. \coqdoctac{apply} \coqdocvar{IHd}. \coqdoctac{apply} \coqdocvar{Hd}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(If you expand the proof, you'll see that it uses an
    unfamiliar idiom: \coqdoctac{simpl} \coqdoctac{in} *.  We have used ...\coqdoctac{in}... variants
    of several tactics before, to apply them to values in the context
    rather than the goal.  The syntax \coqdocvar{tactic} \coqdoctac{in} * extends this idea,
    applying \coqdocvar{tactic} in the goal and every hypothesis in the
    context.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Automation}



 Now that all the pieces are in place, we can verify an entire program. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{verification\_conditions\_dec} (\coqdocvar{dec} : \coqdocvar{decorated}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{dec} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Decorated} \coqdocvar{P} \coqdocvar{d} \ensuremath{\Rightarrow} \coqdocvar{verification\_conditions} \coqdocvar{P} \coqdocvar{d}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{verification\_correct\_dec} : \coqdockw{\ensuremath{\forall}} \coqdocvar{dec},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{verification\_conditions\_dec} \coqdocvar{dec} \ensuremath{\rightarrow} \coqdocvar{dec\_correct} \coqdocvar{dec}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [\coqdocvar{P} \coqdocvar{d}]. \coqdoctac{apply} \coqdocvar{verification\_correct}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The propositions generated by \coqdocdefinition{verification\_conditions} are fairly
    big, and they contain many conjuncts that are essentially trivial. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Eval} \coqdoctac{simpl} \coqdoctac{in} (\coqdocvar{verification\_conditions\_dec} \coqdocvar{dec\_while}).\coqdoceol
\end{coqdoccode}


==> (((fun \_ : state => True) ->> (fun \_ : state => True)) /\symbol{92}
     ((fun st : state => True /\symbol{92} bassn (BNot (BEq (AId X) (ANum 0))) st) ->>
      (fun st : state => True /\symbol{92} st X <> 0)) /\symbol{92}
     ((fun st : state => True /\symbol{92} \~{} bassn (BNot (BEq (AId X) (ANum 0))) st) ->>
      (fun st : state => True /\symbol{92} st X = 0)) /\symbol{92}
     (fun st : state => True /\symbol{92} st X <> 0) ->>
     (fun \_ : state => True) \coqdocdefinition{X} |-> \coqdocconstructor{AMinus} (\coqdocconstructor{AId} \coqdocdefinition{X}) (\coqdocconstructor{ANum} 1)) /\symbol{92}
    (fun st : state => True /\symbol{92} st X = 0) ->> (fun st : state => st X = 0)


 In principle, we could work with such propositions using just the
    tactics we have so far, but we can make things much smoother with
    a bit of automation.  We first define a custom \coqdocvar{verify} tactic
    that uses \coqdoctac{split} repeatedly to turn all the conjunctions into
    separate subgoals and then uses \coqdoctac{omega} and \coqdoctac{eauto} (described in
    chapter \coqdoclibrary{Auto}) to deal with as many of them as possible. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "verify" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{verification\_correct};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{split};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}; \coqdoctac{unfold} \coqdocvar{assert\_implies};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bassn} \coqdoctac{in} *; \coqdoctac{unfold} \coqdocvar{beval} \coqdoctac{in} *; \coqdoctac{unfold} \coqdocvar{aeval} \coqdoctac{in} *;\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{assn\_sub}; \coqdoctac{intros};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{t\_update\_eq};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} (\coqdoctac{rewrite} \coqdocvar{t\_update\_neq}; [| (\coqdoctac{intro} \coqdocvar{X}; \coqdoctac{inversion} \coqdocvar{X})]);\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl} \coqdoctac{in} *;\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with} [\coqdocvar{H} : \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_}] \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{H} \coqdockw{end};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{not\_true\_iff\_false} \coqdoctac{in} *;\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{not\_false\_iff\_true} \coqdoctac{in} *;\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{negb\_true\_iff} \coqdoctac{in} *;\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{negb\_false\_iff} \coqdoctac{in} *;\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{beq\_nat\_true\_iff} \coqdoctac{in} *;\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{beq\_nat\_false\_iff} \coqdoctac{in} *;\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{leb\_iff} \coqdoctac{in} *;\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{leb\_iff\_conv} \coqdoctac{in} *;\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdoctac{subst};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
[\coqdocvar{st} : \coqdocvar{state} \ensuremath{\vdash} \coqdocvar{\_}] \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{5.00em}
[\coqdocvar{H} : \coqdocvar{st} \coqdocvar{\_} = \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_}] \ensuremath{\Rightarrow} \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H} \coqdoctac{in} *; \coqdoctac{clear} \coqdocvar{H}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|} [\coqdocvar{H} : \coqdocvar{\_} = \coqdocvar{st} \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_}] \ensuremath{\Rightarrow} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H} \coqdoctac{in} *; \coqdoctac{clear} \coqdocvar{H}\coqdoceol
\coqdocindent{4.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdoctac{eauto}; \coqdoctac{try} \coqdoctac{omega}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
What's left after \coqdocvar{verify} does its thing is ``just the interesting
    parts'' of checking that the decorations are correct. For very
    simple examples \coqdocvar{verify} immediately solves the goal (provided
    that the annotations are correct). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{dec\_while\_correct} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} \coqdocvar{dec\_while}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{verify}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Another example (formalizing a decorated program we've seen
    before): \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{subtract\_slowly\_dec} (\coqdocvar{m}:\coqdocvar{nat}) (\coqdocvar{p}:\coqdocvar{nat}) : \coqdocvar{decorated} := (\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{p} \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} - \coqdocvar{st} \coqdocvar{X} = \coqdocvar{p} - \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0))\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{DO}   \{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} - \coqdocvar{st} \coqdocvar{X} = \coqdocvar{p} - \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} \ensuremath{\not=} 0 \}\} ->>\coqdoceol
\coqdocindent{3.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Z} - 1) - (\coqdocvar{st} \coqdocvar{X} - 1) = \coqdocvar{p} - \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Z} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{3.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} - (\coqdocvar{st} \coqdocvar{X} - 1) = \coqdocvar{p} - \coqdocvar{m} \}\} ;;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{3.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} - \coqdocvar{st} \coqdocvar{X} = \coqdocvar{p} - \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} - \coqdocvar{st} \coqdocvar{X} = \coqdocvar{p} - \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = 0 \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{p} - \coqdocvar{m} \}\}\coqdoceol
\coqdocnoindent
) \% \coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{subtract\_slowly\_dec\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{p},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{subtract\_slowly\_dec} \coqdocvar{m} \coqdocvar{p}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{m} \coqdocvar{p}. \coqdocvar{verify}.  \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Examples}



 In this section, we use the automation developed above to verify
    formal decorated programs corresponding to most of the informal
    ones we have seen. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Swapping Using Addition and Subtraction}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{swap} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y});;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y});;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{swap\_dec} \coqdocvar{m} \coqdocvar{n} : \coqdocvar{decorated} :=\coqdoceol
\coqdocindent{1.00em}
(\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{n}\}\} ->>\coqdoceol
\coqdocindent{1.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{X} + \coqdocvar{st} \coqdocvar{Y}) - ((\coqdocvar{st} \coqdocvar{X} + \coqdocvar{st} \coqdocvar{Y}) - \coqdocvar{st} \coqdocvar{Y}) = \coqdocvar{n}\coqdoceol
\coqdocindent{8.00em}
\ensuremath{\land} (\coqdocvar{st} \coqdocvar{X} + \coqdocvar{st} \coqdocvar{Y}) - \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})\coqdoceol
\coqdocindent{1.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} - (\coqdocvar{st} \coqdocvar{X} - \coqdocvar{st} \coqdocvar{Y}) = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} - \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{m} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})\coqdoceol
\coqdocindent{1.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} - \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{m} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})\coqdoceol
\coqdocindent{1.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{m}\}\})\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{swap\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{swap\_dec} \coqdocvar{m} \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}; \coqdocvar{verify}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Simple Conditionals}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{if\_minus\_plus\_com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{IFB} (\coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y}))\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{THEN} (\coqdocvar{Z} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{X}))\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{ELSE} (\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Z}))\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{FI}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{if\_minus\_plus\_dec} :=\coqdoceol
\coqdocindent{1.00em}
(\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True}\}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{IFB} (\coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})) \coqdocvar{THEN}\coqdoceol
\coqdocindent{3.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{st} \coqdocvar{Y} \}\} ->>\coqdoceol
\coqdocindent{3.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X} + (\coqdocvar{st} \coqdocvar{Y} - \coqdocvar{st} \coqdocvar{X}) \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{X})\coqdoceol
\coqdocindent{3.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{st} \coqdocvar{Z} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ELSE}\coqdoceol
\coqdocindent{3.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \ensuremath{\land} \~{}(\coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{st} \coqdocvar{Y}) \}\} ->>\coqdoceol
\coqdocindent{3.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} + \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{st} \coqdocvar{Z} \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Z})\coqdoceol
\coqdocindent{3.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{st} \coqdocvar{Z} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{FI}\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{st} \coqdocvar{Z}\}\})\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{if\_minus\_plus\_correct} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} \coqdocvar{if\_minus\_plus\_dec}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}; \coqdocvar{verify}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{if\_minus\_dec} :=\coqdoceol
\coqdocindent{1.00em}
( \{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True}\}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{IFB} (\coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})) \coqdocvar{THEN}\coqdoceol
\coqdocindent{3.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{st} \coqdocvar{Y} \}\} ->>\coqdoceol
\coqdocindent{3.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Y} - \coqdocvar{st} \coqdocvar{X}) + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{st} \coqdocvar{Y}\coqdoceol
\coqdocindent{7.50em}
\ensuremath{\lor} (\coqdocvar{st} \coqdocvar{Y} - \coqdocvar{st} \coqdocvar{X}) + \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X}\}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{X})\coqdoceol
\coqdocindent{3.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{st} \coqdocvar{Y} \ensuremath{\lor} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X}\}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ELSE}\coqdoceol
\coqdocindent{3.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \ensuremath{\land} \~{}(\coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{st} \coqdocvar{Y}) \}\} ->>\coqdoceol
\coqdocindent{3.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{X} - \coqdocvar{st} \coqdocvar{Y}) + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{st} \coqdocvar{Y}\coqdoceol
\coqdocindent{7.50em}
\ensuremath{\lor} (\coqdocvar{st} \coqdocvar{X} - \coqdocvar{st} \coqdocvar{Y}) + \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X}\}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y})\coqdoceol
\coqdocindent{3.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{st} \coqdocvar{Y} \ensuremath{\lor} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X}\}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{FI}\coqdoceol
\coqdocindent{2.00em}
\{\{\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{st} \coqdocvar{Y} \ensuremath{\lor} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X}\}\})\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{if\_minus\_correct} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} \coqdocvar{if\_minus\_dec}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{verify}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Division}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{div\_mod\_dec} (\coqdocvar{a} \coqdocvar{b} : \coqdocvar{nat}) : \coqdocvar{decorated} := (\coqdoceol
\coqdocnoindent
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{b} \ensuremath{\times} 0 + \coqdocvar{a} = \coqdocvar{a} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{ANum} \coqdocvar{a}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{b} \ensuremath{\times} 0 + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{a} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{b} \ensuremath{\times} \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{a} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} (\coqdocvar{BLe} (\coqdocvar{ANum} \coqdocvar{b}) (\coqdocvar{AId} \coqdocvar{X})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{b} \ensuremath{\times} \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{a} \ensuremath{\land} \coqdocvar{b} \ensuremath{\le} \coqdocvar{st} \coqdocvar{X} \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{b} \ensuremath{\times} (\coqdocvar{st} \coqdocvar{Y} + 1) + (\coqdocvar{st} \coqdocvar{X} - \coqdocvar{b}) = \coqdocvar{a} \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} \coqdocvar{b})\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{b} \ensuremath{\times} (\coqdocvar{st} \coqdocvar{Y} + 1) + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{a} \}\};;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{b} \ensuremath{\times} \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{a} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{b} \ensuremath{\times} \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{a} \ensuremath{\land} \~{}(\coqdocvar{b} \ensuremath{\le} \coqdocvar{st} \coqdocvar{X}) \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{b} \ensuremath{\times} \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{st} \coqdocvar{X} = \coqdocvar{a} \ensuremath{\land} (\coqdocvar{st} \coqdocvar{X} < \coqdocvar{b}) \}\}\coqdoceol
\coqdocnoindent
)\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{div\_mod\_dec\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{b},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{div\_mod\_dec} \coqdocvar{a} \coqdocvar{b}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{a} \coqdocvar{b}. \coqdocvar{verify}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{mult\_plus\_distr\_l}. \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Parity}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{find\_parity} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} (\coqdocvar{BLe} (\coqdocvar{ANum} 2) (\coqdocvar{AId} \coqdocvar{X})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
There are actually several ways to phrase the loop invariant for
    this program.  Here is one natural one, which leads to a rather
    long proof: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ev} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ev\_0} : \coqdocvar{ev} \coqdocvar{O}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ev\_SS} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}:\coqdocvar{nat}, \coqdocvar{ev} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{ev} (\coqdocvar{S} (\coqdocvar{S} \coqdocvar{n})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{find\_parity\_dec} \coqdocvar{m} : \coqdocvar{decorated} :=\coqdoceol
\coqdocindent{1.00em}
(\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m}\}\} ->>\coqdoceol
\coqdocindent{1.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{m} \ensuremath{\land} \coqdocvar{ev} (\coqdocvar{m} - \coqdocvar{st} \coqdocvar{X}) \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} (\coqdocvar{BLe} (\coqdocvar{ANum} 2) (\coqdocvar{AId} \coqdocvar{X})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{m} \ensuremath{\land} \coqdocvar{ev} (\coqdocvar{m} - \coqdocvar{st} \coqdocvar{X})) \ensuremath{\land} 2 \ensuremath{\le} \coqdocvar{st} \coqdocvar{X} \}\} ->>\coqdoceol
\coqdocindent{2.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} - 2 \ensuremath{\le} \coqdocvar{m} \ensuremath{\land} (\coqdocvar{ev} (\coqdocvar{m} - (\coqdocvar{st} \coqdocvar{X} - 2))) \}\}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2)\coqdoceol
\coqdocindent{2.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{m} \ensuremath{\land} \coqdocvar{ev} (\coqdocvar{m} - \coqdocvar{st} \coqdocvar{X}) \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{1.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{X} \ensuremath{\le} \coqdocvar{m} \ensuremath{\land} \coqdocvar{ev} (\coqdocvar{m} - \coqdocvar{st} \coqdocvar{X})) \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} < 2 \}\} ->>\coqdoceol
\coqdocindent{1.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X}=0 \ensuremath{\leftrightarrow} \coqdocvar{ev} \coqdocvar{m} \}\})\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{l1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m} \coqdocvar{n} \coqdocvar{p},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{p} \ensuremath{\le} \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} \ensuremath{\le} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{m} - (\coqdocvar{n} - \coqdocvar{p}) = \coqdocvar{m} - \coqdocvar{n} + \coqdocvar{p}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{omega}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{l2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} (\coqdocvar{m} + 2).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{rewrite} \coqdocvar{plus\_comm}. \coqdoctac{simpl}. \coqdoctac{constructor}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{l3'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot}\coqdocvar{ev} (\coqdocvar{S} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{induction} \coqdocvar{m}; \coqdoctac{intros} \coqdocvar{H1} \coqdocvar{H2}. \coqdoctac{inversion} \coqdocvar{H2}. \coqdoctac{apply} \coqdocvar{IHm}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{inversion} \coqdocvar{H2}; \coqdoctac{subst}; \coqdoctac{assumption}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{l3} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
1 \ensuremath{\le} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ev} (\coqdocvar{m} - 1) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{False}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{apply} \coqdocvar{l2} \coqdoctac{in} \coqdocvar{H1}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{assert} (\coqdocvar{G} : \coqdocvar{m} - 1 + 2 = \coqdocvar{S} \coqdocvar{m}). \coqdoctac{clear} \coqdocvar{H0} \coqdocvar{H1}. \coqdoctac{omega}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{rewrite} \coqdocvar{G} \coqdoctac{in} \coqdocvar{H1}. \coqdoctac{apply} \coqdocvar{l3'} \coqdoctac{in} \coqdocvar{H0}. \coqdoctac{apply} \coqdocvar{H0}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{find\_parity\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{find\_parity\_dec} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intro} \coqdocvar{m}. \coqdocvar{verify};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{fold} (\coqdocvar{leb} 2 (\coqdocvar{st} \coqdocvar{X})) \coqdoctac{in} *;\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{rewrite} \coqdocvar{leb\_iff} \coqdoctac{in} *;\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{rewrite} \coqdocvar{leb\_iff\_conv} \coqdoctac{in} *; \coqdoctac{eauto}; \coqdoctac{try} \coqdoctac{omega}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{minus\_diag}. \coqdoctac{constructor}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{l1}; \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{l2}; \coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{minus\_n\_O} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{st} \coqdocvar{X}) \coqdockw{as} [| [| \coqdocvar{n}]].\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} \coqdocvar{l3} \coqdoctac{in} \coqdocvar{H}; \coqdoctac{try} \coqdoctac{assumption}. \coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{clear} \coqdocvar{H0} \coqdocvar{H2}. \coqdocindent{4.00em}
\coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here is a more intuitive way of writing the invariant: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{find\_parity\_dec'} \coqdocvar{m} : \coqdocvar{decorated} :=\coqdoceol
\coqdocindent{0.50em}
(\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m}\}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{ev} (\coqdocvar{st} \coqdocvar{X}) \ensuremath{\leftrightarrow} \coqdocvar{ev} \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{WHILE} (\coqdocvar{BLe} (\coqdocvar{ANum} 2) (\coqdocvar{AId} \coqdocvar{X})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{ev} (\coqdocvar{st} \coqdocvar{X}) \ensuremath{\leftrightarrow} \coqdocvar{ev} \coqdocvar{m}) \ensuremath{\land} 2 \ensuremath{\le} \coqdocvar{st} \coqdocvar{X} \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{ev} (\coqdocvar{st} \coqdocvar{X} - 2) \ensuremath{\leftrightarrow} \coqdocvar{ev} \coqdocvar{m}) \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{ev} (\coqdocvar{st} \coqdocvar{X}) \ensuremath{\leftrightarrow} \coqdocvar{ev} \coqdocvar{m}) \}\}\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{END}\coqdoceol
\coqdocindent{0.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{ev} (\coqdocvar{st} \coqdocvar{X}) \ensuremath{\leftrightarrow} \coqdocvar{ev} \coqdocvar{m}) \ensuremath{\land} \~{}(2 \ensuremath{\le} \coqdocvar{st} \coqdocvar{X}) \}\} ->>\coqdoceol
\coqdocindent{0.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X}=0 \ensuremath{\leftrightarrow} \coqdocvar{ev} \coqdocvar{m} \}\})\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{l4} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
2 \ensuremath{\le} \coqdocvar{m} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{ev} (\coqdocvar{m} - 2) \ensuremath{\leftrightarrow} \coqdocvar{ev} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{m}; \coqdoctac{intros}. \coqdoctac{split}; \coqdoctac{intro}; \coqdoctac{constructor}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{m}. \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H1}. \coqdoctac{simpl} \coqdoctac{in} *.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{minus\_n\_O} \coqdoctac{in} *. \coqdoctac{split}; \coqdoctac{intro}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{constructor}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{find\_parity\_correct'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{find\_parity\_dec'} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{m}. \coqdocvar{verify};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{fold} (\coqdocvar{leb} 2 (\coqdocvar{st} \coqdocvar{X})) \coqdoctac{in} *;\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{rewrite} \coqdocvar{leb\_iff} \coqdoctac{in} *;\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{rewrite} \coqdocvar{leb\_iff\_conv} \coqdoctac{in} *; \coqdoctac{intuition}; \coqdoctac{eauto}; \coqdoctac{try} \coqdoctac{omega}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{l4} \coqdoctac{in} \coqdocvar{H0}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{l4}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H0}. \coqdoctac{constructor}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{st} \coqdocvar{X}) \coqdockw{as} [| [| \coqdocvar{n}]]. \coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{clear} \coqdocvar{H0} \coqdocvar{H} \coqdocvar{H3}. \coqdocindent{4.00em}
\coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here is the simplest invariant we've found for this program: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{parity\_dec} \coqdocvar{m} : \coqdocvar{decorated} :=\coqdoceol
\coqdocindent{0.50em}
(\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m}\}\} ->> \coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{parity} (\coqdocvar{st} \coqdocvar{X}) = \coqdocvar{parity} \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{WHILE} (\coqdocvar{BLe} (\coqdocvar{ANum} 2) (\coqdocvar{AId} \coqdocvar{X})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{parity} (\coqdocvar{st} \coqdocvar{X}) = \coqdocvar{parity} \coqdocvar{m} \ensuremath{\land} 2 \ensuremath{\le} \coqdocvar{st} \coqdocvar{X} \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{parity} (\coqdocvar{st} \coqdocvar{X} - 2) = \coqdocvar{parity} \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{parity} (\coqdocvar{st} \coqdocvar{X}) = \coqdocvar{parity} \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{END}\coqdoceol
\coqdocindent{0.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{parity} (\coqdocvar{st} \coqdocvar{X}) = \coqdocvar{parity} \coqdocvar{m} \ensuremath{\land} \~{}(2 \ensuremath{\le} \coqdocvar{st} \coqdocvar{X}) \}\} ->>\coqdoceol
\coqdocindent{0.50em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{parity} \coqdocvar{m} \}\})\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{parity\_dec\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{parity\_dec} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdocvar{verify};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{fold} (\coqdocvar{leb} 2 (\coqdocvar{st} \coqdocvar{X})) \coqdoctac{in} *;\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{rewrite} \coqdocvar{leb\_iff} \coqdoctac{in} *;\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{rewrite} \coqdocvar{leb\_iff\_conv} \coqdoctac{in} *; \coqdoctac{eauto}; \coqdoctac{try} \coqdoctac{omega}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{parity\_ge\_2}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}. \coqdoctac{symmetry}. \coqdoctac{apply} \coqdocvar{parity\_lt\_2}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Square Roots}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{sqrt\_dec} \coqdocvar{m} : \coqdocvar{decorated} := (\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \ensuremath{\land} 0*0 \ensuremath{\le} \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Z}\ensuremath{\times}\coqdocvar{st} \coqdocvar{Z} \ensuremath{\le} \coqdocvar{m} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BLe} (\coqdocvar{AMult} (\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{ANum} 1))\coqdoceol
\coqdocindent{9.50em}
(\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{ANum} 1)))\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{AId} \coqdocvar{X}) \coqdocvar{DO}\coqdoceol
\coqdocindent{3.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Z}\ensuremath{\times}\coqdocvar{st} \coqdocvar{Z}\ensuremath{\le}\coqdocvar{m})\coqdoceol
\coqdocindent{9.50em}
\ensuremath{\land} (\coqdocvar{st} \coqdocvar{Z} + 1)*(\coqdocvar{st} \coqdocvar{Z} + 1) \ensuremath{\le} \coqdocvar{st} \coqdocvar{X} \}\} ->>\coqdoceol
\coqdocindent{3.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \ensuremath{\land} (\coqdocvar{st} \coqdocvar{Z}+1)*(\coqdocvar{st} \coqdocvar{Z}+1)<=\coqdocvar{m} \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{3.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Z}\ensuremath{\times}\coqdocvar{st} \coqdocvar{Z}\ensuremath{\le}\coqdocvar{m} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Z}\ensuremath{\times}\coqdocvar{st} \coqdocvar{Z}\ensuremath{\le}\coqdocvar{m})\coqdoceol
\coqdocindent{9.50em}
\ensuremath{\land} \~{}((\coqdocvar{st} \coqdocvar{Z} + 1)*(\coqdocvar{st} \coqdocvar{Z} + 1) \ensuremath{\le} \coqdocvar{st} \coqdocvar{X}) \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z}\ensuremath{\times}\coqdocvar{st} \coqdocvar{Z}\ensuremath{\le}\coqdocvar{m} \ensuremath{\land} \coqdocvar{m}<(\coqdocvar{st} \coqdocvar{Z}+1)*(\coqdocvar{st} \coqdocvar{Z}+1) \}\})\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{sqrt\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{sqrt\_dec} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intro} \coqdocvar{m}. \coqdocvar{verify}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Squaring}



 Again, there are several ways of annotating the squaring program.
    The simplest variant we've found, \coqdocdefinition{square\_simpler\_dec}, is given
    last. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{square\_dec} (\coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{decorated} := (\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{AId} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{m} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Z} = 0\}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{m} \ensuremath{\times} \coqdocvar{m} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 0)) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{m} \ensuremath{\times} \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\not=} 0 \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{X}) + \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} (\coqdocvar{st} \coqdocvar{Y} - 1) = \coqdocvar{m} \ensuremath{\times} \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{AId} \coqdocvar{X})\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} (\coqdocvar{st} \coqdocvar{Y} - 1) = \coqdocvar{m} \ensuremath{\times} \coqdocvar{m} \}\};;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{m} \ensuremath{\times} \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{m} \ensuremath{\times} \coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0 \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{m} \ensuremath{\times} \coqdocvar{m} \}\}\coqdoceol
\coqdocnoindent
)\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{square\_dec\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{square\_dec} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intro} \coqdocvar{n}. \coqdocvar{verify}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{st} \coqdocvar{Y}) \coqdockw{as} [| \coqdocvar{y'}]. \coqdoctac{apply} \coqdocvar{False\_ind}. \coqdoctac{apply} \coqdocvar{H0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{minus\_n\_O}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{G} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{n} \ensuremath{\times} \coqdocvar{S} \coqdocvar{m} = \coqdocvar{n} + \coqdocvar{n} \ensuremath{\times} \coqdocvar{m}). \{\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{clear}. \coqdoctac{intros}. \coqdoctac{induction} \coqdocvar{n}. \coqdoctac{reflexivity}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{IHn}. \coqdoctac{omega}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}. \coqdoctac{rewrite} \coqdocvar{G}. \coqdoctac{rewrite} \coqdocvar{plus\_assoc}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{square\_dec'} (\coqdocvar{n} : \coqdocvar{nat}) : \coqdocvar{decorated} := (\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{ANum} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{AId} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{n} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Z} = 0 \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} (\coqdocvar{st} \coqdocvar{X} - \coqdocvar{st} \coqdocvar{Y})\coqdoceol
\coqdocindent{7.50em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\le} \coqdocvar{st} \coqdocvar{X} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 0)) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Z} = \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} (\coqdocvar{st} \coqdocvar{X} - \coqdocvar{st} \coqdocvar{Y}) \coqdoceol
\coqdocindent{8.00em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\le} \coqdocvar{st} \coqdocvar{X})\coqdoceol
\coqdocindent{8.50em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\not=} 0 \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{AId} \coqdocvar{X})\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} (\coqdocvar{st} \coqdocvar{X} - (\coqdocvar{st} \coqdocvar{Y} - 1))\coqdoceol
\coqdocindent{8.50em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\le} \coqdocvar{st} \coqdocvar{X} \}\};;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} (\coqdocvar{st} \coqdocvar{X} - \coqdocvar{st} \coqdocvar{Y})\coqdoceol
\coqdocindent{8.50em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\le} \coqdocvar{st} \coqdocvar{X} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Z} = \coqdocvar{st} \coqdocvar{X} \ensuremath{\times} (\coqdocvar{st} \coqdocvar{X} - \coqdocvar{st} \coqdocvar{Y}) \coqdoceol
\coqdocindent{7.00em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\le} \coqdocvar{st} \coqdocvar{X})\coqdoceol
\coqdocindent{7.50em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0 \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{n} \ensuremath{\times} \coqdocvar{n} \}\}\coqdoceol
\coqdocnoindent
)\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{square\_dec'\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{square\_dec'} \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intro} \coqdocvar{n}. \coqdocvar{verify}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{minus\_diag}. \coqdoctac{omega}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{mult\_minus\_distr\_l}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{mult\_minus\_distr\_l}. \coqdoctac{rewrite} \coqdocvar{mult\_1\_r}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{G} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p}, \coqdoceol
\coqdocindent{9.00em}
\coqdocvar{m} \ensuremath{\le} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{p} \ensuremath{\le} \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{n} - (\coqdocvar{m} - \coqdocvar{p}) = \coqdocvar{n} - \coqdocvar{m} + \coqdocvar{p}).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros}. \coqdoctac{omega}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{G}. \coqdoctac{reflexivity}. \coqdoctac{apply} \coqdocvar{mult\_le\_compat\_l}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{st} \coqdocvar{Y}). \coqdoctac{apply} \coqdocvar{False\_ind}. \coqdoctac{apply} \coqdocvar{H0}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{clear}. \coqdoctac{rewrite} \coqdocvar{mult\_succ\_r}. \coqdoctac{rewrite} \coqdocvar{plus\_comm}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{le\_plus\_l}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{minus\_n\_O}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{square\_simpler\_dec} (\coqdocvar{m} : \coqdocvar{nat}) : \coqdocvar{decorated} := (\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} 0 = 0*\coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} 0 = (\coqdocvar{st} \coqdocvar{Y})*\coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = (\coqdocvar{st} \coqdocvar{Y})*\coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\}->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = (\coqdocvar{st} \coqdocvar{Y})*\coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{X})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Z} = (\coqdocvar{st} \coqdocvar{Y})*\coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m})\coqdoceol
\coqdocindent{4.00em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\not=} \coqdocvar{st} \coqdocvar{X} \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + \coqdocvar{st} \coqdocvar{X} = ((\coqdocvar{st} \coqdocvar{Y}) + 1)*\coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{AId} \coqdocvar{X})\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = ((\coqdocvar{st} \coqdocvar{Y}) + 1)*\coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\};;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = (\coqdocvar{st} \coqdocvar{Y})*\coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Z} = (\coqdocvar{st} \coqdocvar{Y})*\coqdocvar{m} \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{m}) \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{st} \coqdocvar{X} \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{m}\ensuremath{\times}\coqdocvar{m} \}\}\coqdoceol
\coqdocnoindent
)\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{square\_simpler\_dec\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{square\_simpler\_dec} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intro} \coqdocvar{m}. \coqdocvar{verify}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{mult\_plus\_distr\_r}. \coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{plus\_n\_O}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Two loops}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{two\_loops\_dec} (\coqdocvar{a} \coqdocvar{b} \coqdocvar{c} : \coqdocvar{nat}) : \coqdocvar{decorated} :=\coqdoceol
\coqdocnoindent
( \{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{c} = 0 + \coqdocvar{c} \ensuremath{\land} 0 = 0 \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{c} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{c} \ensuremath{\land} 0 = 0 \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{c} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{c} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0 \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= \coqdocvar{ANum} \coqdocvar{c}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{c} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0 \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} \coqdocvar{a})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Z} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{c} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0) \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} \ensuremath{\not=} \coqdocvar{a} \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + 1 = \coqdocvar{st} \coqdocvar{X} + 1 + \coqdocvar{c} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0 \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + 1 = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{c} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0 \}\};;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{c} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0 \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Z} = \coqdocvar{st} \coqdocvar{X} + \coqdocvar{c} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0) \ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{a} \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{a} + \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{c} \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} \coqdocvar{b})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{a} + \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{c} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} \ensuremath{\not=} \coqdocvar{b} \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + 1 = \coqdocvar{a} + \coqdocvar{st} \coqdocvar{Y} + 1 + \coqdocvar{c} \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} + 1 = \coqdocvar{a} + \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{c} \}\};;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{a} + \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{c} \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Z} = \coqdocvar{a} + \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{c}) \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{b} \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{a} + \coqdocvar{b} + \coqdocvar{c} \}\}\coqdoceol
\coqdocnoindent
)\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{two\_loops\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{b} \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{two\_loops\_dec} \coqdocvar{a} \coqdocvar{b} \coqdocvar{c}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{a} \coqdocvar{b} \coqdocvar{c}. \coqdocvar{verify}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Power Series}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{pow2} \coqdocvar{n} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} 1\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} 2 \ensuremath{\times} (\coqdocvar{pow2} \coqdocvar{n'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{dpow2\_down} \coqdocvar{n} :=\coqdoceol
\coqdocnoindent
( \{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{True} \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} 1 = (\coqdocvar{pow2} (0 + 1))-1 \ensuremath{\land} 1 = \coqdocvar{pow2} 0 \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{X} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} 1 = (\coqdocvar{pow2} (0 + 1))-1 \ensuremath{\land} 1 = \coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X}) \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 1\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} = (\coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 1))-1 \ensuremath{\land} 1 = \coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X}) \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Z} ::= \coqdocvar{ANum} 1\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} = (\coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 1))-1 \ensuremath{\land} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X}) \}\};;\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} \coqdocvar{n})) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Y} = (\coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 1))-1 \ensuremath{\land} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X}))\coqdoceol
\coqdocindent{8.50em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{X} \ensuremath{\not=} \coqdocvar{n} \}\} ->>\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} + 2 \ensuremath{\times} \coqdocvar{st} \coqdocvar{Z} = (\coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 2))-1\coqdoceol
\coqdocindent{8.50em}
\ensuremath{\land} 2 \ensuremath{\times} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 1) \}\}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Z} ::= \coqdocvar{AMult} (\coqdocvar{ANum} 2) (\coqdocvar{AId} \coqdocvar{Z})\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} + \coqdocvar{st} \coqdocvar{Z} = (\coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 2))-1\coqdoceol
\coqdocindent{8.50em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 1) \}\};;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{Z})\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} = (\coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 2))-1\coqdoceol
\coqdocindent{8.50em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 1) \}\};;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} = (\coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 1))-1\coqdoceol
\coqdocindent{8.50em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X}) \}\}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} (\coqdocvar{st} \coqdocvar{Y} = (\coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X} + 1))-1 \ensuremath{\land} \coqdocvar{st} \coqdocvar{Z} = \coqdocvar{pow2} (\coqdocvar{st} \coqdocvar{X}))\coqdoceol
\coqdocindent{7.50em}
\ensuremath{\land} \coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \}\} ->>\coqdoceol
\coqdocindent{1.00em}
\{\{ \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{Y} = \coqdocvar{pow2} (\coqdocvar{n}+1) - 1 \}\}\coqdoceol
\coqdocnoindent
)\%\coqdocvar{dcom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{pow2\_plus\_1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pow2} (\coqdocvar{n}+1) = \coqdocvar{pow2} \coqdocvar{n} + \coqdocvar{pow2} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{induction} \coqdocvar{n}; \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdoctac{omega}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{pow2\_le\_1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{pow2} \coqdocvar{n} \ensuremath{\ge} 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{induction} \coqdocvar{n}. \coqdoctac{simpl}. \coqdoctac{constructor}. \coqdoctac{simpl}. \coqdoctac{omega}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{dpow2\_down\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{dpow2\_down} \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intro} \coqdocvar{m}. \coqdocvar{verify}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{pow2\_plus\_1}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H0}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{plus\_n\_O}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pow2\_plus\_1}. \coqdocvar{remember} (\coqdocvar{st} \coqdocvar{X}) \coqdockw{as} \coqdocvar{n}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{replace} (\coqdocvar{pow2} (\coqdocvar{n} + 1) - 1 + \coqdocvar{pow2} (\coqdocvar{n} + 1))\coqdoceol
\coqdocindent{3.50em}
\coqdockw{with} (\coqdocvar{pow2} (\coqdocvar{n} + 1) + \coqdocvar{pow2} (\coqdocvar{n} + 1) - 1) \coqdoctac{by} \coqdoctac{omega}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pow2\_plus\_1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{replace} (\coqdocvar{n} + 1 + 1) \coqdockw{with} (\coqdocvar{n} + 2) \coqdoctac{by} \coqdoctac{omega}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{plus\_n\_O}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pow2\_plus\_1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{replace} (\coqdocvar{st} \coqdocvar{X} + 1 + 1) \coqdockw{with} (\coqdocvar{st} \coqdocvar{X} + 2) \coqdoctac{by} \coqdoctac{omega}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Further Exercises 

\paragraph{Exercise: 3 stars, advanced (slow\_assignment\_dec)}

 In the \coqdocvar{slow\_assignment} exercise above, we saw a roundabout way
    of assigning a number currently stored in \coqdocdefinition{X} to the variable \coqdocdefinition{Y}:
    start \coqdocdefinition{Y} at 0, then decrement \coqdocdefinition{X} until it hits 0,
    incrementing \coqdocdefinition{Y} at each step.  Write a formal version of this
    decorated program and prove it correct. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{slow\_assignment\_dec} (\coqdocvar{m}:\coqdocvar{nat}) : \coqdocvar{decorated}\coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{slow\_assignment\_dec\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{slow\_assignment\_dec} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.  \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advancedM (factorial\_dec)}

 Remember the factorial function we worked with before: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{real\_fact} (\coqdocvar{n}:\coqdocvar{nat}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} 1\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdocvar{n} \ensuremath{\times} (\coqdocvar{real\_fact} \coqdocvar{n'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Following the pattern of \coqdocdefinition{subtract\_slowly\_dec}, write a decorated
    program \coqdocvar{factorial\_dec} that implements the factorial function and
    prove it correct as \coqdocvar{factorial\_dec\_correct}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced, optional (fib\_eqn)}

 The Fibonacci function is usually written like this:


      Fixpoint fib n :=
        match n with
        | 0 => 1
        | 1 => 1
        | \_ => fib (pred n) + fib (pred (pred n))
        end.


   This doesn't pass Coq's termination checker, but here is a 
   slightly clunkier definition that does: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{fib} \coqdocvar{n} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} 1\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdockw{match} \coqdocvar{n'} \coqdockw{with}\coqdoceol
\coqdocindent{6.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} 1\coqdoceol
\coqdocindent{6.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'{}'} \ensuremath{\Rightarrow} \coqdocvar{fib} \coqdocvar{n'} + \coqdocvar{fib} \coqdocvar{n'{}'}\coqdoceol
\coqdocindent{6.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
Prove that \coqdocdefinition{fib} satisfies the following equation: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{fib\_eqn} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} > 0 \ensuremath{\rightarrow} \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fib} \coqdocvar{n} + \coqdocvar{fib} (\coqdocvar{Init.Nat.pred} \coqdocvar{n}) = \coqdocvar{fib} (\coqdocvar{n} + 1).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced, optional (fib)}

 The following Imp program leaves the value of \coqdocdefinition{fib} \coqdocabbreviation{n} in the
    variable \coqdocdefinition{Y} when it terminates: 


    X ::= 1;;
    Y ::= 1;;
    Z ::= 1;;
    WHILE X <> n+1 DO
      T ::= Z;
      Z ::= Z + Y;;
      Y ::= T;;
      X ::= X + 1
    END


    Fill in the following definition of \coqdocdefinition{dfib} and prove that it 
    satisfies this specification:


      \footnote{\url{True}} dfib \footnote{\url{ Y = fib n }}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{T} : \coqdocvar{id} := \coqdocvar{Id} "T".\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{dfib} (\coqdocvar{n}:\coqdocvar{nat}) : \coqdocvar{decorated}\coqdoceol
\coqdocnoindent
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{dfib\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dec\_correct} (\coqdocvar{dfib} \coqdocvar{n}).\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars, advanced, optional (improve\_dcom)}

 The formal decorated programs defined in this section are intended 
    to look as similar as possible to the informal ones defined earlier
    in the chapter.  If we drop this requirement, we can eliminate
    almost all annotations, just requiring final postconditions and 
    loop invariants to be provided explicitly.  Do this -- i.e., define a 
    new version of dcom with as few annotations as possible and adapt the
    rest of the formal development leading up to the \coqdoclemma{verification\_correct} 
    theorem. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advanced, optional (implement\_dcom)}

 Adapt the parser for Imp presented in chapter \coqdoclibrary{ImpParser} 
    to parse decorated commands (either ours or the ones you defined
    in the previous exercise). \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-12-20 11:20:02 -0500 (Tue, 20 Dec 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.HoareAsLogic}{Library }{Top.HoareAsLogic}

\begin{coqdoccode}
\end{coqdoccode}
\section{HoareAsLogic: Hoare Logic as a Logic}



 The presentation of Hoare logic in chapter \coqdoclibrary{Hoare} could be
    described as ``model-theoretic'': the proof rules for each of the
    constructors were presented as \textit{theorems} about the evaluation
    behavior of programs, and proofs of program correctness (validity
    of Hoare triples) were constructed by combining these theorems
    directly in Coq.


    Another way of presenting Hoare logic is to define a completely
    separate proof system -- a set of axioms and inference rules that
    talk about commands, Hoare triples, etc. -- and then say that a
    proof of a Hoare triple is a valid derivation in \textit{that} logic.  We
    can do this by giving an inductive definition of \textit{valid
    derivations} in this new logic.


    This chapter is optional.  Before reading it, you'll want to read
    the \coqdoclibrary{ProofObjects} chapter. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Hoare}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Definitions}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{hoare\_proof} : \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{Assertion} \ensuremath{\rightarrow} \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H\_Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P} (\coqdocvar{SKIP}) \coqdocvar{P}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H\_Asgn} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Q} \coqdocvar{V} \coqdocvar{a},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{hoare\_proof} (\coqdocvar{assn\_sub} \coqdocvar{V} \coqdocvar{a} \coqdocvar{Q}) (\coqdocvar{V} ::= \coqdocvar{a}) \coqdocvar{Q}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H\_Seq}  : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q} \coqdocvar{d} \coqdocvar{R},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{hoare\_proof} \coqdocvar{Q} \coqdocvar{d} \coqdocvar{R} \ensuremath{\rightarrow} \coqdocvar{hoare\_proof} \coqdocvar{P} (\coqdocvar{c};;\coqdocvar{d}) \coqdocvar{R}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{b} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} (\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st}) \coqdocvar{c1} \coqdocvar{Q} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} (\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \~{}(\coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st})) \coqdocvar{c2} \coqdocvar{Q} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P} (\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) \coqdocvar{Q}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H\_While} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{b} \coqdocvar{c},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} (\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st}) \coqdocvar{c} \coqdocvar{P} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P} (\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c} \coqdocvar{END}) (\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{P} \coqdocvar{st} \ensuremath{\land} \ensuremath{\lnot} (\coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H\_Consequence}  : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} \coqdocvar{P'} \coqdocvar{Q'} : \coqdocvar{Assertion}) \coqdocvar{c},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P'} \coqdocvar{c} \coqdocvar{Q'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{st}, \coqdocvar{P} \coqdocvar{st} \ensuremath{\rightarrow} \coqdocvar{P'} \coqdocvar{st}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{st}, \coqdocvar{Q'} \coqdocvar{st} \ensuremath{\rightarrow} \coqdocvar{Q} \coqdocvar{st}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We don't need to include axioms corresponding to
    \coqdoclemma{hoare\_consequence\_pre} or \coqdoclemma{hoare\_consequence\_post}, because 
    these can be proven easily from \coqdocconstructor{H\_Consequence}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{H\_Consequence\_pre} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} \coqdocvar{P'}: \coqdocvar{Assertion}) \coqdocvar{c},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P'} \coqdocvar{c} \coqdocvar{Q} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{st}, \coqdocvar{P} \coqdocvar{st} \ensuremath{\rightarrow} \coqdocvar{P'} \coqdocvar{st}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{eapply} \coqdocvar{H\_Consequence}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{X}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{intros}. \coqdoctac{apply} \coqdocvar{H0}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{H\_Consequence\_post}  : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} \coqdocvar{Q'} : \coqdocvar{Assertion}) \coqdocvar{c},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{st}, \coqdocvar{Q'} \coqdocvar{st} \ensuremath{\rightarrow} \coqdocvar{Q} \coqdocvar{st}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{eapply} \coqdocvar{H\_Consequence}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{X}. \coqdoctac{intros}. \coqdoctac{apply} \coqdocvar{H0}. \coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As an example, let's construct a proof object representing a
    derivation for the hoare triple


      \footnote{\url{assn_sub X (X+1) (assn_sub X (X+2) (X=3))}} 
      X::=X+1 ;; X::=X+2 
      \footnote{\url{X=3}}.


    We can use Coq's tactics to help us construct the proof object. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{sample\_proof} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{hoare\_proof}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{assn\_sub} \coqdocvar{X} (\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1))\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{assn\_sub} \coqdocvar{X} (\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2))\coqdoceol
\coqdocindent{12.00em}
(\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 3) ))\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1);; (\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2)))\coqdoceol
\coqdocindent{2.00em}
(\coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{X} = 3).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{H\_Seq}; \coqdoctac{apply} \coqdocvar{H\_Asgn}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\section{Properties}



\paragraph{Exercise: 2 stars (hoare\_proof\_sound)}

 Prove that such proof objects represent true claims. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_proof\_sound} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{hoare\_proof} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q} \ensuremath{\rightarrow} \{\{\coqdocvar{P}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 We can also use Coq's reasoning facilities to prove metatheorems
    about Hoare Logic.  For example, here are the analogs of two
    theorems we saw in chapter \coqdoclibrary{Hoare} -- this time expressed in terms
    of the syntax of Hoare Logic derivations (provability) rather than
    directly in terms of the semantics of Hoare triples.


    The first one says that, for every \coqdocaxiom{P} and \coqdocconstructor{c}, the assertion
    \{\{\coqdocaxiom{P}\}\} \coqdocconstructor{c} \{\{\coqdocinductive{True}\}\} is \textit{provable} in Hoare Logic.  Note that the
    proof is more complex than the semantic proof in \coqdoclibrary{Hoare}: we
    actually need to perform an induction over the structure of the
    command \coqdocconstructor{c}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{H\_Post\_True\_deriv}:\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{P}, \coqdocvar{hoare\_proof} \coqdocvar{P} \coqdocvar{c} (\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{True}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intro} \coqdocvar{c}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{c}; \coqdoctac{intro} \coqdocvar{P}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_Consequence}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H\_Skip}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}. \coqdoctac{apply} \coqdocvar{I}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_Consequence\_pre}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H\_Asgn}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}. \coqdoctac{apply} \coqdocvar{I}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_Consequence\_pre}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_Seq}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} (\coqdocvar{IHc1} (\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{True})).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHc2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}. \coqdoctac{apply} \coqdocvar{I}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H\_Consequence\_pre} \coqdockw{with} (\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{True}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H\_If}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHc1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHc2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}. \coqdoctac{apply} \coqdocvar{I}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_Consequence}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_While}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHc}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}; \coqdoctac{apply} \coqdocvar{I}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}; \coqdoctac{apply} \coqdocvar{I}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Similarly, we can show that \{\{\coqdocinductive{False}\}\} \coqdocconstructor{c} \{\{\coqdocvariable{Q}\}\} is provable for
    any \coqdocconstructor{c} and \coqdocvariable{Q}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{False\_and\_P\_imp}: \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{False} \ensuremath{\land} \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{Q}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} [\coqdocvar{CONTRA} \coqdocvar{HP}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{CONTRA}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "pre\_false\_helper" \coqdockw{constr}(\coqdocvar{CONSTR}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{H\_Consequence\_pre};\coqdoceol
\coqdocindent{2.00em}
[\coqdoctac{eapply} \coqdocvar{CONSTR} \ensuremath{|} \coqdoctac{intros} ? \coqdocvar{CONTRA}; \coqdoctac{destruct} \coqdocvar{CONTRA}].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{H\_Pre\_False\_deriv}:\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{Q}, \coqdocvar{hoare\_proof} (\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{False}) \coqdocvar{c} \coqdocvar{Q}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{c}; \coqdoctac{intro} \coqdocvar{Q}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdocvar{pre\_false\_helper} \coqdocvar{H\_Skip}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdocvar{pre\_false\_helper} \coqdocvar{H\_Asgn}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdocvar{pre\_false\_helper} \coqdocvar{H\_Seq}. \coqdoctac{apply} \coqdocvar{IHc1}. \coqdoctac{apply} \coqdocvar{IHc2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H\_If}; \coqdoctac{eapply} \coqdocvar{H\_Consequence\_pre}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHc1}. \coqdoctac{intro}. \coqdoctac{eapply} \coqdocvar{False\_and\_P\_imp}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHc2}. \coqdoctac{intro}. \coqdoctac{eapply} \coqdocvar{False\_and\_P\_imp}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_Consequence\_post}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_While}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_Consequence\_pre}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHc}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intro}. \coqdoctac{eapply} \coqdocvar{False\_and\_P\_imp}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intro}. \coqdoctac{simpl}. \coqdoctac{eapply} \coqdocvar{False\_and\_P\_imp}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As a last step, we can show that the set of \coqdocinductive{hoare\_proof} axioms
    is sufficient to prove any true fact about (partial) correctness.
    More precisely, any semantic Hoare triple that we can prove can
    also be proved from these axioms.  Such a set of axioms is said to
    be \textit{relatively complete}.  Our proof is inspired by this one:


      http://www.ps.uni-saarland.de/courses/sem-ws11/script/Hoare.html


    To carry out the proof, we need to invent some intermediate
    assertions using a technical device known as \textit{weakest
    preconditions}.  Given a command \coqdocconstructor{c} and a desired postcondition
    assertion \coqdocvariable{Q}, the weakest precondition \coqdocdefinition{wp} \coqdocconstructor{c} \coqdocvariable{Q} is an assertion
    \coqdocaxiom{P} such that \{\{\coqdocaxiom{P}\}\} \coqdocconstructor{c} \{\{\coqdocvariable{Q}\}\} holds, and moreover, for any other
    assertion \coqdocvariable{P'}, if \{\{\coqdocvariable{P'}\}\} \coqdocconstructor{c} \{\{\coqdocvariable{Q}\}\} holds then \coqdocvariable{P'} \ensuremath{\rightarrow} \coqdocaxiom{P}.  We can
    more directly define this as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{wp} (\coqdocvar{c}:\coqdocvar{com}) (\coqdocvar{Q}:\coqdocvar{Assertion}) : \coqdocvar{Assertion} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} \coqdocvar{s} \ensuremath{\Rightarrow} \coqdockw{\ensuremath{\forall}} \coqdocvar{s'}, \coqdocvar{c} / \coqdocvar{s} \symbol{92}\symbol{92} \coqdocvar{s'} \ensuremath{\rightarrow} \coqdocvar{Q} \coqdocvar{s'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (wp\_is\_precondition)}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{wp\_is\_precondition}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{Q},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{wp} \coqdocvar{c} \coqdocvar{Q}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star (wp\_is\_weakest)}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{wp\_is\_weakest}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{Q} \coqdocvar{P'},\coqdoceol
\coqdocindent{1.50em}
\{\{\coqdocvar{P'}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\} \ensuremath{\rightarrow} \coqdockw{\ensuremath{\forall}} \coqdocvar{st}, \coqdocvar{P'} \coqdocvar{st} \ensuremath{\rightarrow} \coqdocvar{wp} \coqdocvar{c} \coqdocvar{Q} \coqdocvar{st}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The following utility lemma will also be useful. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{bassn\_eval\_false} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{st}, \ensuremath{\lnot} \coqdocvar{bassn} \coqdocvar{b} \coqdocvar{st} \ensuremath{\rightarrow} \coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} = \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{st} \coqdocvar{H}. \coqdoctac{unfold} \coqdocvar{bassn} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{destruct} (\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b}).\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{exfalso}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars (hoare\_proof\_complete)}

 Complete the proof of the theorem. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{hoare\_proof\_complete}: \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q},\coqdoceol
\coqdocindent{1.00em}
\{\{\coqdocvar{P}\}\} \coqdocvar{c} \{\{\coqdocvar{Q}\}\} \ensuremath{\rightarrow} \coqdocvar{hoare\_proof} \coqdocvar{P} \coqdocvar{c} \coqdocvar{Q}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{c}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{P}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{c}; \coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{HT}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_Consequence}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{eapply} \coqdocvar{H\_Skip}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intro} \coqdocvar{st}. \coqdoctac{apply} \coqdocvar{HT}. \coqdoctac{apply} \coqdocvar{E\_Skip}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{H\_Consequence}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{H\_Asgn}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intro} \coqdocvar{st}. \coqdoctac{apply} \coqdocvar{HT}. \coqdoctac{econstructor}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros}; \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H\_Seq} \coqdockw{with} (\coqdocvar{wp} \coqdocvar{c2} \coqdocvar{Q}).\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{eapply} \coqdocvar{IHc1}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{E1} \coqdocvar{H}. \coqdoctac{unfold} \coqdocvar{wp}. \coqdoctac{intros} \coqdocvar{st'{}'} \coqdocvar{E2}.\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{eapply} \coqdocvar{HT}. \coqdoctac{econstructor}; \coqdocvar{eassumption}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{eapply} \coqdocvar{IHc2}. \coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{E1} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{H}; \coqdoctac{assumption}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Finally, we might hope that our axiomatic Hoare logic is
    \textit{decidable}; that is, that there is an (terminating) algorithm (a
    \textit{decision procedure}) that can determine whether or not a given
    Hoare triple is valid (derivable).  But such a decision procedure
    cannot exist!


    Consider the triple \{\{\coqdocinductive{True}\}\} \coqdocconstructor{c} \{\{\coqdocinductive{False}\}\}. This triple is valid
    if and only if \coqdocconstructor{c} is non-terminating.  So any algorithm that
    could determine validity of arbitrary triples could solve the
    Halting Problem.


    Similarly, the triple \{\{\coqdocinductive{True}\} \coqdocvar{SKIP} \{\{\coqdocaxiom{P}\}\} is valid if and only if
    \coqdockw{\ensuremath{\forall}} \coqdocdefinition{s}, \coqdocaxiom{P} \coqdocdefinition{s} is valid, where \coqdocaxiom{P} is an arbitrary assertion of
    Coq's logic. But it is known that there can be no decision
    procedure for this logic. 


    Overall, this axiomatic style of presentation gives a clearer
    picture of what it means to ``give a proof in Hoare logic.''
    However, it is not entirely satisfactory from the point of view of
    writing down such proofs in practice: it is quite verbose.  The
    section of chapter \coqdoclibrary{Hoare2} on formalizing decorated programs
    shows how we can do even better. 

 $Date: 2016-11-06 11:48:34 -0500 (Sun, 06 Nov 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Smallstep}{Library }{Top.Smallstep}

\begin{coqdoccode}
\end{coqdoccode}
\section{Smallstep: Small-step Operational Semantics}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.EqNat}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Lists.List}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{ListNotations}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The evaluators we have seen so far (for \coqdocinductive{aexp}s, \coqdocinductive{bexp}s,
    commands, ...) have been formulated in a ``big-step'' style: they
    specify how a given expression can be evaluated to its final
    value (or a command plus a store to a final store) ``all in one big
    step.''


    This style is simple and natural for many purposes -- indeed,
    Gilles Kahn, who popularized it, called it \textit{natural semantics}.
    But there are some things it does not do well.  In particular, it
    does not give us a natural way of talking about \textit{concurrent}
    programming languages, where the semantics of a program -- i.e.,
    the essence of how it behaves -- is not just which input states
    get mapped to which output states, but also includes the
    intermediate states that it passes through along the way, since
    these states can also be observed by concurrently executing code.


    Another shortcoming of the big-step style is more technical, but
    critical in many situations.  Suppose we want to define a variant
    of Imp where variables could hold \textit{either} numbers \textit{or} lists of
    numbers.  In the syntax of this extended language, it will be
    possible to write strange expressions like 2 + \coqdocconstructor{nil}, and our
    semantics for arithmetic expressions will then need to say
    something about how such expressions behave.  One possibility is
    to maintain the convention that every arithmetic expressions
    evaluates to some number by choosing some way of viewing a list as
    a number -- e.g., by specifying that a list should be interpreted
    as 0 when it occurs in a context expecting a number.  But this
    is really a bit of a hack.


    A much more natural approach is simply to say that the behavior of
    an expression like 2+\coqdocconstructor{nil} is \textit{undefined} -- i.e., it doesn't
    evaluate to any result at all.  And we can easily do this: we just
    have to formulate \coqdocdefinition{aeval} and \coqdocdefinition{beval} as \coqdockw{Inductive} propositions
    rather than Fixpoints, so that we can make them partial functions
    instead of total ones.


    Now, however, we encounter a serious deficiency.  In this
    language, a command might fail to map a given starting state to
    any ending state for \textit{two quite different reasons}: either because
    the execution gets into an infinite loop or because, at some
    point, the program tries to do an operation that makes no sense,
    such as adding a number to a list, so that none of the evaluation
    rules can be applied.


    These two outcomes -- nontermination vs. getting stuck in an
    erroneous configuration -- are quite different.  In particular, we
    want to allow the first (permitting the possibility of infinite
    loops is the price we pay for the convenience of programming with
    general looping constructs like \coqdocvar{while}) but prevent the
    second (which is just wrong), for example by adding some form of
    \textit{typechecking} to the language.  Indeed, this will be a major
    topic for the rest of the course.  As a first step, we need a way
    of presenting the semantics that allows us to distinguish
    nontermination from erroneous ``stuck states.''


    So, for lots of reasons, we'd like to have a finer-grained way of
    defining and reasoning about program behaviors.  This is the topic
    of the present chapter.  We replace the ``big-step'' \coqdoctac{eval} relation
    with a ``small-step'' relation that specifies, for a given program,
    how the ``atomic steps'' of computation are performed. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{A Toy Language}



 To save space in the discussion, let's go back to an
    incredibly simple language containing just constants and
    addition.  (We use single letters -- \coqdocabbreviation{C} and \coqdocaxiom{P} (for Command and
    Plus) -- as constructor names, for brevity.)  At the end of the
    chapter, we'll see how to apply the same techniques to the full
    Imp language.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{C} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{tm}         \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{P} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}. \coqdocemptyline
\end{coqdoccode}
Here is a standard evaluator for this language, written in
    the big-step style that we've been using up to this point. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{evalF} (\coqdocvar{t} : \coqdocvar{tm}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{C} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{P} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow} \coqdocvar{evalF} \coqdocvar{a1} + \coqdocvar{evalF} \coqdocvar{a2}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here is the same evaluator, written in exactly the same
    style, but formulated as an inductively defined relation.  Again,
    we use the notation \coqdocvariable{t} \symbol{92}\symbol{92} \coqdocabbreviation{n} for ``\coqdocvariable{t} evaluates to \coqdocabbreviation{n}.'' \par
\noindent\hrulefill\par
\noindent{}                                (E\_Const)
                               C n \symbol{92}\symbol{92} n


                               t1 \symbol{92}\symbol{92} n1
                               t2 \symbol{92}\symbol{92} n2
\par
\noindent\hrulefill\par
\noindent{}                          (E\_Plus)
                           P t1 t2 \symbol{92}\symbol{92} n1 + n2
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '\symbol{92}\symbol{92}' n " (\coqdoctac{at} \coqdockw{level} 50, \coqdoctac{left} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdoctac{eval} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Const} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{C} \coqdocvar{n} \symbol{92}\symbol{92} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Plus} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} \symbol{92}\symbol{92} \coqdocvar{n1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t2} \symbol{92}\symbol{92} \coqdocvar{n2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} \coqdocvar{t1} \coqdocvar{t2} \symbol{92}\symbol{92} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '\symbol{92}\symbol{92}' n " := (\coqdoctac{eval} \coqdocvar{t} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{SimpleArith1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now, here is the corresponding \textit{small-step} evaluation relation. \par
\noindent\hrulefill\par
\noindent{}        (ST\_PlusConstConst)
                     P (C n1) (C n2) ==> C (n1 + n2)


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                        (ST\_Plus1)
                         P t1 t2 ==> P t1' t2


                              t2 ==> t2'
\par
\noindent\hrulefill\par
\noindent{}                    (ST\_Plus2)
                      P (C n1) t2 ==> P (C n1) t2'
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '==>' t' " (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_PlusConstConst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} (\coqdocvar{C} \coqdocvar{n1}) (\coqdocvar{C} \coqdocvar{n2}) ==> \coqdocvar{C} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{P} \coqdocvar{t1'} \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} (\coqdocvar{C} \coqdocvar{n1}) \coqdocvar{t2} ==> \coqdocvar{P} (\coqdocvar{C} \coqdocvar{n1}) \coqdocvar{t2'}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '==>' t' " := (\coqdocvar{step} \coqdocvar{t} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Things to notice:



\begin{itemize}
\item  We are defining just a single reduction step, in which
      one \coqdocaxiom{P} node is replaced by its value.



\item  Each step finds the \textit{leftmost} \coqdocaxiom{P} node that is ready to
      go (both of its operands are constants) and rewrites it in
      place.  The first rule tells how to rewrite this \coqdocaxiom{P} node
      itself; the other two rules tell how to find it.



\item  A term that is just a constant cannot take a step. 
\end{itemize}


 Let's pause and check a couple of examples of reasoning with
    the \coqdocinductive{step} relation... 

 If \coqdocvariable{t1} can take a step to \coqdocvariable{t1'}, then \coqdocaxiom{P} \coqdocvariable{t1} \coqdocvariable{t2} steps
    to \coqdocaxiom{P} \coqdocvariable{t1'} \coqdocvariable{t2}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_step\_1} :\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{P} (\coqdocvar{C} 0) (\coqdocvar{C} 3))\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{P} (\coqdocvar{C} 2) (\coqdocvar{C} 4))\coqdoceol
\coqdocindent{3.00em}
==>\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{C} (0 + 3))\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{P} (\coqdocvar{C} 2) (\coqdocvar{C} 4)).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ST\_Plus1}. \coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (test\_step\_2)}

 Right-hand sides of sums can take a step only when the
    left-hand side is finished: if \coqdocvariable{t2} can take a step to \coqdocvariable{t2'},
    then \coqdocaxiom{P} (\coqdocabbreviation{C} \coqdocabbreviation{n}) \coqdocvariable{t2} steps to \coqdocaxiom{P} (\coqdocabbreviation{C} \coqdocabbreviation{n})
    \coqdocvariable{t2'}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_step\_2} :\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{C} 0)\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{P}\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{C} 2)\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{P} (\coqdocvar{C} 0) (\coqdocvar{C} 3)))\coqdoceol
\coqdocindent{3.00em}
==>\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{C} 0)\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{P}\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{C} 2)\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{C} (0 + 3))).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{SimpleArith1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Relations}



 We will be working with several different single-step relations,
    so it is helpful to generalize a bit and state a few definitions
    and theorems about relations in general.  (The optional chapter
    \coqdocvar{Rel.v} develops some of these ideas in a bit more detail; it may
    be useful if the treatment here is too dense.) 


    A \textit{binary relation} on a set \coqdocdefinition{X} is a family of propositions
    parameterized by two elements of \coqdocdefinition{X} -- i.e., a proposition about
    pairs of elements of \coqdocdefinition{X}.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{relation} (\coqdocvar{X}: \coqdockw{Type}) := \coqdocvar{X}\ensuremath{\rightarrow}\coqdocvar{X}\ensuremath{\rightarrow}\coqdockw{Prop}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Our main examples of such relations in this chapter will be
    the single-step reduction relation, ==>, and its multi-step
    variant, ==>* (defined below), but there are many other
    examples -- e.g., the ``equals,'' ``less than,'' ``less than or equal
    to,'' and ``is the square of'' relations on numbers, and the ``prefix
    of'' relation on lists and strings. 

 One simple property of the ==> relation is that, like the
    big-step evaluation relation for Imp, it is \textit{deterministic}.


    \textit{Theorem}: For each \coqdocvariable{t}, there is at most one \coqdocvariable{t'} such that \coqdocvariable{t}
    steps to \coqdocvariable{t'} (\coqdocvariable{t} ==> \coqdocvariable{t'} is provable).  Formally, this is the
    same as saying that ==> is deterministic. 

 \textit{Proof sketch}: We show that if \coqdocabbreviation{x} steps to both \coqdocvariable{y1} and
    \coqdocvariable{y2}, then \coqdocvariable{y1} and \coqdocvariable{y2} are equal, by induction on a derivation
    of \coqdocinductive{step} \coqdocabbreviation{x} \coqdocvariable{y1}.  There are several cases to consider, depending on
    the last rule used in this derivation and the last rule in the
    given derivation of \coqdocinductive{step} \coqdocabbreviation{x} \coqdocvariable{y2}.



\begin{itemize}
\item  If both are \coqdocconstructor{ST\_PlusConstConst}, the result is immediate.



\item  The cases when both derivations end with \coqdocconstructor{ST\_Plus1} or
        \coqdocconstructor{ST\_Plus2} follow by the induction hypothesis.



\item  It cannot happen that one is \coqdocconstructor{ST\_PlusConstConst} and the other
        is \coqdocconstructor{ST\_Plus1} or \coqdocconstructor{ST\_Plus2}, since this would imply that \coqdocabbreviation{x}
        has the form \coqdocaxiom{P} \coqdocvariable{t1} \coqdocvariable{t2} where both \coqdocvariable{t1} and \coqdocvariable{t2} are
        constants (by \coqdocconstructor{ST\_PlusConstConst}) \textit{and} one of \coqdocvariable{t1} or \coqdocvariable{t2}
        has the form \coqdocaxiom{P} \coqdocvar{\_}.



\item  Similarly, it cannot happen that one is \coqdocconstructor{ST\_Plus1} and the
        other is \coqdocconstructor{ST\_Plus2}, since this would imply that \coqdocabbreviation{x} has the
        form \coqdocaxiom{P} \coqdocvariable{t1} \coqdocvariable{t2} where \coqdocvariable{t1} has both the form \coqdocaxiom{P} \coqdocvar{t11} \coqdocvariable{t12} and the
        form \coqdocabbreviation{C} \coqdocabbreviation{n}. \ensuremath{\Box} 
\end{itemize}


 Formally: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{deterministic} \{\coqdocvar{X}: \coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y1} \coqdocvar{y2} : \coqdocvar{X}, \coqdocvar{R} \coqdocvar{x} \coqdocvar{y1} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y2} \ensuremath{\rightarrow} \coqdocvar{y1} = \coqdocvar{y2}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{SimpleArith2}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{SimpleArith1}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{step\_deterministic}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{deterministic} \coqdocvar{step}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{deterministic}. \coqdoctac{intros} \coqdocvar{x} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{Hy1} \coqdocvar{Hy2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{y2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hy1}; \coqdoctac{intros} \coqdocvar{y2} \coqdocvar{Hy2}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{inversion} \coqdocvar{Hy2}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{inversion} \coqdocvar{H2}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{inversion} \coqdocvar{H2}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{inversion} \coqdocvar{Hy2}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H0} \coqdoctac{in} \coqdocvar{Hy1}. \coqdoctac{inversion} \coqdocvar{Hy1}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} (\coqdocvar{IHHy1} \coqdocvar{t1'0}).\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{reflexivity}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H} \coqdoctac{in} \coqdocvar{Hy1}. \coqdoctac{inversion} \coqdocvar{Hy1}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{inversion} \coqdocvar{Hy2}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H1} \coqdoctac{in} \coqdocvar{Hy1}. \coqdoctac{inversion} \coqdocvar{Hy1}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{inversion} \coqdocvar{H2}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} (\coqdocvar{IHHy1} \coqdocvar{t2'0}).\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{reflexivity}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{SimpleArith2}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
There is some annoying repetition in this proof.  Each use of
    \coqdoctac{inversion} \coqdocvar{Hy2} results in three subcases, only one of which is
    relevant (the one that matches the current case in the induction
    on \coqdocvar{Hy1}).  The other two subcases need to be dismissed by finding
    the contradiction among the hypotheses and doing inversion on it.


    The following custom tactic, called \coqdocvar{solve\_by\_inverts}, can be
    helpful in such cases.  It will solve the goal if it can be solved
    by inverting some hypothesis; otherwise, it fails. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{solve\_by\_inverts} \coqdocvar{n} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{|} \coqdocvar{H} : ?\coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{T} \coqdockw{with} \coqdockw{Prop} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{solve} [ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with} \coqdocvar{S} (\coqdocvar{S} (?\coqdocvar{n'})) \ensuremath{\Rightarrow} \coqdoctac{subst}; \coqdocvar{solve\_by\_inverts} (\coqdocvar{S} \coqdocvar{n'}) \coqdockw{end} ]\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The details of how this works are not important for now, but it
    illustrates the power of Coq's \coqdockw{Ltac} language for
    programmatically defining special-purpose tactics.  It looks
    through the current proof state for a hypothesis \coqdocvariable{H} (the first
    \coqdockw{match}) of type \coqdockw{Prop} (the second \coqdockw{match}) such that performing
    inversion on \coqdocvariable{H} (followed by a recursive invocation of the same
    tactic, if its argument \coqdocabbreviation{n} is greater than one) completely solves
    the current goal.  If no such hypothesis exists, it fails.


    We will usually want to call \coqdocvar{solve\_by\_inverts} with argument
    1 (especially as larger arguments can lead to very slow proof
    checking), so we define \coqdocvar{solve\_by\_invert} as a shorthand for this
    case. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{solve\_by\_invert} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{solve\_by\_inverts} 1.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Let's see how a proof of the previous theorem can be simplified
    using this tactic... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{SimpleArith3}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{SimpleArith1}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{step\_deterministic\_alt}: \coqdocvar{deterministic} \coqdocvar{step}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{Hy1} \coqdocvar{Hy2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{y2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hy1}; \coqdoctac{intros} \coqdocvar{y2} \coqdocvar{Hy2};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Hy2}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHHy1} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{rewrite} \coqdocvar{H2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHHy1} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{rewrite} \coqdocvar{H2}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{SimpleArith3}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Values}



 Next, it will be useful to slightly reformulate the
    definition of single-step reduction by stating it in terms of
    ``values.'' 

 It is useful to think of the ==> relation as defining an
    \textit{abstract machine}:



\begin{itemize}
\item  At any moment, the \textit{state} of the machine is a term.



\item  A \textit{step} of the machine is an atomic unit of computation --
        here, a single ``add'' operation.



\item  The \textit{halting states} of the machine are ones where there is no
        more computation to be done. 
\end{itemize}


 We can then execute a term \coqdocvariable{t} as follows:



\begin{itemize}
\item  Take \coqdocvariable{t} as the starting state of the machine.



\item  Repeatedly use the ==> relation to find a sequence of
        machine states, starting with \coqdocvariable{t}, where each state steps to
        the next.



\item  When no more reduction is possible, ``read out'' the final state
        of the machine as the result of execution. 
\end{itemize}


 Intuitively, it is clear that the final states of the
    machine are always terms of the form \coqdocabbreviation{C} \coqdocabbreviation{n} for some \coqdocabbreviation{n}.
    We call such terms \textit{values}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_const} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{value} (\coqdocvar{C} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Having introduced the idea of values, we can use it in the
    definition of the ==> relation to write \coqdocconstructor{ST\_Plus2} rule in a
    slightly more elegant way: 

\par
\noindent\hrulefill\par
\noindent{}        (ST\_PlusConstConst)
                     P (C n1) (C n2) ==> C (n1 + n2)


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                        (ST\_Plus1)
                         P t1 t2 ==> P t1' t2


                               value v1
                              t2 ==> t2'
\par
\noindent\hrulefill\par
\noindent{}                        (ST\_Plus2)
                         P v1 t2 ==> P v1 t2'
 Again, the variable names here carry important information:
    by convention, \coqdocvariable{v1} ranges only over values, while \coqdocvariable{t1} and \coqdocvariable{t2}
    range over arbitrary terms.  (Given this convention, the explicit
    \coqdocinductive{value} hypothesis is arguably redundant.  We'll keep it for now,
    to maintain a close correspondence between the informal and Coq
    versions of the rules, but later on we'll drop it in informal
    rules for brevity.) 

  Here are the formal rules: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '==>' t' " (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_PlusConstConst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{P} (\coqdocvar{C} \coqdocvar{n1}) (\coqdocvar{C} \coqdocvar{n2})\coqdoceol
\coqdocindent{3.00em}
==> \coqdocvar{C} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{P} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{P} \coqdocvar{t1'} \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}                     \coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{P} \coqdocvar{v1} \coqdocvar{t2} ==> \coqdocvar{P} \coqdocvar{v1} \coqdocvar{t2'}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '==>' t' " := (\coqdocvar{step} \coqdocvar{t} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, recommended (redo\_determinism)}

 As a sanity check on this change, let's re-verify determinism.


    \textit{Proof sketch}: We must show that if \coqdocabbreviation{x} steps to both \coqdocvariable{y1} and
    \coqdocvariable{y2}, then \coqdocvariable{y1} and \coqdocvariable{y2} are equal.  Consider the final rules used
    in the derivations of \coqdocinductive{step} \coqdocabbreviation{x} \coqdocvariable{y1} and \coqdocinductive{step} \coqdocabbreviation{x} \coqdocvariable{y2}.



\begin{itemize}
\item  If both are \coqdocconstructor{ST\_PlusConstConst}, the result is immediate.



\item  It cannot happen that one is \coqdocconstructor{ST\_PlusConstConst} and the other
      is \coqdocconstructor{ST\_Plus1} or \coqdocconstructor{ST\_Plus2}, since this would imply that \coqdocabbreviation{x} has
      the form \coqdocaxiom{P} \coqdocvariable{t1} \coqdocvariable{t2} where both \coqdocvariable{t1} and \coqdocvariable{t2} are constants (by
      \coqdocconstructor{ST\_PlusConstConst}) \textit{and} one of \coqdocvariable{t1} or \coqdocvariable{t2} has the form \coqdocaxiom{P} \coqdocvar{\_}.



\item  Similarly, it cannot happen that one is \coqdocconstructor{ST\_Plus1} and the other
      is \coqdocconstructor{ST\_Plus2}, since this would imply that \coqdocabbreviation{x} has the form \coqdocaxiom{P}
      \coqdocvariable{t1} \coqdocvariable{t2} where \coqdocvariable{t1} both has the form \coqdocaxiom{P} \coqdocvar{t11} \coqdocvariable{t12} and is a
      value (hence has the form \coqdocabbreviation{C} \coqdocabbreviation{n}).



\item  The cases when both derivations end with \coqdocconstructor{ST\_Plus1} or
      \coqdocconstructor{ST\_Plus2} follow by the induction hypothesis. \ensuremath{\Box} 
\end{itemize}


 Most of this proof is the same as the one above.  But to get
    maximum benefit from the exercise you should try to write your
    formal version from scratch and just use the earlier one if you
    get stuck. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{step\_deterministic} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{deterministic} \coqdocvar{step}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Strong Progress and Normal Forms}



 The definition of single-step reduction for our toy language
    is fairly simple, but for a larger language it would be easy to
    forget one of the rules and accidentally create a situation where
    some term cannot take a step even though it has not been
    completely reduced to a value.  The following theorem shows that
    we did not, in fact, make such a mistake here. 

 \textit{Theorem} (\textit{Strong Progress}): If \coqdocvariable{t} is a term, then either \coqdocvariable{t}
    is a value or else there exists a term \coqdocvariable{t'} such that \coqdocvariable{t} ==> \coqdocvariable{t'}. 

 \textit{Proof}: By induction on \coqdocvariable{t}.



\begin{itemize}
\item  Suppose \coqdocvariable{t} = \coqdocabbreviation{C} \coqdocabbreviation{n}. Then \coqdocvariable{t} is a value.



\item  Suppose \coqdocvariable{t} = \coqdocaxiom{P} \coqdocvariable{t1} \coqdocvariable{t2}, where (by the IH) \coqdocvariable{t1} either is a value
      or can step to some \coqdocvariable{t1'}, and where \coqdocvariable{t2} is either a value or
      can step to some \coqdocvariable{t2'}. We must show \coqdocaxiom{P} \coqdocvariable{t1} \coqdocvariable{t2} is either a value
      or steps to some \coqdocvariable{t'}.



\begin{itemize}
\item  If \coqdocvariable{t1} and \coqdocvariable{t2} are both values, then \coqdocvariable{t} can take a step, by
        \coqdocconstructor{ST\_PlusConstConst}.



\item  If \coqdocvariable{t1} is a value and \coqdocvariable{t2} can take a step, then so can \coqdocvariable{t},
        by \coqdocconstructor{ST\_Plus2}.



\item  If \coqdocvariable{t1} can take a step, then so can \coqdocvariable{t}, by \coqdocconstructor{ST\_Plus1}.  \ensuremath{\Box} 

\end{itemize}

\end{itemize}


   Or, formally: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{strong\_progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} (\coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{left}. \coqdoctac{apply} \coqdocvar{v\_const}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{right}. \coqdoctac{inversion} \coqdocvar{IHt1}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{inversion} \coqdocvar{IHt2}.\coqdoceol
\coqdocindent{4.00em}
\ensuremath{\times}  \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H0}.\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{C} (\coqdocvar{n} + \coqdocvar{n0})).\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}.\coqdoceol
\coqdocindent{4.00em}
\ensuremath{\times}  \coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t'} \coqdocvar{H1}].\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{P} \coqdocvar{t1} \coqdocvar{t'}).\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{ST\_Plus2}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{H1}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t'} \coqdocvar{H0}].\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{P} \coqdocvar{t'} \coqdocvar{t2}).\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{ST\_Plus1}. \coqdoctac{apply} \coqdocvar{H0}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This important property is called \textit{strong progress}, because
    every term either is a value or can ``make progress'' by stepping to
    some other term.  (The qualifier ``strong'' distinguishes it from a
    more refined version that we'll see in later chapters, called
    just \textit{progress}.) 

 The idea of ``making progress'' can be extended to tell us something
    interesting about values: in this language, values are exactly the
    terms that \textit{cannot} make progress in this sense.


    To state this observation formally, let's begin by giving a name
    to terms that cannot make progress.  We'll call them \textit{normal
    forms}.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{normal\_form} \{\coqdocvar{X}:\coqdockw{Type}\} (\coqdocvar{R}:\coqdocvar{relation} \coqdocvar{X}) (\coqdocvar{t}:\coqdocvar{X}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{R} \coqdocvar{t} \coqdocvar{t'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that this definition specifies what it is to be a normal form
    for an \textit{arbitrary} relation \coqdocdefinition{R} over an arbitrary set \coqdocdefinition{X}, not
    just for the particular single-step reduction relation over terms
    that we are interested in at the moment.  We'll re-use the same
    terminology for talking about other relations later in the
    course. 

 We can use this terminology to generalize the observation we made
    in the strong progress theorem: in this language, normal forms and
    values are actually the same thing. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{value\_is\_nf} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{v} \ensuremath{\rightarrow} \coqdocvar{normal\_form} \coqdocvar{step} \coqdocvar{v}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{normal\_form}. \coqdoctac{intros} \coqdocvar{v} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{contra}. \coqdoctac{inversion} \coqdocvar{contra}. \coqdoctac{inversion} \coqdocvar{H1}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{nf\_is\_value} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{normal\_form} \coqdocvar{step} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{value} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{normal\_form}. \coqdoctac{intros} \coqdocvar{t} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{G} : \coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}).\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{apply} \coqdocvar{strong\_progress}. \}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{G}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{apply} \coqdocvar{H0}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdocvar{exfalso}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Corollary} \coqdocvar{nf\_same\_as\_value} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{normal\_form} \coqdocvar{step} \coqdocvar{t} \ensuremath{\leftrightarrow} \coqdocvar{value} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}. \coqdoctac{apply} \coqdocvar{nf\_is\_value}. \coqdoctac{apply} \coqdocvar{value\_is\_nf}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Why is this interesting?


    Because \coqdocinductive{value} is a syntactic concept -- it is defined by looking
    at the form of a term -- while \coqdocdefinition{normal\_form} is a semantic one --
    it is defined by looking at how the term steps.  It is not obvious
    that these concepts should coincide!  Indeed, we could easily have
    written the definitions so that they would \textit{not} coincide. 

\paragraph{Exercise: 3 stars, optional (value\_not\_same\_as\_normal\_form1)}

 We might, for example, mistakenly define \coqdocinductive{value} so that it
    includes some terms that are not finished reducing.  (Even if you don't work this exercise and the following ones
    in Coq, make sure you can think of an example of such a term.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Temp1}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{v\_const} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{value} (\coqdocvar{C} \coqdocvar{n})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{v\_funny} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{n2},                       \coqdoceol
\coqdocindent{7.00em}
\coqdocvar{value} (\coqdocvar{P} \coqdocvar{t1} (\coqdocvar{C} \coqdocvar{n2})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '==>' t' " (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_PlusConstConst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} (\coqdocvar{C} \coqdocvar{n1}) (\coqdocvar{C} \coqdocvar{n2}) ==> \coqdocvar{C} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{P} \coqdocvar{t1'} \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} \coqdocvar{v1} \coqdocvar{t2} ==> \coqdocvar{P} \coqdocvar{v1} \coqdocvar{t2'}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '==>' t' " := (\coqdocvar{step} \coqdocvar{t} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{value\_not\_same\_as\_normal\_form} :\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{v}, \coqdocvar{value} \coqdocvar{v} \ensuremath{\land} \ensuremath{\lnot} \coqdocvar{normal\_form} \coqdocvar{step} \coqdocvar{v}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{End} \coqdocvar{Temp1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (value\_not\_same\_as\_normal\_form2)}

 Alternatively, we might mistakenly define \coqdocinductive{step} so that it
    permits something designated as a value to reduce further. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Temp2}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{v\_const} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{value} (\coqdocvar{C} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '==>' t' " (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Funny} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},                         \coqdoceol
\coqdocindent{3.00em}
\coqdocvar{C} \coqdocvar{n} ==> \coqdocvar{P} (\coqdocvar{C} \coqdocvar{n}) (\coqdocvar{C} 0)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_PlusConstConst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} (\coqdocvar{C} \coqdocvar{n1}) (\coqdocvar{C} \coqdocvar{n2}) ==> \coqdocvar{C} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{P} \coqdocvar{t1'} \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} \coqdocvar{v1} \coqdocvar{t2} ==> \coqdocvar{P} \coqdocvar{v1} \coqdocvar{t2'}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '==>' t' " := (\coqdocvar{step} \coqdocvar{t} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{value\_not\_same\_as\_normal\_form} :\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{v}, \coqdocvar{value} \coqdocvar{v} \ensuremath{\land} \ensuremath{\lnot} \coqdocvar{normal\_form} \coqdocvar{step} \coqdocvar{v}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Temp2}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (value\_not\_same\_as\_normal\_form3)}

 Finally, we might define \coqdocinductive{value} and \coqdocinductive{step} so that there is some
    term that is not a value but that cannot take a step in the \coqdocinductive{step}
    relation.  Such terms are said to be \textit{stuck}. In this case this is
    caused by a mistake in the semantics, but we will also see
    situations where, even in a correct language definition, it makes
    sense to allow some terms to be stuck. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Temp3}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_const} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{value} (\coqdocvar{C} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '==>' t' " (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_PlusConstConst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} (\coqdocvar{C} \coqdocvar{n1}) (\coqdocvar{C} \coqdocvar{n2}) ==> \coqdocvar{C} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{P} \coqdocvar{t1'} \coqdocvar{t2}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '==>' t' " := (\coqdocvar{step} \coqdocvar{t} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(Note that \coqdocconstructor{ST\_Plus2} is missing.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{value\_not\_same\_as\_normal\_form} :\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{t}, \ensuremath{\lnot} \coqdocvar{value} \coqdocvar{t} \ensuremath{\land} \coqdocvar{normal\_form} \coqdocvar{step} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Temp3}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Additional Exercises}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Temp4}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here is another very simple language whose terms, instead of being
    just addition expressions and numbers, are just the booleans true
    and false and a conditional expression... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_true} : \coqdocvar{value} \coqdocvar{ttrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_false} : \coqdocvar{value} \coqdocvar{tfalse}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '==>' t' " (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{t1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} \coqdocvar{tfalse} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} ==> \coqdocvar{tif} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '==>' t' " := (\coqdocvar{step} \coqdocvar{t} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 starM (smallstep\_bools)}

 Which of the following propositions are provable?  (This is just a
    thought exercise, but for an extra challenge feel free to prove
    your answers in Coq.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{bool\_step\_prop1} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tfalse} ==> \coqdocvar{tfalse}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{bool\_step\_prop2} :=\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{tif}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{ttrue}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{ttrue} \coqdocvar{ttrue})\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tif} \coqdocvar{tfalse} \coqdocvar{tfalse} \coqdocvar{tfalse})\coqdoceol
\coqdocindent{1.00em}
==>\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{ttrue}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{bool\_step\_prop3} :=\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{tif}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{ttrue} \coqdocvar{ttrue})\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{ttrue} \coqdocvar{ttrue})\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{tfalse}\coqdoceol
\coqdocindent{1.50em}
==>\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{tif}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{ttrue}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{ttrue} \coqdocvar{ttrue})\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{tfalse}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (progress\_bool)}

 Just as we proved a progress theorem for plus expressions, we can
    do so for boolean expressions, as well. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{strong\_progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} (\coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (step\_deterministic)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{step\_deterministic} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{deterministic} \coqdocvar{step}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Temp5}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (smallstep\_bool\_shortcut)}

 Suppose we want to add a ``short circuit'' to the step relation for
    boolean expressions, so that it can recognize when the \coqdockw{then} and
    \coqdockw{else} branches of a conditional are the same value (either
    \coqdocconstructor{ttrue} or \coqdocconstructor{tfalse}) and reduce the whole conditional to this
    value in a single step, even if the guard has not yet been reduced
    to a value. For example, we would like this proposition to be
    provable:


         tif
            (tif ttrue ttrue ttrue)
            tfalse
            tfalse
     ==>
         tfalse.


 Write an extra clause for the step relation that achieves this
    effect and prove \coqdocdefinition{bool\_step\_prop4}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '==>' t' " (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{t1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} \coqdocvar{tfalse} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} ==> \coqdocvar{tif} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '==>' t' " := (\coqdocvar{step} \coqdocvar{t} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{bool\_step\_prop4} :=\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tif}\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{ttrue} \coqdocvar{ttrue})\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{tfalse}\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{tfalse}\coqdoceol
\coqdocindent{2.50em}
==>\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tfalse}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{bool\_step\_prop4\_holds} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{bool\_step\_prop4}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (properties\_of\_altered\_step)}

 It can be shown that the determinism and strong progress theorems
    for the step relation in the lecture notes also hold for the
    definition of step given above.  After we add the clause
    \coqdocvar{ST\_ShortCircuit}...



\begin{itemize}
\item  Is the \coqdocinductive{step} relation still deterministic?  Write yes or no and
      briefly (1 sentence) explain your answer.


      Optional: prove your answer correct in Coq. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}

\begin{itemize}
\item  Does a strong progress theorem hold? Write yes or no and
     briefly (1 sentence) explain your answer.


     Optional: prove your answer correct in Coq.

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}

\begin{itemize}
\item  In general, is there any way we could cause strong progress to
     fail if we took away one or more constructors from the original
     step relation? Write yes or no and briefly (1 sentence) explain
     your answer.

\end{itemize}


 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Temp5}.\coqdoceol
\coqdocnoindent
\coqdockw{End} \coqdocvar{Temp4}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Multi-Step Reduction}



 We've been working so far with the \textit{single-step reduction}
    relation ==>, which formalizes the individual steps of an
    abstract machine for executing programs.


    We can use the same machine to reduce programs to completion -- to
    find out what final result they yield.  This can be formalized as
    follows:



\begin{itemize}
\item  First, we define a \textit{multi-step reduction relation} ==>*, which
      relates terms \coqdocvariable{t} and \coqdocvariable{t'} if \coqdocvariable{t} can reach \coqdocvariable{t'} by any number
      (including zero) of single reduction steps.



\item  Then we define a ``result'' of a term \coqdocvariable{t} as a normal form that
      \coqdocvariable{t} can reach by multi-step reduction. 
\end{itemize}


 Since we'll want to reuse the idea of multi-step reduction many
    times, let's take a little extra trouble and define it
    generically.


    Given a relation \coqdocdefinition{R}, we define a relation \coqdocinductive{multi} \coqdocdefinition{R}, called the
    \textit{multi-step closure of \coqdocdefinition{R}} as follows. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{multi} \{\coqdocvar{X}:\coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) : \coqdocvar{relation} \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{multi\_refl}  : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x} : \coqdocvar{X}), \coqdocvar{multi} \coqdocvar{R} \coqdocvar{x} \coqdocvar{x}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{multi\_step} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x} \coqdocvar{y} \coqdocvar{z} : \coqdocvar{X}),\coqdoceol
\coqdocindent{10.00em}
\coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{10.00em}
\coqdocvar{multi} \coqdocvar{R} \coqdocvar{y} \coqdocvar{z} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{10.00em}
\coqdocvar{multi} \coqdocvar{R} \coqdocvar{x} \coqdocvar{z}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(In the \coqdoclibrary{Rel} chapter and the Coq standard library, this relation
    is called \coqdocinductive{clos\_refl\_trans\_1n}.  We give it a shorter name here
    for the sake of readability.)


    The effect of this definition is that \coqdocinductive{multi} \coqdocdefinition{R} relates two
    elements \coqdocabbreviation{x} and \coqdocabbreviation{y} if 



\begin{itemize}
\item  \coqdocabbreviation{x} = \coqdocabbreviation{y}, or 

\item  \coqdocdefinition{R} \coqdocabbreviation{x} \coqdocabbreviation{y}, or 

\item  there is some nonempty sequence \coqdocvar{z1}, \coqdocvar{z2}, ..., \coqdocvar{zn} such that 


           R x z1 
           R z1 z2 
           ...  
           R zn y.

\end{itemize}


    Thus, if \coqdocdefinition{R} describes a single-step of computation, then \coqdocvar{z1}...\coqdocvar{zn} 
    is the sequence of intermediate steps of computation between \coqdocabbreviation{x} and 
    \coqdocabbreviation{y}. 

 We write ==>* for the \coqdocinductive{multi} \coqdocinductive{step} relation on terms. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} " t '==>*' t' " := (\coqdocvar{multi} \coqdocvar{step} \coqdocvar{t} \coqdocvar{t'}) (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The relation \coqdocinductive{multi} \coqdocdefinition{R} has several crucial properties.


    First, it is obviously \textit{reflexive} (that is, \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{x}, \coqdocinductive{multi} \coqdocdefinition{R} \coqdocabbreviation{x}
    \coqdocabbreviation{x}).  In the case of the ==>* (i.e., \coqdocinductive{multi} \coqdocinductive{step}) relation, the
    intuition is that a term can execute to itself by taking zero
    steps of execution.


    Second, it contains \coqdocdefinition{R} -- that is, single-step executions are a
    particular case of multi-step executions.  (It is this fact that
    justifies the word ``closure'' in the term ``multi-step closure of
    \coqdocdefinition{R}.'') \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{multi\_R} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{R}:\coqdocvar{relation} \coqdocvar{X}) (\coqdocvar{x} \coqdocvar{y} : \coqdocvar{X}),\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow} (\coqdocvar{multi} \coqdocvar{R}) \coqdocvar{x} \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{X} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_step} \coqdockw{with} \coqdocvar{y}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{multi\_refl}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Third, \coqdocinductive{multi} \coqdocdefinition{R} is \textit{transitive}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{multi\_trans} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) (\coqdocvar{x} \coqdocvar{y} \coqdocvar{z} : \coqdocvar{X}),\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{multi} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{multi} \coqdocvar{R} \coqdocvar{y} \coqdocvar{z} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{multi} \coqdocvar{R} \coqdocvar{x} \coqdocvar{z}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{X} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \coqdocvar{z} \coqdocvar{G} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{G}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{multi\_step} \coqdockw{with} \coqdocvar{y}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHG}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In particular, for the \coqdocinductive{multi} \coqdocinductive{step} relation on terms, if
    \coqdocvariable{t1}==>*\coqdocvariable{t2} and \coqdocvariable{t2}==>*\coqdocvariable{t3}, then \coqdocvariable{t1}==>*\coqdocvariable{t3}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Examples}



 Here's a specific instance of the \coqdocinductive{multi} \coqdocinductive{step} relation: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{test\_multistep\_1}:\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{P} (\coqdocvar{C} 0) (\coqdocvar{C} 3))\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{P} (\coqdocvar{C} 2) (\coqdocvar{C} 4))\coqdoceol
\coqdocindent{1.50em}
==>*\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{C} ((0 + 3) + (2 + 4)).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_step} \coqdockw{with}\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{P} (\coqdocvar{C} (0 + 3))\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{P} (\coqdocvar{C} 2) (\coqdocvar{C} 4))).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ST\_Plus1}. \coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_step} \coqdockw{with}\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{P} (\coqdocvar{C} (0 + 3))\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{C} (2 + 4))).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ST\_Plus2}. \coqdoctac{apply} \coqdocvar{v\_const}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_R}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here's an alternate proof of the same fact that uses \coqdoctac{eapply} to
    avoid explicitly constructing all the intermediate terms. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{test\_multistep\_1'}:\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{P} (\coqdocvar{C} 0) (\coqdocvar{C} 3))\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{P} (\coqdocvar{C} 2) (\coqdocvar{C} 4))\coqdoceol
\coqdocindent{1.00em}
==>*\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{C} ((0 + 3) + (2 + 4)).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{ST\_Plus1}. \coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{ST\_Plus2}. \coqdoctac{apply} \coqdocvar{v\_const}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_refl}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional (test\_multistep\_2)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{test\_multistep\_2}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{C} 3 ==>* \coqdocvar{C} 3.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star, optional (test\_multistep\_3)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{test\_multistep\_3}:\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} (\coqdocvar{C} 0) (\coqdocvar{C} 3)\coqdoceol
\coqdocindent{1.50em}
==>*\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} (\coqdocvar{C} 0) (\coqdocvar{C} 3).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars (test\_multistep\_4)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{test\_multistep\_4}:\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{C} 0)\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{P}\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{C} 2)\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{P} (\coqdocvar{C} 0) (\coqdocvar{C} 3)))\coqdoceol
\coqdocindent{1.00em}
==>*\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{C} 0)\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{C} (2 + (0 + 3))).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Normal Forms Again}



 If \coqdocvariable{t} reduces to \coqdocvariable{t'} in zero or more steps and \coqdocvariable{t'} is a
    normal form, we say that ``\coqdocvariable{t'} is a normal form of \coqdocvariable{t}.'' \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{step\_normal\_form} := \coqdocvar{normal\_form} \coqdocvar{step}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{normal\_form\_of} (\coqdocvar{t} \coqdocvar{t'} : \coqdocvar{tm}) :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{t} ==>* \coqdocvar{t'} \ensuremath{\land} \coqdocvar{step\_normal\_form} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We have already seen that, for our language, single-step reduction is
    deterministic -- i.e., a given term can take a single step in
    at most one way.  It follows from this that, if \coqdocvariable{t} can reach
    a normal form, then this normal form is unique.  In other words, we
    can actually pronounce \coqdocdefinition{normal\_form} \coqdocvariable{t} \coqdocvariable{t'} as ``\coqdocvariable{t'} is \textit{the}
    normal form of \coqdocvariable{t}.'' 

\paragraph{Exercise: 3 stars, optional (normal\_forms\_unique)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{normal\_forms\_unique}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{deterministic} \coqdocvar{normal\_form\_of}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{deterministic}. \coqdoctac{unfold} \coqdocvar{normal\_form\_of}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{P1} \coqdocvar{P2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{P1} \coqdockw{as} [\coqdocvar{P11} \coqdocvar{P12}]; \coqdoctac{clear} \coqdocvar{P1}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{P2} \coqdockw{as} [\coqdocvar{P21} \coqdocvar{P22}]; \coqdoctac{clear} \coqdocvar{P2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{y2}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Indeed, something stronger is true for this language (though not
    for all languages): the reduction of \textit{any} term \coqdocvariable{t} will
    eventually reach a normal form -- i.e., \coqdocdefinition{normal\_form\_of} is a
    \textit{total} function.  Formally, we say the \coqdocinductive{step} relation is
    \textit{normalizing}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{normalizing} \{\coqdocvar{X}:\coqdockw{Type}\} (\coqdocvar{R}:\coqdocvar{relation} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{t}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{multi} \coqdocvar{R}) \coqdocvar{t} \coqdocvar{t'} \ensuremath{\land} \coqdocvar{normal\_form} \coqdocvar{R} \coqdocvar{t'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To prove that \coqdocinductive{step} is normalizing, we need a couple of lemmas.


    First, we observe that, if \coqdocvariable{t} reduces to \coqdocvariable{t'} in many steps, then
    the same sequence of reduction steps within \coqdocvariable{t} is also possible
    when \coqdocvariable{t} appears as the left-hand child of a \coqdocaxiom{P} node, and
    similarly when \coqdocvariable{t} appears as the right-hand child of a \coqdocaxiom{P}
    node whose left-hand child is a value. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{multistep\_congr\_1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t1} ==>* \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{P} \coqdocvar{t1} \coqdocvar{t2} ==>* \coqdocvar{P} \coqdocvar{t1'} \coqdocvar{t2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{H}. \coqdoctac{induction} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{apply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{apply} \coqdocvar{multi\_step} \coqdockw{with} (\coqdocvar{P} \coqdocvar{y} \coqdocvar{t2}).\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} \coqdocvar{ST\_Plus1}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} \coqdocvar{IHmulti}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (multistep\_congr\_2)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{multistep\_congr\_2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{value} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t2} ==>* \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{P} \coqdocvar{t1} \coqdocvar{t2} ==>* \coqdocvar{P} \coqdocvar{t1} \coqdocvar{t2'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 With these lemmas in hand, the main proof is a straightforward
    induction.


    \textit{Theorem}: The \coqdocinductive{step} function is normalizing -- i.e., for every
    \coqdocvariable{t} there exists some \coqdocvariable{t'} such that \coqdocvariable{t} steps to \coqdocvariable{t'} and \coqdocvariable{t'} is
    a normal form.


    \textit{Proof sketch}: By induction on terms.  There are two cases to
    consider:



\begin{itemize}
\item  \coqdocvariable{t} = \coqdocabbreviation{C} \coqdocabbreviation{n} for some \coqdocabbreviation{n}.  Here \coqdocvariable{t} doesn't take a step, and we
      have \coqdocvariable{t'} = \coqdocvariable{t}.  We can derive the left-hand side by reflexivity
      and the right-hand side by observing (a) that values are normal
      forms (by \coqdoclemma{nf\_same\_as\_value}) and (b) that \coqdocvariable{t} is a value (by
      \coqdocconstructor{v\_const}).



\item  \coqdocvariable{t} = \coqdocaxiom{P} \coqdocvariable{t1} \coqdocvariable{t2} for some \coqdocvariable{t1} and \coqdocvariable{t2}.  By the IH, \coqdocvariable{t1} and \coqdocvariable{t2}
      have normal forms \coqdocvariable{t1'} and \coqdocvariable{t2'}.  Recall that normal forms are
      values (by \coqdoclemma{nf\_same\_as\_value}); we know that \coqdocvariable{t1'} = \coqdocabbreviation{C} \coqdocvariable{n1} and
      \coqdocvariable{t2'} = \coqdocabbreviation{C} \coqdocvariable{n2}, for some \coqdocvariable{n1} and \coqdocvariable{n2}.  We can combine the ==>*
      derivations for \coqdocvariable{t1} and \coqdocvariable{t2} using \coqdocvar{multi\_congr\_1} and
      \coqdocvar{multi\_congr\_2} to prove that \coqdocaxiom{P} \coqdocvariable{t1} \coqdocvariable{t2} reduces in many steps to
      \coqdocabbreviation{C} (\coqdocvariable{n1} + \coqdocvariable{n2}).


      It is clear that our choice of \coqdocvariable{t'} = \coqdocabbreviation{C} (\coqdocvariable{n1} + \coqdocvariable{n2}) is a value,
      which is in turn a normal form. \ensuremath{\Box} 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{step\_normalizing} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{normalizing} \coqdocvar{step}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{normalizing}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{C} \coqdocvar{n}).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{apply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \coqdocvar{nf\_same\_as\_value}. \coqdoctac{apply} \coqdocvar{v\_const}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHt1} \coqdockw{as} [\coqdocvar{t1'} [\coqdocvar{H11} \coqdocvar{H12}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHt2} \coqdockw{as} [\coqdocvar{t2'} [\coqdocvar{H21} \coqdocvar{H22}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{nf\_same\_as\_value} \coqdoctac{in} \coqdocvar{H12}. \coqdoctac{rewrite} \coqdocvar{nf\_same\_as\_value} \coqdoctac{in} \coqdocvar{H22}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H12} \coqdockw{as} [\coqdocvar{n1} \coqdocvar{H}]. \coqdoctac{inversion} \coqdocvar{H22} \coqdockw{as} [\coqdocvar{n2} \coqdocvar{H'}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H11}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H'} \coqdoctac{in} \coqdocvar{H21}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{C} (\coqdocvar{n1} + \coqdocvar{n2})).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{4.00em}
+ \coqdoceol
\coqdocindent{5.00em}
\coqdoctac{apply} \coqdocvar{multi\_trans} \coqdockw{with} (\coqdocvar{P} (\coqdocvar{C} \coqdocvar{n1}) \coqdocvar{t2}).\coqdoceol
\coqdocindent{5.00em}
\ensuremath{\times} \coqdoctac{apply} \coqdocvar{multistep\_congr\_1}. \coqdoctac{apply} \coqdocvar{H11}.\coqdoceol
\coqdocindent{5.00em}
\ensuremath{\times} \coqdoctac{apply} \coqdocvar{multi\_trans} \coqdockw{with}\coqdoceol
\coqdocindent{6.50em}
(\coqdocvar{P} (\coqdocvar{C} \coqdocvar{n1}) (\coqdocvar{C} \coqdocvar{n2})).\coqdoceol
\coqdocindent{6.00em}
\{ \coqdoctac{apply} \coqdocvar{multistep\_congr\_2}. \coqdoctac{apply} \coqdocvar{v\_const}. \coqdoctac{apply} \coqdocvar{H21}. \}\coqdoceol
\coqdocindent{6.00em}
\{ \coqdoctac{apply} \coqdocvar{multi\_R}. \coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}. \}\coqdoceol
\coqdocindent{4.00em}
+ \coqdoceol
\coqdocindent{5.00em}
\coqdoctac{rewrite} \coqdocvar{nf\_same\_as\_value}. \coqdoctac{apply} \coqdocvar{v\_const}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Equivalence of Big-Step and Small-Step}



 Having defined the operational semantics of our tiny programming
    language in two different ways (big-step and small-step), it makes
    sense to ask whether these definitions actually define the same
    thing!  They do, though it takes a little work to show it.  The
    details are left as an exercise. 

\paragraph{Exercise: 3 stars (eval\_\_multistep)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{eval\_\_multistep} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} \symbol{92}\symbol{92} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{t} ==>* \coqdocvar{C} \coqdocvar{n}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The key ideas in the proof can be seen in the following picture:


       P t1 t2 ==>            (by ST\_Plus1)
       P t1' t2 ==>           (by ST\_Plus1)
       P t1'' t2 ==>          (by ST\_Plus1)
       ...
       P (C n1) t2 ==>        (by ST\_Plus2)
       P (C n1) t2' ==>       (by ST\_Plus2)
       P (C n1) t2'' ==>      (by ST\_Plus2)
       ...
       P (C n1) (C n2) ==>    (by ST\_PlusConstConst)
       C (n1 + n2)


    That is, the multistep reduction of a term of the form \coqdocaxiom{P} \coqdocvariable{t1} \coqdocvariable{t2}
    proceeds in three phases:

\begin{itemize}
\item  First, we use \coqdocconstructor{ST\_Plus1} some number of times to reduce \coqdocvariable{t1}
         to a normal form, which must (by \coqdoclemma{nf\_same\_as\_value}) be a
         term of the form \coqdocabbreviation{C} \coqdocvariable{n1} for some \coqdocvariable{n1}.

\item  Next, we use \coqdocconstructor{ST\_Plus2} some number of times to reduce \coqdocvariable{t2}
         to a normal form, which must again be a term of the form \coqdocabbreviation{C}
         \coqdocvariable{n2} for some \coqdocvariable{n2}.

\item  Finally, we use \coqdocconstructor{ST\_PlusConstConst} one time to reduce \coqdocaxiom{P} (\coqdocabbreviation{C}
         \coqdocvariable{n1}) (\coqdocabbreviation{C} \coqdocvariable{n2}) to \coqdocabbreviation{C} (\coqdocvariable{n1} + \coqdocvariable{n2}). 
\end{itemize}


 To formalize this intuition, you'll need to use the congruence
    lemmas from above (you might want to review them now, so that
    you'll be able to recognize when they are useful), plus some basic
    properties of ==>*: that it is reflexive, transitive, and
    includes ==>. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advanced (eval\_\_multistep\_inf)}

 Write a detailed informal version of the proof of \coqdoclemma{eval\_\_multistep}.


\ensuremath{\Box}


 For the other direction, we need one lemma, which establishes a
    relation between single-step reduction and big-step evaluation. 

\paragraph{Exercise: 3 stars (step\_\_eval)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_\_eval} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{n},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t} ==> \coqdocvar{t'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t'} \symbol{92}\symbol{92} \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t} \symbol{92}\symbol{92} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{n} \coqdocvar{Hs}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{n}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 The fact that small-step reduction implies big-step evaluation is
    now straightforward to prove, once it is stated correctly.


    The proof proceeds by induction on the multi-step reduction
    sequence that is buried in the hypothesis \coqdocdefinition{normal\_form\_of} \coqdocvariable{t} \coqdocvariable{t'}. 

 Make sure you understand the statement before you start to
    work on the proof.  

\paragraph{Exercise: 3 stars (multistep\_\_eval)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{multistep\_\_eval} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{normal\_form\_of} \coqdocvar{t} \coqdocvar{t'} \ensuremath{\rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{n}, \coqdocvar{t'} = \coqdocvar{C} \coqdocvar{n} \ensuremath{\land} \coqdocvar{t} \symbol{92}\symbol{92} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Additional Exercises}



\paragraph{Exercise: 3 stars, optional (interp\_tm)}

 Remember that we also defined big-step evaluation of terms as a
    function \coqdocdefinition{evalF}.  Prove that it is equivalent to the existing
    semantics.  (Hint: we just proved that \coqdoctac{eval} and \coqdocabbreviation{multistep} are
    equivalent, so logically it doesn't matter which you choose.
    One will be easier than the other, though!) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{evalF\_eval} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{evalF} \coqdocvar{t} = \coqdocvar{n} \ensuremath{\leftrightarrow} \coqdocvar{t} \symbol{92}\symbol{92} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 4 starsM (combined\_properties)}

 We've considered arithmetic and conditional expressions
    separately.  This exercise explores how the two interact. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Combined}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{C} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{P} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_const} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{value} (\coqdocvar{C} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_true} : \coqdocvar{value} \coqdocvar{ttrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_false} : \coqdocvar{value} \coqdocvar{tfalse}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '==>' t' " (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_PlusConstConst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} (\coqdocvar{C} \coqdocvar{n1}) (\coqdocvar{C} \coqdocvar{n2}) ==> \coqdocvar{C} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{P} \coqdocvar{t1'} \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Plus2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{P} \coqdocvar{v1} \coqdocvar{t2} ==> \coqdocvar{P} \coqdocvar{v1} \coqdocvar{t2'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{t1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} \coqdocvar{tfalse} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} ==> \coqdocvar{tif} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '==>' t' " := (\coqdocvar{step} \coqdocvar{t} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Earlier, we separately proved for both plus- and if-expressions...



\begin{itemize}
\item  that the step relation was deterministic, and



\item  a strong progress lemma, stating that every term is either a
      value or can take a step.

\end{itemize}


    Prove or disprove these two properties for the combined language. \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Combined}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Small-Step Imp}



 Now for a more serious example: a small-step version of the Imp
    operational semantics. 

 The small-step reduction relations for arithmetic and
    boolean expressions are straightforward extensions of the tiny
    language we've been working up to now.  To make them easier to
    read, we introduce the symbolic notations ==>\coqdocabbreviation{a} and ==>\coqdocconstructor{b} for
    the arithmetic and boolean step relations. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{aval} : \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{av\_num} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{aval} (\coqdocvar{ANum} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We are not actually going to bother to define boolean
    values, since they aren't needed in the definition of ==>\coqdocconstructor{b}
    below (why?), though they might be if our language were a bit
    larger (why?). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '/' st '==>a' t' "\coqdoceol
\coqdocindent{9.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{astep} : \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AS\_Id} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{i},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{AId} \coqdocvar{i} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{ANum} (\coqdocvar{st} \coqdocvar{i})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AS\_Plus} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{APlus} (\coqdocvar{ANum} \coqdocvar{n1}) (\coqdocvar{ANum} \coqdocvar{n2}) / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{ANum} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AS\_Plus1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{a1} \coqdocvar{a1'} \coqdocvar{a2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{a1} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{APlus} \coqdocvar{a1} \coqdocvar{a2}) / \coqdocvar{st} ==>\coqdocvar{a} (\coqdocvar{APlus} \coqdocvar{a1'} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AS\_Plus2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{v1} \coqdocvar{a2} \coqdocvar{a2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aval} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{a2} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{APlus} \coqdocvar{v1} \coqdocvar{a2}) / \coqdocvar{st} ==>\coqdocvar{a} (\coqdocvar{APlus} \coqdocvar{v1} \coqdocvar{a2'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AS\_Minus} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{AMinus} (\coqdocvar{ANum} \coqdocvar{n1}) (\coqdocvar{ANum} \coqdocvar{n2})) / \coqdocvar{st} ==>\coqdocvar{a} (\coqdocvar{ANum} (\coqdocvar{minus} \coqdocvar{n1} \coqdocvar{n2}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AS\_Minus1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{a1} \coqdocvar{a1'} \coqdocvar{a2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{a1} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{AMinus} \coqdocvar{a1} \coqdocvar{a2}) / \coqdocvar{st} ==>\coqdocvar{a} (\coqdocvar{AMinus} \coqdocvar{a1'} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AS\_Minus2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{v1} \coqdocvar{a2} \coqdocvar{a2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aval} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{a2} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{AMinus} \coqdocvar{v1} \coqdocvar{a2}) / \coqdocvar{st} ==>\coqdocvar{a} (\coqdocvar{AMinus} \coqdocvar{v1} \coqdocvar{a2'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AS\_Mult} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{AMult} (\coqdocvar{ANum} \coqdocvar{n1}) (\coqdocvar{ANum} \coqdocvar{n2})) / \coqdocvar{st} ==>\coqdocvar{a} (\coqdocvar{ANum} (\coqdocvar{mult} \coqdocvar{n1} \coqdocvar{n2}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AS\_Mult1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{a1} \coqdocvar{a1'} \coqdocvar{a2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{a1} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{AMult} \coqdocvar{a1} \coqdocvar{a2}) / \coqdocvar{st} ==>\coqdocvar{a} (\coqdocvar{AMult} \coqdocvar{a1'} \coqdocvar{a2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AS\_Mult2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{v1} \coqdocvar{a2} \coqdocvar{a2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aval} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{a2} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{AMult} \coqdocvar{v1} \coqdocvar{a2}) / \coqdocvar{st} ==>\coqdocvar{a} (\coqdocvar{AMult} \coqdocvar{v1} \coqdocvar{a2'})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{2.00em}
\coqdockw{where} " t '/' st '==>a' t' " := (\coqdocvar{astep} \coqdocvar{st} \coqdocvar{t} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '/' st '==>b' t' "\coqdoceol
\coqdocindent{9.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{bstep} : \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_Eq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BEq} (\coqdocvar{ANum} \coqdocvar{n1}) (\coqdocvar{ANum} \coqdocvar{n2})) / \coqdocvar{st} ==>\coqdocvar{b}\coqdoceol
\coqdocindent{2.00em}
(\coqdockw{if} (\coqdocvar{beq\_nat} \coqdocvar{n1} \coqdocvar{n2}) \coqdockw{then} \coqdocvar{BTrue} \coqdockw{else} \coqdocvar{BFalse})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_Eq1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{a1} \coqdocvar{a1'} \coqdocvar{a2},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{a1} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BEq} \coqdocvar{a1} \coqdocvar{a2}) / \coqdocvar{st} ==>\coqdocvar{b} (\coqdocvar{BEq} \coqdocvar{a1'} \coqdocvar{a2})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_Eq2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{v1} \coqdocvar{a2} \coqdocvar{a2'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{aval} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{a2} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BEq} \coqdocvar{v1} \coqdocvar{a2}) / \coqdocvar{st} ==>\coqdocvar{b} (\coqdocvar{BEq} \coqdocvar{v1} \coqdocvar{a2'})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_LtEq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BLe} (\coqdocvar{ANum} \coqdocvar{n1}) (\coqdocvar{ANum} \coqdocvar{n2})) / \coqdocvar{st} ==>\coqdocvar{b}\coqdoceol
\coqdocindent{6.50em}
(\coqdockw{if} (\coqdocvar{leb} \coqdocvar{n1} \coqdocvar{n2}) \coqdockw{then} \coqdocvar{BTrue} \coqdockw{else} \coqdocvar{BFalse})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_LtEq1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{a1} \coqdocvar{a1'} \coqdocvar{a2},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{a1} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BLe} \coqdocvar{a1} \coqdocvar{a2}) / \coqdocvar{st} ==>\coqdocvar{b} (\coqdocvar{BLe} \coqdocvar{a1'} \coqdocvar{a2})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_LtEq2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{v1} \coqdocvar{a2} \coqdocvar{a2'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{aval} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{a2} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BLe} \coqdocvar{v1} \coqdocvar{a2}) / \coqdocvar{st} ==>\coqdocvar{b} (\coqdocvar{BLe} \coqdocvar{v1} \coqdocvar{a2'})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_NotTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BNot} \coqdocvar{BTrue}) / \coqdocvar{st} ==>\coqdocvar{b} \coqdocvar{BFalse}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_NotFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BNot} \coqdocvar{BFalse}) / \coqdocvar{st} ==>\coqdocvar{b} \coqdocvar{BTrue}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_NotStep} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{b1} \coqdocvar{b1'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{b1} / \coqdocvar{st} ==>\coqdocvar{b} \coqdocvar{b1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BNot} \coqdocvar{b1}) / \coqdocvar{st} ==>\coqdocvar{b} (\coqdocvar{BNot} \coqdocvar{b1'})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_AndTrueTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BAnd} \coqdocvar{BTrue} \coqdocvar{BTrue}) / \coqdocvar{st} ==>\coqdocvar{b} \coqdocvar{BTrue}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_AndTrueFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BAnd} \coqdocvar{BTrue} \coqdocvar{BFalse}) / \coqdocvar{st} ==>\coqdocvar{b} \coqdocvar{BFalse}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_AndFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{b2},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BAnd} \coqdocvar{BFalse} \coqdocvar{b2}) / \coqdocvar{st} ==>\coqdocvar{b} \coqdocvar{BFalse}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_AndTrueStep} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{b2} \coqdocvar{b2'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{b2} / \coqdocvar{st} ==>\coqdocvar{b} \coqdocvar{b2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BAnd} \coqdocvar{BTrue} \coqdocvar{b2}) / \coqdocvar{st} ==>\coqdocvar{b} (\coqdocvar{BAnd} \coqdocvar{BTrue} \coqdocvar{b2'})\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{BS\_AndStep} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{b1} \coqdocvar{b1'} \coqdocvar{b2},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{b1} / \coqdocvar{st} ==>\coqdocvar{b} \coqdocvar{b1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{BAnd} \coqdocvar{b1} \coqdocvar{b2}) / \coqdocvar{st} ==>\coqdocvar{b} (\coqdocvar{BAnd} \coqdocvar{b1'} \coqdocvar{b2})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} " t '/' st '==>b' t' " := (\coqdocvar{bstep} \coqdocvar{st} \coqdocvar{t} \coqdocvar{t'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The semantics of commands is the interesting part.  We need two
    small tricks to make it work:



\begin{itemize}
\item  We use \coqdocvar{SKIP} as a ``command value'' -- i.e., a command that
         has reached a normal form.



\begin{itemize}
\item  An assignment command reduces to \coqdocvar{SKIP} (and an updated
              state).



\item  The sequencing command waits until its left-hand
              subcommand has reduced to \coqdocvar{SKIP}, then throws it away so
              that reduction can continue with the right-hand
              subcommand.



\end{itemize}

\item  We reduce a \coqdocvar{WHILE} command by transforming it into a
         conditional followed by the same \coqdocvar{WHILE}. 
\end{itemize}


 (There are other ways of achieving the effect of the latter
    trick, but they all share the feature that the original \coqdocvar{WHILE}
    command needs to be saved somewhere while a single copy of the loop
    body is being reduced.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} " t '/' st '==>' t' '/' st' "\coqdoceol
\coqdocindent{9.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{t'} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{cstep} : (\coqdocvar{com} \ensuremath{\times} \coqdocvar{state}) \ensuremath{\rightarrow} (\coqdocvar{com} \ensuremath{\times} \coqdocvar{state}) \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_AssStep} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{i} \coqdocvar{a} \coqdocvar{a'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{a} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{i} ::= \coqdocvar{a}) / \coqdocvar{st} ==> (\coqdocvar{i} ::= \coqdocvar{a'}) / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_Ass} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{i} \coqdocvar{n},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{i} ::= (\coqdocvar{ANum} \coqdocvar{n})) / \coqdocvar{st} ==> \coqdocvar{SKIP} / (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{i} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_SeqStep} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{c1'} \coqdocvar{st'} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st} ==> \coqdocvar{c1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{c1} ;; \coqdocvar{c2}) / \coqdocvar{st} ==> (\coqdocvar{c1'} ;; \coqdocvar{c2}) / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_SeqFinish} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{SKIP} ;; \coqdocvar{c2}) / \coqdocvar{st} ==> \coqdocvar{c2} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{IFB} \coqdocvar{BTrue} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI} / \coqdocvar{st} ==> \coqdocvar{c1} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{IFB} \coqdocvar{BFalse} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI} / \coqdocvar{st} ==> \coqdocvar{c2} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_IfStep} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{b} \coqdocvar{b'} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{b} / \coqdocvar{st} ==>\coqdocvar{b} \coqdocvar{b'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI} / \coqdocvar{st} \coqdoceol
\coqdocindent{3.00em}
==> (\coqdocvar{IFB} \coqdocvar{b'} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_While} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{b} \coqdocvar{c1},\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st}\coqdoceol
\coqdocindent{3.00em}
==> (\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} (\coqdocvar{c1};; (\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END})) \coqdocvar{ELSE} \coqdocvar{SKIP} \coqdocvar{FI}) / \coqdocvar{st}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '/' st '==>' t' '/' st' " := (\coqdocvar{cstep} (\coqdocvar{t},\coqdocvar{st}) (\coqdocvar{t'},\coqdocvar{st'})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Concurrent Imp}



 Finally, to show the power of this definitional style, let's
    enrich Imp with a new form of command that runs two subcommands in
    parallel and terminates when both have terminated.  To reflect the
    unpredictability of scheduling, the actions of the subcommands may
    be interleaved in any order, but they share the same memory and
    can communicate by reading and writing the same variables. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{CImp}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{com} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSkip} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CAss} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSeq} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CIf} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CWhile} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CPar} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'SKIP'" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{CSkip}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "x '::=' a" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CAss} \coqdocvar{x} \coqdocvar{a}) (\coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "c1 ;; c2" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CSeq} \coqdocvar{c1} \coqdocvar{c2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'WHILE' b 'DO' c 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CWhile} \coqdocvar{b} \coqdocvar{c}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'IFB' b 'THEN' c1 'ELSE' c2 'FI'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CIf} \coqdocvar{b} \coqdocvar{c1} \coqdocvar{c2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'PAR' c1 'WITH' c2 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CPar} \coqdocvar{c1} \coqdocvar{c2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{cstep} : (\coqdocvar{com} \ensuremath{\times} \coqdocvar{state})  \ensuremath{\rightarrow} (\coqdocvar{com} \ensuremath{\times} \coqdocvar{state}) \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_AssStep} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{i} \coqdocvar{a} \coqdocvar{a'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{a} / \coqdocvar{st} ==>\coqdocvar{a} \coqdocvar{a'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{i} ::= \coqdocvar{a}) / \coqdocvar{st} ==> (\coqdocvar{i} ::= \coqdocvar{a'}) / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_Ass} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{i} \coqdocvar{n},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{i} ::= (\coqdocvar{ANum} \coqdocvar{n})) / \coqdocvar{st} ==> \coqdocvar{SKIP} / (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{i} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_SeqStep} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{c1'} \coqdocvar{st'} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st} ==> \coqdocvar{c1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{c1} ;; \coqdocvar{c2}) / \coqdocvar{st} ==> (\coqdocvar{c1'} ;; \coqdocvar{c2}) / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_SeqFinish} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{SKIP} ;; \coqdocvar{c2}) / \coqdocvar{st} ==> \coqdocvar{c2} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{BTrue} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} ==> \coqdocvar{c1} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{BFalse} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} ==> \coqdocvar{c2} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_IfStep} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{b} \coqdocvar{b'} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{b} /\coqdocvar{st} ==>\coqdocvar{b} \coqdocvar{b'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \coqdoceol
\coqdocindent{3.00em}
==> (\coqdocvar{IFB} \coqdocvar{b'} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_While} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{b} \coqdocvar{c1},\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st} \coqdoceol
\coqdocindent{3.00em}
==> (\coqdocvar{IFB} \coqdocvar{b} \coqdocvar{THEN} (\coqdocvar{c1};; (\coqdocvar{WHILE} \coqdocvar{b} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END})) \coqdocvar{ELSE} \coqdocvar{SKIP} \coqdocvar{FI}) / \coqdocvar{st}\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_Par1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{c1'} \coqdocvar{c2} \coqdocvar{st'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st} ==> \coqdocvar{c1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{PAR} \coqdocvar{c1} \coqdocvar{WITH} \coqdocvar{c2} \coqdocvar{END}) / \coqdocvar{st} ==> (\coqdocvar{PAR} \coqdocvar{c1'} \coqdocvar{WITH} \coqdocvar{c2} \coqdocvar{END}) / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_Par2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c2'} \coqdocvar{st'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{st} ==> \coqdocvar{c2'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{PAR} \coqdocvar{c1} \coqdocvar{WITH} \coqdocvar{c2} \coqdocvar{END}) / \coqdocvar{st} ==> (\coqdocvar{PAR} \coqdocvar{c1} \coqdocvar{WITH} \coqdocvar{c2'} \coqdocvar{END}) / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CS\_ParDone} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{PAR} \coqdocvar{SKIP} \coqdocvar{WITH} \coqdocvar{SKIP} \coqdocvar{END}) / \coqdocvar{st} ==> \coqdocvar{SKIP} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} " t '/' st '==>' t' '/' st' " := (\coqdocvar{cstep} (\coqdocvar{t},\coqdocvar{st}) (\coqdocvar{t'},\coqdocvar{st'})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{cmultistep} := \coqdocvar{multi} \coqdocvar{cstep}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} " t '/' st '==>*' t' '/' st' " :=\coqdoceol
\coqdocindent{1.50em}
(\coqdocvar{multi} \coqdocvar{cstep}  (\coqdocvar{t},\coqdocvar{st}) (\coqdocvar{t'},\coqdocvar{st'}))\coqdoceol
\coqdocindent{1.50em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{t'} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Among the many interesting properties of this language is the fact
    that the following program can terminate with the variable \coqdocdefinition{X} set
    to any value. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{par\_loop} : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{PAR}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 1\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WITH}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{WHILE} \coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 0) \coqdocvar{DO}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{X} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{END}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In particular, it can terminate with \coqdocdefinition{X} set to 0: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{par\_loop\_example\_0}:\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{st'},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{par\_loop} / \coqdocvar{empty\_state}  ==>* \coqdocvar{SKIP} / \coqdocvar{st'}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{\land} \coqdocvar{st'} \coqdocvar{X} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{ex\_intro}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{par\_loop}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{CS\_Ass}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_While}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{BS\_Eq1}. \coqdoctac{apply} \coqdocvar{AS\_Id}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{BS\_Eq}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfFalse}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_ParDone}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It can also terminate with \coqdocdefinition{X} set to 2: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{par\_loop\_example\_2}:\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{st'},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{par\_loop} / \coqdocvar{empty\_state} ==>* \coqdocvar{SKIP} / \coqdocvar{st'}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{\land} \coqdocvar{st'} \coqdocvar{X} = 2.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{ex\_intro}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_While}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{BS\_Eq1}. \coqdoctac{apply} \coqdocvar{AS\_Id}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{BS\_Eq}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfTrue}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_SeqStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{CS\_AssStep}. \coqdoctac{apply} \coqdocvar{AS\_Plus1}. \coqdoctac{apply} \coqdocvar{AS\_Id}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_SeqStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{CS\_AssStep}. \coqdoctac{apply} \coqdocvar{AS\_Plus}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_SeqStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{CS\_Ass}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_SeqFinish}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_While}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{BS\_Eq1}. \coqdoctac{apply} \coqdocvar{AS\_Id}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{BS\_Eq}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfTrue}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_SeqStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{CS\_AssStep}. \coqdoctac{apply} \coqdocvar{AS\_Plus1}. \coqdoctac{apply} \coqdocvar{AS\_Id}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_SeqStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{CS\_AssStep}. \coqdoctac{apply} \coqdocvar{AS\_Plus}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_SeqStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{CS\_Ass}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par1}. \coqdoctac{apply} \coqdocvar{CS\_Ass}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_SeqFinish}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_While}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{BS\_Eq1}. \coqdoctac{apply} \coqdocvar{AS\_Id}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{BS\_Eq}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfFalse}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_ParDone}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
More generally... 

\paragraph{Exercise: 3 stars, optional (par\_body\_n\_\_Sn)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{par\_body\_n\_\_Sn} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0 \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{par\_loop} / \coqdocvar{st} ==>* \coqdocvar{par\_loop} / (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} (\coqdocvar{S} \coqdocvar{n})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (par\_body\_n)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{par\_body\_n} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st} \coqdocvar{X} = 0 \ensuremath{\land} \coqdocvar{st} \coqdocvar{Y} = 0 \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{st'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{par\_loop} / \coqdocvar{st} ==>*  \coqdocvar{par\_loop} / \coqdocvar{st'} \ensuremath{\land} \coqdocvar{st'} \coqdocvar{X} = \coqdocvar{n} \ensuremath{\land} \coqdocvar{st'} \coqdocvar{Y} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 ... the above loop can exit with \coqdocdefinition{X} having any value
    whatsoever. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{par\_loop\_any\_X}:\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{par\_loop} / \coqdocvar{empty\_state} ==>*  \coqdocvar{SKIP} / \coqdocvar{st'}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{\land} \coqdocvar{st'} \coqdocvar{X} = \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{par\_body\_n} \coqdocvar{n} \coqdocvar{empty\_state}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{split}; \coqdoctac{unfold} \coqdocvar{t\_update}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{rename} \coqdocvar{x} \coqdocvar{into} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{H'} [\coqdocvar{HX} \coqdocvar{HY}]]; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{Y} 1). \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_trans} \coqdockw{with} (\coqdocvar{par\_loop},\coqdocvar{st}). \coqdoctac{apply} \coqdocvar{H'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par1}. \coqdoctac{apply} \coqdocvar{CS\_Ass}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_While}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{BS\_Eq1}. \coqdoctac{apply} \coqdocvar{AS\_Id}. \coqdoctac{rewrite} \coqdocvar{t\_update\_eq}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfStep}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{BS\_Eq}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_Par2}. \coqdoctac{apply} \coqdocvar{CS\_IfFalse}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{apply} \coqdocvar{CS\_ParDone}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{t\_update\_neq}. \coqdoctac{assumption}. \coqdoctac{intro} \coqdocvar{X}; \coqdoctac{inversion} \coqdocvar{X}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{CImp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{A Small-Step Stack Machine}



 Our last example is a small-step semantics for the stack machine
    example from the \coqdoclibrary{Imp} chapter. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{stack} := \coqdocvar{list} \coqdocvar{nat}.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{prog}  := \coqdocvar{list} \coqdocvar{sinstr}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{stack\_step} : \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{prog} \ensuremath{\times} \coqdocvar{stack} \ensuremath{\rightarrow} \coqdocvar{prog} \ensuremath{\times} \coqdocvar{stack} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{SS\_Push} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{stk} \coqdocvar{n} \coqdocvar{p'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{stack\_step} \coqdocvar{st} (\coqdocvar{SPush} \coqdocvar{n} :: \coqdocvar{p'}, \coqdocvar{stk})      (\coqdocvar{p'}, \coqdocvar{n} :: \coqdocvar{stk})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{SS\_Load} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{stk} \coqdocvar{i} \coqdocvar{p'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{stack\_step} \coqdocvar{st} (\coqdocvar{SLoad} \coqdocvar{i} :: \coqdocvar{p'}, \coqdocvar{stk})      (\coqdocvar{p'}, \coqdocvar{st} \coqdocvar{i} :: \coqdocvar{stk})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{SS\_Plus} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{stk} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{stack\_step} \coqdocvar{st} (\coqdocvar{SPlus} :: \coqdocvar{p'}, \coqdocvar{n}::\coqdocvar{m}::\coqdocvar{stk})  (\coqdocvar{p'}, (\coqdocvar{m}+\coqdocvar{n})::\coqdocvar{stk})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{SS\_Minus} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{stk} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{stack\_step} \coqdocvar{st} (\coqdocvar{SMinus} :: \coqdocvar{p'}, \coqdocvar{n}::\coqdocvar{m}::\coqdocvar{stk}) (\coqdocvar{p'}, (\coqdocvar{m}-\coqdocvar{n})::\coqdocvar{stk})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{SS\_Mult} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{stk} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{stack\_step} \coqdocvar{st} (\coqdocvar{SMult} :: \coqdocvar{p'}, \coqdocvar{n}::\coqdocvar{m}::\coqdocvar{stk})  (\coqdocvar{p'}, (\coqdocvar{m}\ensuremath{\times}\coqdocvar{n})::\coqdocvar{stk}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{stack\_step\_deterministic} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{deterministic} (\coqdocvar{stack\_step} \coqdocvar{st}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{deterministic}. \coqdoctac{intros} \coqdocvar{st} \coqdocvar{x} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{H1} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H1}; \coqdoctac{inversion} \coqdocvar{H2}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{stack\_multistep} \coqdocvar{st} := \coqdocvar{multi} (\coqdocvar{stack\_step} \coqdocvar{st}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, advanced (compiler\_is\_correct)}

 Remember the definition of \coqdocvar{compile} for \coqdocinductive{aexp} given in the
    \coqdoclibrary{Imp} chapter. We want now to prove \coqdocvar{compile} correct with respect
    to the stack machine.


    State what it means for the compiler to be correct according to
    the stack machine small step semantics and then prove it. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{compiler\_is\_correct\_statement} : \coqdockw{Prop} \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{compiler\_is\_correct} : \coqdocvar{compiler\_is\_correct\_statement}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-12-20 11:28:30 -0500 (Tue, 20 Dec 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Auto}{Library }{Top.Auto}

\begin{coqdoccode}
\end{coqdoccode}
\section{Auto: More Automation}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Up to now, we've used the more manual part of Coq's tactic
    facilities.  In this chapter, we'll learn more about some of Coq's
    powerful automation features: proof search via the \coqdoctac{auto} tactic,
    automated forward reasoning via the \coqdockw{Ltac} hypothesis matching
    machinery, and deferred instantiation of existential variables
    using \coqdoctac{eapply} and \coqdoctac{eauto}.  Using these features together with
    Ltac's scripting facilities will enable us to make our proofs
    startlingly short!  Used properly, they can also make proofs more
    maintainable and robust to changes in underlying definitions.  A
    deeper treatment of \coqdoctac{auto} and \coqdoctac{eauto} can be found in the
    \coqdoclibrary{UseAuto} chapter.


    There's another major category of automation we haven't discussed
    much yet, namely built-in decision procedures for specific kinds
    of problems: \coqdoctac{omega} is one example, but there are others.  This
    topic will be deferred for a while longer.


    Our motivating example will be this proof, repeated with just a
    few small changes from the \coqdoclibrary{Imp} chapter.  We will simplify
    this proof in several stages. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{inv} \coqdocvar{H} := \coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdocvar{inv} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1}.\coqdoceol
\coqdocindent{2.00em}
\{  \coqdoctac{apply} \coqdocvar{IHE1\_1}; \coqdoctac{assumption}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHE1\_2}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHE1}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHE1}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{inversion} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H4}. \coqdoctac{inversion} \coqdocvar{H4}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1}.\coqdoceol
\coqdocindent{2.00em}
\{  \coqdoctac{apply} \coqdocvar{IHE1\_1}; \coqdoctac{assumption}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHE1\_2}. \coqdoctac{assumption}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{The \texorpdfstring{\protect\coqdoctac{auto}}{auto} Tactic}



 Thus far, our proof scripts mostly apply relevant hypotheses or
    lemmas by name, and one at a time. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{auto\_example\_1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} \coqdocvar{R}: \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{Q}) \ensuremath{\rightarrow} (\coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{R}) \ensuremath{\rightarrow} \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{R}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} \coqdocvar{H1} \coqdocvar{H2} \coqdocvar{H3}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{H2}. \coqdoctac{apply} \coqdocvar{H1}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{auto} tactic frees us from this drudgery by \textit{searching} for a
    sequence of applications that will prove the goal \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{auto\_example\_1'} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} \coqdocvar{R}: \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{Q}) \ensuremath{\rightarrow} (\coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{R}) \ensuremath{\rightarrow} \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{R}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} \coqdocvar{H1} \coqdocvar{H2} \coqdocvar{H3}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{auto} tactic solves goals that are solvable by any combination of

\begin{itemize}
\item  \coqdoctac{intros} and

\item  \coqdoctac{apply} (of hypotheses from the local context, by default). 
\end{itemize}


 Using \coqdoctac{auto} is always ``safe'' in the sense that it will never fail
    and will never change the proof state: either it completely solves
    the current goal, or it does nothing. 

 Here is a more interesting example showing \coqdoctac{auto}'s power: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{auto\_example\_2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} \coqdocvar{S} \coqdocvar{T} \coqdocvar{U} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{Q}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{R}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{R}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{S} \ensuremath{\rightarrow} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{U}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{P}\ensuremath{\rightarrow}\coqdocvar{Q}) \ensuremath{\rightarrow} (\coqdocvar{P}\ensuremath{\rightarrow}\coqdocvar{S})) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{U}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Proof search could, in principle, take an arbitrarily long time,
    so there are limits to how far \coqdoctac{auto} will search by default. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{auto\_example\_3} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} \coqdocvar{S} \coqdocvar{T} \coqdocvar{U}: \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{Q}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{R}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{R} \ensuremath{\rightarrow} \coqdocvar{S}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{S} \ensuremath{\rightarrow} \coqdocvar{T}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{U}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{U}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto} 6.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
When searching for potential proofs of the current goal,
    \coqdoctac{auto} considers the hypotheses in the current context together
    with a \textit{hint database} of other lemmas and constructors.  Some
    common lemmas about equality and logical operators are installed
    in this hint database by default. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{auto\_example\_4} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} : \coqdockw{Prop},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Q} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{R}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\lor} (\coqdocvar{Q} \ensuremath{\land} \coqdocvar{R}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can extend the hint database just for the purposes of one
    application of \coqdoctac{auto} by writing \coqdoctac{auto} \coqdockw{using} .... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{le\_antisym} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}: \coqdocvar{nat}, (\coqdocvar{n} \ensuremath{\le} \coqdocvar{m} \ensuremath{\land} \coqdocvar{m} \ensuremath{\le} \coqdocvar{n}) \ensuremath{\rightarrow} \coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{omega}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{auto\_example\_6} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{n} \ensuremath{\le} \coqdocvar{p} \ensuremath{\rightarrow} (\coqdocvar{n} \ensuremath{\le} \coqdocvar{m} \ensuremath{\land} \coqdocvar{m} \ensuremath{\le} \coqdocvar{n})) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} \ensuremath{\le} \coqdocvar{p} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}. \coqdocindent{1.00em}
\coqdoctac{auto} \coqdockw{using} \coqdocvar{le\_antisym}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Of course, in any given development there will probably be
    some specific constructors and lemmas that are used very often in
    proofs.  We can add these to the global hint database by writing


      Hint Resolve T.


    at the top level, where \coqdocdefinition{T} is a top-level theorem or a
    constructor of an inductively defined proposition (i.e., anything
    whose type is an implication).  As a shorthand, we can write


      Hint Constructors c.


    to tell Coq to do a \coqdockw{Hint} \coqdockw{Resolve} for \textit{all} of the constructors
    from the inductive definition of \coqdocconstructor{c}.


    It is also sometimes necessary to add


      Hint Unfold d.


    where \coqdocconstructor{d} is a defined symbol, so that \coqdoctac{auto} knows to expand uses
    of \coqdocconstructor{d}, thus enabling further possibilities for applying lemmas that
    it knows about. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Resolve} \coqdocvar{le\_antisym}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{auto\_example\_6'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} \coqdocvar{p} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{n}\ensuremath{\le} \coqdocvar{p} \ensuremath{\rightarrow} (\coqdocvar{n} \ensuremath{\le} \coqdocvar{m} \ensuremath{\land} \coqdocvar{m} \ensuremath{\le} \coqdocvar{n})) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} \ensuremath{\le} \coqdocvar{p} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{is\_fortytwo} \coqdocvar{x} := \coqdocvar{x} = 42.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{auto\_example\_7}: \coqdockw{\ensuremath{\forall}} \coqdocvar{x}, (\coqdocvar{x} \ensuremath{\le} 42 \ensuremath{\land} 42 \ensuremath{\le} \coqdocvar{x}) \ensuremath{\rightarrow} \coqdocvar{is\_fortytwo} \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Unfold} \coqdocvar{is\_fortytwo}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{auto\_example\_7'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x}, (\coqdocvar{x} \ensuremath{\le} 42 \ensuremath{\land} 42 \ensuremath{\le} \coqdocvar{x}) \ensuremath{\rightarrow} \coqdocvar{is\_fortytwo} \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now let's take a first pass over \coqdoclemma{ceval\_deterministic} to simplify
    the proof script.
 \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2};\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdocvar{inv} \coqdocvar{E2}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1} \coqdoctac{by} \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{inversion} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H4}. \coqdoctac{inversion} \coqdocvar{H4}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1} \coqdoctac{by} \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
When we are using a particular tactic many times in a proof, we
    can use a variant of the \coqdockw{Proof} command to make that tactic into
    a default within the proof.  Saying \coqdockw{Proof} \coqdockw{with} \coqdocvariable{t} (where \coqdocvariable{t} is
    an arbitrary tactic) allows us to use \coqdocvariable{t1}... as a shorthand for
    \coqdocvariable{t1};\coqdocvariable{t} within the proof.  As an illustration, here is an alternate
    version of the previous proof, using \coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'\_alt}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1};\coqdoceol
\coqdocindent{5.50em}
\coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdocvar{inv} \coqdocvar{E2}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{inversion} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H4}. \coqdoctac{inversion} \coqdocvar{H4}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Searching For Hypotheses}



 The proof has become simpler, but there is still an annoying
    amount of repetition. Let's start by tackling the contradiction
    cases. Each of them occurs in a situation where we have both


      H1: beval st b = false


    and


      H2: beval st b = true


    as hypotheses.  The contradiction is evident, but demonstrating it
    is a little complicated: we have to locate the two hypotheses \coqdocvar{H1}
    and \coqdocvar{H2} and do a \coqdoctac{rewrite} following by an \coqdoctac{inversion}.  We'd
    like to automate this process.


    (In fact, Coq has a built-in tactic \coqdoctac{congruence} that will do the
    job in this case.  But we'll ignore the existence of this tactic
    for now, in order to demonstrate how to build forward search
    tactics by hand.)


    As a first step, we can abstract out the piece of script in
    question by writing a little function in Coq's tactic programming
    language, Ltac. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{rwinv} \coqdocvar{H1} \coqdocvar{H2} := \coqdoctac{rewrite} \coqdocvar{H1} \coqdoctac{in} \coqdocvar{H2}; \coqdocvar{inv} \coqdocvar{H2}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'{}'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdocvar{inv} \coqdocvar{E2}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1} \coqdoctac{by} \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdocvar{rwinv} \coqdocvar{H} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdocvar{rwinv} \coqdocvar{H} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdocvar{rwinv} \coqdocvar{H} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{rwinv} \coqdocvar{H} \coqdocvar{H4}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1} \coqdoctac{by} \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
That was is a bit better, but not much.  We really want Coq to
    discover the relevant hypotheses for us.  We can do this by using
    the \coqdockw{match} \coqdockw{goal} facility of Ltac. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{find\_rwinv} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{H1}: ?\coqdocvar{E} = \coqdocvar{true},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{H2}: ?\coqdocvar{E} = \coqdocvar{false}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{rwinv} \coqdocvar{H1} \coqdocvar{H2}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdockw{match} \coqdockw{goal} tactic looks for two distinct hypotheses that
    have the form of equalities, with the same arbitrary expression
    \coqdocvar{E} on the left and with conflicting boolean values on the right.
    If such hypotheses are found, it binds \coqdocvar{H1} and \coqdocvar{H2} to their
    names and applies the \coqdocvar{rwinv} tactic to \coqdocvar{H1} and \coqdocvar{H2}.


    Adding this tactic to the ones that we invoke in each case of the
    induction handles all of the contradictory cases. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'{}'{}'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdocvar{inv} \coqdocvar{E2}; \coqdoctac{try} \coqdocvar{find\_rwinv}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1} \coqdoctac{by} \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1} \coqdoctac{by} \coqdoctac{auto}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Let's see about the remaining cases. Each of them involves
    applying a conditional hypothesis to extract an equality.
    Currently we have phrased these as assertions, so that we have to
    predict what the resulting equality will be (although we can then
    use \coqdoctac{auto} to prove it).  An alternative is to pick the relevant
    hypotheses to use and then rewrite with them, as follows: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'{}'{}'{}'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdocvar{inv} \coqdocvar{E2}; \coqdoctac{try} \coqdocvar{find\_rwinv}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} (\coqdocvar{IHE1\_1} \coqdocvar{st'0} \coqdocvar{H1}) \coqdoctac{in} *. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} (\coqdocvar{IHE1\_1} \coqdocvar{st'0} \coqdocvar{H3}) \coqdoctac{in} *. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now we can automate the task of finding the relevant hypotheses to
    rewrite with. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{find\_eqn} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{H1}: \coqdockw{\ensuremath{\forall}} \coqdocvar{x}, ?\coqdocvar{P} \coqdocvar{x} \ensuremath{\rightarrow} ?\coqdocvar{L} = ?\coqdocvar{R},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{H2}: ?\coqdocvar{P} ?\coqdocvar{X}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{rewrite} (\coqdocvar{H1} \coqdocvar{X} \coqdocvar{H2}) \coqdoctac{in} *\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The pattern \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{x}, ?\coqdocaxiom{P} \coqdocabbreviation{x} \ensuremath{\rightarrow} ?\coqdocvariable{L} = ?\coqdocdefinition{R} matches any hypothesis of
    the form ``for all \coqdocabbreviation{x}, \textit{some property of \coqdocabbreviation{x}} implies \textit{some
    equality}.''  The property of \coqdocabbreviation{x} is bound to the pattern variable
    \coqdocaxiom{P}, and the left- and right-hand sides of the equality are bound
    to \coqdocvariable{L} and \coqdocdefinition{R}.  The name of this hypothesis is bound to \coqdocvar{H1}.
    Then the pattern ?\coqdocaxiom{P} ?\coqdocdefinition{X} matches any hypothesis that provides
    evidence that \coqdocaxiom{P} holds for some concrete \coqdocdefinition{X}.  If both patterns
    succeed, we apply the \coqdoctac{rewrite} tactic (instantiating the
    quantified \coqdocabbreviation{x} with \coqdocdefinition{X} and providing \coqdocvar{H2} as the required
    evidence for \coqdocaxiom{P} \coqdocdefinition{X}) in all hypotheses and the goal.


    One problem remains: in general, there may be several pairs of
    hypotheses that have the right general form, and it seems tricky
    to pick out the ones we actually need.  A key trick is to realize
    that we can \textit{try them all}!  Here's how this works:



\begin{itemize}
\item  each execution of \coqdockw{match} \coqdockw{goal} will keep trying to find a valid
      pair of hypotheses until the tactic on the RHS of the match
      succeeds; if there are no such pairs, it fails;

\item  \coqdoctac{rewrite} will fail given a trivial equation of the form \coqdocdefinition{X} = \coqdocdefinition{X};

\item  we can wrap the whole thing in a \coqdoctac{repeat}, which will keep doing
      useful rewrites until only trivial ones are left. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'{}'{}'{}'{}'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdocvar{inv} \coqdocvar{E2}; \coqdoctac{try} \coqdocvar{find\_rwinv};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{repeat} \coqdocvar{find\_eqn}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The big payoff in this approach is that our proof script
    should be robust in the face of modest changes to our language.
    For example, we can add a \coqdocvar{REPEAT} command to the language. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Repeat}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{com} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSkip} : \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CAsgn} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CSeq} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CIf} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CWhile} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{com}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{CRepeat} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{com}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{REPEAT} behaves like \coqdocvar{WHILE}, except that the loop guard is
    checked \textit{after} each execution of the body, with the loop
    repeating as long as the guard stays \textit{false}.  Because of this,
    the body will always execute at least once. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'SKIP'" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{CSkip}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "c1 ; c2" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CSeq} \coqdocvar{c1} \coqdocvar{c2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "X '::=' a" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CAsgn} \coqdocvar{X} \coqdocvar{a}) (\coqdoctac{at} \coqdockw{level} 60).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'WHILE' b 'DO' c 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CWhile} \coqdocvar{b} \coqdocvar{c}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'IFB' e1 'THEN' e2 'ELSE' e3 'FI'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CIf} \coqdocvar{e1} \coqdocvar{e2} \coqdocvar{e3}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'REPEAT' e1 'UNTIL' b2 'END'" :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{CRepeat} \coqdocvar{e1} \coqdocvar{b2}) (\coqdoctac{at} \coqdockw{level} 80, \coqdoctac{right} \coqdockw{associativity}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ceval} : \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{SKIP} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Ass}  : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{a1} \coqdocvar{n} \coqdocvar{X},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1} = \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{X} ::= \coqdocvar{a1}) (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{X} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Seq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st'} \coqdocvar{c2} \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{c1} ; \coqdocvar{c2}) \coqdocvar{st'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c2} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileEnd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b1} \coqdocvar{st} \coqdocvar{c1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_WhileLoop} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} \coqdocvar{b1} \coqdocvar{c1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st'} (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) \coqdocvar{st'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_RepeatEnd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{b1} \coqdocvar{c1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st'} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{CRepeat} \coqdocvar{c1} \coqdocvar{b1}) \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_RepeatLoop} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} \coqdocvar{b1} \coqdocvar{c1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st'} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st'} (\coqdocvar{CRepeat} \coqdocvar{c1} \coqdocvar{b1}) \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ceval} \coqdocvar{st} (\coqdocvar{CRepeat} \coqdocvar{c1} \coqdocvar{b1}) \coqdocvar{st'{}'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "c1 '/' st '\symbol{92}\symbol{92}' st'" := (\coqdocvar{ceval} \coqdocvar{st} \coqdocvar{c1} \coqdocvar{st'})\coqdoceol
\coqdocindent{16.50em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Our first attempt at the proof is disappointing: the \coqdocconstructor{E\_RepeatEnd}
    and \coqdocconstructor{E\_RepeatLoop} cases are not handled by our previous
    automation. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdocvar{inv} \coqdocvar{E2}; \coqdoctac{try} \coqdocvar{find\_rwinv}; \coqdoctac{repeat} \coqdocvar{find\_eqn}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.50em}
\coqdocvar{find\_rwinv}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.50em}
+ \coqdoceol
\coqdocindent{4.00em}
\coqdocvar{find\_rwinv}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To fix this, we just have to swap the invocations of \coqdocvar{find\_eqn}
    and \coqdocvar{find\_rwinv}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdocvar{inv} \coqdocvar{E2}; \coqdoctac{repeat} \coqdocvar{find\_eqn}; \coqdoctac{try} \coqdocvar{find\_rwinv}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Repeat}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
These examples just give a flavor of what ``hyper-automation'' can
    achieve in Coq.  The details of \coqdockw{match} \coqdockw{goal} are a bit tricky, and
    debugging scripts using it is, frankly, not very pleasant.  But it
    is well worth adding at least simple uses to your proofs, both to
    avoid tedium and to ``future proof'' them. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{\texorpdfstring{\protect\coqdoctac{eapply}}{eapply} and \texorpdfstring{\protect\coqdoctac{eauto}}{eauto}}



 To close the chapter, we'll introduce one more convenient feature
    of Coq: its ability to delay instantiation of quantifiers.  To
    motivate this feature, recall this example from the \coqdoclibrary{Imp}
    chapter: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{ceval\_example1}:\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 2;;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{IFB} \coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{THEN} \coqdocvar{Y} ::= \coqdocvar{ANum} 3\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{ELSE} \coqdocvar{Z} ::= \coqdocvar{ANum} 4\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{FI})\coqdoceol
\coqdocindent{1.50em}
/ \coqdocvar{empty\_state}\coqdoceol
\coqdocindent{1.50em}
\symbol{92}\symbol{92} (\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 2) \coqdocvar{Z} 4).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{E\_Seq} \coqdockw{with} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 2).\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{E\_Ass}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{E\_IfFalse}. \coqdoctac{reflexivity}. \coqdoctac{apply} \coqdocvar{E\_Ass}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In the first step of the proof, we had to explicitly provide a
    longish expression to help Coq instantiate a ``hidden'' argument to
    the \coqdocconstructor{E\_Seq} constructor.  This was needed because the definition
    of \coqdocconstructor{E\_Seq}...


          E\_Seq : forall c1 c2 st st' st'',
            c1 / st  \symbol{92}\symbol{92} st' ->
            c2 / st' \symbol{92}\symbol{92} st'' ->
            (c1 ;; c2) / st \symbol{92}\symbol{92} st''


   is quantified over a variable, \coqdocvariable{st'}, that does not appear in its
   conclusion, so unifying its conclusion with the goal state doesn't
   help Coq find a suitable value for this variable.  If we leave
   out the \coqdockw{with}, this step fails (``Error: Unable to find an
   instance for the variable \coqdocvariable{st'}'').


   What's silly about this error is that the appropriate value for \coqdocvariable{st'}
   will actually become obvious in the very next step, where we apply
   \coqdocconstructor{E\_Ass}.  If Coq could just wait until we get to this step, there
   would be no need to give the value explicitly.  This is exactly what
   the \coqdoctac{eapply} tactic gives us:
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{ceval'\_example1}:\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 2;;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{IFB} \coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{THEN} \coqdocvar{Y} ::= \coqdocvar{ANum} 3\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{ELSE} \coqdocvar{Z} ::= \coqdocvar{ANum} 4\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{FI})\coqdoceol
\coqdocindent{1.50em}
/ \coqdocvar{empty\_state}\coqdoceol
\coqdocindent{1.50em}
\symbol{92}\symbol{92} (\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 2) \coqdocvar{Z} 4).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{E\_Seq}. \coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{E\_Ass}. \coqdocindent{2.00em}
\coqdoctac{reflexivity}. \coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{E\_IfFalse}. \coqdoctac{reflexivity}. \coqdoctac{apply} \coqdocvar{E\_Ass}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdoctac{eapply} \coqdocvariable{H} tactic behaves just like \coqdoctac{apply} \coqdocvariable{H} except
    that, after it finishes unifying the goal state with the
    conclusion of \coqdocvariable{H}, it does not bother to check whether all the
    variables that were introduced in the process have been given
    concrete values during unification.


    If you step through the proof above, you'll see that the goal
    state at position 1 mentions the \textit{existential variable} ?\coqdocvariable{st'}
    in both of the generated subgoals.  The next step (which gets us
    to position 2) replaces ?\coqdocvariable{st'} with a concrete value.  This new
    value contains a new existential variable ?\coqdocabbreviation{n}, which is
    instantiated in its turn by the following \coqdoctac{reflexivity} step,
    position 3.  When we start working on the second
    subgoal (position 4), we observe that the occurrence of ?\coqdocvariable{st'}
    in this subgoal has been replaced by the value that it was given
    during the first subgoal. 

 Several of the tactics that we've seen so far, including \coqdoctac{\ensuremath{\exists}},
    \coqdoctac{constructor}, and \coqdoctac{auto}, have \coqdocconstructor{e}... variants.  For example,
    here's a proof using \coqdoctac{eauto}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{ceval}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Transparent} \coqdocvar{state}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Transparent} \coqdocvar{total\_map}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{st12} := \coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 1) \coqdocvar{Y} 2.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{st21} := \coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{X} 2) \coqdocvar{Y} 1.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{auto\_example\_8} : \coqdoctac{\ensuremath{\exists}} \coqdocvar{s'},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{IFB} (\coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y}))\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{THEN} (\coqdocvar{Z} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{X}))\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{ELSE} (\coqdocvar{Y} ::= \coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Z}))\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{FI}) / \coqdocvar{st21} \symbol{92}\symbol{92} \coqdocvar{s'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{eauto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{eauto} tactic works just like \coqdoctac{auto}, except that it uses
    \coqdoctac{eapply} instead of \coqdoctac{apply}. 

 $Date: 2016-10-18 15:42:43 -0400 (Tue, 18 Oct 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Types}{Library }{Top.Types}

\begin{coqdoccode}
\end{coqdoccode}
\section{Types: Type Systems}



 Our next major topic is \textit{type systems} -- static program
    analyses that classify expressions according to the ``shapes'' of
    their results.  We'll begin with a typed version of the simplest
    imaginable language, to introduce the basic ideas of types and
    typing rules and the fundamental theorems about type systems:
    \textit{type preservation} and \textit{progress}.  In chapter \coqdoclibrary{Stlc} we'll move
    on to the \textit{simply typed lambda-calculus}, which lives at the core
    of every modern functional programming language (including
    Coq!). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{multi}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Typed Arithmetic Expressions}



 To motivate the discussion of type systems, let's begin as
    usual with a tiny toy language.  We want it to have the potential
    for programs to go wrong because of runtime type errors, so we
    need something a tiny bit more complex than the language of
    constants and addition that we used in chapter \coqdoclibrary{Smallstep}: a
    single kind of data (e.g., numbers) is too simple, but just two
    kinds (numbers and booleans) gives us enough material to tell an
    interesting story.


    The language definition is completely routine. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Syntax}



 Here is the syntax, informally:


    t ::= true
        | false
        | if t then t else t
        | 0
        | succ t
        | pred t
        | iszero t


    And here it is formally: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tzero} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsucc} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpred} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tiszero} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\textit{Values} are \coqdocconstructor{true}, \coqdocconstructor{false}, and numeric values... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{bvalue} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{bv\_true} : \coqdocvar{bvalue} \coqdocvar{ttrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{bv\_false} : \coqdocvar{bvalue} \coqdocvar{tfalse}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{nvalue} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nv\_zero} : \coqdocvar{nvalue} \coqdocvar{tzero}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nv\_succ} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t}, \coqdocvar{nvalue} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{nvalue} (\coqdocvar{tsucc} \coqdocvar{t}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{value} (\coqdocvar{t}:\coqdocvar{tm}) := \coqdocvar{bvalue} \coqdocvar{t} \ensuremath{\lor} \coqdocvar{nvalue} \coqdocvar{t}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{bvalue} \coqdocvar{nvalue}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Unfold} \coqdocvar{value}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Unfold} \coqdocvar{update}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Operational Semantics}



 Here is the single-step relation, first informally... \par
\noindent\hrulefill\par
\noindent{}                  (ST\_IfTrue)
                    if true then t1 else t2 ==> t1
\par
\noindent\hrulefill\par
\noindent{}                 (ST\_IfFalse)
                   if false then t1 else t2 ==> t2


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}            (ST\_If)
            if t1 then t2 else t3 ==> if t1' then t2 else t3


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                         (ST\_Succ)
                         succ t1 ==> succ t1'
\par
\noindent\hrulefill\par
\noindent{}                         (ST\_PredZero)
                             pred 0 ==> 0


                           numeric value v1
\par
\noindent\hrulefill\par
\noindent{}                     (ST\_PredSucc)
                        pred (succ v1) ==> v1


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                         (ST\_Pred)
                         pred t1 ==> pred t1'
\par
\noindent\hrulefill\par
\noindent{}                     (ST\_IszeroZero)
                          iszero 0 ==> true


                           numeric value v1
\par
\noindent\hrulefill\par
\noindent{}                (ST\_IszeroSucc)
                      iszero (succ v1) ==> false


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                     (ST\_Iszero)
                       iszero t1 ==> iszero t1'


 ... and then formally: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "t1 '==>' t2" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{t1} \coqdocvar{t2}) ==> \coqdocvar{t1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tif} \coqdocvar{tfalse} \coqdocvar{t1} \coqdocvar{t2}) ==> \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3}) ==> (\coqdocvar{tif} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Succ} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tsucc} \coqdocvar{t1}) ==> (\coqdocvar{tsucc} \coqdocvar{t1'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_PredZero} :\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tpred} \coqdocvar{tzero}) ==> \coqdocvar{tzero}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_PredSucc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{nvalue} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tpred} (\coqdocvar{tsucc} \coqdocvar{t1})) ==> \coqdocvar{t1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Pred} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tpred} \coqdocvar{t1}) ==> (\coqdocvar{tpred} \coqdocvar{t1'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IszeroZero} :\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tiszero} \coqdocvar{tzero}) ==> \coqdocvar{ttrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IszeroSucc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{nvalue} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tiszero} (\coqdocvar{tsucc} \coqdocvar{t1})) ==> \coqdocvar{tfalse}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Iszero} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tiszero} \coqdocvar{t1}) ==> (\coqdocvar{tiszero} \coqdocvar{t1'})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "t1 '==>' t2" := (\coqdocvar{step} \coqdocvar{t1} \coqdocvar{t2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{step}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Notice that the \coqdocinductive{step} relation doesn't care about whether
    expressions make global sense -- it just checks that the operation
    in the \textit{next} reduction step is being applied to the right kinds
    of operands.  For example, the term \coqdocdefinition{succ} \coqdocconstructor{true} (i.e., 
    \coqdocconstructor{tsucc} \coqdocconstructor{ttrue} in the formal syntax) cannot take a step, but the
    almost as obviously nonsensical term


       succ (if true then true else true)


    can take a step (once, before becoming stuck). \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Normal Forms and Values}



 The first interesting thing to notice about this \coqdocinductive{step} relation
    is that the strong progress theorem from the \coqdoclibrary{Smallstep} chapter
    fails here.  That is, there are terms that are normal forms (they
    can't take a step) but not values (because we have not included
    them in our definition of possible ``results of reduction'').  Such
    terms are \textit{stuck}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{step\_normal\_form} := (\coqdocvar{normal\_form} \coqdocvar{step}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{stuck} (\coqdocvar{t}:\coqdocvar{tm}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step\_normal\_form} \coqdocvar{t} \ensuremath{\land} \ensuremath{\lnot} \coqdocvar{value} \coqdocvar{t}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Unfold} \coqdocvar{stuck}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (some\_term\_is\_stuck)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{some\_term\_is\_stuck} :\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{t}, \coqdocvar{stuck} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 However, although values and normal forms are \textit{not} the same in this
    language, the set of values is included in the set of normal
    forms.  This is important because it shows we did not accidentally
    define things so that some value could still take a step. 

\paragraph{Exercise: 3 stars (value\_is\_nf)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{value\_is\_nf} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{step\_normal\_form} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(Hint: You will reach a point in this proof where you need to
    use an induction to reason about a term that is known to be a
    numeric value.  This induction can be performed either over the
    term itself or over the evidence that it is a numeric value.  The
    proof goes through in either case, but you will find that one way
    is quite a bit shorter than the other.  For the sake of the
    exercise, try to complete the proof both ways.)  \ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (step\_deterministic)}

 Use \coqdoclemma{value\_is\_nf} to show that the \coqdocinductive{step} relation is also
    deterministic. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{step\_deterministic}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{deterministic} \coqdocvar{step}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Typing}



 The next critical observation is that, although this
    language has stuck terms, they are always nonsensical, mixing
    booleans and numbers in a way that we don't even \textit{want} to have a
    meaning.  We can easily exclude such ill-typed terms by defining a
    \textit{typing relation} that relates terms to the types (either numeric
    or boolean) of their final results.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBool} : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TNat} : \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In informal notation, the typing relation is often written
    \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T} and pronounced ``\coqdocvariable{t} has type \coqdocdefinition{T}.''  The \ensuremath{\vdash} symbol
    is called a ``turnstile.''  Below, we're going to see richer typing
    relations where one or more additional ``context'' arguments are
    written to the left of the turnstile.  For the moment, the context
    is always empty. \par
\noindent\hrulefill\par
\noindent{}                            (T\_True)
                           |- true \symbol{92}in Bool
\par
\noindent\hrulefill\par
\noindent{}                           (T\_False)
                          |- false \symbol{92}in Bool


             |- t1 \symbol{92}in Bool    |- t2 \symbol{92}in T    |- t3 \symbol{92}in T
\par
\noindent\hrulefill\par
\noindent{}                (T\_If)
                    |- if t1 then t2 else t3 \symbol{92}in T
\par
\noindent\hrulefill\par
\noindent{}                              (T\_Zero)
                             |- 0 \symbol{92}in Nat


                            |- t1 \symbol{92}in Nat
\par
\noindent\hrulefill\par
\noindent{}                           (T\_Succ)
                          |- succ t1 \symbol{92}in Nat


                            |- t1 \symbol{92}in Nat
\par
\noindent\hrulefill\par
\noindent{}                           (T\_Pred)
                          |- pred t1 \symbol{92}in Nat


                            |- t1 \symbol{92}in Nat
\par
\noindent\hrulefill\par
\noindent{}                        (T\_IsZero)
                        |- iszero t1 \symbol{92}in Bool
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "'|-' t '\symbol{92}in' T" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{has\_type} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_True} :\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{ttrue} \symbol{92}\coqdoctac{in} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_False} :\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{tfalse} \symbol{92}\coqdoctac{in} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \coqdocvar{T},\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TBool} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{t3} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Zero} :\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{tzero} \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Succ} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{tsucc} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Pred} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{tpred} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Iszero} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\ensuremath{\vdash} \coqdocvar{tiszero} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TBool}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "'|-' t '\symbol{92}in' T" := (\coqdocvar{has\_type} \coqdocvar{t} \coqdocvar{T}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{has\_type}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{has\_type\_1} :\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{tif} \coqdocvar{tfalse} \coqdocvar{tzero} (\coqdocvar{tsucc} \coqdocvar{tzero}) \symbol{92}\coqdoctac{in} \coqdocvar{TNat}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{T\_If}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoctac{apply} \coqdocvar{T\_False}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoctac{apply} \coqdocvar{T\_Zero}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoctac{apply} \coqdocvar{T\_Succ}.\coqdoceol
\coqdocindent{3.50em}
+ \coqdoctac{apply} \coqdocvar{T\_Zero}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(Since we've included all the constructors of the typing relation
    in the hint database, the \coqdoctac{auto} tactic can actually find this
    proof automatically.) 

 It's important to realize that the typing relation is a
    \textit{conservative} (or \textit{static}) approximation: it does not consider
    what happens when the term is reduced -- in particular, it does
    not calculate the type of its normal form. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{has\_type\_not} :\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} (|- \coqdocvar{tif} \coqdocvar{tfalse} \coqdocvar{tzero} \coqdocvar{ttrue} \symbol{92}\coqdoctac{in} \coqdocvar{TBool}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Contra}. \coqdocvar{solve\_by\_inverts} 2. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star, optional (succ\_hastype\_nat\_\_hastype\_nat)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{succ\_hastype\_nat\_\_hastype\_nat} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{tsucc} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{TNat}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Canonical forms}



 The following two lemmas capture the fundamental property that the
    definitions of boolean and numeric values agree with the typing
    relation. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{bool\_canonical} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{TBool} \ensuremath{\rightarrow} \coqdocvar{value} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{bvalue} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{HT} \coqdocvar{HV}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{HV}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H}; \coqdoctac{inversion} \coqdocvar{HT}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{nat\_canonical} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow} \coqdocvar{value} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{nvalue} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{HT} \coqdocvar{HV}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{HV}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{HT}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Progress}



 The typing relation enjoys two critical properties.  The first is
    that well-typed normal forms are not stuck -- or conversely, if a
    term is well typed, then either it is a value or it can take at
    least one step.  We call this \textit{progress}. 

\paragraph{Exercise: 3 stars (finish\_progress)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Complete the formal proof of the \coqdoctac{progress} property.  (Make sure
    you understand the parts we've given of the informal proof in the
    following exercise before starting -- this will save you a lot of
    time.) \begin{coqdoccode}
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{T} \coqdocvar{HT}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{HT}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{inversion} \coqdocvar{IHHT1}; \coqdoctac{clear} \coqdocvar{IHHT1}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} (\coqdocvar{bool\_canonical} \coqdocvar{t1} \coqdocvar{HT1}) \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{t2}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{t3}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{H1}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tif} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3})...\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advancedM (finish\_progress\_informal)}

 Complete the corresponding informal proof: 

 \textit{Theorem}: If \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}, then either \coqdocvariable{t} is a value or else
    \coqdocvariable{t} ==> \coqdocvariable{t'} for some \coqdocvariable{t'}. 

 \textit{Proof}: By induction on a derivation of \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}.



\begin{itemize}
\item  If the last rule in the derivation is \coqdocconstructor{T\_If}, then \coqdocvariable{t} = \coqdockw{if} \coqdocvariable{t1}
        \coqdockw{then} \coqdocvariable{t2} \coqdockw{else} \coqdocvariable{t3}, with \ensuremath{\vdash} \coqdocvariable{t1} \symbol{92}\coqdoctac{in} \coqdoclibrary{Bool}, \ensuremath{\vdash} \coqdocvariable{t2} \symbol{92}\coqdoctac{in} \coqdocdefinition{T} and \ensuremath{\vdash} \coqdocvariable{t3}
        \symbol{92}\coqdoctac{in} \coqdocdefinition{T}.  By the IH, either \coqdocvariable{t1} is a value or else \coqdocvariable{t1} can step
        to some \coqdocvariable{t1'}.



\begin{itemize}
\item  If \coqdocvariable{t1} is a value, then by the canonical forms lemmas
              and the fact that \ensuremath{\vdash} \coqdocvariable{t1} \symbol{92}\coqdoctac{in} \coqdoclibrary{Bool} we have that \coqdocvariable{t1}
              is a \coqdocinductive{bvalue} -- i.e., it is either \coqdocconstructor{true} or \coqdocconstructor{false}.
              If \coqdocvariable{t1} = \coqdocconstructor{true}, then \coqdocvariable{t} steps to \coqdocvariable{t2} by \coqdocconstructor{ST\_IfTrue},
              while if \coqdocvariable{t1} = \coqdocconstructor{false}, then \coqdocvariable{t} steps to \coqdocvariable{t3} by
              \coqdocconstructor{ST\_IfFalse}.  Either way, \coqdocvariable{t} can step, which is what
              we wanted to show.



\item  If \coqdocvariable{t1} itself can take a step, then, by \coqdocconstructor{ST\_If}, so can
              \coqdocvariable{t}.



\end{itemize}

\item  
\end{itemize}
\ensuremath{\Box} 

 This theorem is more interesting than the strong progress theorem
    that we saw in the \coqdoclibrary{Smallstep} chapter, where \textit{all} normal forms
    were values.  Here a term can be stuck, but only if it is ill
    typed. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Type Preservation}



 The second critical property of typing is that, when a well-typed
    term takes a step, the result is also a well-typed term. 

\paragraph{Exercise: 2 stars (finish\_preservation)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} ==> \coqdocvar{t'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Complete the formal proof of the \coqdoclemma{preservation} property.  (Again,
    make sure you understand the informal proof fragment in the
    following exercise first.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{HT} \coqdocvar{HE}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{HT};\coqdoceol
\coqdocindent{4.50em}
\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{intros} \coqdocvar{t'} \coqdocvar{HE};\coqdoceol
\coqdocindent{4.50em}
\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
-  \coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}; \coqdoctac{clear} \coqdocvar{HE}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
+  \coqdoctac{apply} \coqdocvar{T\_If}; \coqdoctac{try} \coqdoctac{assumption}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} \coqdocvar{IHHT1}; \coqdoctac{assumption}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, advancedM (finish\_preservation\_informal)}

 Complete the following informal proof: 

 \textit{Theorem}: If \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T} and \coqdocvariable{t} ==> \coqdocvariable{t'}, then \ensuremath{\vdash} \coqdocvariable{t'} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}. 

 \textit{Proof}: By induction on a derivation of \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}.



\begin{itemize}
\item  If the last rule in the derivation is \coqdocconstructor{T\_If}, then \coqdocvariable{t} = \coqdockw{if} \coqdocvariable{t1}
        \coqdockw{then} \coqdocvariable{t2} \coqdockw{else} \coqdocvariable{t3}, with \ensuremath{\vdash} \coqdocvariable{t1} \symbol{92}\coqdoctac{in} \coqdoclibrary{Bool}, \ensuremath{\vdash} \coqdocvariable{t2} \symbol{92}\coqdoctac{in} \coqdocdefinition{T} and \ensuremath{\vdash} \coqdocvariable{t3}
        \symbol{92}\coqdoctac{in} \coqdocdefinition{T}.


        Inspecting the rules for the small-step reduction relation and
        remembering that \coqdocvariable{t} has the form \coqdockw{if} ..., we see that the
        only ones that could have been used to prove \coqdocvariable{t} ==> \coqdocvariable{t'} are
        \coqdocconstructor{ST\_IfTrue}, \coqdocconstructor{ST\_IfFalse}, or \coqdocconstructor{ST\_If}.



\begin{itemize}
\item  If the last rule was \coqdocconstructor{ST\_IfTrue}, then \coqdocvariable{t'} = \coqdocvariable{t2}.  But we
             know that \ensuremath{\vdash} \coqdocvariable{t2} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}, so we are done.



\item  If the last rule was \coqdocconstructor{ST\_IfFalse}, then \coqdocvariable{t'} = \coqdocvariable{t3}.  But we
             know that \ensuremath{\vdash} \coqdocvariable{t3} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}, so we are done.



\item  If the last rule was \coqdocconstructor{ST\_If}, then \coqdocvariable{t'} = \coqdockw{if} \coqdocvariable{t1'} \coqdockw{then} \coqdocvariable{t2}
             \coqdockw{else} \coqdocvariable{t3}, where \coqdocvariable{t1} ==> \coqdocvariable{t1'}.  We know \ensuremath{\vdash} \coqdocvariable{t1} \symbol{92}\coqdoctac{in} \coqdoclibrary{Bool} so,
             by the IH, \ensuremath{\vdash} \coqdocvariable{t1'} \symbol{92}\coqdoctac{in} \coqdoclibrary{Bool}.  The \coqdocconstructor{T\_If} rule then gives us
             \ensuremath{\vdash} \coqdockw{if} \coqdocvariable{t1'} \coqdockw{then} \coqdocvariable{t2} \coqdockw{else} \coqdocvariable{t3} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}, as required.



\end{itemize}

\item  
\end{itemize}
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars (preservation\_alternate\_proof)}

 Now prove the same property again by induction on the
    \textit{evaluation} derivation instead of on the typing derivation.
    Begin by carefully reading and thinking about the first few
    lines of the above proofs to make sure you understand what
    each one is doing.  The set-up for this proof is similar, but
    not exactly the same. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} ==> \coqdocvar{t'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 The preservation theorem is often called \textit{subject reduction},
    because it tells us what happens when the ``subject'' of the typing
    relation is reduced.  This terminology comes from thinking of
    typing statements as sentences, where the term is the subject and
    the type is the predicate. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Type Soundness}



 Putting progress and preservation together, we see that a
    well-typed term can never reach a stuck state.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{multistep} := (\coqdocvar{multi} \coqdocvar{step}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "t1 '==>*' t2" := (\coqdocvar{multistep} \coqdocvar{t1} \coqdocvar{t2}) (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Corollary} \coqdocvar{soundness} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} ==>* \coqdocvar{t'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\~{}(\coqdocvar{stuck} \coqdocvar{t'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{HT} \coqdocvar{P}. \coqdoctac{induction} \coqdocvar{P}; \coqdoctac{intros} [\coqdocvar{R} \coqdocvar{S}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdoctac{progress} \coqdocvar{x} \coqdocvar{T} \coqdocvar{HT}); \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{IHP}. \coqdoctac{apply} (\coqdocvar{preservation} \coqdocvar{x} \coqdocvar{y} \coqdocvar{T} \coqdocvar{HT} \coqdocvar{H}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{stuck}. \coqdoctac{split}; \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Aside: the \texorpdfstring{\protect}{normalize}\coqdocvar{normalize} Tactic}



 When experimenting with definitions of programming languages
    in Coq, we often want to see what a particular concrete term steps
    to -- i.e., we want to find proofs for goals of the form \coqdocvariable{t} ==>*
    \coqdocvariable{t'}, where \coqdocvariable{t} is a completely concrete term and \coqdocvariable{t'} is unknown.
    These proofs are quite tedious to do by hand.  Consider, for
    example, reducing an arithmetic expression using the small-step
    relation \coqdocinductive{astep}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{NormalizePlayground}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{step\_example1} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{C} 4))) \coqdoceol
\coqdocindent{1.00em}
==>* (\coqdocvar{C} 10).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_step} \coqdockw{with} (\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{C} 7)).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_Plus2}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{v\_const}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_step} \coqdockw{with} (\coqdocvar{C} 10).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_PlusConstConst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The proof repeatedly applies \coqdocconstructor{multi\_step} until the term reaches a
    normal form.  Fortunately The sub-proofs for the intermediate
    steps are simple enough that \coqdoctac{auto}, with appropriate hints, can
    solve them. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{step} \coqdocvar{value}.\coqdoceol
\coqdocnoindent
\coqdockw{Example} \coqdocvar{step\_example1'} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{C} 4)))\coqdoceol
\coqdocindent{1.00em}
==>* (\coqdocvar{C} 10).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{auto}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdoctac{auto}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The following custom \coqdockw{Tactic} \coqdockw{Notation} definition captures this
    pattern.  In addition, before each step, we print out the current
    goal, so that we can follow how the term is being reduced. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "print\_goal" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{x} \ensuremath{\Rightarrow} \coqdoctac{idtac} \coqdocvar{x} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "normalize" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} (\coqdocvar{print\_goal}; \coqdoctac{eapply} \coqdocvar{multi\_step} ;\coqdoceol
\coqdocindent{6.00em}
[ (\coqdoctac{eauto} 10; \coqdoctac{fail}) \ensuremath{|} (\coqdoctac{instantiate}; \coqdoctac{simpl})]);\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{step\_example1'{}'} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{C} 4))) \coqdoceol
\coqdocindent{1.00em}
==>* (\coqdocvar{C} 10).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{normalize}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdocvar{normalize} tactic also provides a simple way to calculate the
    normal form of a term, by starting with a goal with an existentially
    bound variable. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{step\_example1'{}'{}'} : \coqdoctac{\ensuremath{\exists}} \coqdocvar{e'},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{C} 4)))\coqdoceol
\coqdocindent{1.00em}
==>* \coqdocvar{e'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{ex\_intro}. \coqdocvar{normalize}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (normalize\_ex)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{normalize\_ex} : \coqdoctac{\ensuremath{\exists}} \coqdocvar{e'},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{P} (\coqdocvar{C} 2) (\coqdocvar{C} 1))) \coqdoceol
\coqdocindent{1.00em}
==>* \coqdocvar{e'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star, optional (normalize\_ex')}

 For comparison, prove it using \coqdoctac{apply} instead of \coqdoctac{eapply}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{normalize\_ex'} : \coqdoctac{\ensuremath{\exists}} \coqdocvar{e'},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} (\coqdocvar{C} 3) (\coqdocvar{P} (\coqdocvar{C} 2) (\coqdocvar{C} 1))) \coqdoceol
\coqdocindent{1.00em}
==>* \coqdocvar{e'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{NormalizePlayground}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "print\_goal" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{x} \ensuremath{\Rightarrow} \coqdoctac{idtac} \coqdocvar{x} \coqdockw{end}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "normalize" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} (\coqdocvar{print\_goal}; \coqdoctac{eapply} \coqdocvar{multi\_step} ;\coqdoceol
\coqdocindent{6.00em}
[ (\coqdoctac{eauto} 10; \coqdoctac{fail}) \ensuremath{|} (\coqdoctac{instantiate}; \coqdoctac{simpl})]);\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Additional Exercises}



\paragraph{Exercise: 2 stars, recommendedM (subject\_expansion)}

 Having seen the subject reduction property, one might
    wonder whether the opposity property -- subject \textit{expansion} --
    also holds.  That is, is it always the case that, if \coqdocvariable{t} ==> \coqdocvariable{t'}
    and \ensuremath{\vdash} \coqdocvariable{t'} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}, then \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}?  If so, prove it.  If
    not, give a counter-example.  (You do not need to prove your
    counter-example in Coq, but feel free to do so.)


    \ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (variation1)}

 Suppose, that we add this new rule to the typing relation:


      | T\_SuccBool : forall t,
           |- t \symbol{92}in TBool ->
           |- tsucc t \symbol{92}in TBool


   Which of the following properties remain true in the presence of
   this rule?  For each one, write either ``remains true'' or
   else ``becomes false.'' If a property becomes false, give a
   counterexample.

\begin{itemize}
\item  Determinism of \coqdocinductive{step}



\item  Progress



\item  Preservation

\end{itemize}


\ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (variation2)}

 Suppose, instead, that we add this new rule to the \coqdocinductive{step} relation:


      | ST\_Funny1 : forall t2 t3,
           (tif ttrue t2 t3) ==> t3


   Which of the above properties become false in the presence of
   this rule?  For each one that does, give a counter-example.


\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (variation3)}

 Suppose instead that we add this rule:


      | ST\_Funny2 : forall t1 t2 t2' t3,
           t2 ==> t2' ->
           (tif t1 t2 t3) ==> (tif t1 t2' t3)


   Which of the above properties become false in the presence of
   this rule?  For each one that does, give a counter-example.


\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (variation4)}

 Suppose instead that we add this rule:


      | ST\_Funny3 :
          (tpred tfalse) ==> (tpred (tpred tfalse))


   Which of the above properties become false in the presence of
   this rule?  For each one that does, give a counter-example.


\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (variation5)}

 Suppose instead that we add this rule:


      | T\_Funny4 :
            |- tzero \symbol{92}in TBool


   Which of the above properties become false in the presence of
   this rule?  For each one that does, give a counter-example.


\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (variation6)}

 Suppose instead that we add this rule:


      | T\_Funny5 :
            |- tpred tzero \symbol{92}in TBool


   Which of the above properties become false in the presence of
   this rule?  For each one that does, give a counter-example.


\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (more\_variations)}

 Make up some exercises of your own along the same lines as
    the ones above.  Try to find ways of selectively breaking
    properties -- i.e., ways of changing the definitions that
    break just one of the properties and leave the others alone.
\ensuremath{\Box} 

\paragraph{Exercise: 1 starM (remove\_predzero)}

 The reduction rule \coqdocvar{E\_PredZero} is a bit counter-intuitive: we
    might feel that it makes more sense for the predecessor of zero to
    be undefined, rather than being defined to be zero.  Can we
    achieve this simply by removing the rule from the definition of
    \coqdocinductive{step}?  Would doing so create any problems elsewhere?


\ensuremath{\Box} 

\paragraph{Exercise: 4 stars, advancedM (prog\_pres\_bigstep)}

 Suppose our evaluation relation is defined in the big-step style.
    What are the appropriate analogs of the progress and preservation
    properties?  (You do not need to prove them.)


\ensuremath{\Box} 

 $Date: 2016-12-20 11:35:30 -0500 (Tue, 20 Dec 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Stlc}{Library }{Top.Stlc}

\begin{coqdoccode}
\end{coqdoccode}
\section{Stlc: The Simply Typed Lambda-Calculus}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdockw{Types}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{The Simply Typed Lambda-Calculus}



 The simply typed lambda-calculus (STLC) is a tiny core
    calculus embodying the key concept of \textit{functional abstraction},
    which shows up in pretty much every real-world programming
    language in some form (functions, procedures, methods, etc.).


    We will follow exactly the same pattern as in the previous chapter
    when formalizing this calculus (syntax, small-step semantics,
    typing rules) and its main properties (progress and preservation).
    The new technical challenges arise from the mechanisms of
    \textit{variable binding} and \textit{substitution}.  It which will take some
    work to deal with these. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Overview}



 The STLC is built on some collection of \textit{base types}: 
    booleans, numbers, strings, etc.  The exact choice of base types
    doesn't matter much -- the construction of the language and its
    theoretical properties work out the same no matter what we
    choose -- so for the sake of brevity let's take just \coqdoclibrary{Bool} for
    the moment.  At the end of the chapter we'll see how to add more
    base types, and in later chapters we'll enrich the pure STLC with
    other useful constructs like pairs, records, subtyping, and
    mutable state.


    Starting from boolean constants and conditionals, we add three
    things:

\begin{itemize}
\item  variables

\item  function abstractions

\item  application

\end{itemize}


    This gives us the following collection of abstract syntax
    constructors (written out first in informal BNF notation -- we'll
    formalize it below). 

       t ::= x                       variable
           | \symbol{92}x:T1.t2                abstraction
           | t1 t2                   application
           | true                    constant true
           | false                   constant false
           | if t1 then t2 else t3   conditional


 The \symbol{92} symbol in a function abstraction \symbol{92}\coqdocabbreviation{x}:\coqdocvar{T1.t2} is generally
    written as a Greek letter ``lambda'' (hence the name of the
    calculus).  The variable \coqdocabbreviation{x} is called the \textit{parameter} to the
    function; the term \coqdocvariable{t2} is its \textit{body}.  The annotation :\coqdocvariable{T1}
    specifies the type of arguments that the function can be applied
    to. 

 Some examples:



\begin{itemize}
\item  \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}


        The identity function for booleans.



\item  (\symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}) \coqdocconstructor{true}


        The identity function for booleans, applied to the boolean \coqdocconstructor{true}.



\item  \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdockw{if} \coqdocabbreviation{x} \coqdockw{then} \coqdocconstructor{false} \coqdockw{else} \coqdocconstructor{true}


        The boolean ``not'' function.



\item  \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocconstructor{true}


        The constant function that takes every (boolean) argument to
        \coqdocconstructor{true}. 
\end{itemize}



\begin{itemize}
\item  \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}


        A two-argument function that takes two booleans and returns
        the first one.  (As in Coq, a two-argument function is really
        a one-argument function whose body is also a one-argument
        function.)



\item  (\symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}) \coqdocconstructor{false} \coqdocconstructor{true}


        A two-argument function that takes two booleans and returns
        the first one, applied to the booleans \coqdocconstructor{false} and \coqdocconstructor{true}.


        As in Coq, application associates to the left -- i.e., this
        expression is parsed as ((\symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}) \coqdocconstructor{false}) \coqdocconstructor{true}.



\item  \symbol{92}\coqdocabbreviation{f}:\coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool}. \coqdocabbreviation{f} (\coqdocabbreviation{f} \coqdocconstructor{true})


        A higher-order function that takes a \textit{function} \coqdocabbreviation{f} (from
        booleans to booleans) as an argument, applies \coqdocabbreviation{f} to \coqdocconstructor{true},
        and applies \coqdocabbreviation{f} again to the result.



\item  (\symbol{92}\coqdocabbreviation{f}:\coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool}. \coqdocabbreviation{f} (\coqdocabbreviation{f} \coqdocconstructor{true})) (\symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocconstructor{false})


        The same higher-order function, applied to the constantly
        \coqdocconstructor{false} function. 
\end{itemize}


 As the last several examples show, the STLC is a language of
    \textit{higher-order} functions: we can write down functions that take
    other functions as arguments and/or return other functions as
    results.


    The STLC doesn't provide any primitive syntax for defining \textit{named}
    functions -- all functions are ``anonymous.''  We'll see in chapter
    \coqdoclibrary{MoreStlc} that it is easy to add named functions to what we've
    got -- indeed, the fundamental naming and binding mechanisms are
    exactly the same.


    The \textit{types} of the STLC include \coqdoclibrary{Bool}, which classifies the
    boolean constants \coqdocconstructor{true} and \coqdocconstructor{false} as well as more complex
    computations that yield booleans, plus \textit{arrow types} that classify
    functions. 

      T ::= Bool
          | T1 -> T2


    For example:



\begin{itemize}
\item  \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocconstructor{false} has type \coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool}



\item  \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocabbreviation{x} has type \coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool}



\item  (\symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}) \coqdocconstructor{true} has type \coqdoclibrary{Bool}



\item  \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocabbreviation{x} has type \coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool} 
                              (i.e., \coqdoclibrary{Bool} \ensuremath{\rightarrow} (\coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool}))



\item  (\symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}) \coqdocconstructor{false} has type \coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool}



\item  (\symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}) \coqdocconstructor{false} \coqdocconstructor{true} has type \coqdoclibrary{Bool} 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Syntax}



 We next formalize the syntax of the STLC. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{STLC}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Types}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBool}  : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Terms}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that an abstraction \symbol{92}\coqdocabbreviation{x}:\coqdocvar{T.t} (formally, \coqdocconstructor{tabs} \coqdocabbreviation{x} \coqdocdefinition{T} \coqdocvariable{t}) is
    always annotated with the type \coqdocdefinition{T} of its parameter, in contrast
    to Coq (and other functional languages like ML, Haskell, etc.),
    which use type inference to fill in missing annotations.  We're
    not considering type inference here. 

 Some examples... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{x} := (\coqdocvar{Id} "x").\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{y} := (\coqdocvar{Id} "y").\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{z} := (\coqdocvar{Id} "z").\coqdoceol
\coqdocnoindent
\coqdockw{Hint Unfold} \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Unfold} \coqdocvar{y}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Unfold} \coqdocvar{z}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocabbreviation{idB} = \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocabbreviation{x} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{idB} :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TBool} (\coqdocvar{tvar} \coqdocvar{x})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocabbreviation{idBB} = \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool}. \coqdocabbreviation{x} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{idBB} :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{tabs} \coqdocvar{x} (\coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool}) (\coqdocvar{tvar} \coqdocvar{x})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocabbreviation{idBBBB} = \symbol{92}\coqdocabbreviation{x}:(\coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool}) \ensuremath{\rightarrow} (\coqdoclibrary{Bool}\ensuremath{\rightarrow}\coqdoclibrary{Bool}). \coqdocabbreviation{x} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{idBBBB} :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{tabs} \coqdocvar{x} (\coqdocvar{TArrow} (\coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool})\coqdoceol
\coqdocindent{11.00em}
(\coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool}))\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tvar} \coqdocvar{x})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocabbreviation{k} = \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocabbreviation{x} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{k} := (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TBool} (\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{TBool} (\coqdocvar{tvar} \coqdocvar{x}))).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocabbreviation{notB} = \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdockw{if} \coqdocabbreviation{x} \coqdockw{then} \coqdocconstructor{false} \coqdockw{else} \coqdocconstructor{true} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{notB} := (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TBool} (\coqdocvar{tif} (\coqdocvar{tvar} \coqdocvar{x}) \coqdocvar{tfalse} \coqdocvar{ttrue})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(We write these as \coqdockw{Notation}s rather than \coqdockw{Definition}s to make
    things easier for \coqdoctac{auto}.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Operational Semantics}



 To define the small-step semantics of STLC terms, we begin,
    as always, by defining the set of values.  Next, we define the
    critical notions of \textit{free variables} and \textit{substitution}, which are
    used in the reduction rule for application expressions.  And
    finally we give the small-step relation itself. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Values}



 To define the values of the STLC, we have a few cases to consider.


    First, for the boolean part of the language, the situation is
    clear: \coqdocconstructor{true} and \coqdocconstructor{false} are the only values.  An \coqdockw{if}
    expression is never a value. 

 Second, an application is clearly not a value: It represents a
    function being invoked on some argument, which clearly still has
    work left to do. 

 Third, for abstractions, we have a choice:



\begin{itemize}
\item  We can say that \symbol{92}\coqdocabbreviation{x}:\coqdocdefinition{T}. \coqdocvariable{t1} is a value only when \coqdocvariable{t1} is a
        value -- i.e., only if the function's body has been
        reduced (as much as it can be without knowing what argument it
        is going to be applied to).



\item  Or we can say that \symbol{92}\coqdocabbreviation{x}:\coqdocdefinition{T}. \coqdocvariable{t1} is always a value, no matter
        whether \coqdocvariable{t1} is one or not -- in other words, we can say that
        reduction stops at abstractions.

\end{itemize}


    Our usual way of evaluating expressions in Coq makes the first
    choice -- for example,


         Compute (fun x:bool => 3 + 4)


    yields \coqdockw{fun} \coqdocabbreviation{x}:\coqdocinductive{bool} \ensuremath{\Rightarrow} 7.


    Most real-world functional programming languages make the second
    choice -- reduction of a function's body only begins when the
    function is actually applied to an argument.  We also make the
    second choice here. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_true} :\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{ttrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_false} :\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{tfalse}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{value}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Finally, we must consider what constitutes a \textit{complete} program.


    Intuitively, a ``complete program'' must not refer to any undefined
    variables.  We'll see shortly how to define the \textit{free} variables
    in a STLC term.  A complete program is \textit{closed} -- that is, it
    contains no free variables.


    (Conversely, a term with free variables is often called an \textit{open 
    term}.) 


    Having made the choice not to reduce under abstractions, we don't
    need to worry about whether variables are values, since we'll
    always be reducing programs ``from the outside in,'' and that means
    the \coqdocinductive{step} relation will always be working with closed terms.  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Substitution}



 Now we come to the heart of the STLC: the operation of
    substituting one term for a variable in another term.  This
    operation is used below to define the operational semantics of
    function application, where we will need to substitute the
    argument term for the function parameter in the function's body.
    For example, we reduce


       (\symbol{92}x:Bool. if x then true else x) false


    to


       if false then true else false


    by substituting \coqdocconstructor{false} for the parameter \coqdocabbreviation{x} in the body of the
    function.


    In general, we need to be able to substitute some given term \coqdocdefinition{s}
    for occurrences of some variable \coqdocabbreviation{x} in another term \coqdocvariable{t}.  In
    informal discussions, this is usually written  [\coqdocabbreviation{x}:=\coqdocdefinition{s}]\coqdocvariable{t}  and
    pronounced ``substitute \coqdocabbreviation{x} with \coqdocdefinition{s} in \coqdocvariable{t}.'' 

 Here are some examples:



\begin{itemize}
\item  [\coqdocabbreviation{x}:=\coqdocconstructor{true}] (\coqdockw{if} \coqdocabbreviation{x} \coqdockw{then} \coqdocabbreviation{x} \coqdockw{else} \coqdocconstructor{false}) 
           yields \coqdockw{if} \coqdocconstructor{true} \coqdockw{then} \coqdocconstructor{true} \coqdockw{else} \coqdocconstructor{false}



\item  [\coqdocabbreviation{x}:=\coqdocconstructor{true}] \coqdocabbreviation{x} yields \coqdocconstructor{true}



\item  [\coqdocabbreviation{x}:=\coqdocconstructor{true}] (\coqdockw{if} \coqdocabbreviation{x} \coqdockw{then} \coqdocabbreviation{x} \coqdockw{else} \coqdocabbreviation{y}) yields \coqdockw{if} \coqdocconstructor{true} \coqdockw{then} \coqdocconstructor{true} \coqdockw{else} \coqdocabbreviation{y}



\item  [\coqdocabbreviation{x}:=\coqdocconstructor{true}] \coqdocabbreviation{y} yields \coqdocabbreviation{y}



\item  [\coqdocabbreviation{x}:=\coqdocconstructor{true}] \coqdocconstructor{false} yields \coqdocconstructor{false} (vacuous substitution)



\item  [\coqdocabbreviation{x}:=\coqdocconstructor{true}] (\symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdockw{if} \coqdocabbreviation{y} \coqdockw{then} \coqdocabbreviation{x} \coqdockw{else} \coqdocconstructor{false}) 
           yields \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdockw{if} \coqdocabbreviation{y} \coqdockw{then} \coqdocconstructor{true} \coqdockw{else} \coqdocconstructor{false}



\item  [\coqdocabbreviation{x}:=\coqdocconstructor{true}] (\symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}) yields \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocconstructor{true}



\item  [\coqdocabbreviation{x}:=\coqdocconstructor{true}] (\symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocabbreviation{y}) yields \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}. \coqdocabbreviation{y}



\item  [\coqdocabbreviation{x}:=\coqdocconstructor{true}] (\symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}) yields \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocabbreviation{x}

\end{itemize}


    The last example is very important: substituting \coqdocabbreviation{x} with \coqdocconstructor{true} in
    \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocabbreviation{x} does \textit{not} yield \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocconstructor{true}!  The reason for
    this is that the \coqdocabbreviation{x} in the body of \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocabbreviation{x} is \textit{bound} by the
    abstraction: it is a new, local name that just happens to be
    spelled the same as some global name \coqdocabbreviation{x}. 

 Here is the definition, informally...


       \coqdocabbreviation{x}:=\coqdocdefinition{s}x               = s
       \coqdocabbreviation{x}:=\coqdocdefinition{s}y               = y                      if x <> y
       \coqdocabbreviation{x}:=\coqdocdefinition{s}(\symbol{92}x:T11. t12)   = \symbol{92}x:T11. t12
       \coqdocabbreviation{x}:=\coqdocdefinition{s}(\symbol{92}y:T11. t12)   = \symbol{92}y:T11. \coqdocabbreviation{x}:=\coqdocdefinition{s}t12      if x <> y
       \coqdocabbreviation{x}:=\coqdocdefinition{s}(t1 t2)         = (\coqdocabbreviation{x}:=\coqdocdefinition{s}t1) (\coqdocabbreviation{x}:=\coqdocdefinition{s}t2)
       \coqdocabbreviation{x}:=\coqdocdefinition{s}true            = true
       \coqdocabbreviation{x}:=\coqdocdefinition{s}false           = false
       \coqdocabbreviation{x}:=\coqdocdefinition{s}(if t1 then t2 else t3) =
                       if \coqdocabbreviation{x}:=\coqdocdefinition{s}t1 then \coqdocabbreviation{x}:=\coqdocdefinition{s}t2 else \coqdocabbreviation{x}:=\coqdocdefinition{s}t3


 ... and formally: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "'[' x ':=' s ']' t" (\coqdoctac{at} \coqdockw{level} 20).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{subst} (\coqdocvar{x}:\coqdocvar{id}) (\coqdocvar{s}:\coqdocvar{tm}) (\coqdocvar{t}:\coqdocvar{tm}) : \coqdocvar{tm} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} \coqdocvar{x'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x'} \coqdockw{then} \coqdocvar{s} \coqdockw{else} \coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} \coqdocvar{x'} \coqdocvar{T} \coqdocvar{t1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tabs} \coqdocvar{x'} \coqdocvar{T} (\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x'} \coqdockw{then} \coqdocvar{t1} \coqdockw{else} ([\coqdocvar{x}:=\coqdocvar{s}] \coqdocvar{t1}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tapp} ([\coqdocvar{x}:=\coqdocvar{s}] \coqdocvar{t1}) ([\coqdocvar{x}:=\coqdocvar{s}] \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ttrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tfalse}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} ([\coqdocvar{x}:=\coqdocvar{s}] \coqdocvar{t1}) ([\coqdocvar{x}:=\coqdocvar{s}] \coqdocvar{t2}) ([\coqdocvar{x}:=\coqdocvar{s}] \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "'[' x ':=' s ']' t" := (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\textit{Technical note}: Substitution becomes trickier to define if we
    consider the case where \coqdocdefinition{s}, the term being substituted for a
    variable in some other term, may itself contain free variables.
    Since we are only interested here in defining the \coqdocinductive{step} relation
    on closed terms (i.e., terms like \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \coqdocabbreviation{x} that include
    binders for all of the variables they mention), we can avoid this
    extra complexity here, but it must be dealt with when formalizing
    richer languages. 

 See, for example, \coqdocvar{Aydemir} 2008 for further discussion
    of this issue. 

\paragraph{Exercise: 3 stars (substi)}

 The definition that we gave above uses Coq's \coqdockw{Fixpoint} facility
    to define substitution as a \textit{function}.  Suppose, instead, we
    wanted to define substitution as an inductive \textit{relation} \coqdocinductive{substi}.
    We've begun the definition by providing the \coqdockw{Inductive} header and
    one of the constructors; your job is to fill in the rest of the
    constructors and prove that the relation you've defined coincides
    with the function given above. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{substi} (\coqdocvar{s}:\coqdocvar{tm}) (\coqdocvar{x}:\coqdocvar{id}) : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{s\_var1} :\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{substi} \coqdocvar{s} \coqdocvar{x} (\coqdocvar{tvar} \coqdocvar{x}) \coqdocvar{s}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{substi}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{substi\_correct} : \coqdockw{\ensuremath{\forall}} \coqdocvar{s} \coqdocvar{x} \coqdocvar{t} \coqdocvar{t'},\coqdoceol
\coqdocindent{1.00em}
[\coqdocvar{x}:=\coqdocvar{s}]\coqdocvar{t} = \coqdocvar{t'} \ensuremath{\leftrightarrow} \coqdocvar{substi} \coqdocvar{s} \coqdocvar{x} \coqdocvar{t} \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Reduction}



 The small-step reduction relation for STLC now follows the
    same pattern as the ones we have seen before.  Intuitively, to
    reduce a function application, we first reduce its left-hand
    side (the function) until it becomes an abstraction; then we
    reduce its right-hand side (the argument) until it is also a
    value; and finally we substitute the argument for the bound
    variable in the body of the abstraction.  This last rule, written
    informally as


      (\symbol{92}x:T.t12) v2 ==> \coqdocabbreviation{x}:=\coqdocvariable{v2}t12


    is traditionally called ``beta-reduction''. 



                               value v2
\par
\noindent\hrulefill\par
\noindent{}                   (ST\_AppAbs)
                     (\symbol{92}x:T.t12) v2 ==> \coqdocabbreviation{x}:=\coqdocvariable{v2}t12


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                           (ST\_App1)
                           t1 t2 ==> t1' t2


                              value v1
                              t2 ==> t2'
\par
\noindent\hrulefill\par
\noindent{}                           (ST\_App2)
                           v1 t2 ==> v1 t2'
 ... plus the usual rules for booleans:
\par
\noindent\hrulefill\par
\noindent{}                (ST\_IfTrue)
                    (if true then t1 else t2) ==> t1
\par
\noindent\hrulefill\par
\noindent{}              (ST\_IfFalse)
                    (if false then t1 else t2) ==> t2


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}           (ST\_If)
         (if t1 then t2 else t3) ==> (if t1' then t2 else t3)


 Formally: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "t1 '==>' t2" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_AppAbs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t12} \coqdocvar{v2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t12}) \coqdocvar{v2}) ==> [\coqdocvar{x}:=\coqdocvar{v2}]\coqdocvar{t12}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} ==> \coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2} ==> \coqdocvar{tapp} \coqdocvar{v1}  \coqdocvar{t2'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{t1} \coqdocvar{t2}) ==> \coqdocvar{t1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tif} \coqdocvar{tfalse} \coqdocvar{t1} \coqdocvar{t2}) ==> \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3}) ==> (\coqdocvar{tif} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "t1 '==>' t2" := (\coqdocvar{step} \coqdocvar{t1} \coqdocvar{t2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{step}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{multistep} := (\coqdocvar{multi} \coqdocvar{step}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "t1 '==>*' t2" := (\coqdocvar{multistep} \coqdocvar{t1} \coqdocvar{t2}) (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Examples}



 Example:


      (\symbol{92}x:Bool->Bool. x) (\symbol{92}x:Bool. x) ==>* \symbol{92}x:Bool. x


    i.e.,


      idBB idB ==>* idB
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_example1} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{tapp} \coqdocvar{idBB} \coqdocvar{idB}) ==>* \coqdocvar{idB}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_AppAbs}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{v\_abs}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_refl}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Example:


      (\symbol{92}x:Bool->Bool. x) ((\symbol{92}x:Bool->Bool. x) (\symbol{92}x:Bool. x))
            ==>* \symbol{92}x:Bool. x


    i.e.,


      (idBB (idBB idB)) ==>* idB.
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_example2} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{tapp} \coqdocvar{idBB} (\coqdocvar{tapp} \coqdocvar{idBB} \coqdocvar{idB})) ==>* \coqdocvar{idB}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_App2}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_AppAbs}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_AppAbs}. \coqdoctac{simpl}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdoctac{apply} \coqdocvar{multi\_refl}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Example:


      (\symbol{92}x:Bool->Bool. x) 
         (\symbol{92}x:Bool. if x then false else true) 
         true
            ==>* false


    i.e.,


       (idBB notB) ttrue ==>* tfalse.
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_example3} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tapp} (\coqdocvar{tapp} \coqdocvar{idBB} \coqdocvar{notB}) \coqdocvar{ttrue} ==>* \coqdocvar{tfalse}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_App1}. \coqdoctac{apply} \coqdocvar{ST\_AppAbs}. \coqdoctac{auto}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_AppAbs}. \coqdoctac{auto}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_IfTrue}. \coqdoctac{apply} \coqdocvar{multi\_refl}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Example:


      (\symbol{92}x:Bool -> Bool. x) 
         ((\symbol{92}x:Bool. if x then false else true) true)
            ==>* false


    i.e.,


      idBB (notB ttrue) ==>* tfalse.
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_example4} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tapp} \coqdocvar{idBB} (\coqdocvar{tapp} \coqdocvar{notB} \coqdocvar{ttrue}) ==>* \coqdocvar{tfalse}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_App2}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_AppAbs}. \coqdoctac{auto}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_App2}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_IfTrue}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ST\_AppAbs}. \coqdoctac{auto}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_refl}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can use the \coqdocvar{normalize} tactic defined in the \coqdockw{Types} chapter
    to simplify these proofs. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_example1'} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{tapp} \coqdocvar{idBB} \coqdocvar{idB}) ==>* \coqdocvar{idB}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{normalize}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_example2'} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{tapp} \coqdocvar{idBB} (\coqdocvar{tapp} \coqdocvar{idBB} \coqdocvar{idB})) ==>* \coqdocvar{idB}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{normalize}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_example3'} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tapp} (\coqdocvar{tapp} \coqdocvar{idBB} \coqdocvar{notB}) \coqdocvar{ttrue} ==>* \coqdocvar{tfalse}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{normalize}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_example4'} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tapp} \coqdocvar{idBB} (\coqdocvar{tapp} \coqdocvar{notB} \coqdocvar{ttrue}) ==>* \coqdocvar{tfalse}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{normalize}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars (step\_example3)}

 Try to do this one both with and without \coqdocvar{normalize}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_example5} :\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{tapp} (\coqdocvar{tapp} \coqdocvar{idBBBB} \coqdocvar{idBB}) \coqdocvar{idB}\coqdoceol
\coqdocindent{1.00em}
==>* \coqdocvar{idB}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_example5\_with\_normalize} :\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{tapp} (\coqdocvar{tapp} \coqdocvar{idBBBB} \coqdocvar{idBB}) \coqdocvar{idB}\coqdoceol
\coqdocindent{1.00em}
==>* \coqdocvar{idB}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Typing}



 Next we consider the typing relation of the STLC. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Contexts}



 \textit{Question}: What is the type of the term ``\coqdocabbreviation{x} \coqdocabbreviation{y}''?


    \textit{Answer}: It depends on the types of \coqdocabbreviation{x} and \coqdocabbreviation{y}!


    I.e., in order to assign a type to a term, we need to know
    what assumptions we should make about the types of its free
    variables.


    This leads us to a three-place \textit{typing judgment}, informally
    written \coqdocvariable{Gamma} \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}, where \coqdocvariable{Gamma} is a
    ``typing context'' -- a mapping from variables to their types. 

 Informally, we'll write \coqdocvariable{Gamma}, \coqdocabbreviation{x}:\coqdocdefinition{T} for ``extend the partial
    function \coqdocvariable{Gamma} to also map \coqdocabbreviation{x} to \coqdocdefinition{T}.''  Formally, we use the
    function \coqdocvar{extend} to add a binding to a partial map. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdockw{context} := \coqdocvar{partial\_map} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Typing Relation}





                             Gamma x = T
\par
\noindent\hrulefill\par
\noindent{}                              (T\_Var)
                            Gamma |- x \symbol{92}in T


                      Gamma , x:T11 |- t12 \symbol{92}in T12
\par
\noindent\hrulefill\par
\noindent{}                       (T\_Abs)
                     Gamma |- \symbol{92}x:T11.t12 \symbol{92}in T11->T12


                        Gamma |- t1 \symbol{92}in T11->T12
                          Gamma |- t2 \symbol{92}in T11
\par
\noindent\hrulefill\par
\noindent{}                          (T\_App)
                         Gamma |- t1 t2 \symbol{92}in T12
\par
\noindent\hrulefill\par
\noindent{}                          (T\_True)
                         Gamma |- true \symbol{92}in Bool
\par
\noindent\hrulefill\par
\noindent{}                         (T\_False)
                        Gamma |- false \symbol{92}in Bool


       Gamma |- t1 \symbol{92}in Bool    Gamma |- t2 \symbol{92}in T    Gamma |- t3 \symbol{92}in T
\par
\noindent\hrulefill\par
\noindent{}          (T\_If)
                  Gamma |- if t1 then t2 else t3 \symbol{92}in T


    We can read the three-place relation \coqdocvariable{Gamma} \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T} as:
    ``to the term \coqdocvariable{t} we can assign the type \coqdocdefinition{T} using as types for
    the free variables of \coqdocvariable{t} the ones specified in the context
    \coqdocvariable{Gamma}.'' \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "Gamma '|-' t '\symbol{92}in' T" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{has\_type} : \coqdockw{context} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tvar} \coqdocvar{x} \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{T12} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11} \ensuremath{\vdash} \coqdocvar{t12} \symbol{92}\coqdoctac{in} \coqdocvar{T12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12} \symbol{92}\coqdoctac{in} \coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_App} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T11} \coqdocvar{T12} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T11} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T12}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_True} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{ttrue} \symbol{92}\coqdoctac{in} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_False} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tfalse} \symbol{92}\coqdoctac{in} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \coqdocvar{T} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TBool} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t3} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "Gamma '|-' t '\symbol{92}in' T" := (\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{has\_type}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Examples}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_example\_1} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TBool} (\coqdocvar{tvar} \coqdocvar{x}) \symbol{92}\coqdoctac{in} \coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}. \coqdoctac{apply} \coqdocvar{T\_Var}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that since we added the \coqdocinductive{has\_type} constructors to the hints
    database, auto can actually solve this one immediately. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_example\_1'} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TBool} (\coqdocvar{tvar} \coqdocvar{x}) \symbol{92}\coqdoctac{in} \coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Another example:


       empty |- \symbol{92}x:A. \symbol{92}y:A->A. y (y x))
             \symbol{92}in A -> (A->A) -> A.
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_example\_2} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty} \ensuremath{\vdash}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TBool}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tabs} \coqdocvar{y} (\coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool})\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{y}) (\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{y}) (\coqdocvar{tvar} \coqdocvar{x}))))) \symbol{92}\coqdoctac{in}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{TArrow} \coqdocvar{TBool} (\coqdocvar{TArrow} (\coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool}) \coqdocvar{TBool})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto} \coqdockw{using} \coqdocvar{update\_eq}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{T\_App}. \coqdoctac{apply} \coqdocvar{T\_Var}...\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{T\_App}. \coqdoctac{apply} \coqdocvar{T\_Var}...\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (typing\_example\_2\_full)}

 Prove the same result without using \coqdoctac{auto}, \coqdoctac{eauto}, or
    \coqdoctac{eapply} (or ...). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_example\_2\_full} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty} \ensuremath{\vdash}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TBool}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tabs} \coqdocvar{y} (\coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool})\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{y}) (\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{y}) (\coqdocvar{tvar} \coqdocvar{x}))))) \symbol{92}\coqdoctac{in}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{TArrow} \coqdocvar{TBool} (\coqdocvar{TArrow} (\coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool}) \coqdocvar{TBool})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars (typing\_example\_3)}

 Formally prove the following typing derivation holds: 

       empty |- \symbol{92}x:Bool->B. \symbol{92}y:Bool->Bool. \symbol{92}z:Bool.
                   y (x z)
             \symbol{92}in T.
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_example\_3} :\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{empty} \ensuremath{\vdash}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tabs} \coqdocvar{x} (\coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool})\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tabs} \coqdocvar{y} (\coqdocvar{TArrow} \coqdocvar{TBool} \coqdocvar{TBool})\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tabs} \coqdocvar{z} \coqdocvar{TBool}\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{y}) (\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{x}) (\coqdocvar{tvar} \coqdocvar{z})))))) \symbol{92}\coqdoctac{in}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 We can also show that terms are \textit{not} typable.  For example, let's
    formally check that there is no typing derivation assigning a type
    to the term \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Bool}. \symbol{92}\coqdocabbreviation{y}:\coqdoclibrary{Bool}, \coqdocabbreviation{x} \coqdocabbreviation{y} -- i.e.,


    \~{} exists T,
        empty |- \symbol{92}x:Bool. \symbol{92}y:Bool, x y : T.
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_nonexample\_1} :\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdoctac{\ensuremath{\exists}} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{empty} \ensuremath{\vdash}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TBool}\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{TBool}\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{x}) (\coqdocvar{tvar} \coqdocvar{y})))) \symbol{92}\coqdoctac{in}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Hc}. \coqdoctac{inversion} \coqdocvar{Hc}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H5}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H4}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H4}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H2}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H5}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H1}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, optional (typing\_nonexample\_3)}

 Another nonexample:


    \~{} (exists S, exists T,
          empty |- \symbol{92}x:S. x x \symbol{92}in T).
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_nonexample\_3} :\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} (\coqdoctac{\ensuremath{\exists}} \coqdocvar{S}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{T},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{empty} \ensuremath{\vdash}\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S}\coqdoceol
\coqdocindent{6.50em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{x}) (\coqdocvar{tvar} \coqdocvar{x}))) \symbol{92}\coqdoctac{in}\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{T}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{STLC}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
$Date: 2016-12-20 12:03:19 -0500 (Tue, 20 Dec 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.StlcProp}{Library }{Top.StlcProp}

\begin{coqdoccode}
\end{coqdoccode}
\section{StlcProp: Properties of STLC}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdockw{Types}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Stlc}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocnoindent
\coqdockw{Module} \coqdocvar{STLCProp}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{STLC}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In this chapter, we develop the fundamental theory of the Simply
    Typed Lambda Calculus -- in particular, the type safety
    theorem. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Canonical Forms}



 As we saw for the simple calculus in the \coqdockw{Types} chapter, the
    first step in establishing basic properties of reduction and types
    is to identify the possible \textit{canonical forms} (i.e., well-typed
    closed values) belonging to each type.  For \coqdoclibrary{Bool}, these are the boolean
    values \coqdocconstructor{ttrue} and \coqdocconstructor{tfalse}.  For arrow types, the canonical forms
    are lambda-abstractions.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{canonical\_forms\_bool} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{TBool} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{t} = \coqdocvar{ttrue}) \ensuremath{\lor} (\coqdocvar{t} = \coqdocvar{tfalse}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{HT} \coqdocvar{HVal}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{HVal}; \coqdoctac{intros}; \coqdoctac{subst}; \coqdoctac{try} \coqdoctac{inversion} \coqdocvar{HT}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{canonical\_forms\_fun} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{x} \coqdocvar{u}, \coqdocvar{t} = \coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T1} \coqdocvar{u}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{HT} \coqdocvar{HVal}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{HVal}; \coqdoctac{intros}; \coqdoctac{subst}; \coqdoctac{try} \coqdoctac{inversion} \coqdocvar{HT}; \coqdoctac{subst}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{x0}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{t0}. \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Progress}



 The \textit{progress} theorem tells us that closed, well-typed
    terms are not stuck: either a well-typed term is a value, or it
    can take a reduction step.  The proof is a relatively
    straightforward extension of the progress proof we saw in the
    \coqdockw{Types} chapter.  We'll give the proof in English first, then
    the formal version. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\textit{Proof}: By induction on the derivation of \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}.



\begin{itemize}
\item  The last rule of the derivation cannot be \coqdocconstructor{T\_Var}, since a
      variable is never well typed in an empty context.



\item  The \coqdocconstructor{T\_True}, \coqdocconstructor{T\_False}, and \coqdocconstructor{T\_Abs} cases are trivial, since in
      each of these cases we can see by inspecting the rule that \coqdocvariable{t}
      is a value.



\item  If the last rule of the derivation is \coqdocconstructor{T\_App}, then \coqdocvariable{t} has the
      form \coqdocvariable{t1} \coqdocvariable{t2} for some \coqdocvariable{t1} and \coqdocvariable{t2}, where \ensuremath{\vdash} \coqdocvariable{t1} \symbol{92}\coqdoctac{in} \coqdocvariable{T2} \ensuremath{\rightarrow} \coqdocdefinition{T}
      and \ensuremath{\vdash} \coqdocvariable{t2} \symbol{92}\coqdoctac{in} \coqdocvariable{T2} for some type \coqdocvariable{T2}.  By the induction
      hypothesis, either \coqdocvariable{t1} is a value or it can take a reduction
      step.



\begin{itemize}
\item  If \coqdocvariable{t1} is a value, then consider \coqdocvariable{t2}, which by the other
          induction hypothesis must also either be a value or take a
          step.



\begin{itemize}
\item  Suppose \coqdocvariable{t2} is a value.  Since \coqdocvariable{t1} is a value with an
              arrow type, it must be a lambda abstraction; hence \coqdocvariable{t1}
              \coqdocvariable{t2} can take a step by \coqdocconstructor{ST\_AppAbs}.



\item  Otherwise, \coqdocvariable{t2} can take a step, and hence so can \coqdocvariable{t1}
              \coqdocvariable{t2} by \coqdocconstructor{ST\_App2}.



\end{itemize}

\item  If \coqdocvariable{t1} can take a step, then so can \coqdocvariable{t1} \coqdocvariable{t2} by \coqdocconstructor{ST\_App1}.



\end{itemize}

\item  If the last rule of the derivation is \coqdocconstructor{T\_If}, then \coqdocvariable{t} = \coqdockw{if} \coqdocvariable{t1}
      \coqdockw{then} \coqdocvariable{t2} \coqdockw{else} \coqdocvariable{t3}, where \coqdocvariable{t1} has type \coqdoclibrary{Bool}.  By the IH, \coqdocvariable{t1}
      either is a value or takes a step.



\begin{itemize}
\item  If \coqdocvariable{t1} is a value, then since it has type \coqdoclibrary{Bool} it must be
          either \coqdocconstructor{true} or \coqdocconstructor{false}.  If it is \coqdocconstructor{true}, then \coqdocvariable{t} steps
          to \coqdocvariable{t2}; otherwise it steps to \coqdocvariable{t3}.



\item  Otherwise, \coqdocvariable{t1} takes a step, and therefore so does \coqdocvariable{t} (by
          \coqdocconstructor{ST\_If}). 
\end{itemize}

\end{itemize}
\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Ht}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Ht}; \coqdoctac{subst} \coqdocvar{Gamma}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{assert} (\coqdoctac{\ensuremath{\exists}} \coqdocvar{x0} \coqdocvar{t0}, \coqdocvar{t1} = \coqdocvar{tabs} \coqdocvar{x0} \coqdocvar{T11} \coqdocvar{t0}).\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{eapply} \coqdocvar{canonical\_forms\_fun}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} \coqdocvar{H1} \coqdockw{as} [\coqdocvar{x0} [\coqdocvar{t0} \coqdocvar{Heq}]]. \coqdoctac{subst}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} ([\coqdocvar{x0}:=\coqdocvar{t2}]\coqdocvar{t0})...\coqdoceol
\coqdocemptyline
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t2'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2'})...\coqdoceol
\coqdocemptyline
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})...\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocemptyline
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{canonical\_forms\_bool} \coqdocvar{t1}); \coqdoctac{subst}; \coqdoctac{eauto}.\coqdoceol
\coqdocemptyline
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tif} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3})...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, advanced (progress\_from\_term\_ind)}

 Show that progress can also be proved by induction on terms
    instead of induction on typing derivations. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{progress'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros} \coqdocvar{T} \coqdocvar{Ht}; \coqdoctac{auto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Preservation}



 The other half of the type soundness property is the
    preservation of types during reduction.  For this part, we'll need
    to develop some technical machinery for reasoning about variables
    and substitution.  Working from top to bottom (from the high-level
    property we are actually interested in to the lowest-level
    technical lemmas that are needed by various cases of the more
    interesting proofs), the story goes like this:



\begin{itemize}
\item  The \textit{preservation theorem} is proved by induction on a typing
        derivation, pretty much as we did in the \coqdockw{Types} chapter.
        The one case that is significantly different is the one for
        the \coqdocconstructor{ST\_AppAbs} rule, whose definition uses the substitution
        operation.  To see that this step preserves typing, we need to
        know that the substitution itself does.  So we prove a...



\item  \textit{substitution lemma}, stating that substituting a (closed)
        term \coqdocdefinition{s} for a variable \coqdocabbreviation{x} in a term \coqdocvariable{t} preserves the type
        of \coqdocvariable{t}.  The proof goes by induction on the form of \coqdocvariable{t} and
        requires looking at all the different cases in the definition
        of substitition.  This time, the tricky cases are the ones for
        variables and for function abstractions.  In both, we discover
        that we need to take a term \coqdocdefinition{s} that has been shown to be
        well-typed in some context \coqdocvariable{Gamma} and consider the same term
        \coqdocdefinition{s} in a slightly different context \coqdocvariable{Gamma'}.  For this we
        prove a...



\item  \textit{context invariance} lemma, showing that typing is preserved
        under ``inessential changes'' to the context \coqdocvariable{Gamma} -- in
        particular, changes that do not affect any of the free
        variables of the term.  And finally, for this, we need a
        careful definition of...



\item  the \textit{free variables} of a term -- i.e., those variables
        mentioned in a term and not in the scope of an enclosing
        function abstraction binding a variable of the same name.

\end{itemize}


   To make Coq happy, we need to formalize the story in the opposite
   order... \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Free Occurrences}



 A variable \coqdocabbreviation{x} \textit{appears free in} a term \textit{t} if \coqdocvariable{t} contains some
    occurrence of \coqdocabbreviation{x} that is not under an abstraction labeled \coqdocabbreviation{x}.
    For example:

\begin{itemize}
\item  \coqdocabbreviation{y} appears free, but \coqdocabbreviation{x} does not, in \symbol{92}\coqdocabbreviation{x}:\coqdocdefinition{T}\ensuremath{\rightarrow}\coqdocvariable{U}. \coqdocabbreviation{x} \coqdocabbreviation{y}

\item  both \coqdocabbreviation{x} and \coqdocabbreviation{y} appear free in (\symbol{92}\coqdocabbreviation{x}:\coqdocdefinition{T}\ensuremath{\rightarrow}\coqdocvariable{U}. \coqdocabbreviation{x} \coqdocabbreviation{y}) \coqdocabbreviation{x}

\item  no variables appear free in \symbol{92}\coqdocabbreviation{x}:\coqdocdefinition{T}\ensuremath{\rightarrow}\coqdocvariable{U}. \symbol{92}\coqdocabbreviation{y}:\coqdocdefinition{T}. \coqdocabbreviation{x} \coqdocabbreviation{y}

\end{itemize}


    Formally: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{appears\_free\_in} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tvar} \coqdocvar{x})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{y} \ensuremath{\not=} \coqdocvar{x}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if3} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t3} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{appears\_free\_in}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \textit{free variables} of a term are just the variables that appear
    free in it.  A term with no free variables is said to be
    \textit{closed}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{closed} (\coqdocvar{t}:\coqdocvar{tm}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \ensuremath{\lnot} \coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
An \textit{open} term is one that is not closed (or not known to be
    closed). 

\paragraph{Exercise: 1 starM (afi)}

 In the space below, write out the rules of the \coqdocinductive{appears\_free\_in}
    relation in informal inference-rule notation.  (Use whatever
    notational conventions you like -- the point of the exercise is
    just for you to think a bit about the meaning of each rule.)
    Although this is a rather low-level, technical definition,
    understanding it is crucial to understanding substitution and its
    properties, which are really the crux of the lambda-calculus. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Substitution}



 To prove that substitution preserves typing, we first need a
    technical lemma connecting free variables and typing contexts: If
    a variable \coqdocabbreviation{x} appears free in a term \coqdocvariable{t}, and if we know \coqdocvariable{t} is
    well typed in context \coqdocvariable{Gamma}, then it must be the case that
    \coqdocvariable{Gamma} assigns a type to \coqdocabbreviation{x}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{free\_in\_context} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}, \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\textit{Proof}: We show, by induction on the proof that \coqdocabbreviation{x} appears free
      in \coqdocvariable{t}, that, for all contexts \coqdocvariable{Gamma}, if \coqdocvariable{t} is well typed
      under \coqdocvariable{Gamma}, then \coqdocvariable{Gamma} assigns some type to \coqdocabbreviation{x}.



\begin{itemize}
\item  If the last rule used is \coqdocconstructor{afi\_var}, then \coqdocvariable{t} = \coqdocabbreviation{x}, and from the
        assumption that \coqdocvariable{t} is well typed under \coqdocvariable{Gamma} we have
        immediately that \coqdocvariable{Gamma} assigns a type to \coqdocabbreviation{x}.



\item  If the last rule used is \coqdocconstructor{afi\_app1}, then \coqdocvariable{t} = \coqdocvariable{t1} \coqdocvariable{t2} and \coqdocabbreviation{x}
        appears free in \coqdocvariable{t1}.  Since \coqdocvariable{t} is well typed under \coqdocvariable{Gamma},
        we can see from the typing rules that \coqdocvariable{t1} must also be, and
        the IH then tells us that \coqdocvariable{Gamma} assigns \coqdocabbreviation{x} a type.



\item  Almost all the other cases are similar: \coqdocabbreviation{x} appears free in a
        subterm of \coqdocvariable{t}, and since \coqdocvariable{t} is well typed under \coqdocvariable{Gamma}, we
        know the subterm of \coqdocvariable{t} in which \coqdocabbreviation{x} appears is well typed
        under \coqdocvariable{Gamma} as well, and the IH gives us exactly the
        conclusion we want.



\item  The only remaining case is \coqdocconstructor{afi\_abs}.  In this case \coqdocvariable{t} =
        \symbol{92}\coqdocabbreviation{y}:\coqdocvar{T11.t12} and \coqdocabbreviation{x} appears free in \coqdocvariable{t12}, and we also know
        that \coqdocabbreviation{x} is different from \coqdocabbreviation{y}.  The difference from the
        previous cases is that, whereas \coqdocvariable{t} is well typed under
        \coqdocvariable{Gamma}, its body \coqdocvariable{t12} is well typed under (\coqdocvariable{Gamma}, \coqdocabbreviation{y}:\coqdocvariable{T11}),
        so the IH allows us to conclude that \coqdocabbreviation{x} is assigned some type
        by the extended context (\coqdocvariable{Gamma}, \coqdocabbreviation{y}:\coqdocvariable{T11}).  To conclude that
        \coqdocvariable{Gamma} assigns a type to \coqdocabbreviation{x}, we appeal to lemma
        \coqdoclemma{update\_neq}, noting that \coqdocabbreviation{x} and \coqdocabbreviation{y} are different
        variables. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma} \coqdocvar{H} \coqdocvar{H0}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{T}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{intros}; \coqdoctac{try} \coqdoctac{solve} [\coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{eauto}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H1}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHappears\_free\_in} \coqdoctac{in} \coqdocvar{H7}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{update\_neq} \coqdoctac{in} \coqdocvar{H7}; \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next, we'll need the fact that any term \coqdocvariable{t} that is well typed in
    the empty context is closed (it has no free variables). 

\paragraph{Exercise: 2 stars, optional (typable\_empty\_\_closed)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Corollary} \coqdocvar{typable\_empty\_\_closed} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{closed} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Sometimes, when we have a proof \coqdocvariable{Gamma} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T}, we will need to
    replace \coqdocvariable{Gamma} by a different context \coqdocvariable{Gamma'}.  When is it safe
    to do this?  Intuitively, it must at least be the case that
    \coqdocvariable{Gamma'} assigns the same types as \coqdocvariable{Gamma} to all the variables
    that appear free in \coqdocvariable{t}. In fact, this is the only condition that
    is needed. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{context\_invariance} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{Gamma'} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Gamma'} \coqdocvar{x}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma'} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\textit{Proof}: By induction on the derivation of 
    \coqdocvariable{Gamma} \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}.



\begin{itemize}
\item  If the last rule in the derivation was \coqdocconstructor{T\_Var}, then \coqdocvariable{t} = \coqdocabbreviation{x}
        and \coqdocvariable{Gamma} \coqdocabbreviation{x} = \coqdocdefinition{T}.  By assumption, \coqdocvariable{Gamma'} \coqdocabbreviation{x} = \coqdocdefinition{T} as well, and
        hence \coqdocvariable{Gamma'} \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T} by \coqdocconstructor{T\_Var}.



\item  If the last rule was \coqdocconstructor{T\_Abs}, then \coqdocvariable{t} = \symbol{92}\coqdocabbreviation{y}:\coqdocvariable{T11}. \coqdocvariable{t12}, with \coqdocdefinition{T}
        = \coqdocvariable{T11} \ensuremath{\rightarrow} \coqdocvariable{T12} and \coqdocvariable{Gamma}, \coqdocabbreviation{y}:\coqdocvariable{T11} \ensuremath{\vdash} \coqdocvariable{t12} \symbol{92}\coqdoctac{in} \coqdocvariable{T12}.  The
        induction hypothesis is that, for any context \coqdocvar{Gamma'{}'}, if
        \coqdocvariable{Gamma}, \coqdocabbreviation{y}:\coqdocvariable{T11} and \coqdocvar{Gamma'{}'} assign the same types to all the
        free variables in \coqdocvariable{t12}, then \coqdocvariable{t12} has type \coqdocvariable{T12} under
        \coqdocvar{Gamma'{}'}.  Let \coqdocvariable{Gamma'} be a context which agrees with
        \coqdocvariable{Gamma} on the free variables in \coqdocvariable{t}; we must show \coqdocvariable{Gamma'} \ensuremath{\vdash}
        \symbol{92}\coqdocabbreviation{y}:\coqdocvariable{T11}. \coqdocvariable{t12} \symbol{92}\coqdoctac{in} \coqdocvariable{T11} \ensuremath{\rightarrow} \coqdocvariable{T12}.


        By \coqdocconstructor{T\_Abs}, it suffices to show that \coqdocvariable{Gamma'}, \coqdocabbreviation{y}:\coqdocvariable{T11} \ensuremath{\vdash} \coqdocvariable{t12} \symbol{92}\coqdoctac{in}
        \coqdocvariable{T12}.  By the IH (setting \coqdocvar{Gamma'{}'} = \coqdocvariable{Gamma'}, \coqdocabbreviation{y}:\coqdocvariable{T11}), it
        suffices to show that \coqdocvariable{Gamma}, \coqdocabbreviation{y}:\coqdocvariable{T11} and \coqdocvariable{Gamma'}, \coqdocabbreviation{y}:\coqdocvariable{T11} agree
        on all the variables that appear free in \coqdocvariable{t12}.


        Any variable occurring free in \coqdocvariable{t12} must be either \coqdocabbreviation{y} or
        some other variable.  \coqdocvariable{Gamma}, \coqdocabbreviation{y}:\coqdocvariable{T11} and \coqdocvariable{Gamma'}, \coqdocabbreviation{y}:\coqdocvariable{T11}
        clearly agree on \coqdocabbreviation{y}.  Otherwise, note that any variable other
        than \coqdocabbreviation{y} that occurs free in \coqdocvariable{t12} also occurs free in \coqdocvariable{t} =
        \symbol{92}\coqdocabbreviation{y}:\coqdocvariable{T11}. \coqdocvariable{t12}, and by assumption \coqdocvariable{Gamma} and \coqdocvariable{Gamma'} agree on
        all such variables; hence so do \coqdocvariable{Gamma}, \coqdocabbreviation{y}:\coqdocvariable{T11} and \coqdocvariable{Gamma'},
        \coqdocabbreviation{y}:\coqdocvariable{T11}.



\item  If the last rule was \coqdocconstructor{T\_App}, then \coqdocvariable{t} = \coqdocvariable{t1} \coqdocvariable{t2}, with \coqdocvariable{Gamma} \ensuremath{\vdash}
        \coqdocvariable{t1} \symbol{92}\coqdoctac{in} \coqdocvariable{T2} \ensuremath{\rightarrow} \coqdocdefinition{T} and \coqdocvariable{Gamma} \ensuremath{\vdash} \coqdocvariable{t2} \symbol{92}\coqdoctac{in} \coqdocvariable{T2}.  One induction
        hypothesis states that for all contexts \coqdocvariable{Gamma'}, if \coqdocvariable{Gamma'}
        agrees with \coqdocvariable{Gamma} on the free variables in \coqdocvariable{t1}, then \coqdocvariable{t1}
        has type \coqdocvariable{T2} \ensuremath{\rightarrow} \coqdocdefinition{T} under \coqdocvariable{Gamma'}; there is a similar IH for
        \coqdocvariable{t2}.  We must show that \coqdocvariable{t1} \coqdocvariable{t2} also has type \coqdocdefinition{T} under
        \coqdocvariable{Gamma'}, given the assumption that \coqdocvariable{Gamma'} agrees with
        \coqdocvariable{Gamma} on all the free variables in \coqdocvariable{t1} \coqdocvariable{t2}.  By \coqdocconstructor{T\_App}, it
        suffices to show that \coqdocvariable{t1} and \coqdocvariable{t2} each have the same type
        under \coqdocvariable{Gamma'} as under \coqdocvariable{Gamma}.  But all free variables in
        \coqdocvariable{t1} are also free in \coqdocvariable{t1} \coqdocvariable{t2}, and similarly for \coqdocvariable{t2}; hence
        the desired result follows from the induction hypotheses. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H}; \coqdoctac{intros}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H0}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHhas\_type}. \coqdoctac{intros} \coqdocvar{x1} \coqdocvar{Hafi}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}. \coqdoctac{unfold} \coqdocvar{t\_update}. \coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{x0} \coqdocvar{x1}) \coqdocvar{eqn}: \coqdocvar{Hx0x1}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{beq\_id\_false\_iff} \coqdoctac{in} \coqdocvar{Hx0x1}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_App} \coqdockw{with} \coqdocvar{T11}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now we come to the conceptual heart of the proof that reduction
    preserves types -- namely, the observation that \textit{substitution}
    preserves types. 

 Formally, the so-called \textit{substitution lemma} says this:
    Suppose we have a term \coqdocvariable{t} with a free variable \coqdocabbreviation{x}, and suppose
    we've assigned a type \coqdocdefinition{T} to \coqdocvariable{t} under the assumption that \coqdocabbreviation{x} has
    some type \coqdocvariable{U}.  Also, suppose that we have some other term \coqdocvariable{v} and
    that we've shown that \coqdocvariable{v} has type \coqdocvariable{U}.  Then, since \coqdocvariable{v} satisfies
    the assumption we made about \coqdocabbreviation{x} when typing \coqdocvariable{t}, we can
    substitute \coqdocvariable{v} for each of the occurrences of \coqdocabbreviation{x} in \coqdocvariable{t} and
    obtain a new term that still has type \coqdocdefinition{T}. 

 \textit{Lemma}: If \coqdocvariable{Gamma},\coqdocabbreviation{x}:\coqdocvariable{U} \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T} and \ensuremath{\vdash} \coqdocvariable{v} \symbol{92}\coqdoctac{in} \coqdocvariable{U}, then \coqdocvariable{Gamma} \ensuremath{\vdash}
    [\coqdocabbreviation{x}:=\coqdocvariable{v}]\coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{substitution\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{t} \coqdocvar{v} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{v} \symbol{92}\coqdoctac{in} \coqdocvar{U}   \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} [\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
One technical subtlety in the statement of the lemma is that
    we assign \coqdocvariable{v} the type \coqdocvariable{U} in the \textit{empty} context -- in other
    words, we assume \coqdocvariable{v} is closed.  This assumption considerably
    simplifies the \coqdocconstructor{T\_Abs} case of the proof (compared to assuming
    \coqdocvariable{Gamma} \ensuremath{\vdash} \coqdocvariable{v} \symbol{92}\coqdoctac{in} \coqdocvariable{U}, which would be the other reasonable assumption
    at this point) because the context invariance lemma then tells us
    that \coqdocvariable{v} has type \coqdocvariable{U} in any context at all -- we don't have to
    worry about free variables in \coqdocvariable{v} clashing with the variable being
    introduced into the context by \coqdocconstructor{T\_Abs}.


    The substitution lemma can be viewed as a kind of commutation
    property.  Intuitively, it says that substitution and typing can
    be done in either order: we can either assign types to the terms
    \coqdocvariable{t} and \coqdocvariable{v} separately (under suitable contexts) and then combine
    them using substitution, or we can substitute first and then
    assign a type to  [\coqdocabbreviation{x}:=\coqdocvariable{v}] \coqdocvariable{t}  -- the result is the same either
    way.


    \textit{Proof}: We show, by induction on \coqdocvariable{t}, that for all \coqdocdefinition{T} and
    \coqdocvariable{Gamma}, if \coqdocvariable{Gamma},\coqdocabbreviation{x}:\coqdocvariable{U} \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T} and \ensuremath{\vdash} \coqdocvariable{v} \symbol{92}\coqdoctac{in} \coqdocvariable{U}, then \coqdocvariable{Gamma}
    \ensuremath{\vdash} [\coqdocabbreviation{x}:=\coqdocvariable{v}]\coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}.



\begin{itemize}
\item  If \coqdocvariable{t} is a variable there are two cases to consider,
        depending on whether \coqdocvariable{t} is \coqdocabbreviation{x} or some other variable.



\begin{itemize}
\item  If \coqdocvariable{t} = \coqdocabbreviation{x}, then from the fact that \coqdocvariable{Gamma}, \coqdocabbreviation{x}:\coqdocvariable{U} \ensuremath{\vdash} \coqdocabbreviation{x} \symbol{92}\coqdoctac{in}
            \coqdocdefinition{T} we conclude that \coqdocvariable{U} = \coqdocdefinition{T}.  We must show that [\coqdocabbreviation{x}:=\coqdocvariable{v}]\coqdocabbreviation{x} =
            \coqdocvariable{v} has type \coqdocdefinition{T} under \coqdocvariable{Gamma}, given the assumption that
            \coqdocvariable{v} has type \coqdocvariable{U} = \coqdocdefinition{T} under the empty context.  This
            follows from context invariance: if a closed term has type
            \coqdocdefinition{T} in the empty context, it has that type in any context.



\item  If \coqdocvariable{t} is some variable \coqdocabbreviation{y} that is not equal to \coqdocabbreviation{x}, then
            we need only note that \coqdocabbreviation{y} has the same type under \coqdocvariable{Gamma},
            \coqdocabbreviation{x}:\coqdocvariable{U} as under \coqdocvariable{Gamma}.



\end{itemize}

\item  If \coqdocvariable{t} is an abstraction \symbol{92}\coqdocabbreviation{y}:\coqdocvariable{T11}. \coqdocvariable{t12}, then the IH tells us,
        for all \coqdocvariable{Gamma'} and \coqdocvariable{T'}, that if \coqdocvariable{Gamma'},\coqdocabbreviation{x}:\coqdocvariable{U} \ensuremath{\vdash} \coqdocvariable{t12} \symbol{92}\coqdoctac{in} \coqdocvariable{T'}
        and \ensuremath{\vdash} \coqdocvariable{v} \symbol{92}\coqdoctac{in} \coqdocvariable{U}, then \coqdocvariable{Gamma'} \ensuremath{\vdash} [\coqdocabbreviation{x}:=\coqdocvariable{v}]\coqdocvariable{t12} \symbol{92}\coqdoctac{in} \coqdocvariable{T'}.


        The substitution in the conclusion behaves differently
        depending on whether \coqdocabbreviation{x} and \coqdocabbreviation{y} are the same variable.


        First, suppose \coqdocabbreviation{x} = \coqdocabbreviation{y}.  Then, by the definition of
        substitution, [\coqdocabbreviation{x}:=\coqdocvariable{v}]\coqdocvariable{t} = \coqdocvariable{t}, so we just need to show \coqdocvariable{Gamma} \ensuremath{\vdash}
        \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}.  But we know \coqdocvariable{Gamma},\coqdocabbreviation{x}:\coqdocvariable{U} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T}, and, since \coqdocabbreviation{y}
        does not appear free in \symbol{92}\coqdocabbreviation{y}:\coqdocvariable{T11}. \coqdocvariable{t12}, the context invariance
        lemma yields \coqdocvariable{Gamma} \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}.


        Second, suppose \coqdocabbreviation{x} \ensuremath{\not=} \coqdocabbreviation{y}.  We know \coqdocvariable{Gamma},\coqdocabbreviation{x}:\coqdocvariable{U},\coqdocabbreviation{y}:\coqdocvariable{T11} \ensuremath{\vdash} \coqdocvariable{t12} \symbol{92}\coqdoctac{in}
        \coqdocvariable{T12} by inversion of the typing relation, from which
        \coqdocvariable{Gamma},\coqdocabbreviation{y}:\coqdocvariable{T11},\coqdocabbreviation{x}:\coqdocvariable{U} \ensuremath{\vdash} \coqdocvariable{t12} \symbol{92}\coqdoctac{in} \coqdocvariable{T12} follows by the context
        invariance lemma, so the IH applies, giving us \coqdocvariable{Gamma},\coqdocabbreviation{y}:\coqdocvariable{T11} \ensuremath{\vdash}
        [\coqdocabbreviation{x}:=\coqdocvariable{v}]\coqdocvariable{t12} \symbol{92}\coqdoctac{in} \coqdocvariable{T12}.  By \coqdocconstructor{T\_Abs}, \coqdocvariable{Gamma} \ensuremath{\vdash} \symbol{92}\coqdocabbreviation{y}:\coqdocvariable{T11}. [\coqdocabbreviation{x}:=\coqdocvariable{v}]\coqdocvariable{t12}
        \symbol{92}\coqdoctac{in} \coqdocvariable{T11}\ensuremath{\rightarrow}\coqdocvariable{T12}, and by the definition of substitution (noting
        that \coqdocabbreviation{x} \ensuremath{\not=} \coqdocabbreviation{y}), \coqdocvariable{Gamma} \ensuremath{\vdash} \symbol{92}\coqdocabbreviation{y}:\coqdocvariable{T11}. [\coqdocabbreviation{x}:=\coqdocvariable{v}]\coqdocvariable{t12} \symbol{92}\coqdoctac{in} \coqdocvariable{T11}\ensuremath{\rightarrow}\coqdocvariable{T12} as
        required.



\item  If \coqdocvariable{t} is an application \coqdocvariable{t1} \coqdocvariable{t2}, the result follows
        straightforwardly from the definition of substitution and the
        induction hypotheses.



\item  The remaining cases are similar to the application case.

\end{itemize}


    \textit{Technical note}: This proof is a rare case where an
    induction on terms, rather than typing derivations, yields a
    simpler argument.  The reason for this is that the assumption
    \coqdocdefinition{update} \coqdocvariable{Gamma} \coqdocabbreviation{x} \coqdocvariable{U} \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T} is not completely generic, in the
    sense that one of the ``slots'' in the typing relation -- namely the
    context -- is not just a variable, and this means that Coq's
    native induction tactic does not give us the induction hypothesis
    that we want.  It is possible to work around this, but the needed
    generalization is a little tricky.  The term \coqdocvariable{t}, on the other
    hand, is completely generic. 
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{t} \coqdocvar{v} \coqdocvar{T} \coqdocvar{Ht} \coqdocvar{Ht'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{T}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros} \coqdocvar{T} \coqdocvar{Gamma} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{simpl}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}. \coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}) \coqdockw{as} [\coqdocvar{Hxy}\ensuremath{|}\coqdocvar{Hxy}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{update\_eq} \coqdoctac{in} \coqdocvar{H2}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H2}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{typable\_empty\_\_closed} \coqdoctac{in} \coqdocvar{Ht'}. \coqdoctac{unfold} \coqdocvar{closed} \coqdoctac{in} \coqdocvar{Ht'}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros}. \coqdoctac{apply} (\coqdocvar{Ht'} \coqdocvar{x0}) \coqdoctac{in} \coqdocvar{H0}. \coqdoctac{inversion} \coqdocvar{H0}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}. \coqdoctac{rewrite} \coqdocvar{update\_neq} \coqdoctac{in} \coqdocvar{H2}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}. \coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{T}. \coqdoctac{apply} \coqdocvar{T\_Abs}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}) \coqdockw{as} [\coqdocvar{Hxy} \ensuremath{|} \coqdocvar{Hxy}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{update\_shadow} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{apply} \coqdocvar{H5}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHt}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y} \coqdocvar{z}) \coqdockw{as} [\coqdocvar{Hyz} \ensuremath{|} \coqdocvar{Hyz}]; \coqdoctac{subst}; \coqdoctac{trivial}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_false\_iff} \coqdoctac{in} \coqdocvar{Hxy}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{Hxy}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Main Theorem}



 We now have the tools we need to prove preservation: if a closed
    term \coqdocvariable{t} has type \coqdocdefinition{T} and takes a step to \coqdocvariable{t'}, then \coqdocvariable{t'}
    is also a closed term with type \coqdocdefinition{T}.  In other words, the small-step
    reduction relation preserves types. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t} ==> \coqdocvar{t'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\textit{Proof}: By induction on the derivation of \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}.



\begin{itemize}
\item  We can immediately rule out \coqdocconstructor{T\_Var}, \coqdocconstructor{T\_Abs}, \coqdocconstructor{T\_True}, and
      \coqdocconstructor{T\_False} as the final rules in the derivation, since in each of
      these cases \coqdocvariable{t} cannot take a step.



\item  If the last rule in the derivation is \coqdocconstructor{T\_App}, then \coqdocvariable{t} = \coqdocvariable{t1}
      \coqdocvariable{t2}.  There are three cases to consider, one for each rule that
      could be used to show that \coqdocvariable{t1} \coqdocvariable{t2} takes a step to \coqdocvariable{t'}.



\begin{itemize}
\item  If \coqdocvariable{t1} \coqdocvariable{t2} takes a step by \coqdocconstructor{ST\_App1}, with \coqdocvariable{t1} stepping to
          \coqdocvariable{t1'}, then by the IH \coqdocvariable{t1'} has the same type as \coqdocvariable{t1}, and
          hence \coqdocvariable{t1'} \coqdocvariable{t2} has the same type as \coqdocvariable{t1} \coqdocvariable{t2}.



\item  The \coqdocconstructor{ST\_App2} case is similar.



\item  If \coqdocvariable{t1} \coqdocvariable{t2} takes a step by \coqdocconstructor{ST\_AppAbs}, then \coqdocvariable{t1} =
          \symbol{92}\coqdocabbreviation{x}:\coqdocvar{T11.t12} and \coqdocvariable{t1} \coqdocvariable{t2} steps to [\coqdocabbreviation{x}:=\coqdocvariable{t2}]\coqdocvariable{t12}; the
          desired result now follows from the fact that substitution
          preserves types.



\end{itemize}

\item  If the last rule in the derivation is \coqdocconstructor{T\_If}, then \coqdocvariable{t} = \coqdockw{if} \coqdocvariable{t1}
      \coqdockw{then} \coqdocvariable{t2} \coqdockw{else} \coqdocvariable{t3}, and there are again three cases depending on
      how \coqdocvariable{t} steps.



\begin{itemize}
\item  If \coqdocvariable{t} steps to \coqdocvariable{t2} or \coqdocvariable{t3}, the result is immediate, since
          \coqdocvariable{t2} and \coqdocvariable{t3} have the same type as \coqdocvariable{t}.



\item  Otherwise, \coqdocvariable{t} steps by \coqdocconstructor{ST\_If}, and the desired conclusion
          follows directly from the induction hypothesis. 
\end{itemize}

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{HT}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{HT};\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{intros} \coqdocvar{t'} \coqdocvar{HE}; \coqdoctac{subst} \coqdocvar{Gamma}; \coqdoctac{subst};\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{try} \coqdoctac{solve} [\coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}; \coqdoctac{auto}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{substitution\_preserves\_typing} \coqdockw{with} \coqdocvar{T11}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT1}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, recommendedM (subject\_expansion\_stlc)}

 An exercise in the \coqdockw{Types} chapter asked about the \textit{subject
    expansion} property for the simple language of arithmetic and
    boolean expressions.  Does this property hold for STLC?  That is,
    is it always the case that, if \coqdocvariable{t} ==> \coqdocvariable{t'} and \coqdocinductive{has\_type} \coqdocvariable{t'} \coqdocdefinition{T},
    then \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} \symbol{92}\coqdoctac{in} \coqdocdefinition{T}?  If so, prove it.  If not, give a
    counter-example not involving conditionals.


\ensuremath{\Box}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Type Soundness}



\paragraph{Exercise: 2 stars, optional (type\_soundness)}

 Put progress and preservation together and show that a well-typed
    term can \textit{never} reach a stuck state.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{stuck} (\coqdocvar{t}:\coqdocvar{tm}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{normal\_form} \coqdocvar{step}) \coqdocvar{t} \ensuremath{\land} \ensuremath{\lnot} \coqdocvar{value} \coqdocvar{t}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Corollary} \coqdocvar{soundness} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} ==>* \coqdocvar{t'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\~{}(\coqdocvar{stuck} \coqdocvar{t'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{Hhas\_type} \coqdocvar{Hmulti}. \coqdoctac{unfold} \coqdocvar{stuck}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [\coqdocvar{Hnf} \coqdocvar{Hnot\_val}]. \coqdoctac{unfold} \coqdocvar{normal\_form} \coqdoctac{in} \coqdocvar{Hnf}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hmulti}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Uniqueness of Types}



\paragraph{Exercise: 3 starsM (types\_unique)}

 Another nice property of the STLC is that types are unique: a
    given term (in a given context) has at most one type.  Formalize this statement and prove it. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Additional Exercises}



\paragraph{Exercise: 1 starM (progress\_preservation\_statement)}

 Without peeking at their statements above, write down the progress
    and preservation theorems for the simply typed lambda-calculus (as 
    Coq theorems). \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (stlc\_variation1)}

 Suppose we add a new term \coqdocvar{zap} with the following reduction rule
\par
\noindent\hrulefill\par
\noindent{}                  (ST\_Zap)
                         t ==> zap


and the following typing rule:
\par
\noindent\hrulefill\par
\noindent{}               (T\_Zap)
                      Gamma |- zap : T


    Which of the following properties of the STLC remain true in
    the presence of these rules?  For each property, write either
    ``remains true'' or ``becomes false.'' If a property becomes
    false, give a counterexample.



\begin{itemize}
\item  Determinism of \coqdocinductive{step}

\end{itemize}

\begin{itemize}
\item  Progress

\end{itemize}

\begin{itemize}
\item  Preservation

\end{itemize}
\ensuremath{\Box}


\paragraph{Exercise: 2 starsM (stlc\_variation2)}

 Suppose instead that we add a new term \coqdoclemma{foo} with the following 
    reduction rules:
\par
\noindent\hrulefill\par
\noindent{}                (ST\_Foo1)
                       (\symbol{92}x:A. x) ==> foo
\par
\noindent\hrulefill\par
\noindent{}                   (ST\_Foo2)
                         foo ==> true


    Which of the following properties of the STLC remain true in
    the presence of this rule?  For each one, write either
    ``remains true'' or else ``becomes false.'' If a property becomes
    false, give a counterexample.



\begin{itemize}
\item  Determinism of \coqdocinductive{step}

\end{itemize}

\begin{itemize}
\item  Progress

\end{itemize}

\begin{itemize}
\item  Preservation

\end{itemize}
\ensuremath{\Box}


\paragraph{Exercise: 2 starsM (stlc\_variation3)}

 Suppose instead that we remove the rule \coqdocconstructor{ST\_App1} from the \coqdocinductive{step}
    relation. Which of the following properties of the STLC remain
    true in the presence of this rule?  For each one, write either
    ``remains true'' or else ``becomes false.'' If a property becomes
    false, give a counterexample.



\begin{itemize}
\item  Determinism of \coqdocinductive{step}

\end{itemize}

\begin{itemize}
\item  Progress

\end{itemize}

\begin{itemize}
\item  Preservation

\end{itemize}
\ensuremath{\Box}


\paragraph{Exercise: 2 stars, optional (stlc\_variation4)}

 Suppose instead that we add the following new rule to the 
    reduction relation:
\par
\noindent\hrulefill\par
\noindent{}        (ST\_FunnyIfTrue)
            (if true then t1 else t2) ==> true


    Which of the following properties of the STLC remain true in
    the presence of this rule?  For each one, write either
    ``remains true'' or else ``becomes false.'' If a property becomes
    false, give a counterexample.



\begin{itemize}
\item  Determinism of \coqdocinductive{step}

\end{itemize}

\begin{itemize}
\item  Progress

\end{itemize}

\begin{itemize}
\item  Preservation

\end{itemize}
\ensuremath{\Box}


\paragraph{Exercise: 2 stars, optional (stlc\_variation5)}

 Suppose instead that we add the following new rule to the typing 
    relation:


                 Gamma |- t1 \symbol{92}in Bool->Bool->Bool
                     Gamma |- t2 \symbol{92}in Bool
\par
\noindent\hrulefill\par
\noindent{}          (T\_FunnyApp)
                    Gamma |- t1 t2 \symbol{92}in Bool


    Which of the following properties of the STLC remain true in
    the presence of this rule?  For each one, write either
    ``remains true'' or else ``becomes false.'' If a property becomes
    false, give a counterexample.



\begin{itemize}
\item  Determinism of \coqdocinductive{step}

\end{itemize}

\begin{itemize}
\item  Progress

\end{itemize}

\begin{itemize}
\item  Preservation

\end{itemize}
\ensuremath{\Box}


\paragraph{Exercise: 2 stars, optional (stlc\_variation6)}

 Suppose instead that we add the following new rule to the typing 
    relation:


                     Gamma |- t1 \symbol{92}in Bool
                     Gamma |- t2 \symbol{92}in Bool
\par
\noindent\hrulefill\par
\noindent{}               (T\_FunnyApp')
                    Gamma |- t1 t2 \symbol{92}in Bool


    Which of the following properties of the STLC remain true in
    the presence of this rule?  For each one, write either
    ``remains true'' or else ``becomes false.'' If a property becomes
    false, give a counterexample.



\begin{itemize}
\item  Determinism of \coqdocinductive{step}

\end{itemize}

\begin{itemize}
\item  Progress

\end{itemize}

\begin{itemize}
\item  Preservation

\end{itemize}
\ensuremath{\Box}


\paragraph{Exercise: 2 stars, optional (stlc\_variation7)}

 Suppose we add the following new rule to the typing relation 
    of the STLC:
\par
\noindent\hrulefill\par
\noindent{} (T\_FunnyAbs)
                         |- \symbol{92}x:Bool.t \symbol{92}in Bool


    Which of the following properties of the STLC remain true in
    the presence of this rule?  For each one, write either
    ``remains true'' or else ``becomes false.'' If a property becomes
    false, give a counterexample.



\begin{itemize}
\item  Determinism of \coqdocinductive{step}

\end{itemize}

\begin{itemize}
\item  Progress

\end{itemize}

\begin{itemize}
\item  Preservation

\end{itemize}
\ensuremath{\Box}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{STLCProp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Exercise: STLC with Arithmetic}



 To see how the STLC might function as the core of a real
    programming language, let's extend it with a concrete base
    type of numbers and some constants and primitive
    operators. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{STLCArith}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{STLC}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To types, we add a base type of natural numbers (and remove
    booleans, for brevity). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TNat}   : \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To terms, we add natural number constants, along with
    successor, predecessor, multiplication, and zero-testing. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tnat}  : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsucc} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpred} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tmult} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif0}  : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 4 starsM (stlc\_arith)}

 Finish formalizing the definition and properties of the STLC
    extended with arithmetic.  Specifically:



\begin{itemize}
\item  Copy the core definitions and theorems for STLC that we went
      through above (from the definition of values through the
      Preservation theorem, inclusive), and paste it into the file at
      this point.  Do not copy examples, exercises, etc.  (In
      particular, make sure you don't copy any of the \ensuremath{\Box} comments at
      the end of exercises, to avoid confusing the autograder.)



\item  Extend the definitions of the \coqdoctac{subst} operation and the \coqdocinductive{step}
      relation to include appropriate clauses for the arithmetic
      operators.



\item  Extend the proofs of all the properties (up to \coqdoclemma{preservation})
      of the original STLC to deal with the new syntactic forms.  Make
      sure Coq accepts the whole file. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{STLCArith}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
$Date: 2016-12-20 12:03:19 -0500 (Tue, 20 Dec 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.MoreStlc}{Library }{Top.MoreStlc}

\begin{coqdoccode}
\end{coqdoccode}
\section{MoreStlc: More on the Simply Typed Lambda-Calculus}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdockw{Types}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Stlc}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Simple Extensions to STLC}



 The simply typed lambda-calculus has enough structure to make its
    theoretical properties interesting, but it is not much of a
    programming language.


    In this chapter, we begin to close the gap with real-world
    languages by introducing a number of familiar features that have
    straightforward treatments at the level of typing. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Numbers}



 As we saw in exercise \coqdocvar{stlc\_arith} at the end of the \coqdoclibrary{StlcProp}
    chapter, adding types, constants, and primitive operations for
    natural numbers is easy -- basically just a matter of combining
    the \coqdockw{Types} and \coqdoclibrary{Stlc} chapters.  Adding more realistic
    numeric types like machine integers and floats is also
    straightforward, though of course the specifications of the
    numeric primitives become more fiddly. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Let Bindings}



 When writing a complex expression, it is useful to be able
    to give names to some of its subexpressions to avoid repetition
    and increase readability.  Most languages provide one or more ways
    of doing this.  In OCaml (and Coq), for example, we can write \coqdockw{let}
    \coqdocabbreviation{x}=\coqdocvariable{t1} \coqdoctac{in} \coqdocvariable{t2} to mean ``reduce the expression \coqdocvariable{t1} to a value and
    bind the name \coqdocabbreviation{x} to this value while reducing \coqdocvariable{t2}.''


    Our \coqdockw{let}-binder follows OCaml in choosing a standard
    \textit{call-by-value} evaluation order, where the \coqdockw{let}-bound term must
    be fully reduced before reduction of the \coqdockw{let}-body can begin.
    The typing rule \coqdocvar{T\_Let} tells us that the type of a \coqdockw{let} can be
    calculated by calculating the type of the \coqdockw{let}-bound term,
    extending the context with a binding with this type, and in this
    enriched context calculating the type of the body (which is then
    the type of the whole \coqdockw{let} expression).


    At this point in the book, it's probably easier simply to look at
    the rules defining this new feature than to wade through a lot of
    English text conveying the same information.  Here they are: 

 Syntax:


       t ::=                Terms
           | ...               (other terms same as before)
           | let x=t in t      let-binding




    Reduction:


                                 t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}               (ST\_Let1)
                     let x=t1 in t2 ==> let x=t1' in t2
\par
\noindent\hrulefill\par
\noindent{}              (ST\_LetValue)
                        let x=v1 in t2 ==> \coqdocabbreviation{x}:=\coqdocvariable{v1}t2


    Typing:


                Gamma |- t1 : T1      Gamma, x:T1 |- t2 : T2
\par
\noindent\hrulefill\par
\noindent{}            (T\_Let)
                        Gamma |- let x=t1 in t2 : T2
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Pairs}



 Our functional programming examples in Coq have made
    frequent use of \textit{pairs} of values.  The type of such a pair is
    called a \textit{product type}.


    The formalization of pairs is almost too simple to be worth
    discussing.  However, let's look briefly at the various parts of
    the definition to emphasize the common pattern. 

 In Coq, the primitive way of extracting the components of a pair
    is \textit{pattern matching}.  An alternative is to take \coqdocdefinition{fst} and
    \coqdocdefinition{snd} -- the first- and second-projection operators -- as
    primitives.  Just for fun, let's do our pairs this way.  For
    example, here's how we'd write a function that takes a pair of
    numbers and returns the pair of their sum and difference:


       \symbol{92}x : Nat*Nat.
          let sum = x.fst + x.snd in
          let diff = x.fst - x.snd in
          (sum,diff)


 Adding pairs to the simply typed lambda-calculus, then, involves
    adding two new forms of term -- pairing, written (\coqdocvariable{t1},\coqdocvariable{t2}), and
    projection, written \coqdocvar{t.fst} for the first projection from \coqdocvariable{t} and
    \coqdocvar{t.snd} for the second projection -- plus one new type constructor,
    \coqdocvariable{T1}\ensuremath{\times}\coqdocvariable{T2}, called the \textit{product} of \coqdocvariable{T1} and \coqdocvariable{T2}.  

 Syntax:


       t ::=                Terms
           | (t,t)             pair
           | t.fst             first projection
           | t.snd             second projection
           | ...


       v ::=                Values
           | (v,v)             pair value
           | ...


       T ::=                Types
           | T * T             product type
           | ...


 For reduction, we need several new rules specifying how pairs and
    projection behave. 

                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                        (ST\_Pair1)
                         (t1,t2) ==> (t1',t2)


                              t2 ==> t2'
\par
\noindent\hrulefill\par
\noindent{}                        (ST\_Pair2)
                         (v1,t2) ==> (v1,t2')


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                          (ST\_Fst1)
                          t1.fst ==> t1'.fst
\par
\noindent\hrulefill\par
\noindent{}                       (ST\_FstPair)
                          (v1,v2).fst ==> v1


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                          (ST\_Snd1)
                          t1.snd ==> t1'.snd
\par
\noindent\hrulefill\par
\noindent{}                       (ST\_SndPair)
                          (v1,v2).snd ==> v2


 Rules \coqdocconstructor{ST\_FstPair} and \coqdocconstructor{ST\_SndPair} say that, when a fully
    reduced pair meets a first or second projection, the result is
    the appropriate component.  The congruence rules \coqdocvar{ST\_Fst1} and
    \coqdocvar{ST\_Snd1} allow reduction to proceed under projections, when the
    term being projected from has not yet been fully reduced.
    \coqdocconstructor{ST\_Pair1} and \coqdocconstructor{ST\_Pair2} reduce the parts of pairs: first the
    left part, and then -- when a value appears on the left -- the right
    part.  The ordering arising from the use of the metavariables \coqdocvariable{v}
    and \coqdocvariable{t} in these rules enforces a left-to-right evaluation
    strategy for pairs.  (Note the implicit convention that
    metavariables like \coqdocvariable{v} and \coqdocvariable{v1} can only denote values.)  We've
    also added a clause to the definition of values, above, specifying
    that (\coqdocvariable{v1},\coqdocvariable{v2}) is a value.  The fact that the components of a pair
    value must themselves be values ensures that a pair passed as an
    argument to a function will be fully reduced before the function
    body starts executing. 

 The typing rules for pairs and projections are straightforward. 

               Gamma |- t1 : T1       Gamma |- t2 : T2
\par
\noindent\hrulefill\par
\noindent{}                 (T\_Pair)
                       Gamma |- (t1,t2) : T1*T2


                        Gamma |- t1 : T11*T12
\par
\noindent\hrulefill\par
\noindent{}                           (T\_Fst)
                        Gamma |- t1.fst : T11


                        Gamma |- t1 : T11*T12
\par
\noindent\hrulefill\par
\noindent{}                           (T\_Snd)
                        Gamma |- t1.snd : T12


 \coqdocconstructor{T\_Pair} says that (\coqdocvariable{t1},\coqdocvariable{t2}) has type \coqdocvariable{T1}\ensuremath{\times}\coqdocvariable{T2} if \coqdocvariable{t1} has
   type \coqdocvariable{T1} and \coqdocvariable{t2} has type \coqdocvariable{T2}.  Conversely, \coqdocconstructor{T\_Fst} and \coqdocconstructor{T\_Snd}
   tell us that, if \coqdocvariable{t1} has a product type \coqdocvariable{T11}\ensuremath{\times}\coqdocvariable{T12} (i.e., if it
   will reduce to a pair), then the types of the projections from
   this pair are \coqdocvariable{T11} and \coqdocvariable{T12}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Unit}



 Another handy base type, found especially in languages in
    the ML family, is the singleton type \coqdocvar{Unit}.  It has a single element -- the term constant \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}} (with a small
    \coqdocvariable{u}) -- and a typing rule making \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}} an element of \coqdocvar{Unit}.  We
    also add \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}} to the set of possible values -- indeed, \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}} is
    the \textit{only} possible result of reducing an expression of type
    \coqdocvar{Unit}. 

 Syntax:


       t ::=                Terms
           | unit              unit value
           | ...


       v ::=                Values
           | unit              unit
           | ...


       T ::=                Types
           | Unit              Unit type
           | ...


    Typing:
\par
\noindent\hrulefill\par
\noindent{}                          (T\_Unit)
                         Gamma |- unit : Unit


 It may seem a little strange to bother defining a type that
    has just one element -- after all, wouldn't every computation
    living in such a type be trivial?


    This is a fair question, and indeed in the STLC the \coqdocvar{Unit} type is
    not especially critical (though we'll see two uses for it below).
    Where \coqdocvar{Unit} really comes in handy is in richer languages with
    \textit{side effects} -- e.g., assignment statements that mutate
    variables or pointers, exceptions and other sorts of nonlocal
    control structures, etc.  In such languages, it is convenient to
    have a type for the (trivial) result of an expression that is
    evaluated only for its effect. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Sums}



 Many programs need to deal with values that can take two distinct
   forms.  For example, we might identify employees in an accounting
   application using \textit{either} their name \textit{or} their id number.
   A search function might return \textit{either} a matching value \textit{or} an
   error code.


   These are specific examples of a binary \textit{sum type} (sometimes called
   a \textit{disjoint union}), which describes a set of values drawn from 
   one of two given types, e.g.:


       Nat + Bool
 We create elements of these types by \textit{tagging} elements of
    the component types.  For example, if \coqdocabbreviation{n} is a \coqdoclibrary{Nat} then \coqdocvar{inl} \coqdocabbreviation{n}
    is an element of \coqdoclibrary{Nat}+\coqdoclibrary{Bool}; similarly, if \coqdocconstructor{b} is a \coqdoclibrary{Bool} then
    \coqdocvar{inr} \coqdocconstructor{b} is a \coqdoclibrary{Nat}+\coqdoclibrary{Bool}.  The names of the tags \coqdocvar{inl} and \coqdocvar{inr}
    arise from thinking of them as functions


   inl : Nat -> Nat + Bool
   inr : Bool -> Nat + Bool


    that ``inject'' elements of \coqdoclibrary{Nat} or \coqdoclibrary{Bool} into the left and right
    components of the sum type \coqdoclibrary{Nat}+\coqdoclibrary{Bool}.  (But note that we don't
    actually treat them as functions in the way we formalize them:
    \coqdocvar{inl} and \coqdocvar{inr} are keywords, and \coqdocvar{inl} \coqdocvariable{t} and \coqdocvar{inr} \coqdocvariable{t} are primitive
    syntactic forms, not function applications.) 

 In general, the elements of a type \coqdocvariable{T1} + \coqdocvariable{T2} consist of the
    elements of \coqdocvariable{T1} tagged with the token \coqdocvar{inl}, plus the elements of
    \coqdocvariable{T2} tagged with \coqdocvar{inr}. 

 One important usage of sums is signaling errors:


    div : Nat -> Nat -> (Nat + Unit) =
    div =
      \symbol{92}x:Nat. \symbol{92}y:Nat.
        if iszero y then
          inr unit
        else
          inl ...
 The type \coqdoclibrary{Nat} + \coqdocvar{Unit} above is in fact isomorphic to \coqdocinductive{option}
    \coqdocdefinition{nat} in Coq -- i.e., it's easy to write functions that translate
    back and forth. 

 To \textit{use} elements of sum types, we introduce a \coqdoctac{case}
    construct (a very simplified form of Coq's \coqdockw{match}) to destruct
    them. For example, the following procedure converts a \coqdoclibrary{Nat}+\coqdoclibrary{Bool}
    into a \coqdoclibrary{Nat}: 

    getNat =
      \symbol{92}x:Nat+Bool.
        case x of
          inl n => n
        | inr b => if b then 1 else 0
 More formally... 

 Syntax:


       t ::=                Terms
           | inl T t           tagging (left)
           | inr T t           tagging (right)
           | case t of         case
               inl x => t
             | inr x => t
           | ...


       v ::=                Values
           | inl T v           tagged value (left)
           | inr T v           tagged value (right)
           | ...


       T ::=                Types
           | T + T             sum type
           | ...


 Reduction:


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                         (ST\_Inl)
                        inl T t1 ==> inl T t1'


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                         (ST\_Inr)
                        inr T t1 ==> inr T t1'


                              t0 ==> t0'
\par
\noindent\hrulefill\par
\noindent{}       (ST\_Case)
                   case t0 of inl x1 => t1 | inr x2 => t2 ==>
                   case t0' of inl x1 => t1 | inr x2 => t2
\par
\noindent\hrulefill\par
\noindent{}         (ST\_CaseInl)
            case (inl T v0) of inl x1 => t1 | inr x2 => t2
                           ==>  \coqdocvariable{x1}:=\coqdocvariable{v0}t1
\par
\noindent\hrulefill\par
\noindent{}         (ST\_CaseInr)
            case (inr T v0) of inl x1 => t1 | inr x2 => t2
                           ==>  \coqdocvariable{x2}:=\coqdocvariable{v0}t2


 Typing:


                          Gamma |- t1 :  T1
\par
\noindent\hrulefill\par
\noindent{}                       (T\_Inl)
                     Gamma |- inl T2 t1 : T1 + T2


                           Gamma |- t1 : T2
\par
\noindent\hrulefill\par
\noindent{}                       (T\_Inr)
                     Gamma |- inr T1 t1 : T1 + T2


                         Gamma |- t0 : T1+T2
                       Gamma , x1:T1 |- t1 : T
                       Gamma , x2:T2 |- t2 : T
\par
\noindent\hrulefill\par
\noindent{}           (T\_Case)
         Gamma |- case t0 of inl x1 => t1 | inr x2 => t2 : T


    We use the type annotation in \coqdocvar{inl} and \coqdocvar{inr} to make the typing 
    relation simpler, similarly to what we did for functions. 

 Without this extra information, the typing rule \coqdocconstructor{T\_Inl}, for
    example, would have to say that, once we have shown that \coqdocvariable{t1} is
    an element of type \coqdocvariable{T1}, we can derive that \coqdocvar{inl} \coqdocvariable{t1} is an element
    of \coqdocvariable{T1} + \coqdocvariable{T2} for \textit{any} type T2.  For example, we could derive both
    \coqdocvar{inl} 5 : \coqdoclibrary{Nat} + \coqdoclibrary{Nat} and \coqdocvar{inl} 5 : \coqdoclibrary{Nat} + \coqdoclibrary{Bool} (and infinitely many
    other types).  This peculiarity (technically, a failure of
    uniqueness of types) would mean that we cannot build a
    typechecking algorithm simply by ``reading the rules from bottom to
    top'' as we could for all the other features seen so far.


    There are various ways to deal with this difficulty.  One simple
    one -- which we've adopted here -- forces the programmer to
    explicitly annotate the ``other side'' of a sum type when performing
    an injection.  This is a bit heavy for programmers (so real
    languages adopt other solutions), but it is easy to understand and
    formalize. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Lists}



 The typing features we have seen can be classified into \textit{base
    types} like \coqdoclibrary{Bool}, and \textit{type constructors} like \ensuremath{\rightarrow} and \ensuremath{\times} that
    build new types from old ones.  Another useful type constructor is
    \coqdoclibrary{List}.  For every type \coqdocdefinition{T}, the type \coqdoclibrary{List} \coqdocdefinition{T} describes
    finite-length lists whose elements are drawn from \coqdocdefinition{T}.


    In principle, we could encode lists using pairs, sums and
    \textit{recursive} types. But giving semantics to recursive types is
    non-trivial. Instead, we'll just discuss the special case of lists
    directly.


    Below we give the syntax, semantics, and typing rules for lists.
    Except for the fact that explicit type annotations are mandatory
    on \coqdocconstructor{nil} and cannot appear on \coqdocconstructor{cons}, these lists are essentially
    identical to those we built in Coq.  We use \coqdocvar{lcase} to destruct
    lists, to avoid dealing with questions like ``what is the \coqdocvar{head} of
    the empty list?'' 

 For example, here is a function that calculates the sum of
    the first two elements of a list of numbers:


      \symbol{92}x:List Nat.
      lcase x of nil -> 0
         | a::x' -> lcase x' of nil -> a
                       | b::x'' -> a+b


    Syntax:


       t ::=                Terms
           | nil T
           | cons t t
           | lcase t of nil -> t | x::x -> t
           | ...


       v ::=                Values
           | nil T             nil value
           | cons v v          cons value
           | ...


       T ::=                Types
           | List T            list of Ts
           | ...


 Reduction:


                                 t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                    (ST\_Cons1)
                       cons t1 t2 ==> cons t1' t2


                                 t2 ==> t2'
\par
\noindent\hrulefill\par
\noindent{}                    (ST\_Cons2)
                       cons v1 t2 ==> cons v1 t2'


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}             (ST\_Lcase1)
                (lcase t1 of nil -> t2 | xh::xt -> t3) ==>
                (lcase t1' of nil -> t2 | xh::xt -> t3)
\par
\noindent\hrulefill\par
\noindent{}          (ST\_LcaseNil)
               (lcase nil T of nil -> t2 | xh::xt -> t3)
                                ==> t2
\par
\noindent\hrulefill\par
\noindent{}      (ST\_LcaseCons)
            (lcase (cons vh vt) of nil -> t2 | xh::xt -> t3)
                          ==> \coqdocvar{xh}:=\coqdocvar{vh},\coqdocvar{xt}:=\coqdocvar{vt}t3


 Typing:
\par
\noindent\hrulefill\par
\noindent{}                       (T\_Nil)
                          Gamma |- nil T : List T


                Gamma |- t1 : T      Gamma |- t2 : List T
\par
\noindent\hrulefill\par
\noindent{}              (T\_Cons)
                       Gamma |- cons t1 t2: List T


                        Gamma |- t1 : List T1
                           Gamma |- t2 : T
                   Gamma , h:T1, t:List T1 |- t3 : T
\par
\noindent\hrulefill\par
\noindent{}           (T\_Lcase)
          Gamma |- (lcase t1 of nil -> t2 | h::t -> t3) : T
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{General Recursion}



 Another facility found in most programming languages (including
    Coq) is the ability to define recursive functions.  For example,
    we might like to be able to define the factorial function like
    this:


      fact = \symbol{92}x:Nat.
                if x=0 then 1 else x * (fact (pred x)))


   Note that the right-hand side of this binder mentions the variable
   being bound -- something that is not allowed by our formalization of
   \coqdockw{let} above.  


   Directly formalizing this ``recursive definition'' mechanism is possible, 
   but it requires a bit of extra effort: in particular, we'd have to 
   pass around an ``environment'' of recursive function definitions in 
   the definition of the \coqdocinductive{step} relation. 

 Here is another way of presenting recursive functions that is equally
    powerful (though not quite as convenient for the programmer) and 
    more straightforward to formalize: instead of writing recursive 
    definitions, we define a \textit{fixed-point operator} called \coqdockw{fix} 
    that performs the ``unfolding'' of the recursive definition in the 
    right-hand side as needed, during reduction.  


    For example, instead of 


      fact = \symbol{92}x:Nat.
                if x=0 then 1 else x * (fact (pred x)))


    we will write:


      fact =
          fix
            (\symbol{92}f:Nat->Nat.
               \symbol{92}x:Nat.
                  if x=0 then 1 else x * (f (pred x)))


    We can derive the latter from the former as follows:



\begin{itemize}
\item  In the right-hand side of the definition of \coqdocdefinition{fact}, replace 
        recursive references to \coqdocdefinition{fact} by a fresh variable \coqdocabbreviation{f}.



\item  Add an abstraction binding \coqdocabbreviation{f} at the front, with an 
        appropriate type annotation.  (Since we are using \coqdocabbreviation{f} in place 
        of \coqdocdefinition{fact}, which had type \coqdoclibrary{Nat}\ensuremath{\rightarrow}\coqdoclibrary{Nat}, we should require \coqdocabbreviation{f}
        to have the same type.)  The new abstraction has type 
        (\coqdoclibrary{Nat}\ensuremath{\rightarrow}\coqdoclibrary{Nat}) \ensuremath{\rightarrow} (\coqdoclibrary{Nat}\ensuremath{\rightarrow}\coqdoclibrary{Nat}).



\item  Apply \coqdockw{fix} to this abstraction.  This application has  
        type \coqdoclibrary{Nat}\ensuremath{\rightarrow}\coqdoclibrary{Nat}.



\item  Use all of this as the right-hand side of an ordinary 
        \coqdockw{let}-binding for \coqdocdefinition{fact}.  

\end{itemize}


 The intuition is that the higher-order function \coqdocabbreviation{f} passed
    to \coqdockw{fix} is a \textit{generator} for the \coqdocdefinition{fact} function: if \coqdocabbreviation{f} is
    applied to a function that ``approximates'' the desired behavior of
    \coqdocdefinition{fact} up to some number \coqdocabbreviation{n} (that is, a function that returns
    correct results on inputs less than or equal to \coqdocabbreviation{n} but we don't
    care what it does on inputs greater than \coqdocabbreviation{n}), then \coqdocabbreviation{f} returns a
    slightly better approximation to \coqdocdefinition{fact} -- a function that returns
    correct results for inputs up to \coqdocabbreviation{n}+1.  Applying \coqdockw{fix} to this
    generator returns its \textit{fixed point}, which is a function that
    gives the desired behavior for all inputs \coqdocabbreviation{n}.


    (The term ``fixed point'' is used here in exactly the same sense as
    in ordinary mathematics, where a fixed point of a function \coqdocabbreviation{f} is
    an input \coqdocabbreviation{x} such that \coqdocabbreviation{f}(\coqdocabbreviation{x}) = \coqdocabbreviation{x}.  Here, a fixed point of a
    function \coqdocvariable{F} of type (\coqdoclibrary{Nat}\ensuremath{\rightarrow}\coqdoclibrary{Nat})->(\coqdoclibrary{Nat}\ensuremath{\rightarrow}\coqdoclibrary{Nat}) is a function \coqdocabbreviation{f} of
    type \coqdoclibrary{Nat}\ensuremath{\rightarrow}\coqdoclibrary{Nat} such that \coqdocvariable{F} \coqdocabbreviation{f} behaves the same as \coqdocabbreviation{f}.) 

 Syntax:


       t ::=                Terms
           | fix t             fixed-point operator
           | ...


   Reduction:


                                t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                        (ST\_Fix1)
                            fix t1 ==> fix t1'
\par
\noindent\hrulefill\par
\noindent{}         (ST\_FixAbs)
               fix (\symbol{92}xf:T1.t2) ==> \coqdocvar{xf}:=\coqdockw{fix} (\symbol{92}\coqdocvar{xf}:\coqdocvar{T1.t2}) t2


   Typing:


                           Gamma |- t1 : T1->T1
\par
\noindent\hrulefill\par
\noindent{}                         (T\_Fix)
                           Gamma |- fix t1 : T1


 Let's see how \coqdocvar{ST\_FixAbs} works by reducing \coqdocdefinition{fact} 3 = \coqdockw{fix} \coqdocvariable{F} 3,
    where 


    F = (\symbol{92}f. \symbol{92}x. if x=0 then 1 else x * (f (pred x)))
>> 
    (type annotations are omitted for brevity).


    fix F 3


==> \coqdocvar{ST\_FixAbs} + \coqdocconstructor{ST\_App1}


    (\symbol{92}x. if x=0 then 1 else x * (fix F (pred x))) 3


==> \coqdocconstructor{ST\_AppAbs}


    if 3=0 then 1 else 3 * (fix F (pred 3))


==> \coqdocconstructor{ST\_If0\_Nonzero}


    3 * (fix F (pred 3))


==> \coqdocvar{ST\_FixAbs} + \coqdocconstructor{ST\_Mult2}


    3 * ((\symbol{92}x. if x=0 then 1 else x * (fix F (pred x))) (pred 3))


==> \coqdocconstructor{ST\_PredNat} + \coqdocconstructor{ST\_Mult2} + \coqdocconstructor{ST\_App2}


    3 * ((\symbol{92}x. if x=0 then 1 else x * (fix F (pred x))) 2)


==> \coqdocconstructor{ST\_AppAbs} + \coqdocconstructor{ST\_Mult2}


    3 * (if 2=0 then 1 else 2 * (fix F (pred 2)))


==> \coqdocconstructor{ST\_If0\_Nonzero} + \coqdocconstructor{ST\_Mult2}


    3 * (2 * (fix F (pred 2)))


==> \coqdocvar{ST\_FixAbs} + 2 \coqdocabbreviation{x} \coqdocconstructor{ST\_Mult2}


    3 * (2 * ((\symbol{92}x. if x=0 then 1 else x * (fix F (pred x))) (pred 2)))


==> \coqdocconstructor{ST\_PredNat} + 2 \coqdocabbreviation{x} \coqdocconstructor{ST\_Mult2} + \coqdocconstructor{ST\_App2}


    3 * (2 * ((\symbol{92}x. if x=0 then 1 else x * (fix F (pred x))) 1))


==> \coqdocconstructor{ST\_AppAbs} + 2 \coqdocabbreviation{x} \coqdocconstructor{ST\_Mult2}


    3 * (2 * (if 1=0 then 1 else 1 * (fix F (pred 1))))


==> \coqdocconstructor{ST\_If0\_Nonzero} + 2 \coqdocabbreviation{x} \coqdocconstructor{ST\_Mult2}


    3 * (2 * (1 * (fix F (pred 1))))


==> \coqdocvar{ST\_FixAbs} + 3 \coqdocabbreviation{x} \coqdocconstructor{ST\_Mult2}


    3 * (2 * (1 * ((\symbol{92}x. if x=0 then 1 else x * (fix F (pred x))) (pred 1))))


==> \coqdocconstructor{ST\_PredNat} + 3 \coqdocabbreviation{x} \coqdocconstructor{ST\_Mult2} + \coqdocconstructor{ST\_App2}


    3 * (2 * (1 * ((\symbol{92}x. if x=0 then 1 else x * (fix F (pred x))) 0)))


==> \coqdocconstructor{ST\_AppAbs} + 3 \coqdocabbreviation{x} \coqdocconstructor{ST\_Mult2}


    3 * (2 * (1 * (if 0=0 then 1 else 0 * (fix F (pred 0)))))


==> \coqdocconstructor{ST\_If0Zero} + 3 \coqdocabbreviation{x} \coqdocconstructor{ST\_Mult2}


    3 * (2 * (1 * 1))


==> \coqdocconstructor{ST\_MultNats} + 2 \coqdocabbreviation{x} \coqdocconstructor{ST\_Mult2}


    3 * (2 * 1)


==> \coqdocconstructor{ST\_MultNats} + \coqdocconstructor{ST\_Mult2}


    3 * 2


==> \coqdocconstructor{ST\_MultNats}


    6


 One important point to note is that, unlike \coqdockw{Fixpoint}
    definitions in Coq, there is nothing to prevent functions defined
    using \coqdockw{fix} from diverging. 

\paragraph{Exercise: 1 star, optional (halve\_fix)}

 Translate this informal recursive definition into one using \coqdockw{fix}:


      halve =
        \symbol{92}x:Nat.
           if x=0 then 0
           else if (pred x)=0 then 0
           else 1 + (halve (pred (pred x))))


\ensuremath{\Box}


\paragraph{Exercise: 1 star, optional (fact\_steps)}

 Write down the sequence of steps that the term \coqdocdefinition{fact} 1 goes
    through to reduce to a normal form (assuming the usual reduction
    rules for arithmetic operations).


    \ensuremath{\Box}


 The ability to form the fixed point of a function of type \coqdocdefinition{T}\ensuremath{\rightarrow}\coqdocdefinition{T}
    for any \coqdocdefinition{T} has some surprising consequences.  In particular, it
    implies that \textit{every} type is inhabited by some term.  To see this,
    observe that, for every type \coqdocdefinition{T}, we can define the term


    fix (\symbol{92}x:T.x)


    By \coqdocvar{T\_Fix}  and \coqdocconstructor{T\_Abs}, this term has type \coqdocdefinition{T}.  By \coqdocvar{ST\_FixAbs}
    it reduces to itself, over and over again.  Thus it is a
    \textit{diverging element} of \coqdocdefinition{T}.


    More usefully, here's an example using \coqdockw{fix} to define a
    two-argument recursive function:


    equal =
      fix
        (\symbol{92}eq:Nat->Nat->Bool.
           \symbol{92}m:Nat. \symbol{92}n:Nat.
             if m=0 then iszero n
             else if n=0 then false
             else eq (pred m) (pred n))


    And finally, here is an example where \coqdockw{fix} is used to define a
    \textit{pair} of recursive functions (illustrating the fact that the type
    \coqdocvariable{T1} in the rule \coqdocvar{T\_Fix} need not be a function type):


      evenodd =
        fix
          (\symbol{92}eo: (Nat->Bool * Nat->Bool).
             let e = \symbol{92}n:Nat. if n=0 then true  else eo.snd (pred n) in
             let o = \symbol{92}n:Nat. if n=0 then false else eo.fst (pred n) in
             (e,o))


      even = evenodd.fst
      odd  = evenodd.snd
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Records}



 As a final example of a basic extension of the STLC, let's look
    briefly at how to define \textit{records} and their types.  Intuitively,
    records can be obtained from pairs by two straightforward
    generalizations: they are n-ary (rather than just binary) and
    their fields are accessed by \textit{label} (rather than position). 

 Syntax:


       t ::=                          Terms
           | \{i1=t1, ..., in=tn\}         record
           | t.i                         projection
           | ...


       v ::=                          Values
           | \{i1=v1, ..., in=vn\}         record value
           | ...


       T ::=                          Types
           | \{i1:T1, ..., in:Tn\}         record type
           | ...


   The generalization from products should be pretty obvious.  But 
   it's worth noticing the ways in which what we've actually written is
   even \textit{more} informal than the informal syntax we've used in previous 
   sections and chapters: we've used ``...'' in several places to mean ``any
   number of these,'' and we've omitted explicit mention of the usual
   side condition that the labels of a record should not contain any
   repetitions. 



   Reduction:


                              ti ==> ti'
\par
\noindent\hrulefill\par
\noindent{}                  (ST\_Rcd)
                     \{i1=v1, ..., im=vm, in=ti, ...\}
                 ==> \{i1=v1, ..., im=vm, in=ti', ...\}


                              t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                           (ST\_Proj1)
                            t1.i ==> t1'.i
\par
\noindent\hrulefill\par
\noindent{}                    (ST\_ProjRcd)
                      \{..., i=vi, ...\}.i ==> vi


   Again, these rules are a bit informal.  For example, the first rule
   is intended to be read ``if \coqdocvariable{ti} is the leftmost field that is not a
   value and if \coqdocvariable{ti} steps to \coqdocvar{ti'}, then the whole record steps...''
   In the last rule, the intention is that there should only be one
   field called i, and that all the other fields must contain values. 



   The typing rules are also simple:


            Gamma |- t1 : T1     ...     Gamma |- tn : Tn
\par
\noindent\hrulefill\par
\noindent{}            (T\_Rcd)
          Gamma |- \{i1=t1, ..., in=tn\} : \{i1:T1, ..., in:Tn\}


                    Gamma |- t : \{..., i:Ti, ...\}
\par
\noindent\hrulefill\par
\noindent{}                      (T\_Proj)
                          Gamma |- t.i : Ti


 There are several ways to approach formalizing the above
    definitions.



\begin{itemize}
\item  We can directly formalize the syntactic forms and inference
        rules, staying as close as possible to the form we've given
        them above.  This is conceptually straightforward, and it's
        probably what we'd want to do if we were building a real
        compiler (in particular, it will allow us to print error
        messages in the form that programmers will find easy to
        understand).  But the formal versions of the rules will not be
        very pretty or easy to work with, because all the ...s above
        will have to be replaced with explicit quantifications or
        comprehensions.  For this reason, records are not included in
        the extended exercise at the end of this chapter.  (It is
        still useful to discuss them informally here because they will
        help motivate the addition of subtyping to the type system
        when we get to the \coqdoclibrary{Sub} chapter.)



\item  Alternatively, we could look for a smoother way of presenting
        records -- for example, a binary presentation with one
        constructor for the empty record and another constructor for
        adding a single field to an existing record, instead of a
        single monolithic constructor that builds a whole record at
        once.  This is the right way to go if we are primarily
        interested in studying the metatheory of the calculi with
        records, since it leads to clean and elegant definitions and
        proofs.  Chapter \coqdoclibrary{Records} shows how this can be done.



\item  Finally, if we like, we can avoid formalizing records
        altogether, by stipulating that record notations are just
        informal shorthands for more complex expressions involving
        pairs and product types.  We sketch this approach in the next
        section. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Encoding Records (Optional)}



 Let's see how records can be encoded using just pairs and \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}.  


    First, observe that we can encode arbitrary-size \textit{tuples} using
    nested pairs and the \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}} value.  To avoid overloading the pair
    notation (\coqdocvariable{t1},\coqdocvariable{t2}), we'll use curly braces without labels to write
    down tuples, so \{\} is the empty tuple, \{5\} is a singleton
    tuple, \{5,6\} is a 2-tuple (morally the same as a pair),
    \{5,6,7\} is a triple, etc.


      \{\}                 ---->  unit
      \{t1, t2, ..., tn\}  ---->  (t1, trest)
                                where \{t2, ..., tn\} ----> trest


    Similarly, we can encode tuple types using nested product types:


      \{\}                 ---->  Unit
      \{T1, T2, ..., Tn\}  ---->  T1 * TRest
                                where \{T2, ..., Tn\} ----> TRest


    The operation of projecting a field from a tuple can be encoded
    using a sequence of second projections followed by a first projection:


      t.0        ---->  t.fst
      t.(n+1)    ---->  (t.snd).n


    Next, suppose that there is some total ordering on record labels,
    so that we can associate each label with a unique natural number.
    This number is called the \textit{position} of the label.  For example,
    we might assign positions like this:


      LABEL   POSITION
      a       0
      b       1
      c       2
      ...     ...
      bar     1395
      ...     ...
      foo     4460
      ...     ...


    We use these positions to encode record values as tuples (i.e., as
    nested pairs) by sorting the fields according to their positions.
    For example:


      \{a=5, b=6\}      ---->   \{5,6\}
      \{a=5, c=7\}      ---->   \{5,unit,7\}
      \{c=7, a=5\}      ---->   \{5,unit,7\}
      \{c=5, b=3\}      ---->   \{unit,3,5\}
      \{f=8,c=5,a=7\}   ---->   \{7,unit,5,unit,unit,8\}
      \{f=8,c=5\}       ---->   \{unit,unit,5,unit,unit,8\}


    Note that each field appears in the position associated with its
    label, that the size of the tuple is determined by the label with
    the highest position, and that we fill in unused positions with
    \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}.


    We do exactly the same thing with record types:


      \{a:Nat, b:Nat\}      ---->   \{Nat,Nat\}
      \{c:Nat, a:Nat\}      ---->   \{Nat,Unit,Nat\}
      \{f:Nat,c:Nat\}       ---->   \{Unit,Unit,Nat,Unit,Unit,Nat\}


    Finally, record projection is encoded as a tuple projection from
    the appropriate position:


      t.l  ---->  t.(position of l)


    It is not hard to check that all the typing rules for the original
    ``direct'' presentation of records are validated by this
    encoding.  (The reduction rules are ``almost validated'' -- not
    quite, because the encoding reorders fields.) 

 Of course, this encoding will not be very efficient if we
    happen to use a record with label \coqdoclemma{foo}!  But things are not
    actually as bad as they might seem: for example, if we assume that
    our compiler can see the whole program at the same time, we can
    \textit{choose} the numbering of labels so that we assign small positions
    to the most frequently used labels.  Indeed, there are industrial
    compilers that essentially do this! \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Variants (Optional)}



 Just as products can be generalized to records, sums can be
    generalized to n-ary labeled types called \textit{variants}.  Instead of
    \coqdocvariable{T1}+\coqdocvariable{T2}, we can write something like <\coqdoclemma{l1}:\coqdocvariable{T1},\coqdoclemma{l2}:\coqdocvariable{T2},...\coqdocvar{ln}:\coqdocvar{Tn}>
    where \coqdoclemma{l1},\coqdoclemma{l2},... are field labels which are used both to build
    instances and as case arm labels.


    These n-ary variants give us almost enough mechanism to build
    arbitrary inductive data types like lists and trees from
    scratch -- the only thing missing is a way to allow \textit{recursion} in
    type definitions.  We won't cover this here, but detailed
    treatments can be found in many textbooks -- e.g., Types and
    Programming Languages \coqdocvar{Pierce} 2002. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Exercise: Formalizing the Extensions}



\paragraph{Exercise: 5 stars (STLC\_extensions)}

 In this exercise, you will formalize some of the extensions
    described in this chapter.  We've provided the necessary additions
    to the syntax of terms and types, and we've included a few
    examples that you can test your definitions with to make sure they
    are working as expected.  You'll fill in the rest of the
    definitions and extend all the proofs accordingly.


    To get you started, we've provided implementations for:

\begin{itemize}
\item  numbers

\item  sums

\item  lists

\item  unit

\end{itemize}


    You need to complete the implementations for:

\begin{itemize}
\item  pairs 

\item  let (which involves binding)

\item  \coqdockw{fix}

\end{itemize}


    A good strategy is to work on the extensions one at a time, in two
    passes, rather than trying to work through the file from start to
    finish in a single pass.  For each definition or proof, begin by
    reading carefully through the parts that are provided for you,
    referring to the text in the \coqdoclibrary{Stlc} chapter for high-level
    intuitions and the embedded comments for detailed mechanics. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{STLCExtended}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Syntax}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TNat}   : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TUnit}  : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TProd}  : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TSum}   : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TList}  : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tnat} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsucc} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpred} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tmult} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif0}  : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpair} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfst} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsnd} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tunit} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tlet} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{5.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tinl} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tinr} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tcase} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{5.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tnil} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tcons} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tlcase} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{5.50em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfix}  : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that, for brevity, we've omitted booleans and instead
    provided a single \coqdocvar{if0} form combining a zero test and a
    conditional.  That is, instead of writing


       if x = 0 then ... else ...


    we'll write this:


       if0 x then ... else ...
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Substitution}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{subst} (\coqdocvar{x}:\coqdocvar{id}) (\coqdocvar{s}:\coqdocvar{tm}) (\coqdocvar{t}:\coqdocvar{tm}) : \coqdocvar{tm} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} \coqdocvar{y} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{s} \coqdockw{else} \coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T} \coqdocvar{t1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T} (\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{t1} \coqdockw{else} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tapp} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tnat} \coqdocvar{n} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tnat} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsucc} \coqdocvar{t1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tsucc} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpred} \coqdocvar{t1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tpred} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tmult} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif0} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tunit} \ensuremath{\Rightarrow} \coqdocvar{tunit}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tinl} \coqdocvar{T} \coqdocvar{t1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tinl} \coqdocvar{T} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tinr} \coqdocvar{T} \coqdocvar{t1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tinr} \coqdocvar{T} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tcase} \coqdocvar{t0} \coqdocvar{y1} \coqdocvar{t1} \coqdocvar{y2} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tcase} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t0})\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{y1} (\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y1} \coqdockw{then} \coqdocvar{t1} \coqdockw{else} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}))\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{y2} (\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y2} \coqdockw{then} \coqdocvar{t2} \coqdockw{else} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tnil} \coqdocvar{T} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tnil} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tcons} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tcons} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tlcase} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{t3} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tlcase} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2}) \coqdocvar{y1} \coqdocvar{y2}\coqdoceol
\coqdocindent{4.00em}
(\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y1} \coqdockw{then}\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{t3}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{else} \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y2} \coqdockw{then} \coqdocvar{t3}\coqdoceol
\coqdocindent{7.00em}
\coqdockw{else} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t3}))\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{t}  \coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'[' x ':=' s ']' t" := (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t}) (\coqdoctac{at} \coqdockw{level} 20).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Reduction}



 Next we define the values of our language. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_nat} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tnat} \coqdocvar{n1})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_pair} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{v2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tpair} \coqdocvar{v1} \coqdocvar{v2})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_unit} : \coqdocvar{value} \coqdocvar{tunit}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_inl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tinl} \coqdocvar{T} \coqdocvar{v})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_inr} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tinr} \coqdocvar{T} \coqdocvar{v})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_lnil} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T}, \coqdocvar{value} (\coqdocvar{tnil} \coqdocvar{T})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_lcons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{vl},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{vl} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tcons} \coqdocvar{v1} \coqdocvar{vl})\coqdoceol
\coqdocindent{1.00em}
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{value}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "t1 '==>' t2" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_AppAbs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12} \coqdocvar{v2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12}) \coqdocvar{v2}) ==> [\coqdocvar{x}:=\coqdocvar{v2}]\coqdocvar{t12}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) ==> (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2}) ==> (\coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2'})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Succ1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tsucc} \coqdocvar{t1}) ==> (\coqdocvar{tsucc} \coqdocvar{t1'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_SuccNat} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1},\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tsucc} (\coqdocvar{tnat} \coqdocvar{n1})) ==> (\coqdocvar{tnat} (\coqdocvar{S} \coqdocvar{n1}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Pred} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tpred} \coqdocvar{t1}) ==> (\coqdocvar{tpred} \coqdocvar{t1'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_PredNat} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1},\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tpred} (\coqdocvar{tnat} \coqdocvar{n1})) ==> (\coqdocvar{tnat} (\coqdocvar{pred} \coqdocvar{n1}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Mult1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2}) ==> (\coqdocvar{tmult} \coqdocvar{t1'} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Mult2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tmult} \coqdocvar{v1} \coqdocvar{t2}) ==> (\coqdocvar{tmult} \coqdocvar{v1} \coqdocvar{t2'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_MultNats} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tmult} (\coqdocvar{tnat} \coqdocvar{n1}) (\coqdocvar{tnat} \coqdocvar{n2})) ==> (\coqdocvar{tnat} (\coqdocvar{mult} \coqdocvar{n1} \coqdocvar{n2}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If01} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3}) ==> (\coqdocvar{tif0} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If0Zero} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tif0} (\coqdocvar{tnat} 0) \coqdocvar{t2} \coqdocvar{t3}) ==> \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If0Nonzero} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tif0} (\coqdocvar{tnat} (\coqdocvar{S} \coqdocvar{n})) \coqdocvar{t2} \coqdocvar{t3}) ==> \coqdocvar{t3}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Inl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{T},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tinl} \coqdocvar{T} \coqdocvar{t1}) ==> (\coqdocvar{tinl} \coqdocvar{T} \coqdocvar{t1'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Inr} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{T},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tinr} \coqdocvar{T} \coqdocvar{t1}) ==> (\coqdocvar{tinr} \coqdocvar{T} \coqdocvar{t1'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Case} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t0} \coqdocvar{t0'} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t0} ==> \coqdocvar{t0'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tcase} \coqdocvar{t0} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2}) ==> (\coqdocvar{tcase} \coqdocvar{t0'} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_CaseInl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v0} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2} \coqdocvar{T},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{v0} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tcase} (\coqdocvar{tinl} \coqdocvar{T} \coqdocvar{v0}) \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2}) ==> [\coqdocvar{x1}:=\coqdocvar{v0}]\coqdocvar{t1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_CaseInr} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v0} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2} \coqdocvar{T},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{v0} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tcase} (\coqdocvar{tinr} \coqdocvar{T} \coqdocvar{v0}) \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2}) ==> [\coqdocvar{x2}:=\coqdocvar{v0}]\coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Cons1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tcons} \coqdocvar{t1} \coqdocvar{t2}) ==> (\coqdocvar{tcons} \coqdocvar{t1'} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Cons2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tcons} \coqdocvar{v1} \coqdocvar{t2}) ==> (\coqdocvar{tcons} \coqdocvar{v1} \coqdocvar{t2'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Lcase1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tlcase} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{t3}) ==> (\coqdocvar{tlcase} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_LcaseNil} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} \coqdocvar{t2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tlcase} (\coqdocvar{tnil} \coqdocvar{T}) \coqdocvar{t2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{t3}) ==> \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_LcaseCons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{vl} \coqdocvar{t2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{value} \coqdocvar{v1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{value} \coqdocvar{vl}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tlcase} (\coqdocvar{tcons} \coqdocvar{v1} \coqdocvar{vl}) \coqdocvar{t2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{t3}) ==> (\coqdoctac{subst} \coqdocvar{x2} \coqdocvar{vl} (\coqdoctac{subst} \coqdocvar{x1} \coqdocvar{v1} \coqdocvar{t3}))\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "t1 '==>' t2" := (\coqdocvar{step} \coqdocvar{t1} \coqdocvar{t2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{multistep} := (\coqdocvar{multi} \coqdocvar{step}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "t1 '==>*' t2" := (\coqdocvar{multistep} \coqdocvar{t1} \coqdocvar{t2}) (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{step}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Typing}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdockw{context} := \coqdocvar{partial\_map} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next we define the typing rules.  These are nearly direct
    transcriptions of the inference rules shown above. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "Gamma '|-' t '\symbol{92}in' T" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{has\_type} : \coqdockw{context} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tvar} \coqdocvar{x}) \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{T12} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11}) \ensuremath{\vdash} \coqdocvar{t12} \symbol{92}\coqdoctac{in} \coqdocvar{T12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12}) \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_App} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} \coqdocvar{T2}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Nat} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{n1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tnat} \coqdocvar{n1}) \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Succ} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tsucc} \coqdocvar{t1}) \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Pred} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tpred} \coqdocvar{t1}) \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Mult} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_If0} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \coqdocvar{T1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t3} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3}) \symbol{92}\coqdoctac{in} \coqdocvar{T1}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Unit} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tunit} \symbol{92}\coqdoctac{in} \coqdocvar{TUnit}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Inl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tinl} \coqdocvar{T2} \coqdocvar{t1}) \symbol{92}\coqdoctac{in} (\coqdocvar{TSum} \coqdocvar{T1} \coqdocvar{T2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Inr} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t2} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tinr} \coqdocvar{T1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} (\coqdocvar{TSum} \coqdocvar{T1} \coqdocvar{T2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Case} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t0} \coqdocvar{x1} \coqdocvar{T1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{T2} \coqdocvar{t2} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t0} \symbol{92}\coqdoctac{in} (\coqdocvar{TSum} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x1} \coqdocvar{T1}) \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x2} \coqdocvar{T2}) \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tcase} \coqdocvar{t0} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Nil} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tnil} \coqdocvar{T}) \symbol{92}\coqdoctac{in} (\coqdocvar{TList} \coqdocvar{T})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Cons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{T1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} (\coqdocvar{TList} \coqdocvar{T1}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tcons} \coqdocvar{t1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} (\coqdocvar{TList} \coqdocvar{T1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Lcase} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T1} \coqdocvar{t2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{t3} \coqdocvar{T2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} (\coqdocvar{TList} \coqdocvar{T1}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{update} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x2} (\coqdocvar{TList} \coqdocvar{T1})) \coqdocvar{x1} \coqdocvar{T1}) \ensuremath{\vdash} \coqdocvar{t3} \symbol{92}\coqdoctac{in} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tlcase} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{t3}) \symbol{92}\coqdoctac{in} \coqdocvar{T2}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "Gamma '|-' t '\symbol{92}in' T" := (\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{has\_type}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Examples}



 This section presents formalized versions of the examples from
    above (plus several more).  The ones at the beginning focus on
    specific features; you can use these to make sure your definition
    of a given feature is reasonable before moving on to extending the
    proofs later in the file with the cases relating to this feature.
    The later examples require all the features together, so you'll
    need to come back to these when you've got all the definitions
    filled in. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Examples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Preliminaries}



 First, let's define a few variable names: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{x} := (\coqdocvar{Id} "x").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{y} := (\coqdocvar{Id} "y").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{a} := (\coqdocvar{Id} "a").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{f} := (\coqdocvar{Id} "f").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{g} := (\coqdocvar{Id} "g").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{l} := (\coqdocvar{Id} "l").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{k} := (\coqdocvar{Id} "k").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{i1} := (\coqdocvar{Id} "i1").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{i2} := (\coqdocvar{Id} "i2").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{processSum} := (\coqdocvar{Id} "processSum").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{n} := (\coqdocvar{Id} "n").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{eq} := (\coqdocvar{Id} "eq").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{m} := (\coqdocvar{Id} "m").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{evenodd} := (\coqdocvar{Id} "evenodd").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{even} := (\coqdocvar{Id} "even").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{odd} := (\coqdocvar{Id} "odd").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{eo} := (\coqdocvar{Id} "eo").\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next, a bit of Coq hackery to automate searching for typing
    derivations.  You don't need to understand this bit in detail --
    just have a look over it so that you'll know what to look for if
    you ever find yourself needing to make custom extensions to
    \coqdoctac{auto}.


    The following \coqdockw{Hint} declarations say that, whenever \coqdoctac{auto}
    arrives at a goal of the form (\coqdocvariable{Gamma} \ensuremath{\vdash} (\coqdocconstructor{tapp} \coqdocvariable{e1} \coqdocvariable{e1}) \symbol{92}\coqdoctac{in} \coqdocdefinition{T}), it
    should consider \coqdoctac{eapply} \coqdocconstructor{T\_App}, leaving an existential variable
    for the middle type T1, and similar for \coqdocvar{lcase}. That variable
    will then be filled in during the search for type derivations for
    \coqdocvariable{e1} and \coqdocvariable{e2}.  We also include a hint to ``try harder'' when
    solving equality goals; this is useful to automate uses of
    \coqdocconstructor{T\_Var} (which includes an equality as a precondition). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Extern} 2 (\coqdocvar{has\_type} \coqdocvar{\_} (\coqdocvar{tapp} \coqdocvar{\_} \coqdocvar{\_}) \coqdocvar{\_}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{T\_App}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Extern} 2 (\coqdocvar{has\_type} \coqdocvar{\_} (\coqdocvar{tlcase} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}) \coqdocvar{\_}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{T\_Lcase}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Extern} 2 (\coqdocvar{\_} = \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{compute}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Numbers}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Numtest}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{test} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tif0}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tpred}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tsucc}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tpred}\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{tmult}\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tnat} 2)\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tnat} 0)))))\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tnat} 5)\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tnat} 6).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Remove the comment braces once you've implemented enough of the
    definitions that you think this should work. \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Numtest}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Products}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Prodtest}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{test} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tsnd}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tfst}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tpair}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tpair}\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{tnat} 5)\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{tnat} 6))\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tnat} 7))).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Prodtest}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{\texorpdfstring{\protect\coqdockw{let}}{let}}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{LetTest}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{test} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tlet}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{x}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tpred} (\coqdocvar{tnat} 6))\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tsucc} (\coqdocvar{tvar} \coqdocvar{x})).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{LetTest}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Sums}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Sumtest1}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{test} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tcase} (\coqdocvar{tinl} \coqdocvar{TNat} (\coqdocvar{tnat} 5))\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{x} (\coqdocvar{tvar} \coqdocvar{x})\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{y} (\coqdocvar{tvar} \coqdocvar{y}).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Sumtest1}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Sumtest2}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{test} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tlet}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{processSum}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tabs} \coqdocvar{x} (\coqdocvar{TSum} \coqdocvar{TNat} \coqdocvar{TNat})\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tcase} (\coqdocvar{tvar} \coqdocvar{x})\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{n} (\coqdocvar{tvar} \coqdocvar{n})\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{n} (\coqdocvar{tif0} (\coqdocvar{tvar} \coqdocvar{n}) (\coqdocvar{tnat} 1) (\coqdocvar{tnat} 0))))\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tpair}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{processSum}) (\coqdocvar{tinl} \coqdocvar{TNat} (\coqdocvar{tnat} 5)))\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{processSum}) (\coqdocvar{tinr} \coqdocvar{TNat} (\coqdocvar{tnat} 5)))).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Sumtest2}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Lists}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{ListTest}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{test} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tlet} \coqdocvar{l}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tcons} (\coqdocvar{tnat} 5) (\coqdocvar{tcons} (\coqdocvar{tnat} 6) (\coqdocvar{tnil} \coqdocvar{TNat})))\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tlcase} (\coqdocvar{tvar} \coqdocvar{l})\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tnat} 0)\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{x} \coqdocvar{y} (\coqdocvar{tmult} (\coqdocvar{tvar} \coqdocvar{x}) (\coqdocvar{tvar} \coqdocvar{x}))).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{ListTest}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{\texorpdfstring{\protect\coqdockw{fix}}{fix}}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{FixTest1}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{fact} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tfix}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tabs} \coqdocvar{f} (\coqdocvar{TArrow} \coqdocvar{TNat} \coqdocvar{TNat})\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tabs} \coqdocvar{a} \coqdocvar{TNat}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tif0}\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{tvar} \coqdocvar{a})\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{tnat} 1)\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{tmult}\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{tvar} \coqdocvar{a})\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{f}) (\coqdocvar{tpred} (\coqdocvar{tvar} \coqdocvar{a}))))))).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
(Warning: you may be able to typecheck \coqdocdefinition{fact} but still have some
    rules wrong!) \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{FixTest1}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{FixTest2}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{map} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tabs} \coqdocvar{g} (\coqdocvar{TArrow} \coqdocvar{TNat} \coqdocvar{TNat})\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tfix}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tabs} \coqdocvar{f} (\coqdocvar{TArrow} (\coqdocvar{TList} \coqdocvar{TNat}) (\coqdocvar{TList} \coqdocvar{TNat}))\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tabs} \coqdocvar{l} (\coqdocvar{TList} \coqdocvar{TNat})\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{tlcase} (\coqdocvar{tvar} \coqdocvar{l})\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tnil} \coqdocvar{TNat})\coqdoceol
\coqdocindent{6.00em}
\coqdocvar{a} \coqdocvar{l} (\coqdocvar{tcons} (\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{g}) (\coqdocvar{tvar} \coqdocvar{a}))\coqdoceol
\coqdocindent{12.50em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{f}) (\coqdocvar{tvar} \coqdocvar{l}))))))).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{FixTest2}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{FixTest3}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{equal} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tfix}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tabs} \coqdocvar{eq} (\coqdocvar{TArrow} \coqdocvar{TNat} (\coqdocvar{TArrow} \coqdocvar{TNat} \coqdocvar{TNat}))\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tabs} \coqdocvar{m} \coqdocvar{TNat}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tabs} \coqdocvar{n} \coqdocvar{TNat}\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{tif0} (\coqdocvar{tvar} \coqdocvar{m})\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tif0} (\coqdocvar{tvar} \coqdocvar{n}) (\coqdocvar{tnat} 1) (\coqdocvar{tnat} 0))\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tif0} (\coqdocvar{tvar} \coqdocvar{n})\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{tnat} 0)\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{tapp} (\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{eq})\coqdoceol
\coqdocindent{15.00em}
(\coqdocvar{tpred} (\coqdocvar{tvar} \coqdocvar{m})))\coqdoceol
\coqdocindent{11.00em}
(\coqdocvar{tpred} (\coqdocvar{tvar} \coqdocvar{n})))))))).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{FixTest3}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{FixTest4}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{eotest} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tlet} \coqdocvar{evenodd}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tfix}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tabs} \coqdocvar{eo} (\coqdocvar{TProd} (\coqdocvar{TArrow} \coqdocvar{TNat} \coqdocvar{TNat}) (\coqdocvar{TArrow} \coqdocvar{TNat} \coqdocvar{TNat}))\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tpair}\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{tabs} \coqdocvar{n} \coqdocvar{TNat}\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tif0} (\coqdocvar{tvar} \coqdocvar{n})\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{tnat} 1)\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{tapp} (\coqdocvar{tsnd} (\coqdocvar{tvar} \coqdocvar{eo})) (\coqdocvar{tpred} (\coqdocvar{tvar} \coqdocvar{n})))))\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{tabs} \coqdocvar{n} \coqdocvar{TNat}\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tif0} (\coqdocvar{tvar} \coqdocvar{n})\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{tnat} 0)\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{tapp} (\coqdocvar{tfst} (\coqdocvar{tvar} \coqdocvar{eo})) (\coqdocvar{tpred} (\coqdocvar{tvar} \coqdocvar{n}))))))))\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{tlet} \coqdocvar{even} (\coqdocvar{tfst} (\coqdocvar{tvar} \coqdocvar{evenodd}))\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{tlet} \coqdocvar{odd} (\coqdocvar{tsnd} (\coqdocvar{tvar} \coqdocvar{evenodd}))\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{tpair}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{even}) (\coqdocvar{tnat} 3))\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{even}) (\coqdocvar{tnat} 4))))).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{FixTest4}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Examples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Properties of Typing}



 The proofs of progress and preservation for this enriched system
    are essentially the same (though of course longer) as for the pure
    STLC. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Progress}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Ht}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} \coqdocvar{empty} \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{HeqGamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Ht}; \coqdoctac{intros} \coqdocvar{HeqGamma}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{left}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{t2} \coqdocvar{t12})...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t2'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2'})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{left}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tnat} (\coqdocvar{S} \coqdocvar{n1}))...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tsucc} \coqdocvar{t1'})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tnat} (\coqdocvar{pred} \coqdocvar{n1}))...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tpred} \coqdocvar{t1'})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tnat} (\coqdocvar{mult} \coqdocvar{n1} \coqdocvar{n0}))...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t2'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2'})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tmult} \coqdocvar{t1'} \coqdocvar{t2})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{n1} \coqdockw{as} [|\coqdocvar{n1'}].\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{t2}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{t3}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{H0}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tif0} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{left}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{right}. \coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}]...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{right}. \coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}]...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} ([\coqdocvar{x1}:=\coqdocvar{v}]\coqdocvar{t1})...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} ([\coqdocvar{x2}:=\coqdocvar{v}]\coqdocvar{t2})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t0'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tcase} \coqdocvar{t0'} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{left}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{right}. \coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t2'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tcons} \coqdocvar{t1} \coqdocvar{t2'})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{right}. \coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tcons} \coqdocvar{t1'} \coqdocvar{t2})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{t2}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} ([\coqdocvar{x2}:=\coqdocvar{vl}]([\coqdocvar{x1}:=\coqdocvar{v1}]\coqdocvar{t3}))...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tlcase} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{t3})...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Context Invariance}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{appears\_free\_in} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tvar} \coqdocvar{x})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{y} \ensuremath{\not=} \coqdocvar{x}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_succ} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tsucc} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_pred} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tpred} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_mult1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_mult2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if01} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if02} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if03} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t3} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_inl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tinl} \coqdocvar{T} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_inr} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tinr} \coqdocvar{T} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_case0} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t0} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t0} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tcase} \coqdocvar{t0} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_case1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t0} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{x1} \ensuremath{\not=} \coqdocvar{x} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tcase} \coqdocvar{t0} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_case2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t0} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{x2} \ensuremath{\not=} \coqdocvar{x} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tcase} \coqdocvar{t0} \coqdocvar{x1} \coqdocvar{t1} \coqdocvar{x2} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_cons1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tcons} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_cons2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tcons} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_lcase1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{t3},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tlcase} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_lcase2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{t3},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tlcase} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_lcase3} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{t3},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{y1} \ensuremath{\not=} \coqdocvar{x} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{y2} \ensuremath{\not=} \coqdocvar{x} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t3} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tlcase} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{y1} \coqdocvar{y2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{appears\_free\_in}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{context\_invariance} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{Gamma'} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Gamma'} \coqdocvar{x})  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma'} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{Gamma'} \coqdocvar{Heqv}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}... \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Heqv}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}... \coqdoctac{apply} \coqdocvar{IHhas\_type}. \coqdoctac{intros} \coqdocvar{y} \coqdocvar{Hafi}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Mult}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_If0}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_Case}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{apply} \coqdocvar{IHhas\_type2}. \coqdoctac{intros} \coqdocvar{y} \coqdocvar{Hafi}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x1} \coqdocvar{y})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{apply} \coqdocvar{IHhas\_type3}. \coqdoctac{intros} \coqdocvar{y} \coqdocvar{Hafi}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x2} \coqdocvar{y})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Cons}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_Lcase}... \coqdoctac{apply} \coqdocvar{IHhas\_type3}. \coqdoctac{intros} \coqdocvar{y} \coqdocvar{Hafi}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x1} \coqdocvar{y})...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x2} \coqdocvar{y})...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{free\_in\_context} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}, \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma} \coqdocvar{Hafi} \coqdocvar{Htyp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp}; \coqdoctac{inversion} \coqdocvar{Hafi}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHtyp} \coqdockw{as} [\coqdocvar{T'} \coqdocvar{Hctx}]... \coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id} \coqdoctac{in} \coqdocvar{Hctx}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHtyp2} \coqdockw{as} [\coqdocvar{T'} \coqdocvar{Hctx}]... \coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id} \coqdoctac{in} \coqdocvar{Hctx}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHtyp3} \coqdockw{as} [\coqdocvar{T'} \coqdocvar{Hctx}]... \coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id} \coqdoctac{in} \coqdocvar{Hctx}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{clear} \coqdocvar{Htyp1} \coqdocvar{IHHtyp1} \coqdocvar{Htyp2} \coqdocvar{IHHtyp2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHtyp3} \coqdockw{as} [\coqdocvar{T'} \coqdocvar{Hctx}]... \coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id} \coqdoctac{in} \coqdocvar{Hctx}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id} \coqdoctac{in} \coqdocvar{Hctx}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Substitution}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{substitution\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
(\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{v} \symbol{92}\coqdoctac{in} \coqdocvar{U}   \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} ([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}) \symbol{92}\coqdoctac{in} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S} \coqdocvar{Htypt} \coqdocvar{Htypv}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{S}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{S} \coqdocvar{Gamma} \coqdocvar{Htypt}; \coqdoctac{simpl}; \coqdoctac{inversion} \coqdocvar{Htypt}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{H1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H1}; \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H1}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hcontra}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{free\_in\_context} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{S} \coqdocvar{empty} \coqdocvar{Hcontra})\coqdoceol
\coqdocindent{4.00em}
\coqdockw{as} [\coqdocvar{T'} \coqdocvar{HT'}]...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT'}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}. \coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{T11}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}) \coqdockw{as} [\coqdocvar{Hxy}\ensuremath{|}\coqdocvar{Hxy}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{y} \coqdocvar{x})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHt}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y} \coqdocvar{z}) \coqdockw{as} [\coqdocvar{Hyz}\ensuremath{|}\coqdocvar{Hyz}]...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{x1}. \coqdoctac{rename} \coqdocvar{i0} \coqdocvar{into} \coqdocvar{x2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_Case}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{x1}) \coqdockw{as} [\coqdocvar{Hxx1}\ensuremath{|}\coqdocvar{Hxx1}].\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{x1} \coqdocvar{z})...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} \coqdocvar{IHt2}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x1} \coqdocvar{z}) \coqdockw{as} [\coqdocvar{Hx1z}\ensuremath{|}\coqdocvar{Hx1z}]...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{x2}) \coqdockw{as} [\coqdocvar{Hxx2}\ensuremath{|}\coqdocvar{Hxx2}].\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{x2} \coqdocvar{z})...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} \coqdocvar{IHt3}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x2} \coqdocvar{z})...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y1}. \coqdoctac{rename} \coqdocvar{i0} \coqdocvar{into} \coqdocvar{y2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_Lcase}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y1}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y1} \coqdocvar{z})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y2}).\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y2} \coqdocvar{z})...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} \coqdocvar{IHt3}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y1} \coqdocvar{z})...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y2} \coqdocvar{z})...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Preservation}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t} ==> \coqdocvar{t'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{HT}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} \coqdocvar{empty} \coqdockw{as} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{HeqGamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{HT};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{t'} \coqdocvar{HeqGamma} \coqdocvar{HE}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{substitution\_preserves\_typing} \coqdockw{with} \coqdocvar{T1}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HT1}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{substitution\_preserves\_typing}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HT1}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{substitution\_preserves\_typing}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT1}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{substitution\_preserves\_typing} \coqdockw{with} (\coqdocvar{TList} \coqdocvar{T1})...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{substitution\_preserves\_typing} \coqdockw{with} \coqdocvar{T1}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{STLCExtended}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Sub}{Library }{Top.Sub}

\begin{coqdoccode}
\end{coqdoccode}
\section{Sub: Subtyping}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdockw{Types}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Concepts}



 We now turn to the study of \textit{subtyping}, a key feature
    needed to support the object-oriented programming style. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{A Motivating Example}



 Suppose we are writing a program involving two record types
    defined as follows:


      Person  = \{name:String, age:Nat\}
      Student = \{name:String, age:Nat, gpa:Nat\}


 In the simply typed lamdba-calculus with records, the term


      (\symbol{92}r:Person. (r.age)+1) \{name=``Pat'',age=21,gpa=1\}


   is not typable, since it applies a function that wants a one-field
   record to an argument that actually provides two fields, while the
   \coqdocconstructor{T\_App} rule demands that the domain type of the function being
   applied must match the type of the argument precisely.


   But this is silly: we're passing the function a \textit{better} argument
   than it needs!  The only thing the body of the function can
   possibly do with its record argument \coqdocdefinition{r} is project the field \coqdocvar{age}
   from it: nothing else is allowed by the type, and the presence or
   absence of an extra \coqdocvar{gpa} field makes no difference at all.  So,
   intuitively, it seems that this function should be applicable to
   any record value that has at least an \coqdocvar{age} field.


   More generally, a record with more fields is ``at least as good in
   any context'' as one with just a subset of these fields, in the
   sense that any value belonging to the longer record type can be
   used \textit{safely} in any context expecting the shorter record type.  If
   the context expects something with the shorter type but we actually
   give it something with the longer type, nothing bad will
   happen (formally, the program will not get stuck).


   The principle at work here is called \textit{subtyping}.  We say that ``\coqdocconstructor{S}
   is a subtype of \coqdocdefinition{T}'', written \coqdocconstructor{S} <: \coqdocdefinition{T}, if a value of type \coqdocconstructor{S} can
   safely be used in any context where a value of type \coqdocdefinition{T} is
   expected.  The idea of subtyping applies not only to records, but
   to all of the type constructors in the language -- functions,
   pairs, etc. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Subtyping and Object-Oriented Languages}



 Subtyping plays a fundamental role in many programming
    languages -- in particular, it is closely related to the notion of
    \textit{subclassing} in object-oriented languages.


    An \textit{object} in Java, C\#, etc. can be thought of as a record,
    some of whose fields are functions (``methods'') and some of whose
    fields are data values (``fields'' or ``instance variables'').
    Invoking a method \coqdocabbreviation{m} of an object \coqdocvariable{o} on some arguments \coqdocvariable{a1}..\coqdocvar{an}
    roughly consists of projecting out the \coqdocabbreviation{m} field of \coqdocvariable{o} and
    applying it to \coqdocvariable{a1}..\coqdocvar{an}.


    The type of an object is called a \textit{class} -- or, in some
    languages, an \textit{interface}.  It describes which methods and which
    data fields the object offers.  Classes and interfaces are related
    by the \textit{subclass} and \textit{subinterface} relations.  An object
    belonging to a subclass (or subinterface) is required to provide
    all the methods and fields of one belonging to a superclass (or
    superinterface), plus possibly some more.


    The fact that an object from a subclass can be used in place of
    one from a superclass provides a degree of flexibility that is is
    extremely handy for organizing complex libraries.  For example, a
    GUI toolkit like Java's Swing framework might define an abstract
    interface \coqdocvar{Component} that collects together the common fields and
    methods of all objects having a graphical representation that can
    be displayed on the screen and interact with the user, such as the
    buttons, checkboxes, and scrollbars of a typical GUI.  A method
    that relies only on this common interface can now be applied to
    any of these objects.


    Of course, real object-oriented languages include many other
    features besides these.  For example, fields can be updated.
    Fields and methods can be declared \coqdocvar{private}.  Classes can give
    \textit{initializers} that are used when constructing objects.  Code in
    subclasses can cooperate with code in superclasses via
    \textit{inheritance}.  Classes can have static methods and fields.  Etc.,
    etc.


    To keep things simple here, we won't deal with any of these
    issues -- in fact, we won't even talk any more about objects or
    classes.  (There is a lot of discussion in \coqdocvar{Pierce} 2002, if
    you are interested.)  Instead, we'll study the core concepts
    behind the subclass / subinterface relation in the simplified
    setting of the STLC. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{The Subsumption Rule}



 Our goal for this chapter is to add subtyping to the simply typed
    lambda-calculus (with some of the basic extensions from \coqdoclibrary{MoreStlc}).
    This involves two steps:



\begin{itemize}
\item  Defining a binary \textit{subtype relation} between types.



\item  Enriching the typing relation to take subtyping into account.

\end{itemize}


    The second step is actually very simple.  We add just a single rule
    to the typing relation: the so-called \textit{rule of subsumption}:


                         Gamma |- t : S     S <: T
\par
\noindent\hrulefill\par
\noindent{}                      (T\_Sub)
                               Gamma |- t : T


    This rule says, intuitively, that it is OK to ``forget'' some of
    what we know about a term. 

 For example, we may know that \coqdocvariable{t} is a record with two
    fields (e.g., \coqdocconstructor{S} = \{\coqdocabbreviation{x}:\coqdocabbreviation{A}\ensuremath{\rightarrow}\coqdocabbreviation{A}, \coqdocabbreviation{y}:\coqdocabbreviation{B}\ensuremath{\rightarrow}\coqdocabbreviation{B}\}), but choose to forget about
    one of the fields (\coqdocdefinition{T} = \{\coqdocabbreviation{y}:\coqdocabbreviation{B}\ensuremath{\rightarrow}\coqdocabbreviation{B}\}) so that we can pass \coqdocvariable{t} to a
    function that requires just a single-field record. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{The Subtype Relation}



 The first step -- the definition of the relation \coqdocconstructor{S} <: \coqdocdefinition{T} -- is
    where all the action is.  Let's look at each of the clauses of its
    definition.  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Structural Rules}



 To start off, we impose two ``structural rules'' that are
    independent of any particular type constructor: a rule of
    \textit{transitivity}, which says intuitively that, if \coqdocconstructor{S} is 
    better (richer, safer) than \coqdocvariable{U} and \coqdocvariable{U} is better than \coqdocdefinition{T}, 
    then \coqdocconstructor{S} is better than \coqdocdefinition{T}...


                              S <: U    U <: T
\par
\noindent\hrulefill\par
\noindent{}                        (S\_Trans)
                                   S <: T


    ... and a rule of \textit{reflexivity}, since certainly any type \coqdocdefinition{T} is
    as good as itself:
\par
\noindent\hrulefill\par
\noindent{}                              (S\_Refl)
                                   T <: T
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Products}



 Now we consider the individual type constructors, one by one,
    beginning with product types.  We consider one pair to be a subtype 
    of another if each of its components is.


                            S1 <: T1    S2 <: T2
\par
\noindent\hrulefill\par
\noindent{}                        (S\_Prod)
                             S1 * S2 <: T1 * T2
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Arrows}



 The subtyping rule for arrows is a little less intuitive.  
    Suppose we have functions \coqdocabbreviation{f} and \coqdocabbreviation{g} with these types:


       f : C -> Student
       g : (C->Person) -> D


    That is, \coqdocabbreviation{f} is a function that yields a record of type \coqdocdefinition{Student},
    and \coqdocabbreviation{g} is a (higher-order) function that expects its argument to be 
    a function yielding a record of type \coqdocdefinition{Person}.  Also suppose that
    \coqdocdefinition{Student} is a subtype of \coqdocdefinition{Person}.  Then the application \coqdocabbreviation{g} \coqdocabbreviation{f} is
    safe even though their types do not match up precisely, because
    the only thing \coqdocabbreviation{g} can do with \coqdocabbreviation{f} is to apply it to some
    argument (of type \coqdocabbreviation{C}); the result will actually be a \coqdocdefinition{Student},
    while \coqdocabbreviation{g} will be expecting a \coqdocdefinition{Person}, but this is safe because
    the only thing \coqdocabbreviation{g} can then do is to project out the two fields
    that it knows about (\coqdocvar{name} and \coqdocvar{age}), and these will certainly
    be among the fields that are present.


    This example suggests that the subtyping rule for arrow types
    should say that two arrow types are in the subtype relation if
    their results are:


                                  S2 <: T2
\par
\noindent\hrulefill\par
\noindent{}                     (S\_Arrow\_Co)
                            S1 -> S2 <: S1 -> T2


    We can generalize this to allow the arguments of the two arrow
    types to be in the subtype relation as well:


                            T1 <: S1    S2 <: T2
\par
\noindent\hrulefill\par
\noindent{}                      (S\_Arrow)
                            S1 -> S2 <: T1 -> T2


    But notice that the argument types are subtypes ``the other way round'':
    in order to conclude that \coqdocvariable{S1}\ensuremath{\rightarrow}\coqdocvariable{S2} to be a subtype of \coqdocvariable{T1}\ensuremath{\rightarrow}\coqdocvariable{T2}, it
    must be the case that \coqdocvariable{T1} is a subtype of \coqdocvariable{S1}.  The arrow
    constructor is said to be \textit{contravariant} in its first argument
    and \textit{covariant} in its second.


    Here is an example that illustrates this:


       f : Person -> C
       g : (Student -> C) -> D


    The application \coqdocabbreviation{g} \coqdocabbreviation{f} is safe, because the only thing the body of
    \coqdocabbreviation{g} can do with \coqdocabbreviation{f} is to apply it to some argument of type
    \coqdocdefinition{Student}.  Since \coqdocabbreviation{f} requires records having (at least) the
    fields of a \coqdocdefinition{Person}, this will always work. So \coqdocdefinition{Person} \ensuremath{\rightarrow} \coqdocabbreviation{C} is a
    subtype of \coqdocdefinition{Student} \ensuremath{\rightarrow} \coqdocabbreviation{C} since \coqdocdefinition{Student} is a subtype of
    \coqdocdefinition{Person}.


    The intuition is that, if we have a function \coqdocabbreviation{f} of type \coqdocvariable{S1}\ensuremath{\rightarrow}\coqdocvariable{S2},
    then we know that \coqdocabbreviation{f} accepts elements of type \coqdocvariable{S1}; clearly, \coqdocabbreviation{f}
    will also accept elements of any subtype \coqdocvariable{T1} of \coqdocvariable{S1}. The type of
    \coqdocabbreviation{f} also tells us that it returns elements of type \coqdocvariable{S2}; we can
    also view these results belonging to any supertype \coqdocvariable{T2} of
    \coqdocvariable{S2}. That is, any function \coqdocabbreviation{f} of type \coqdocvariable{S1}\ensuremath{\rightarrow}\coqdocvariable{S2} can also be
    viewed as having type \coqdocvariable{T1}\ensuremath{\rightarrow}\coqdocvariable{T2}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Records}



 What about subtyping for record types? 

 The basic intuition is that it is always safe to use a ``bigger''
    record in place of a ``smaller'' one.  That is, given a record type,
    adding extra fields will always result in a subtype.  If some code
    is expecting a record with fields \coqdocabbreviation{x} and \coqdocabbreviation{y}, it is perfectly safe
    for it to receive a record with fields \coqdocabbreviation{x}, \coqdocabbreviation{y}, and \coqdocabbreviation{z}; the \coqdocabbreviation{z}
    field will simply be ignored.  For example,


    \{name:String, age:Nat, gpa:Nat\} <: \{name:String, age:Nat\}


    \{name:String, age:Nat\} <: \{name:String\} \{name:String\} <: \{\}


    This is known as ``width subtyping'' for records. 

 We can also create a subtype of a record type by replacing the type
    of one of its fields with a subtype.  If some code is expecting a
    record with a field \coqdocabbreviation{x} of type \coqdocdefinition{T}, it will be happy with a record
    having a field \coqdocabbreviation{x} of type \coqdocconstructor{S} as long as \coqdocconstructor{S} is a subtype of
    \coqdocdefinition{T}. For example,


    \{x:Student\} <: \{x:Person\}


    This is known as ``depth subtyping''. 

 Finally, although the fields of a record type are written in a
    particular order, the order does not really matter. For example,


    \{name:String,age:Nat\} <: \{age:Nat,name:String\}


    This is known as ``permutation subtyping''. 

 We \textit{could} formalize these requirements in a single subtyping rule
    for records as follows:


                        forall jk in j1..jn,
                    exists ip in i1..im, such that
                          jk=ip and Sp <: Tk
\par
\noindent\hrulefill\par
\noindent{}                    (S\_Rcd)
                  \{i1:S1...im:Sm\} <: \{j1:T1...jn:Tn\}


    That is, the record on the left should have all the field labels of
    the one on the right (and possibly more), while the types of the
    common fields should be in the subtype relation. 


    However, this rule is rather heavy and hard to read, so it is often 
    decomposed into three simpler rules, which can be combined using 
    \coqdocconstructor{S\_Trans} to achieve all the same effects. 

 First, adding fields to the end of a record type gives a subtype:


                               n > m
\par
\noindent\hrulefill\par
\noindent{}                 (S\_RcdWidth)
                 \{i1:T1...in:Tn\} <: \{i1:T1...im:Tm\}


    We can use \coqdocconstructor{S\_RcdWidth} to drop later fields of a multi-field
    record while keeping earlier fields, showing for example that
    \{\coqdocvar{age}:\coqdoclibrary{Nat},\coqdocvar{name}:\coqdocabbreviation{String}\} <: \{\coqdocvar{name}:\coqdocabbreviation{String}\}. 

 Second, subtyping can be applied inside the components of a compound
    record type:


                       S1 <: T1  ...  Sn <: Tn
\par
\noindent\hrulefill\par
\noindent{}               (S\_RcdDepth)
                  \{i1:S1...in:Sn\} <: \{i1:T1...in:Tn\}


    For example, we can use \coqdocconstructor{S\_RcdDepth} and \coqdocconstructor{S\_RcdWidth} together to
    show that \{\coqdocabbreviation{y}:\coqdocdefinition{Student}, \coqdocabbreviation{x}:\coqdoclibrary{Nat}\} <: \{\coqdocabbreviation{y}:\coqdocdefinition{Person}\}. 

 Third, subtyping can reorder fields.  For example, we
    want \{\coqdocvar{name}:\coqdocabbreviation{String}, \coqdocvar{gpa}:\coqdoclibrary{Nat}, \coqdocvar{age}:\coqdoclibrary{Nat}\} <: \coqdocdefinition{Person}.  (We
    haven't quite achieved this yet: using just \coqdocconstructor{S\_RcdDepth} and
    \coqdocconstructor{S\_RcdWidth} we can only drop fields from the \textit{end} of a record
    type.)  So we add:


         \{i1:S1...in:Sn\} is a permutation of \{j1:T1...jn:Tn\}
\par
\noindent\hrulefill\par
\noindent{}        (S\_RcdPerm)
                  \{i1:S1...in:Sn\} <: \{j1:T1...jn:Tn\}


 It is worth noting that full-blown language designs may choose not
    to adopt all of these subtyping rules. For example, in Java:



\begin{itemize}
\item  A subclass may not change the argument or result types of a
      method of its superclass (i.e., no depth subtyping or no arrow
      subtyping, depending how you look at it).



\item  Each class member (field or method) can be assigned a single
      index, adding new indices ``on the right'' as more members are
      added in subclasses (i.e., no permutation for classes).



\item  A class may implement multiple interfaces -- so-called ``multiple
      inheritance'' of interfaces (i.e., permutation is allowed for
      interfaces). 
\end{itemize}


\paragraph{Exercise: 2 stars, recommendedM (arrow\_sub\_wrong)}

 Suppose we had incorrectly defined subtyping as covariant on both
    the right and the left of arrow types:


                            S1 <: T1    S2 <: T2
\par
\noindent\hrulefill\par
\noindent{}                (S\_Arrow\_wrong)
                            S1 -> S2 <: T1 -> T2


    Give a concrete example of functions \coqdocabbreviation{f} and \coqdocabbreviation{g} with the following
    types...


       f : Student -> Nat
       g : (Person -> Nat) -> Nat


    ... such that the application \coqdocabbreviation{g} \coqdocabbreviation{f} will get stuck during
    execution.  (Use informal syntax.  No need to prove formally that 
    the application gets stuck.)


\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Top}



 Finally, it is convenient to give the subtype relation a maximum
    element -- a type that lies above every other type and is
    inhabited by all (well-typed) values.  We do this by adding to the
    language one new type constant, called \coqdocvar{Top}, together with a
    subtyping rule that places it above every other type in the
    subtype relation:
\par
\noindent\hrulefill\par
\noindent{}                             (S\_Top)
                                   S <: Top


    The \coqdocvar{Top} type is an analog of the \coqdocvar{Object} type in Java and C\#. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Summary}



 In summary, we form the STLC with subtyping by starting with the
    pure STLC (over some set of base types) and then...



\begin{itemize}
\item  adding a base type \coqdocvar{Top},



\item  adding the rule of subsumption


                         Gamma |- t : S     S <: T

\begin{itemize}
\item ------------------------                      (T\_Sub)
                               Gamma |- t : T



\end{itemize}
      to the typing relation, and



\item  defining a subtype relation as follows:


                              S <: U    U <: T

\begin{itemize}
\item ---------------                        (S\_Trans)
                                   S <: T



\begin{itemize}
\item -----                              (S\_Refl)

\end{itemize}
                                   T <: T



\begin{itemize}
\item -------                             (S\_Top)

\end{itemize}
                                   S <: Top



\end{itemize}
                            S1 <: T1    S2 <: T2

\begin{itemize}
\item -------------------                       (S\_Prod)
                             S1 * S2 <: T1 * T2



\end{itemize}
                            T1 <: S1    S2 <: T2

\begin{itemize}
\item -------------------                      (S\_Arrow)

\end{itemize}
                            S1 -> S2 <: T1 -> T2


                               n > m

\begin{itemize}
\item --------------------------------                 (S\_RcdWidth)

\end{itemize}
                 \{i1:T1...in:Tn\} <: \{i1:T1...im:Tm\}


                       S1 <: T1  ...  Sn <: Tn

\begin{itemize}
\item ---------------------------------               (S\_RcdDepth)

\end{itemize}
                  \{i1:S1...in:Sn\} <: \{i1:T1...in:Tn\}


         \{i1:S1...in:Sn\} is a permutation of \{j1:T1...jn:Tn\}

\begin{itemize}
\item --------------------------------------------------        (S\_RcdPerm)
                  \{i1:S1...in:Sn\} <: \{j1:T1...jn:Tn\}

\end{itemize}

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Exercises}



\paragraph{Exercise: 1 star, optional (subtype\_instances\_tf\_1)}

 Suppose we have types \coqdocconstructor{S}, \coqdocdefinition{T}, \coqdocvariable{U}, and \coqdocvariable{V} with \coqdocconstructor{S} <: \coqdocdefinition{T}
    and \coqdocvariable{U} <: \coqdocvariable{V}.  Which of the following subtyping assertions
    are then true?  Write \textit{true} or \textit{false} after each one.
    (\coqdocabbreviation{A}, \coqdocabbreviation{B}, and \coqdocabbreviation{C} here are base types like \coqdoclibrary{Bool}, \coqdoclibrary{Nat}, etc.)



\begin{itemize}
\item  \coqdocdefinition{T}\ensuremath{\rightarrow}\coqdocconstructor{S} <: \coqdocdefinition{T}\ensuremath{\rightarrow}\coqdocconstructor{S}



\item  \coqdocvar{Top}\ensuremath{\rightarrow}\coqdocvariable{U} <: \coqdocconstructor{S}\ensuremath{\rightarrow}\coqdocvar{Top}



\item  (\coqdocabbreviation{C}\ensuremath{\rightarrow}\coqdocabbreviation{C}) \ensuremath{\rightarrow} (\coqdocabbreviation{A}\ensuremath{\times}\coqdocabbreviation{B})  <:  (\coqdocabbreviation{C}\ensuremath{\rightarrow}\coqdocabbreviation{C}) \ensuremath{\rightarrow} (\coqdocvar{Top}\ensuremath{\times}\coqdocabbreviation{B})



\item  \coqdocdefinition{T}\ensuremath{\rightarrow}\coqdocdefinition{T}\ensuremath{\rightarrow}\coqdocvariable{U} <: \coqdocconstructor{S}\ensuremath{\rightarrow}\coqdocconstructor{S}\ensuremath{\rightarrow}\coqdocvariable{V}



\item  (\coqdocdefinition{T}\ensuremath{\rightarrow}\coqdocdefinition{T})->\coqdocvariable{U} <: (\coqdocconstructor{S}\ensuremath{\rightarrow}\coqdocconstructor{S})->\coqdocvariable{V}



\item  ((\coqdocdefinition{T}\ensuremath{\rightarrow}\coqdocconstructor{S})->\coqdocdefinition{T})->\coqdocvariable{U} <: ((\coqdocconstructor{S}\ensuremath{\rightarrow}\coqdocdefinition{T})->\coqdocconstructor{S})->\coqdocvariable{V}



\item  \coqdocconstructor{S}\ensuremath{\times}\coqdocvariable{V} <: \coqdocdefinition{T}\ensuremath{\times}\coqdocvariable{U}

\end{itemize}


\ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (subtype\_order)}

 The following types happen to form a linear order with respect to subtyping:

\begin{itemize}
\item  \coqdocvar{Top}

\item  \coqdocvar{Top} \ensuremath{\rightarrow} \coqdocdefinition{Student}

\item  \coqdocdefinition{Student} \ensuremath{\rightarrow} \coqdocdefinition{Person}

\item  \coqdocdefinition{Student} \ensuremath{\rightarrow} \coqdocvar{Top}

\item  \coqdocdefinition{Person} \ensuremath{\rightarrow} \coqdocdefinition{Student}

\end{itemize}


Write these types in order from the most specific to the most general.


Where does the type \coqdocvar{Top}\ensuremath{\rightarrow}\coqdocvar{Top}\ensuremath{\rightarrow}\coqdocdefinition{Student} fit into this order?


\ensuremath{\Box} 

\paragraph{Exercise: 1 starM (subtype\_instances\_tf\_2)}

 Which of the following statements are true?  Write \textit{true} or
    \textit{false} after each one.


      forall S T,
          S <: T  ->
          S->S   <:  T->T


      forall S,
           S <: A->A ->
           exists T,
              S = T->T  /\symbol{92}  T <: A


      forall S T1 T2,
           (S <: T1 -> T2) ->
           exists S1 S2,
              S = S1 -> S2  /\symbol{92}  T1 <: S1  /\symbol{92}  S2 <: T2 


      exists S,
           S <: S->S 


      exists S,
           S->S <: S  


      forall S T1 T2,
           S <: T1*T2 ->
           exists S1 S2,
              S = S1*S2  /\symbol{92}  S1 <: T1  /\symbol{92}  S2 <: T2  


\ensuremath{\Box} 

\paragraph{Exercise: 1 starM (subtype\_concepts\_tf)}

 Which of the following statements are true, and which are false?

\begin{itemize}
\item  There exists a type that is a supertype of every other type.



\item  There exists a type that is a subtype of every other type.



\item  There exists a pair type that is a supertype of every other
      pair type.



\item  There exists a pair type that is a subtype of every other
      pair type.



\item  There exists an arrow type that is a supertype of every other
      arrow type.



\item  There exists an arrow type that is a subtype of every other
      arrow type.



\item  There is an infinite descending chain of distinct types in the
      subtype relation---that is, an infinite sequence of types
      \coqdocvar{S0}, \coqdocvariable{S1}, etc., such that all the \coqdocvariable{Si}'s are different and
      each \coqdocconstructor{S}(\coqdocabbreviation{i}+1) is a subtype of \coqdocvariable{Si}.



\item  There is an infinite \textit{ascending} chain of distinct types in
      the subtype relation---that is, an infinite sequence of types
      \coqdocvar{S0}, \coqdocvariable{S1}, etc., such that all the \coqdocvariable{Si}'s are different and
      each \coqdocconstructor{S}(\coqdocabbreviation{i}+1) is a supertype of \coqdocvariable{Si}.

\end{itemize}


\ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (proper\_subtypes)}

 Is the following statement true or false?  Briefly explain your
    answer.  (Here \coqdocconstructor{TBase} \coqdocabbreviation{n} stands for a base type, where \coqdocabbreviation{n} is 
    a string standing for the name of the base type.  See the 
    Syntax section below.)


    forall T,
         \~{}(T = TBool \symbol{92}/ exists n, T = TBase n) ->
         exists S,
            S <: T  /\symbol{92}  S <> T


\ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (small\_large\_1)}




\begin{itemize}
\item  What is the \textit{smallest} type \coqdocdefinition{T} (``smallest'' in the subtype
     relation) that makes the following assertion true?  (Assume we
     have \coqdocvar{Unit} among the base types and \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}} as a constant of this
     type.)


       empty |- (\symbol{92}p:T*Top. p.fst) ((\symbol{92}z:A.z), unit) : A->A

\end{itemize}





\begin{itemize}
\item  What is the \textit{largest} type \coqdocdefinition{T} that makes the same assertion true?

\end{itemize}


\ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (small\_large\_2)}




\begin{itemize}
\item  What is the \textit{smallest} type \coqdocdefinition{T} that makes the following
     assertion true?


       empty |- (\symbol{92}p:(A->A * B->B). p) ((\symbol{92}z:A.z), (\symbol{92}z:B.z)) : T

\end{itemize}





\begin{itemize}
\item  What is the \textit{largest} type \coqdocdefinition{T} that makes the same assertion true?

\end{itemize}


\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (small\_large\_3)}




\begin{itemize}
\item  What is the \textit{smallest} type \coqdocdefinition{T} that makes the following
     assertion true?


       a:A |- (\symbol{92}p:(A*T). (p.snd) (p.fst)) (a , \symbol{92}z:A.z) : A

\end{itemize}





\begin{itemize}
\item  What is the \textit{largest} type \coqdocdefinition{T} that makes the same assertion true?

\end{itemize}


\ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (small\_large\_4)}




\begin{itemize}
\item  What is the \textit{smallest} type \coqdocdefinition{T} that makes the following
     assertion true?


       exists S,
         empty |- (\symbol{92}p:(A*T). (p.snd) (p.fst)) : S

\end{itemize}





\begin{itemize}
\item  What is the \textit{largest} type \coqdocdefinition{T} that makes the same
     assertion true?

\end{itemize}


\ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (smallest\_1)}

 What is the \textit{smallest} type \coqdocdefinition{T} that makes the following
    assertion true?


      exists S, exists t,
        empty |- (\symbol{92}x:T. x x) t : S
]] 
\ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (smallest\_2)}

 What is the \textit{smallest} type \coqdocdefinition{T} that makes the following
    assertion true?


      empty |- (\symbol{92}x:Top. x) ((\symbol{92}z:A.z) , (\symbol{92}z:B.z)) : T
]] 
\ensuremath{\Box} 

\paragraph{Exercise: 3 stars, optional (count\_supertypes)}

 How many supertypes does the record type \{\coqdocabbreviation{x}:\coqdocabbreviation{A}, \coqdocabbreviation{y}:\coqdocabbreviation{C}\ensuremath{\rightarrow}\coqdocabbreviation{C}\} have?  That is,
    how many different types \coqdocdefinition{T} are there such that \{\coqdocabbreviation{x}:\coqdocabbreviation{A}, \coqdocabbreviation{y}:\coqdocabbreviation{C}\ensuremath{\rightarrow}\coqdocabbreviation{C}\} <:
    \coqdocdefinition{T}?  (We consider two types to be different if they are written
    differently, even if each is a subtype of the other.  For example,
    \{\coqdocabbreviation{x}:\coqdocabbreviation{A},\coqdocabbreviation{y}:\coqdocabbreviation{B}\} and \{\coqdocabbreviation{y}:\coqdocabbreviation{B},\coqdocabbreviation{x}:\coqdocabbreviation{A}\} are different.)


\ensuremath{\Box} 

\paragraph{Exercise: 2 starsM (pair\_permutation)}

 The subtyping rule for product types


                            S1 <: T1    S2 <: T2
\par
\noindent\hrulefill\par
\noindent{}                        (S\_Prod)
                               S1*S2 <: T1*T2


    intuitively corresponds to the ``depth'' subtyping rule for records. 
    Extending the analogy, we might consider adding a ``permutation'' rule
\par
\noindent\hrulefill\par
\noindent{}
                                   T1*T2 <: T2*T1


    for products.  Is this a good idea? Briefly explain why or why not.


\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Formal Definitions}



 Most of the definitions needed to formalize what we've discussed
    above -- in particular, the syntax and operational semantics of
    the language -- are identical to what we saw in the last chapter.
    We just need to extend the typing relation with the subsumption
    rule and add a new \coqdockw{Inductive} definition for the subtyping
    relation.  Let's first do the identical bits. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Core Definitions}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Syntax}



 In the rest of the chapter, we formalize just base types,
    booleans, arrow types, \coqdocvar{Unit}, and \coqdocvar{Top}, omitting record types
    and leaving product types as an exercise.  For the sake of more
    interesting examples, we'll add an arbitrary set of base types
    like \coqdocabbreviation{String}, \coqdocabbreviation{Float}, etc.  (Since they are just for examples,
    we won't bother adding any operations over these base types, but
    we could easily do so.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TTop}   : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBool}  : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBase}  : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TUnit}  : \coqdocvar{ty}\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tunit} : \coqdocvar{tm} \coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Substitution}



 The definition of substitution remains exactly the same as for the
    pure STLC. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{subst} (\coqdocvar{x}:\coqdocvar{id}) (\coqdocvar{s}:\coqdocvar{tm})  (\coqdocvar{t}:\coqdocvar{tm}) : \coqdocvar{tm} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} \coqdocvar{y} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{s} \coqdockw{else} \coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T} \coqdocvar{t1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T} (\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{t1} \coqdockw{else} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tapp} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{ttrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tfalse}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tunit} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tunit} \coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'[' x ':=' s ']' t" := (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t}) (\coqdoctac{at} \coqdockw{level} 20).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Reduction}



 Likewise the definitions of the \coqdocinductive{value} property and the \coqdocinductive{step}
    relation. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_true} :\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{ttrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_false} :\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{tfalse}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_unit} :\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{tunit}\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{value}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "t1 '==>' t2" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_AppAbs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t12} \coqdocvar{v2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t12}) \coqdocvar{v2}) ==> [\coqdocvar{x}:=\coqdocvar{v2}]\coqdocvar{t12}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) ==> (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2}) ==> (\coqdocvar{tapp} \coqdocvar{v1}  \coqdocvar{t2'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{t1} \coqdocvar{t2}) ==> \coqdocvar{t1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tif} \coqdocvar{tfalse} \coqdocvar{t1} \coqdocvar{t2}) ==> \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3}) ==> (\coqdocvar{tif} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocnoindent
\coqdockw{where} "t1 '==>' t2" := (\coqdocvar{step} \coqdocvar{t1} \coqdocvar{t2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{step}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Subtyping}



 Now we come to the interesting part.  We begin by defining
    the subtyping relation and developing some of its important
    technical properties. 

 The definition of subtyping is just what we sketched in the
    motivating discussion. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "T '<:' U" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{subtype} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_Refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{T} <: \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_Trans} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S} \coqdocvar{U} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{S} <: \coqdocvar{U} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{U} <: \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{S} <: \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_Top} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{S} <: \coqdocvar{TTop}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_Arrow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S1} \coqdocvar{S2} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{T1} <: \coqdocvar{S1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{S2} <: \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{TArrow} \coqdocvar{S1} \coqdocvar{S2}) <: (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2})\coqdoceol
\coqdocnoindent
\coqdockw{where} "T '<:' U" := (\coqdocvar{subtype} \coqdocvar{T} \coqdocvar{U}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that we don't need any special rules for base types (\coqdocconstructor{TBool}
    and \coqdocconstructor{TBase}): they are automatically subtypes of themselves (by
    \coqdocconstructor{S\_Refl}) and \coqdocvar{Top} (by \coqdocconstructor{S\_Top}), and that's all we want. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{subtype}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Examples}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{x} := (\coqdocvar{Id} "x").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{y} := (\coqdocvar{Id} "y").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{z} := (\coqdocvar{Id} "z").\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{A} := (\coqdocvar{TBase} (\coqdocvar{Id} "A")).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{B} := (\coqdocvar{TBase} (\coqdocvar{Id} "B")).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{C} := (\coqdocvar{TBase} (\coqdocvar{Id} "C")).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{String} := (\coqdocvar{TBase} (\coqdocvar{Id} "String")).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{Float} := (\coqdocvar{TBase} (\coqdocvar{Id} "Float")).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{Integer} := (\coqdocvar{TBase} (\coqdocvar{Id} "Integer")).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{subtyping\_example\_0} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{TArrow} \coqdocvar{C} \coqdocvar{TBool}) <: (\coqdocvar{TArrow} \coqdocvar{C} \coqdocvar{TTop}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 2 stars, optional (subtyping\_judgements)}

 (Wait to do this exercise after you have added product types to the
    language -- see exercise \coqdocvar{products} -- at least up to this point 
    in the file).


    Recall that, in chapter \coqdoclibrary{MoreStlc}, the optional section ``Encoding
    Records'' describes how records can be encoded as pairs.
    Using this encoding, define pair types representing the following 
    record types:


    Person   := \{ name : String \}
    Student  := \{ name : String ;
                  gpa  : Float \}
    Employee := \{ name : String ;
                  ssn  : Integer \}
\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{Person} : \coqdocvar{ty} \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{Student} : \coqdocvar{ty} \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{Employee} : \coqdocvar{ty} \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now use the definition of the subtype relation to prove the following: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{sub\_student\_person} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Student} <: \coqdocvar{Person}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{sub\_employee\_person} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Employee} <: \coqdocvar{Person}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 The following facts are mostly easy to prove in Coq.  To get
    full benefit from the exercises, make sure you also
    understand how to prove them on paper! 

\paragraph{Exercise: 1 star, optional (subtyping\_example\_1)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{subtyping\_example\_1} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{TArrow} \coqdocvar{TTop} \coqdocvar{Student}) <: (\coqdocvar{TArrow} (\coqdocvar{TArrow} \coqdocvar{C} \coqdocvar{C}) \coqdocvar{Person}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star, optional (subtyping\_example\_2)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{subtyping\_example\_2} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{TArrow} \coqdocvar{TTop} \coqdocvar{Person}) <: (\coqdocvar{TArrow} \coqdocvar{Person} \coqdocvar{TTop}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Examples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Typing}



 The only change to the typing relation is the addition of the rule
    of subsumption, \coqdocconstructor{T\_Sub}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdockw{context} := \coqdocvar{partial\_map} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "Gamma '|-' t '\symbol{92}in' T" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{has\_type} : \coqdockw{context} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tvar} \coqdocvar{x}) \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{T12} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11}) \ensuremath{\vdash} \coqdocvar{t12} \symbol{92}\coqdoctac{in} \coqdocvar{T12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12}) \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_App} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} \coqdocvar{T2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_True} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{ttrue} \symbol{92}\coqdoctac{in} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_False} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tfalse} \symbol{92}\coqdoctac{in} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \coqdocvar{T} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TBool} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t3} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3}) \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Unit} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tunit} \symbol{92}\coqdoctac{in} \coqdocvar{TUnit}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Sub} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{S} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{S} <: \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "Gamma '|-' t '\symbol{92}in' T" := (\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{has\_type}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The following hints help \coqdoctac{auto} and \coqdoctac{eauto} construct typing
    derivations.  (See chapter \coqdoclibrary{UseAuto} for more on hints.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Extern} 2 (\coqdocvar{has\_type} \coqdocvar{\_} (\coqdocvar{tapp} \coqdocvar{\_} \coqdocvar{\_}) \coqdocvar{\_}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{T\_App}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Extern} 2 (\coqdocvar{\_} = \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{compute}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Examples2}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{Examples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Do the following exercises after you have added product types to
    the language.  For each informal typing judgement, write it as a
    formal statement in Coq and prove it. 

\paragraph{Exercise: 1 star, optional (typing\_example\_0)}

\begin{coqdoccode}
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (typing\_example\_1)}

\begin{coqdoccode}
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (typing\_example\_2)}

\begin{coqdoccode}
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Examples2}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Properties}



 The fundamental properties of the system that we want to
    check are the same as always: progress and preservation.  Unlike
    the extension of the STLC with references (chapter \coqdoclibrary{References}),
    we don't need to change the \textit{statements} of these properties to
    take subtyping into account.  However, their proofs do become a
    little bit more involved. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Inversion Lemmas for Subtyping}



 Before we look at the properties of the typing relation, we need
    to establish a couple of critical structural properties of the
    subtype relation:

\begin{itemize}
\item  \coqdoclibrary{Bool} is the only subtype of \coqdoclibrary{Bool}, and

\item  every subtype of an arrow type is itself an arrow type. 
\end{itemize}


 These are called \textit{inversion lemmas} because they play a
    similar role in proofs as the built-in \coqdoctac{inversion} tactic: given a
    hypothesis that there exists a derivation of some subtyping
    statement \coqdocconstructor{S} <: \coqdocdefinition{T} and some constraints on the shape of \coqdocconstructor{S} and/or
    \coqdocdefinition{T}, each inversion lemma reasons about what this derivation must
    look like to tell us something further about the shapes of \coqdocconstructor{S} and
    \coqdocdefinition{T} and the existence of subtype relations between their parts. 

\paragraph{Exercise: 2 stars, optional (sub\_inversion\_Bool)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{sub\_inversion\_Bool} : \coqdockw{\ensuremath{\forall}} \coqdocvar{U},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{U} <: \coqdocvar{TBool} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{U} = \coqdocvar{TBool}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{U} \coqdocvar{Hs}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} \coqdocvar{TBool} \coqdockw{as} \coqdocvar{V}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars, optional (sub\_inversion\_arrow)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{sub\_inversion\_arrow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{U} \coqdocvar{V1} \coqdocvar{V2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{U} <: (\coqdocvar{TArrow} \coqdocvar{V1} \coqdocvar{V2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{U1}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{U2},\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{U} = (\coqdocvar{TArrow} \coqdocvar{U1} \coqdocvar{U2}) \ensuremath{\land} (\coqdocvar{V1} <: \coqdocvar{U1}) \ensuremath{\land} (\coqdocvar{U2} <: \coqdocvar{V2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{U} \coqdocvar{V1} \coqdocvar{V2} \coqdocvar{Hs}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{TArrow} \coqdocvar{V1} \coqdocvar{V2}) \coqdockw{as} \coqdocvar{V}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{V2}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{V1}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Canonical Forms}



 The proof of the progress theorem -- that a well-typed
    non-value can always take a step -- doesn't need to change too
    much: we just need one small refinement.  When we're considering
    the case where the term in question is an application \coqdocvariable{t1} \coqdocvariable{t2}
    where both \coqdocvariable{t1} and \coqdocvariable{t2} are values, we need to know that \coqdocvariable{t1} has
    the \textit{form} of a lambda-abstraction, so that we can apply the
    \coqdocconstructor{ST\_AppAbs} reduction rule.  In the ordinary STLC, this is
    obvious: we know that \coqdocvariable{t1} has a function type \coqdocvariable{T11}\ensuremath{\rightarrow}\coqdocvariable{T12}, and
    there is only one rule that can be used to give a function type to
    a value -- rule \coqdocconstructor{T\_Abs} -- and the form of the conclusion of this
    rule forces \coqdocvariable{t1} to be an abstraction.


    In the STLC with subtyping, this reasoning doesn't quite work
    because there's another rule that can be used to show that a value
    has a function type: subsumption.  Fortunately, this possibility
    doesn't change things much: if the last rule used to show \coqdocvariable{Gamma}
    \ensuremath{\vdash} \coqdocvariable{t1} : \coqdocvariable{T11}\ensuremath{\rightarrow}\coqdocvariable{T12} is subsumption, then there is some
    \textit{sub}-derivation whose subject is also \coqdocvariable{t1}, and we can reason by
    induction until we finally bottom out at a use of \coqdocconstructor{T\_Abs}.


    This bit of reasoning is packaged up in the following lemma, which
    tells us the possible ``canonical forms'' (i.e., values) of function
    type. 

\paragraph{Exercise: 3 stars, optional (canonical\_forms\_of\_arrow\_types)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{canonical\_forms\_of\_arrow\_types} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{s} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{s} \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{s} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{S1}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{s2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{s} = \coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 Similarly, the canonical forms of type \coqdoclibrary{Bool} are the constants
    \coqdocconstructor{true} and \coqdocconstructor{false}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{canonical\_forms\_of\_Bool} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{s},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{s} \symbol{92}\coqdoctac{in} \coqdocvar{TBool} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{s} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{s} = \coqdocvar{ttrue} \ensuremath{\lor} \coqdocvar{s} = \coqdocvar{tfalse}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{s} \coqdocvar{Hty} \coqdocvar{Hv}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} \coqdocvar{TBool} \coqdockw{as} \coqdocvar{T}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hty}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst}. \coqdoctac{apply} \coqdocvar{sub\_inversion\_Bool} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{subst}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Progress}



 The proof of progress now proceeds just like the one for the
    pure STLC, except that in several places we invoke canonical forms
    lemmas... 

 \textit{Theorem} (Progress): For any term \coqdocvariable{t} and type \coqdocdefinition{T}, if \coqdocdefinition{empty} \ensuremath{\vdash}
    \coqdocvariable{t} : \coqdocdefinition{T} then \coqdocvariable{t} is a value or \coqdocvariable{t} ==> \coqdocvariable{t'} for some term \coqdocvariable{t'}.


    \textit{Proof}: Let \coqdocvariable{t} and \coqdocdefinition{T} be given, with \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T}.  Proceed
    by induction on the typing derivation.


    The cases for \coqdocconstructor{T\_Abs}, \coqdocconstructor{T\_Unit}, \coqdocconstructor{T\_True} and \coqdocconstructor{T\_False} are
    immediate because abstractions, \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}, \coqdocconstructor{true}, and \coqdocconstructor{false} are
    already values.  The \coqdocconstructor{T\_Var} case is vacuous because variables
    cannot be typed in the empty context.  The remaining cases are
    more interesting:



\begin{itemize}
\item  If the last step in the typing derivation uses rule \coqdocconstructor{T\_App},
      then there are terms \coqdocvariable{t1} \coqdocvariable{t2} and types \coqdocvariable{T1} and \coqdocvariable{T2} such that
      \coqdocvariable{t} = \coqdocvariable{t1} \coqdocvariable{t2}, \coqdocdefinition{T} = \coqdocvariable{T2}, \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t1} : \coqdocvariable{T1} \ensuremath{\rightarrow} \coqdocvariable{T2}, and \coqdocdefinition{empty} \ensuremath{\vdash}
      \coqdocvariable{t2} : \coqdocvariable{T1}.  Moreover, by the induction hypothesis, either \coqdocvariable{t1} is
      a value or it steps, and either \coqdocvariable{t2} is a value or it steps.
      There are three possibilities to consider:



\begin{itemize}
\item  Suppose \coqdocvariable{t1} ==> \coqdocvariable{t1'} for some term \coqdocvariable{t1'}.  Then \coqdocvariable{t1} \coqdocvariable{t2} ==> \coqdocvariable{t1'} \coqdocvariable{t2}
        by \coqdocconstructor{ST\_App1}.



\item  Suppose \coqdocvariable{t1} is a value and \coqdocvariable{t2} ==> \coqdocvariable{t2'} for some term \coqdocvariable{t2'}.
        Then \coqdocvariable{t1} \coqdocvariable{t2} ==> \coqdocvariable{t1} \coqdocvariable{t2'} by rule \coqdocconstructor{ST\_App2} because \coqdocvariable{t1} is a
        value.



\item  Finally, suppose \coqdocvariable{t1} and \coqdocvariable{t2} are both values.  By the 
        canonical forms lemma for arrow types, we know that \coqdocvariable{t1} has the
        form \symbol{92}\coqdocabbreviation{x}:\coqdocvar{S1.s2} for some \coqdocabbreviation{x}, \coqdocvariable{S1}, and \coqdocvariable{s2}.  But then
        (\symbol{92}\coqdocabbreviation{x}:\coqdocvar{S1.s2}) \coqdocvariable{t2} ==> [\coqdocabbreviation{x}:=\coqdocvariable{t2}]\coqdocvariable{s2} by \coqdocconstructor{ST\_AppAbs}, since \coqdocvariable{t2} is a
        value.



\end{itemize}

\item  If the final step of the derivation uses rule \coqdocconstructor{T\_If}, then there
      are terms \coqdocvariable{t1}, \coqdocvariable{t2}, and \coqdocvariable{t3} such that \coqdocvariable{t} = \coqdockw{if} \coqdocvariable{t1} \coqdockw{then} \coqdocvariable{t2} \coqdockw{else}
      \coqdocvariable{t3}, with \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t1} : \coqdoclibrary{Bool} and with \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t2} : \coqdocdefinition{T} and
      \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t3} : \coqdocdefinition{T}.  Moreover, by the induction hypothesis,
      either \coqdocvariable{t1} is a value or it steps.



\begin{itemize}
\item  If \coqdocvariable{t1} is a value, then by the canonical forms lemma for
         booleans, either \coqdocvariable{t1} = \coqdocconstructor{true} or \coqdocvariable{t1} = \coqdocconstructor{false}.  In either
         case, \coqdocvariable{t} can step, using rule \coqdocconstructor{ST\_IfTrue} or \coqdocconstructor{ST\_IfFalse}.



\item  If \coqdocvariable{t1} can step, then so can \coqdocvariable{t}, by rule \coqdocconstructor{ST\_If}.



\end{itemize}

\item  If the final step of the derivation is by \coqdocconstructor{T\_Sub}, then there is
      a type \coqdocconstructor{S} such that \coqdocconstructor{S} <: \coqdocdefinition{T} and \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocconstructor{S}.  The desired
      result is exactly the induction hypothesis for the typing
      subderivation. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Ht}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} \coqdocvar{empty} \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{revert} \coqdocvar{HeqGamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Ht};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{HeqGamma}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{canonical\_forms\_of\_arrow\_types} \coqdocvar{empty} \coqdocvar{t1} \coqdocvar{T1} \coqdocvar{T2})\coqdoceol
\coqdocindent{5.00em}
\coqdockw{as} [\coqdocvar{x} [\coqdocvar{S1} [\coqdocvar{t12} \coqdocvar{Heqt1}]]]...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{subst}. \coqdoctac{\ensuremath{\exists}} ([\coqdocvar{x}:=\coqdocvar{t2}]\coqdocvar{t12})...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t2'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2'})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{eauto}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{assert} (\coqdocvar{t1} = \coqdocvar{ttrue} \ensuremath{\lor} \coqdocvar{t1} = \coqdocvar{tfalse})\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{by} (\coqdoctac{eapply} \coqdocvar{canonical\_forms\_of\_Bool}; \coqdoctac{eauto}).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{rename} \coqdocvar{x} \coqdocvar{into} \coqdocvar{t1'}. \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Inversion Lemmas for Typing}



 The proof of the preservation theorem also becomes a little more
    complex with the addition of subtyping.  The reason is that, as
    with the ``inversion lemmas for subtyping'' above, there are a
    number of facts about the typing relation that are immediate from
    the definition in the pure STLC (formally: that can be obtained
    directly from the \coqdoctac{inversion} tactic) but that require real proofs
    in the presence of subtyping because there are multiple ways to
    derive the same \coqdocinductive{has\_type} statement.


    The following inversion lemma tells us that, if we have a
    derivation of some typing statement \coqdocvariable{Gamma} \ensuremath{\vdash} \symbol{92}\coqdocabbreviation{x}:\coqdocvar{S1.t2} : \coqdocdefinition{T} whose
    subject is an abstraction, then there must be some subderivation
    giving a type to the body \coqdocvariable{t2}. 

 \textit{Lemma}: If \coqdocvariable{Gamma} \ensuremath{\vdash} \symbol{92}\coqdocabbreviation{x}:\coqdocvar{S1.t2} : \coqdocdefinition{T}, then there is a type \coqdocvariable{S2}
    such that \coqdocvariable{Gamma}, \coqdocabbreviation{x}:\coqdocvariable{S1} \ensuremath{\vdash} \coqdocvariable{t2} : \coqdocvariable{S2} and \coqdocvariable{S1} \ensuremath{\rightarrow} \coqdocvariable{S2} <: \coqdocdefinition{T}.


    (Notice that the lemma does \textit{not} say, ``then \coqdocdefinition{T} itself is an arrow
    type'' -- this is tempting, but false!)


    \textit{Proof}: Let \coqdocvariable{Gamma}, \coqdocabbreviation{x}, \coqdocvariable{S1}, \coqdocvariable{t2} and \coqdocdefinition{T} be given as
     described.  Proceed by induction on the derivation of \coqdocvariable{Gamma} \ensuremath{\vdash}
     \symbol{92}\coqdocabbreviation{x}:\coqdocvar{S1.t2} : \coqdocdefinition{T}.  Cases \coqdocconstructor{T\_Var}, \coqdocconstructor{T\_App}, are vacuous as those
     rules cannot be used to give a type to a syntactic abstraction.



\begin{itemize}
\item  If the last step of the derivation is a use of \coqdocconstructor{T\_Abs} then
       there is a type \coqdocvariable{T12} such that \coqdocdefinition{T} = \coqdocvariable{S1} \ensuremath{\rightarrow} \coqdocvariable{T12} and \coqdocvariable{Gamma},
       \coqdocabbreviation{x}:\coqdocvariable{S1} \ensuremath{\vdash} \coqdocvariable{t2} : \coqdocvariable{T12}.  Picking \coqdocvariable{T12} for \coqdocvariable{S2} gives us what we
       need: \coqdocvariable{S1} \ensuremath{\rightarrow} \coqdocvariable{T12} <: \coqdocvariable{S1} \ensuremath{\rightarrow} \coqdocvariable{T12} follows from \coqdocconstructor{S\_Refl}.



\item  If the last step of the derivation is a use of \coqdocconstructor{T\_Sub} then
       there is a type \coqdocconstructor{S} such that \coqdocconstructor{S} <: \coqdocdefinition{T} and \coqdocvariable{Gamma} \ensuremath{\vdash} \symbol{92}\coqdocabbreviation{x}:\coqdocvar{S1.t2} :
       \coqdocconstructor{S}.  The IH for the typing subderivation tell us that there is
       some type \coqdocvariable{S2} with \coqdocvariable{S1} \ensuremath{\rightarrow} \coqdocvariable{S2} <: \coqdocconstructor{S} and \coqdocvariable{Gamma}, \coqdocabbreviation{x}:\coqdocvariable{S1} \ensuremath{\vdash} \coqdocvariable{t2} :
       \coqdocvariable{S2}.  Picking type \coqdocvariable{S2} gives us what we need, since \coqdocvariable{S1} \ensuremath{\rightarrow} \coqdocvariable{S2}
       <: \coqdocdefinition{T} then follows by \coqdocconstructor{S\_Trans}. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{t2} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{S2}, (\coqdocvar{TArrow} \coqdocvar{S1} \coqdocvar{S2}) <: \coqdocvar{T}\coqdoceol
\coqdocindent{7.00em}
\ensuremath{\land} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{S1}) \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{S2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{t2} \coqdocvar{T} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{t2}) \coqdockw{as} \coqdocvar{t}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqt}; \coqdoctac{subst}; \coqdoctac{intros}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T12}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHhas\_type} \coqdockw{as} [\coqdocvar{S2} [\coqdocvar{Hsub} \coqdocvar{Hty}]]...\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Similarly... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tvar} \coqdocvar{x}) \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{S},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{S} \ensuremath{\land} \coqdocvar{S} <: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{tvar} \coqdocvar{x}) \coqdockw{as} \coqdocvar{t}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hty}; \coqdoctac{intros};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqt}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHty} \coqdockw{as} [\coqdocvar{U} [\coqdocvar{Hctx} \coqdocvar{HsubU}]]... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_app} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{T2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\land}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{T2} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) \coqdockw{as} \coqdocvar{t}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hty}; \coqdoctac{intros};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqt}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHty} \coqdockw{as} [\coqdocvar{U1} [\coqdocvar{Hty1} \coqdocvar{Hty2}]]...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_true} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{ttrue} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{TBool} <: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{T} \coqdocvar{Htyp}. \coqdocvar{remember} \coqdocvar{ttrue} \coqdockw{as} \coqdocvar{tu}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqtu}; \coqdoctac{subst}; \coqdoctac{intros}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_false} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tfalse} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{TBool} <: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{T} \coqdocvar{Htyp}. \coqdocvar{remember} \coqdocvar{tfalse} \coqdockw{as} \coqdocvar{tu}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqtu}; \coqdoctac{subst}; \coqdoctac{intros}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_if} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3}) \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\land} \coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\land} \coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t3} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \coqdocvar{T} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3}) \coqdockw{as} \coqdocvar{t}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hty}; \coqdoctac{intros};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqt}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{IHHty} \coqdocvar{H0}) \coqdockw{as} [\coqdocvar{H1} [\coqdocvar{H2} \coqdocvar{H3}]]...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_unit} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tunit} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{TUnit} <: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{T} \coqdocvar{Htyp}. \coqdocvar{remember} \coqdocvar{tunit} \coqdockw{as} \coqdocvar{tu}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqtu}; \coqdoctac{subst}; \coqdoctac{intros}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The inversion lemmas for typing and for subtyping between arrow
    types can be packaged up as a useful ``combination lemma'' telling
    us exactly what we'll actually require below. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{abs\_arrow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty} \ensuremath{\vdash} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2}) \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{T1} <: \coqdocvar{S1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\land} (\coqdocvar{update} \coqdocvar{empty} \coqdocvar{x} \coqdocvar{S1}) \ensuremath{\vdash} \coqdocvar{s2} \symbol{92}\coqdoctac{in} \coqdocvar{T2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{typing\_inversion\_abs} \coqdoctac{in} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{Hty} \coqdockw{as} [\coqdocvar{S2} [\coqdocvar{Hsub} \coqdocvar{Hty1}]].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{sub\_inversion\_arrow} \coqdoctac{in} \coqdocvar{Hsub}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{Hsub} \coqdockw{as} [\coqdocvar{U1} [\coqdocvar{U2} [\coqdocvar{Heq} [\coqdocvar{Hsub1} \coqdocvar{Hsub2}]]]].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{Heq}; \coqdoctac{subst}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Context Invariance}



 The context invariance lemma follows the same pattern as in the
    pure STLC. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{appears\_free\_in} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tvar} \coqdocvar{x})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{y} \ensuremath{\not=} \coqdocvar{x}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if3} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t3} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{appears\_free\_in}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{context\_invariance} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{Gamma'} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Gamma'} \coqdocvar{x})  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma'} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{Gamma'} \coqdocvar{Heqv}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}... \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Heqv}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}... \coqdoctac{apply} \coqdocvar{IHhas\_type}. \coqdoctac{intros} \coqdocvar{x0} \coqdocvar{Hafi}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}. \coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{x0})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_If}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{free\_in\_context} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}, \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma} \coqdocvar{Hafi} \coqdocvar{Htyp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp};\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{Hafi}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{IHHtyp} \coqdocvar{H4}) \coqdockw{as} [\coqdocvar{T} \coqdocvar{Hctx}]. \coqdoctac{\ensuremath{\exists}} \coqdocvar{T}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_false\_iff} \coqdoctac{in} \coqdocvar{H2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H2} \coqdoctac{in} \coqdocvar{Hctx}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Substitution}



 The \textit{substitution lemma} is proved along the same lines as
    for the pure STLC.  The only significant change is that there are
    several places where, instead of the built-in \coqdoctac{inversion} tactic,
    we need to use the inversion lemmas that we proved above to
    extract structural information from assumptions about the
    well-typedness of subterms. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{substitution\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
(\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{v} \symbol{92}\coqdoctac{in} \coqdocvar{U}   \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} ([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}) \symbol{92}\coqdoctac{in} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S} \coqdocvar{Htypt} \coqdocvar{Htypv}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{S}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{typing\_inversion\_var} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt})\coqdoceol
\coqdocindent{4.00em}
\coqdockw{as} [\coqdocvar{T} [\coqdocvar{Hctx} \coqdocvar{Hsub}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}) \coqdockw{as} [\coqdocvar{Hxy}\ensuremath{|}\coqdocvar{Hxy}]; \coqdoctac{eauto};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Hctx}; \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{context\_invariance} \coqdockw{with} \coqdocvar{empty}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hcontra}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{free\_in\_context} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{S} \coqdocvar{empty} \coqdocvar{Hcontra})\coqdoceol
\coqdocindent{4.00em}
\coqdockw{as} [\coqdocvar{T'} \coqdocvar{HT'}]...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HT'}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{typing\_inversion\_app} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt})\coqdoceol
\coqdocindent{4.00em}
\coqdockw{as} [\coqdocvar{T1} [\coqdocvar{Htypt1} \coqdocvar{Htypt2}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_App}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}. \coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{T1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{typing\_inversion\_abs} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt})\coqdoceol
\coqdocindent{3.00em}
\coqdockw{as} [\coqdocvar{T2} [\coqdocvar{Hsub} \coqdocvar{Htypt2}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Sub} \coqdockw{with} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2})... \coqdoctac{apply} \coqdocvar{T\_Abs}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}) \coqdockw{as} [\coqdocvar{Hxy}\ensuremath{|}\coqdocvar{Hxy}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{y} \coqdocvar{x})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHt}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y} \coqdocvar{z})...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_false\_iff} \coqdoctac{in} \coqdocvar{Hxy}. \coqdoctac{rewrite} \coqdocvar{Hxy}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assert} (\coqdocvar{TBool} <: \coqdocvar{S})\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{by} \coqdoctac{apply} (\coqdocvar{typing\_inversion\_true} \coqdocvar{\_} \coqdocvar{\_}  \coqdocvar{Htypt})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assert} (\coqdocvar{TBool} <: \coqdocvar{S})\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{by} \coqdoctac{apply} (\coqdocvar{typing\_inversion\_false} \coqdocvar{\_} \coqdocvar{\_}  \coqdocvar{Htypt})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} ((\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TBool}\coqdoceol
\coqdocindent{6.00em}
\ensuremath{\land} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{S}\coqdoceol
\coqdocindent{6.00em}
\ensuremath{\land} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \ensuremath{\vdash} \coqdocvar{t3} \symbol{92}\coqdoctac{in} \coqdocvar{S})\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{by} \coqdoctac{apply} (\coqdocvar{typing\_inversion\_if} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{H1} [\coqdocvar{H2} \coqdocvar{H3}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHt1} \coqdoctac{in} \coqdocvar{H1}. \coqdoctac{apply} \coqdocvar{IHt2} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{apply} \coqdocvar{IHt3} \coqdoctac{in} \coqdocvar{H3}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{TUnit} <: \coqdocvar{S})\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{by} \coqdoctac{apply} (\coqdocvar{typing\_inversion\_unit} \coqdocvar{\_} \coqdocvar{\_}  \coqdocvar{Htypt})...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Preservation}



 The proof of preservation now proceeds pretty much as in earlier
    chapters, using the substitution lemma at the appropriate point
    and again using inversion lemmas from above to extract structural
    information from typing assumptions. 

 \textit{Theorem} (Preservation): If \coqdocvariable{t}, \coqdocvariable{t'} are terms and \coqdocdefinition{T} is a type
    such that \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T} and \coqdocvariable{t} ==> \coqdocvariable{t'}, then \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t'} :
    \coqdocdefinition{T}.


    \textit{Proof}: Let \coqdocvariable{t} and \coqdocdefinition{T} be given such that \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T}.  We
    proceed by induction on the structure of this typing derivation,
    leaving \coqdocvariable{t'} general.  The cases \coqdocconstructor{T\_Abs}, \coqdocconstructor{T\_Unit}, \coqdocconstructor{T\_True}, and
    \coqdocconstructor{T\_False} cases are vacuous because abstractions and constants
    don't step.  Case \coqdocconstructor{T\_Var} is vacuous as well, since the context is
    empty.



\begin{itemize}
\item  If the final step of the derivation is by \coqdocconstructor{T\_App}, then there
       are terms \coqdocvariable{t1} and \coqdocvariable{t2} and types \coqdocvariable{T1} and \coqdocvariable{T2} such that
       \coqdocvariable{t} = \coqdocvariable{t1} \coqdocvariable{t2}, \coqdocdefinition{T} = \coqdocvariable{T2}, \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t1} : \coqdocvariable{T1} \ensuremath{\rightarrow} \coqdocvariable{T2}, and
       \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t2} : \coqdocvariable{T1}.


       By the definition of the step relation, there are three ways
       \coqdocvariable{t1} \coqdocvariable{t2} can step.  Cases \coqdocconstructor{ST\_App1} and \coqdocconstructor{ST\_App2} follow
       immediately by the induction hypotheses for the typing
       subderivations and a use of \coqdocconstructor{T\_App}.


       Suppose instead \coqdocvariable{t1} \coqdocvariable{t2} steps by \coqdocconstructor{ST\_AppAbs}.  Then \coqdocvariable{t1} =
       \symbol{92}\coqdocabbreviation{x}:\coqdocvar{S.t12} for some type \coqdocconstructor{S} and term \coqdocvariable{t12}, and \coqdocvariable{t'} =
       [\coqdocabbreviation{x}:=\coqdocvariable{t2}]\coqdocvariable{t12}.


       By lemma \coqdoclemma{abs\_arrow}, we have \coqdocvariable{T1} <: \coqdocconstructor{S} and \coqdocabbreviation{x}:\coqdocvariable{S1} \ensuremath{\vdash} \coqdocvariable{s2} : \coqdocvariable{T2}.
       It then follows by the substitution lemma
       (\coqdoclemma{substitution\_preserves\_typing}) that \coqdocdefinition{empty} \ensuremath{\vdash} [\coqdocabbreviation{x}:=\coqdocvariable{t2}]
       \coqdocvariable{t12} : \coqdocvariable{T2} as desired.



\begin{itemize}
\item  If the final step of the derivation uses rule \coqdocconstructor{T\_If}, then
        there are terms \coqdocvariable{t1}, \coqdocvariable{t2}, and \coqdocvariable{t3} such that \coqdocvariable{t} = \coqdockw{if} \coqdocvariable{t1} \coqdockw{then}
        \coqdocvariable{t2} \coqdockw{else} \coqdocvariable{t3}, with \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t1} : \coqdoclibrary{Bool} and with \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t2} :
        \coqdocdefinition{T} and \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t3} : \coqdocdefinition{T}.  Moreover, by the induction
        hypothesis, if \coqdocvariable{t1} steps to \coqdocvariable{t1'} then \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t1'} : \coqdoclibrary{Bool}.
        There are three cases to consider, depending on which rule was
        used to show \coqdocvariable{t} ==> \coqdocvariable{t'}.



\begin{itemize}
\item  If \coqdocvariable{t} ==> \coqdocvariable{t'} by rule \coqdocconstructor{ST\_If}, then \coqdocvariable{t'} = \coqdockw{if} \coqdocvariable{t1'} \coqdockw{then} \coqdocvariable{t2}
             \coqdockw{else} \coqdocvariable{t3} with \coqdocvariable{t1} ==> \coqdocvariable{t1'}.  By the induction hypothesis,
             \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t1'} : \coqdoclibrary{Bool}, and so \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t'} : \coqdocdefinition{T} by \coqdocconstructor{T\_If}.



\item  If \coqdocvariable{t} ==> \coqdocvariable{t'} by rule \coqdocconstructor{ST\_IfTrue} or \coqdocconstructor{ST\_IfFalse}, then
             either \coqdocvariable{t'} = \coqdocvariable{t2} or \coqdocvariable{t'} = \coqdocvariable{t3}, and \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t'} : \coqdocdefinition{T}
             follows by assumption.



\end{itemize}

\end{itemize}

\item  If the final step of the derivation is by \coqdocconstructor{T\_Sub}, then there
       is a type \coqdocconstructor{S} such that \coqdocconstructor{S} <: \coqdocdefinition{T} and \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocconstructor{S}.  The
       result is immediate by the induction hypothesis for the typing
       subderivation and an application of \coqdocconstructor{T\_Sub}.  \ensuremath{\Box} 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t} ==> \coqdocvar{t'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{HT}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} \coqdocvar{empty} \coqdockw{as} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{HeqGamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{HT};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{t'} \coqdocvar{HeqGamma} \coqdocvar{HE}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{abs\_arrow} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{HT1}) \coqdockw{as} [\coqdocvar{HA1} \coqdocvar{HA2}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{substitution\_preserves\_typing} \coqdockw{with} \coqdocvar{T}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Records, via Products and Top}



 This formalization of the STLC with subtyping omits record
    types for brevity.  If we want to deal with them more seriously,
    we have two choices.


    First, we can treat them as part of the core language, writing
    down proper syntax, typing, and subtyping rules for them.  Chapter
    \coqdoclibrary{RecordSub} shows how this extension works.


    On the other hand, if we are treating them as a derived form that
    is desugared in the parser, then we shouldn't need any new rules:
    we should just check that the existing rules for subtyping product
    and \coqdocvar{Unit} types give rise to reasonable rules for record
    subtyping via this encoding. To do this, we just need to make one
    small change to the encoding described earlier: instead of using
    \coqdocvar{Unit} as the base case in the encoding of tuples and the ``don't
    care'' placeholder in the encoding of records, we use \coqdocvar{Top}.  So:


    \{a:Nat, b:Nat\} ----> \{Nat,Nat\}       i.e., (Nat,(Nat,Top))
    \{c:Nat, a:Nat\} ----> \{Nat,Top,Nat\}   i.e., (Nat,(Top,(Nat,Top)))


    The encoding of record values doesn't change at all.  It is
    easy (and instructive) to check that the subtyping rules above are
    validated by the encoding. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Exercises}



\paragraph{Exercise: 2 starsM (variations)}

 Each part of this problem suggests a different way of changing the
    definition of the STLC with Unit and subtyping.  (These changes
    are not cumulative: each part starts from the original language.)
    In each part, list which properties (Progress, Preservation, both,
    or neither) become false.  If a property becomes false, give a
    counterexample.



\begin{itemize}
\item  Suppose we add the following typing rule:


                            Gamma |- t : S1->S2 
                    S1 <: T1     T1 <: S1      S2 <: T2

\begin{itemize}
\item ----------------------------------    (T\_Funny1)
                            Gamma |- t : T1->T2

\end{itemize}

\end{itemize}





\begin{itemize}
\item  Suppose we add the following reduction rule:



\begin{itemize}
\item -------------------         (ST\_Funny21) 

\end{itemize}
                             unit ==> (\symbol{92}x:Top. x)

\end{itemize}





\begin{itemize}
\item  Suppose we add the following subtyping rule:



\begin{itemize}
\item ---------------          (S\_Funny3) 

\end{itemize}
                               Unit <: Top->Top

\end{itemize}





\begin{itemize}
\item  Suppose we add the following subtyping rule:



\begin{itemize}
\item ---------------          (S\_Funny4) 

\end{itemize}
                               Top->Top <: Unit

\end{itemize}





\begin{itemize}
\item  Suppose we add the following reduction rule:



\begin{itemize}
\item --------------------      (ST\_Funny5) 

\end{itemize}
                             (unit t) ==> (t unit)

\end{itemize}





\begin{itemize}
\item  Suppose we add the same reduction rule \textit{and} a new typing rule:



\begin{itemize}
\item --------------------       (ST\_Funny5) 

\end{itemize}
                             (unit t) ==> (t unit)



\begin{itemize}
\item -----------------------      (T\_Funny6) 

\end{itemize}
                           empty |- unit : Top->Top

\end{itemize}





\begin{itemize}
\item  Suppose we \textit{change} the arrow subtyping rule to:


                          S1 <: T1 S2 <: T2

\begin{itemize}
\item ----------------              (S\_Arrow') 

\end{itemize}
                          S1->S2 <: T1->T2

\end{itemize}




\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Exercise: Adding Products}



\paragraph{Exercise: 4 stars (products)}

 Adding pairs, projections, and product types to the system we have
    defined is a relatively straightforward matter.  Carry out this
    extension:



\begin{itemize}
\item  Below, we've added constructors for pairs, first and second
      projections, and product types to the definitions of \coqdocinductive{ty} and
      \coqdocinductive{tm}.



\item  Copy the definitions of the substitution function and value
      relation from above and extend them as in chapter
      \coqdocvar{MoreSTLC} to include products.



\item  Similarly, copy and extend the operational semantics with the
      same reduction rules as in chapter \coqdocvar{MoreSTLC}.



\item  (Copy and) extend the subtyping relation with this rule:


                        S1 <: T1 S2 <: T2

\begin{itemize}
\item -------------------- (Sub\_Prod) 

\end{itemize}
                        S1 * S2 <: T1 * T2



\item  Extend the typing relation with the same rules for pairs and
      projections as in chapter \coqdocvar{MoreSTLC}.



\item  Extend the proofs of progress, preservation, and all their
      supporting lemmas to deal with the new constructs.  (You'll also
      need to add a couple of completely new lemmas.) 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{ProductExtension}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TTop}   : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBool}  : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBase}  : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TUnit}  : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TProd} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tunit} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpair} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfst} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsnd} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t} ==> \coqdocvar{t'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{ProductExtension}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-12-20 13:03:18 -0500 (Tue, 20 Dec 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Typechecking}{Library }{Top.Typechecking}

\begin{coqdoccode}
\end{coqdoccode}
\section{Typechecking: A Typechecker for STLC}



 The \coqdocinductive{has\_type} relation of the STLC defines what it means for a
    term to belong to a type (in some context).  But it doesn't, by
    itself, tell us how to \textit{check} whether or not a term is well
    typed.


    Fortunately, the rules defining \coqdocinductive{has\_type} are \textit{syntax directed}
    -- that is, for every syntactic form of the language, there is
    just one rule that can be used to give a type to terms of that
    form.  This makes it straightforward to translate the typing rules
    into clauses of a typechecking \textit{function} that takes a term and a
    context and either returns the term's type or else signals that
    the term is not typable.  \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Bool.Bool}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Stlc}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{STLCChecker}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{STLC}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Comparing Types}



 First, we need a function to compare two types for equality... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{beq\_ty} (\coqdocvar{T1} \coqdocvar{T2}:\coqdocvar{ty}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{T1},\coqdocvar{T2} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBool}, \coqdocvar{TBool} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12}, \coqdocvar{TArrow} \coqdocvar{T21} \coqdocvar{T22} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{andb} (\coqdocvar{beq\_ty} \coqdocvar{T11} \coqdocvar{T21}) (\coqdocvar{beq\_ty} \coqdocvar{T12} \coqdocvar{T22})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_},\coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
... and we need to establish the usual two-way connection between
    the boolean result returned by \coqdocdefinition{beq\_ty} and the logical
    proposition that its inputs are equal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{beq\_ty\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_ty} \coqdocvar{T1} \coqdocvar{T1} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T1}. \coqdoctac{induction} \coqdocvar{T1}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{IHT1\_1}. \coqdoctac{rewrite} \coqdocvar{IHT1\_2}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{beq\_ty\_\_eq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_ty} \coqdocvar{T1} \coqdocvar{T2} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{T1} = \coqdocvar{T2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T1}. \coqdoctac{induction} \coqdocvar{T1}; \coqdoctac{intros} \coqdocvar{T2} \coqdocvar{Hbeq}; \coqdoctac{destruct} \coqdocvar{T2}; \coqdoctac{inversion} \coqdocvar{Hbeq}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{andb\_true\_iff} \coqdoctac{in} \coqdocvar{H0}. \coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{Hbeq1} \coqdocvar{Hbeq2}].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHT1\_1} \coqdoctac{in} \coqdocvar{Hbeq1}. \coqdoctac{apply} \coqdocvar{IHT1\_2} \coqdoctac{in} \coqdocvar{Hbeq2}. \coqdoctac{subst}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{The Typechecker}



 The typechecker works by walking over the structure of the given
    term, returning either \coqdocconstructor{Some} \coqdocdefinition{T} or \coqdocconstructor{None}.  Each time we make a
    recursive call to find out the types of the subterms, we need to
    pattern-match on the results to make sure that they are not
    \coqdocconstructor{None}.  Also, in the \coqdocconstructor{tapp} case, we use pattern matching to
    extract the left- and right-hand sides of the function's arrow
    type (and fail if the type of the function is not \coqdocconstructor{TArrow} \coqdocvariable{T11} \coqdocvariable{T12}
    for some \coqdocvariable{T1} and \coqdocvariable{T2}). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{type\_check} (\coqdocvar{Gamma}:\coqdockw{context}) (\coqdocvar{t}:\coqdocvar{tm}) : \coqdocvar{option} \coqdocvar{ty} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} \coqdocvar{x} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \coqdocvar{x}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{type\_check} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11}) \coqdocvar{t12} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{T12} \ensuremath{\Rightarrow} \coqdocvar{Some} (\coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t1}, \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t2} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{Some} (\coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12}),\coqdocvar{Some} \coqdocvar{T2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{if} \coqdocvar{beq\_ty} \coqdocvar{T11} \coqdocvar{T2} \coqdockw{then} \coqdocvar{Some} \coqdocvar{T12} \coqdockw{else} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_},\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Some} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Some} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} \coqdocvar{guard} \coqdocvar{t} \coqdocvar{f} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{guard} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{TBool} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t}, \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{f} \coqdockw{with}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{T1}, \coqdocvar{Some} \coqdocvar{T2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{7.00em}
\coqdockw{if} \coqdocvar{beq\_ty} \coqdocvar{T1} \coqdocvar{T2} \coqdockw{then} \coqdocvar{Some} \coqdocvar{T1} \coqdockw{else} \coqdocvar{None}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdocvar{\_},\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Properties}



 To verify that this typechecking algorithm is correct, we show
    that it is \textit{sound} and \textit{complete} for the original \coqdocinductive{has\_type}
    relation -- that is, \coqdocdefinition{type\_check} and \coqdocinductive{has\_type} define the same
    partial function. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{type\_checking\_sound} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{t}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{T} \coqdocvar{Htc}; \coqdoctac{inversion} \coqdocvar{Htc}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t1}) \coqdockw{as} \coqdocvar{TO1}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t2}) \coqdockw{as} \coqdocvar{TO2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{TO1} \coqdockw{as} [\coqdocvar{T1}|]; \coqdoctac{try} \coqdocvar{solve\_by\_invert};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{T1} \coqdockw{as} [|\coqdocvar{T11} \coqdocvar{T12}]; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{TO2} \coqdockw{as} [\coqdocvar{T2}|]; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_ty} \coqdocvar{T11} \coqdocvar{T2}) \coqdocvar{eqn}: \coqdocvar{Heqb};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{beq\_ty\_\_eq} \coqdoctac{in} \coqdocvar{Heqb}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}. \coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{T1}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{y} \coqdocvar{T1}) \coqdockw{as} \coqdocvar{G'}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{type\_check} \coqdocvar{G'} \coqdocvar{t0}) \coqdockw{as} \coqdocvar{TO2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{TO2}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t1}) \coqdockw{as} \coqdocvar{TOc}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t2}) \coqdockw{as} \coqdocvar{TO1}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t3}) \coqdockw{as} \coqdocvar{TO2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{TOc} \coqdockw{as} [\coqdocvar{Tc}|]; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{Tc}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{TO1} \coqdockw{as} [\coqdocvar{T1}|]; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{TO2} \coqdockw{as} [\coqdocvar{T2}|]; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_ty} \coqdocvar{T1} \coqdocvar{T2}) \coqdocvar{eqn}:\coqdocvar{Heqb};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{beq\_ty\_\_eq} \coqdoctac{in} \coqdocvar{Heqb}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0}. \coqdoctac{subst}. \coqdoctac{subst}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{type\_checking\_complete} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t} = \coqdocvar{Some} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hty}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{rewrite} \coqdocvar{IHHty}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{IHHty1}. \coqdoctac{rewrite} \coqdocvar{IHHty2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} (\coqdocvar{beq\_ty\_refl} \coqdocvar{T11})...\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{rewrite} \coqdocvar{IHHty1}. \coqdoctac{rewrite} \coqdocvar{IHHty2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{IHHty3}. \coqdoctac{rewrite} (\coqdocvar{beq\_ty\_refl} \coqdocvar{T})...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{STLCChecker}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Exercises}



\paragraph{Exercise: 5 stars (typechecker\_extensions)}

 In this exercise we'll extend the typechecker to deal with the
    extended features discussed in chapter \coqdoclibrary{MoreStlc}.  Your job
    is to fill in the omitted cases in the following. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{TypecheckerExtensions}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{MoreStlc}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{STLCExtended}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{beq\_ty} (\coqdocvar{T1} \coqdocvar{T2}: \coqdocvar{ty}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{T1},\coqdocvar{T2} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TNat}, \coqdocvar{TNat} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TUnit}, \coqdocvar{TUnit} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12}, \coqdocvar{TArrow} \coqdocvar{T21} \coqdocvar{T22} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{andb} (\coqdocvar{beq\_ty} \coqdocvar{T11} \coqdocvar{T21}) (\coqdocvar{beq\_ty} \coqdocvar{T12} \coqdocvar{T22})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TProd} \coqdocvar{T11} \coqdocvar{T12}, \coqdocvar{TProd} \coqdocvar{T21} \coqdocvar{T22} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{andb} (\coqdocvar{beq\_ty} \coqdocvar{T11} \coqdocvar{T21}) (\coqdocvar{beq\_ty} \coqdocvar{T12} \coqdocvar{T22})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TSum} \coqdocvar{T11} \coqdocvar{T12}, \coqdocvar{TSum} \coqdocvar{T21} \coqdocvar{T22} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{andb} (\coqdocvar{beq\_ty} \coqdocvar{T11} \coqdocvar{T21}) (\coqdocvar{beq\_ty} \coqdocvar{T12} \coqdocvar{T22})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TList} \coqdocvar{T11}, \coqdocvar{TList} \coqdocvar{T21} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beq\_ty} \coqdocvar{T11} \coqdocvar{T21}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_},\coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{beq\_ty\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_ty} \coqdocvar{T1} \coqdocvar{T1} = \coqdocvar{true}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T1}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{T1}; \coqdoctac{simpl};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{reflexivity};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{rewrite} \coqdocvar{IHT1\_1}; \coqdoctac{rewrite} \coqdocvar{IHT1\_2}; \coqdoctac{reflexivity});\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{rewrite} \coqdocvar{IHT1}; \coqdoctac{reflexivity}). \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{beq\_ty\_\_eq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beq\_ty} \coqdocvar{T1} \coqdocvar{T2} = \coqdocvar{true} \ensuremath{\rightarrow} \coqdocvar{T1} = \coqdocvar{T2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T1}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{T1}; \coqdoctac{intros} \coqdocvar{T2} \coqdocvar{Hbeq}; \coqdoctac{destruct} \coqdocvar{T2}; \coqdoctac{inversion} \coqdocvar{Hbeq};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{reflexivity};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{rewrite} \coqdocvar{andb\_true\_iff} \coqdoctac{in} \coqdocvar{H0}; \coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{Hbeq1} \coqdocvar{Hbeq2}];\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{apply} \coqdocvar{IHT1\_1} \coqdoctac{in} \coqdocvar{Hbeq1}; \coqdoctac{apply} \coqdocvar{IHT1\_2} \coqdoctac{in} \coqdocvar{Hbeq2}; \coqdoctac{subst}; \coqdoctac{auto});\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{apply} \coqdocvar{IHT1} \coqdoctac{in} \coqdocvar{Hbeq}; \coqdoctac{subst}; \coqdoctac{auto}).\coqdoceol
\coqdocindent{0.50em}
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{type\_check} (\coqdocvar{Gamma}:\coqdockw{context}) (\coqdocvar{t}:\coqdocvar{tm}) : \coqdocvar{option} \coqdocvar{ty} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} \coqdocvar{x} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \coqdocvar{x}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{type\_check} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11}) \coqdocvar{t12} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{T12} \ensuremath{\Rightarrow} \coqdocvar{Some} (\coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t1}, \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t2} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{Some} (\coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12}),\coqdocvar{Some} \coqdocvar{T2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{if} \coqdocvar{beq\_ty} \coqdocvar{T11} \coqdocvar{T2} \coqdockw{then} \coqdocvar{Some} \coqdocvar{T12} \coqdockw{else} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_},\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tnat} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Some} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsucc} \coqdocvar{t1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t1} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{TNat} \ensuremath{\Rightarrow} \coqdocvar{Some} \coqdocvar{TNat}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpred} \coqdocvar{t1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t1} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{TNat} \ensuremath{\Rightarrow} \coqdocvar{Some} \coqdocvar{TNat}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t1}, \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t2} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{TNat}, \coqdocvar{Some} \coqdocvar{TNat} \ensuremath{\Rightarrow} \coqdocvar{Some} \coqdocvar{TNat}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_},\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif0} \coqdocvar{guard} \coqdocvar{t} \coqdocvar{f} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{guard} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{TNat} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t}, \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{f} \coqdockw{with}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{T1}, \coqdocvar{Some} \coqdocvar{T2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{7.00em}
\coqdockw{if} \coqdocvar{beq\_ty} \coqdocvar{T1} \coqdocvar{T2} \coqdockw{then} \coqdocvar{Some} \coqdocvar{T1} \coqdockw{else} \coqdocvar{None}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdocvar{\_},\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tlcase} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{x21} \coqdocvar{x22} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t0} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{Some} (\coqdocvar{TList} \coqdocvar{T}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{match} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t1},\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{type\_check} (\coqdocvar{update} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x22} (\coqdocvar{TList} \coqdocvar{T})) \coqdocvar{x21} \coqdocvar{T}) \coqdocvar{t2} \coqdockw{with}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{T1'}, \coqdocvar{Some} \coqdocvar{T2'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{7.00em}
\coqdockw{if} \coqdocvar{beq\_ty} \coqdocvar{T1'} \coqdocvar{T2'} \coqdockw{then} \coqdocvar{Some} \coqdocvar{T1'} \coqdockw{else} \coqdocvar{None}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdocvar{\_},\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}  \coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t}) \coqdockw{as} \coqdocvar{TO};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{TO} \coqdockw{as} [\coqdocvar{T}|]; \coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdocvar{solve\_by\_invert}; \coqdoctac{try} (\coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{eauto}); \coqdoctac{try} (\coqdoctac{subst}; \coqdoctac{eauto}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{fully\_invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} \coqdocvar{T1} \coqdocvar{T2} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{TX} := \coqdoctac{fresh} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t}) \coqdockw{as} \coqdocvar{TO};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{TO} \coqdockw{as} [\coqdocvar{TX}|]; \coqdoctac{try} \coqdocvar{solve\_by\_invert};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{TX} \coqdockw{as} [\coqdocvar{T1} \coqdocvar{T2}\ensuremath{|} \ensuremath{|} \ensuremath{|} \coqdocvar{T1} \coqdocvar{T2}\ensuremath{|} \coqdocvar{T1} \coqdocvar{T2}\ensuremath{|} \coqdocvar{T1}];\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdocvar{solve\_by\_invert}; \coqdoctac{try} (\coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{eauto}); \coqdoctac{try} (\coqdoctac{subst}; \coqdoctac{eauto}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{case\_equality} \coqdocvar{S} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_ty} \coqdocvar{S} \coqdocvar{T}) \coqdocvar{eqn}: \coqdocvar{Heqb};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{apply} \coqdocvar{beq\_ty\_\_eq} \coqdoctac{in} \coqdocvar{Heqb}; \coqdoctac{subst}; \coqdoctac{subst}; \coqdoctac{eauto}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{type\_checking\_sound} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{t}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{T} \coqdocvar{Htc}; \coqdoctac{inversion} \coqdocvar{Htc}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fully\_invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T1} \coqdocvar{T11} \coqdocvar{T12}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t2} \coqdocvar{T2}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{case\_equality} \coqdocvar{T11} \coqdocvar{T2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{x}. \coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{T1}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T1}) \coqdockw{as} \coqdocvar{Gamma'}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{invert\_typecheck} \coqdocvar{Gamma'} \coqdocvar{t0} \coqdocvar{T0}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{t1}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fully\_invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T1} \coqdocvar{T11} \coqdocvar{T12}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{t1}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fully\_invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T1} \coqdocvar{T11} \coqdocvar{T12}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fully\_invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T1} \coqdocvar{T11} \coqdocvar{T12}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fully\_invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t2} \coqdocvar{T2} \coqdocvar{T21} \coqdocvar{T12}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fully\_invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T1} \coqdocvar{T11} \coqdocvar{T12}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t2} \coqdocvar{T2}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t3} \coqdocvar{T3}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{case\_equality} \coqdocvar{T2} \coqdocvar{T3}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{x31}. \coqdoctac{rename} \coqdocvar{i0} \coqdocvar{into} \coqdocvar{x32}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{fully\_invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T1} \coqdocvar{T11} \coqdocvar{T12}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{invert\_typecheck} \coqdocvar{Gamma} \coqdocvar{t2} \coqdocvar{T2}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{update} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x32} (\coqdocvar{TList} \coqdocvar{T11})) \coqdocvar{x31} \coqdocvar{T11}) \coqdockw{as} \coqdocvar{Gamma'2}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{invert\_typecheck} \coqdocvar{Gamma'2} \coqdocvar{t3} \coqdocvar{T3}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{case\_equality} \coqdocvar{T2} \coqdocvar{T3}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{type\_checking\_complete} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{type\_check} \coqdocvar{Gamma} \coqdocvar{t} = \coqdocvar{Some} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hty}; \coqdoctac{simpl};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{rewrite} \coqdocvar{IHHty});\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{rewrite} \coqdocvar{IHHty1});\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{rewrite} \coqdocvar{IHHty2});\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{rewrite} \coqdocvar{IHHty3});\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{rewrite} (\coqdocvar{beq\_ty\_refl} \coqdocvar{T})); \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{rewrite} (\coqdocvar{beq\_ty\_refl} \coqdocvar{T1})); \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{rewrite} (\coqdocvar{beq\_ty\_refl} \coqdocvar{T2})); \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Admitted}. \coqdocnoindent
\coqdockw{End} \coqdocvar{TypecheckerExtensions}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars, optional (stlc\_step\_function)}

 Above, we showed how to write a typechecking function and prove it
    sound and complete for the typing relation.  Do the same for the
    operational semantics -- i.e., write a function \coqdocvar{stepf} of type
    \coqdocinductive{tm} \ensuremath{\rightarrow} \coqdocinductive{option} \coqdocinductive{tm} and prove that it is sound and complete with
    respect to \coqdocinductive{step} from chapter \coqdoclibrary{MoreStlc}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{StepFunction}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{TypecheckerExtensions}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{StepFunction}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars, optional (stlc\_impl)}

 Using the Imp parser described in the \coqdoclibrary{ImpParser} chapter as
    a guide, build a parser for extended Stlc programs.  Combine it
    with the typechecking and stepping functions from above to yield a
    complete typechecker and interpreter for this language. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{StlcImpl}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{StepFunction}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{StlcImpl}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

 $Date: 2016-12-01 22:35:27 -0500 (Thu, 01 Dec 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Records}{Library }{Top.Records}

\begin{coqdoccode}
\end{coqdoccode}
\section{Records: Adding Records to STLC}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Stlc}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Adding Records}



 We saw in chapter \coqdoclibrary{MoreStlc} how records can be treated as just
    syntactic sugar for nested uses of products.  This is OK for
    simple examples, but the encoding is informal (in reality, if we
    actually treated records this way, it would be carried out in the
    parser, which we are eliding here), and anyway it is not very
    efficient.  So it is also interesting to see how records can be
    treated as first-class citizens of the language.  This chapter
    shows how.


    Recall the informal definitions we gave before: 



    Syntax:


       t ::=                          Terms:
           | \{i1=t1, ..., in=tn\}         record
           | t.i                         projection
           | ...


       v ::=                          Values:
           | \{i1=v1, ..., in=vn\}         record value
           | ...


       T ::=                          Types:
           | \{i1:T1, ..., in:Tn\}         record type
           | ...


   Reduction:


                                 ti ==> ti'                            (ST\_Rcd)
\par
\noindent\hrulefill\par
\noindent{}
    \{i1=v1, ..., im=vm, in=tn, ...\} ==> \{i1=v1, ..., im=vm, in=tn', ...\}


                                 t1 ==> t1'
\par
\noindent\hrulefill\par
\noindent{}                        (ST\_Proj1)
                               t1.i ==> t1'.i
\par
\noindent\hrulefill\par
\noindent{}                (ST\_ProjRcd)
                          \{..., i=vi, ...\}.i ==> vi


   Typing:


               Gamma |- t1 : T1     ...     Gamma |- tn : Tn
\par
\noindent\hrulefill\par
\noindent{}         (T\_Rcd)
             Gamma |- \{i1=t1, ..., in=tn\} : \{i1:T1, ..., in:Tn\}


                       Gamma |- t : \{..., i:Ti, ...\}
\par
\noindent\hrulefill\par
\noindent{}                   (T\_Proj)
                             Gamma |- t.i : Ti
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Formalizing Records}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{STLCExtendedRecords}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Syntax and Operational Semantics}



 The most obvious way to formalize the syntax of record types would
    be this: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{FirstTry}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{alist} (\coqdocvar{X} : \coqdockw{Type}) := \coqdocvar{list} (\coqdocvar{id} \ensuremath{\times} \coqdocvar{X}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBase}     : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow}    : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TRcd}      : (\coqdocvar{alist} \coqdocvar{ty}) \ensuremath{\rightarrow} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Unfortunately, we encounter here a limitation in Coq: this type
    does not automatically give us the induction principle we expect:
    the induction hypothesis in the \coqdocconstructor{TRcd} case doesn't give us
    any information about the \coqdocinductive{ty} elements of the list, making it
    useless for the proofs we want to do.  \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{FirstTry}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It is possible to get a better induction principle out of Coq, but
    the details of how this is done are not very pretty, and the
    principle we obtain is not as intuitive to use as the ones Coq
    generates automatically for simple \coqdockw{Inductive} definitions.


    Fortunately, there is a different way of formalizing records that
    is, in some ways, even simpler and more natural: instead of using
    the standard Coq \coqdocinductive{list} type, we can essentially incorporate its
    constructors (``nil'' and ``cons'') in the syntax of our types. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBase} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TRNil} : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TRCons} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Similarly, at the level of terms, we have constructors \coqdocconstructor{trnil},
    for the empty record, and \coqdocconstructor{trcons}, which adds a single field to
    the front of a list of fields. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tproj} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{trnil} :  \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{trcons} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Some examples... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{a} := (\coqdocvar{Id} "a").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{f} := (\coqdocvar{Id} "f").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{g} := (\coqdocvar{Id} "g").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{l} := (\coqdocvar{Id} "l").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{A} := (\coqdocvar{TBase} (\coqdocvar{Id} "A")).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{B} := (\coqdocvar{TBase} (\coqdocvar{Id} "B")).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{k} := (\coqdocvar{Id} "k").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{i1} := (\coqdocvar{Id} "i1").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{i2} := (\coqdocvar{Id} "i2").\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\{ \coqdocabbreviation{i1}:\coqdocabbreviation{A} \} \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\{ \coqdocabbreviation{i1}:\coqdocabbreviation{A}\ensuremath{\rightarrow}\coqdocabbreviation{B}, \coqdocabbreviation{i2}:\coqdocabbreviation{A} \} \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Well-Formedness}



 One issue with generalizing the abstract syntax for records from
    lists to the nil/cons presentation is that it introduces the
    possibility of writing strange types like this... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{weird\_type} := \coqdocvar{TRCons} \coqdocvar{X} \coqdocvar{A} \coqdocvar{B}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
where the ``tail'' of a record type is not actually a record type! 

 We'll structure our typing judgement so that no ill-formed types
    like \coqdocdefinition{weird\_type} are ever assigned to terms.  To support this, we
    define predicates \coqdocinductive{record\_ty} and \coqdocinductive{record\_tm}, which identify
    record types and terms, and \coqdocinductive{well\_formed\_ty} which rules out the
    ill-formed types. 

 First, a type is a record type if it is built with just \coqdocconstructor{TRNil}
    and \coqdocconstructor{TRCons} at the outermost level. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{record\_ty} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{RTnil} :\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{record\_ty} \coqdocvar{TRNil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{RTcons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{record\_ty} (\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
With this, we can define well-formed types. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{well\_formed\_ty} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wfTBase} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} (\coqdocvar{TBase} \coqdocvar{i})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wfTArrow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wfTRNil} :\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{TRNil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wfTRCons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{record\_ty} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} (\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{record\_ty} \coqdocvar{well\_formed\_ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that \coqdocinductive{record\_ty} and \coqdocinductive{record\_tm} are not recursive -- they
    just check the outermost constructor.  The \coqdocinductive{well\_formed\_ty}
    property, on the other hand, verifies that the whole type is well
    formed in the sense that the tail of every record (the second
    argument to \coqdocconstructor{TRCons}) is a record.


    Of course, we should also be concerned about ill-formed terms, not
    just types; but typechecking can rules those out without the help
    of an extra \coqdocvar{well\_formed\_tm} definition because it already
    examines the structure of terms.  All we need is an analog of
    \coqdocinductive{record\_ty} saying that a term is a record term if it is built
    with \coqdocconstructor{trnil} and \coqdocconstructor{trcons}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{record\_tm} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{rtnil} :\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{record\_tm} \coqdocvar{trnil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{rtcons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{record\_tm} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{t2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{record\_tm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Substitution}



 Substitution extends easily. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{subst} (\coqdocvar{x}:\coqdocvar{id}) (\coqdocvar{s}:\coqdocvar{tm}) (\coqdocvar{t}:\coqdocvar{tm}) : \coqdocvar{tm} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} \coqdocvar{y} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{s} \coqdockw{else} \coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T} \coqdocvar{t1} \ensuremath{\Rightarrow} \coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T}\coqdoceol
\coqdocindent{10.50em}
(\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{t1} \coqdockw{else} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow} \coqdocvar{tapp} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tproj} \coqdocvar{t1} \coqdocvar{i} \ensuremath{\Rightarrow} \coqdocvar{tproj} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) \coqdocvar{i}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{trnil} \ensuremath{\Rightarrow} \coqdocvar{trnil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{tr1} \ensuremath{\Rightarrow} \coqdocvar{trcons} \coqdocvar{i} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{tr1})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'[' x ':=' s ']' t" := (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t}) (\coqdoctac{at} \coqdockw{level} 20).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Reduction}



 A record is a value if all of its fields are. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_rnil} : \coqdocvar{value} \coqdocvar{trnil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_rcons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{v1} \coqdocvar{vr},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{vr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{v1} \coqdocvar{vr}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{value}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To define reduction, we'll need a utility function for extracting
    one field from record term: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{tlookup} (\coqdocvar{i}:\coqdocvar{id}) (\coqdocvar{tr}:\coqdocvar{tm}) : \coqdocvar{option} \coqdocvar{tm} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{tr} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{trcons} \coqdocvar{i'} \coqdocvar{t} \coqdocvar{tr'} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{i'} \coqdockw{then} \coqdocvar{Some} \coqdocvar{t} \coqdockw{else} \coqdocvar{tlookup} \coqdocvar{i} \coqdocvar{tr'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdocinductive{step} function uses this term-level lookup function in the
    projection rule. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "t1 '==>' t2" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_AppAbs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12} \coqdocvar{v2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12}) \coqdocvar{v2}) ==> ([\coqdocvar{x}:=\coqdocvar{v2}]\coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) ==> (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2}) ==> (\coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Proj1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{i},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tproj} \coqdocvar{t1} \coqdocvar{i}) ==> (\coqdocvar{tproj} \coqdocvar{t1'} \coqdocvar{i})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_ProjRcd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{tr} \coqdocvar{i} \coqdocvar{vi},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{tlookup} \coqdocvar{i} \coqdocvar{tr} = \coqdocvar{Some} \coqdocvar{vi} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tproj} \coqdocvar{tr} \coqdocvar{i}) ==> \coqdocvar{vi}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Rcd\_Head} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{tr2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{tr2}) ==> (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t1'} \coqdocvar{tr2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Rcd\_Tail} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{v1} \coqdocvar{tr2} \coqdocvar{tr2'},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{tr2} ==> \coqdocvar{tr2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{v1} \coqdocvar{tr2}) ==> (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{v1} \coqdocvar{tr2'})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "t1 '==>' t2" := (\coqdocvar{step} \coqdocvar{t1} \coqdocvar{t2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{multistep} := (\coqdocvar{multi} \coqdocvar{step}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "t1 '==>*' t2" := (\coqdocvar{multistep} \coqdocvar{t1} \coqdocvar{t2}) (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{step}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Typing}



 Next we define the typing rules.  These are nearly direct
    transcriptions of the inference rules shown above: the only
    significant difference is the use of \coqdocinductive{well\_formed\_ty}.  In the
    informal presentation we used a grammar that only allowed
    well-formed record types, so we didn't have to add a separate
    check.


    One sanity condition that we'd like to maintain is that, whenever
    \coqdocinductive{has\_type} \coqdocvariable{Gamma} \coqdocvariable{t} \coqdocdefinition{T} holds, will also be the case that
    \coqdocinductive{well\_formed\_ty} \coqdocdefinition{T}, so that \coqdocinductive{has\_type} never assigns ill-formed
    types to terms.  In fact, we prove this theorem below.  However,
    we don't want to clutter the definition of \coqdocinductive{has\_type} with
    unnecessary uses of \coqdocinductive{well\_formed\_ty}.  Instead, we place
    \coqdocinductive{well\_formed\_ty} checks only where needed: where an inductive call
    to \coqdocinductive{has\_type} won't already be checking the well-formedness of a
    type.  For example, we check \coqdocinductive{well\_formed\_ty} \coqdocdefinition{T} in the \coqdocconstructor{T\_Var}
    case, because there is no inductive \coqdocinductive{has\_type} call that would
    enforce this.  Similarly, in the \coqdocconstructor{T\_Abs} case, we require a proof
    of \coqdocinductive{well\_formed\_ty} \coqdocvariable{T11} because the inductive call to \coqdocinductive{has\_type}
    only guarantees that \coqdocvariable{T12} is well-formed. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{Tlookup} (\coqdocvar{i}:\coqdocvar{id}) (\coqdocvar{Tr}:\coqdocvar{ty}) : \coqdocvar{option} \coqdocvar{ty} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{Tr} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TRCons} \coqdocvar{i'} \coqdocvar{T} \coqdocvar{Tr'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{i'} \coqdockw{then} \coqdocvar{Some} \coqdocvar{T} \coqdockw{else} \coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{Tr'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdockw{context} := \coqdocvar{partial\_map} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "Gamma '|-' t '\symbol{92}in' T" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{has\_type} : \coqdockw{context} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tvar} \coqdocvar{x}) \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{T12} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T11} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11}) \ensuremath{\vdash} \coqdocvar{t12} \symbol{92}\coqdoctac{in} \coqdocvar{T12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12}) \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_App} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} \coqdocvar{T2}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Proj} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{i} \coqdocvar{t} \coqdocvar{Ti} \coqdocvar{Tr},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{Tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{Tr} = \coqdocvar{Some} \coqdocvar{Ti} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{tproj} \coqdocvar{t} \coqdocvar{i}) \symbol{92}\coqdoctac{in} \coqdocvar{Ti}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_RNil} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{trnil} \symbol{92}\coqdoctac{in} \coqdocvar{TRNil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_RCons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{i} \coqdocvar{t} \coqdocvar{T} \coqdocvar{tr} \coqdocvar{Tr},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tr} \symbol{92}\coqdoctac{in} \coqdocvar{Tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{record\_ty} \coqdocvar{Tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{record\_tm} \coqdocvar{tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t} \coqdocvar{tr}) \symbol{92}\coqdoctac{in} (\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{T} \coqdocvar{Tr})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "Gamma '|-' t '\symbol{92}in' T" := (\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{has\_type}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Examples}



\paragraph{Exercise: 2 stars (examples)}

 Finish the proofs below.  Feel free to use Coq's automation
    features in this proof.  However, if you are not confident about
    how the type system works, you may want to carry out the proofs
    first using the basic features (\coqdoctac{apply} instead of \coqdoctac{eapply}, in
    particular) and then perhaps compress it using automation.  Before
    starting to prove anything, make sure you understand what it is
    saying.\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_example\_2} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty} \ensuremath{\vdash}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{a} (\coqdocvar{TRCons} \coqdocvar{i1} (\coqdocvar{TArrow} \coqdocvar{A} \coqdocvar{A})\coqdoceol
\coqdocindent{11.00em}
(\coqdocvar{TRCons} \coqdocvar{i2} (\coqdocvar{TArrow} \coqdocvar{B} \coqdocvar{B})\coqdoceol
\coqdocindent{11.50em}
\coqdocvar{TRNil}))\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{tproj} (\coqdocvar{tvar} \coqdocvar{a}) \coqdocvar{i2}))\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{trcons} \coqdocvar{i1} (\coqdocvar{tabs} \coqdocvar{a} \coqdocvar{A} (\coqdocvar{tvar} \coqdocvar{a}))\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{trcons} \coqdocvar{i2} (\coqdocvar{tabs} \coqdocvar{a} \coqdocvar{B} (\coqdocvar{tvar} \coqdocvar{a}))\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{trnil}))) \symbol{92}\coqdoctac{in}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{TArrow} \coqdocvar{B} \coqdocvar{B}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_nonexample} :\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdoctac{\ensuremath{\exists}} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{update} \coqdocvar{empty} \coqdocvar{a} (\coqdocvar{TRCons} \coqdocvar{i2} (\coqdocvar{TArrow} \coqdocvar{A} \coqdocvar{A})\coqdoceol
\coqdocindent{16.00em}
\coqdocvar{TRNil})) \ensuremath{\vdash}\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{trcons} \coqdocvar{i1} (\coqdocvar{tabs} \coqdocvar{a} \coqdocvar{B} (\coqdocvar{tvar} \coqdocvar{a})) (\coqdocvar{tvar} \coqdocvar{a})) \symbol{92}\coqdoctac{in}\coqdoceol
\coqdocindent{7.50em}
\coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_nonexample\_2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{y},\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdoctac{\ensuremath{\exists}} \coqdocvar{T},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{update} \coqdocvar{empty} \coqdocvar{y} \coqdocvar{A}) \ensuremath{\vdash}\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{a} (\coqdocvar{TRCons} \coqdocvar{i1} \coqdocvar{A} \coqdocvar{TRNil})\coqdoceol
\coqdocindent{10.50em}
(\coqdocvar{tproj} (\coqdocvar{tvar} \coqdocvar{a}) \coqdocvar{i1}))\coqdoceol
\coqdocindent{9.50em}
(\coqdocvar{trcons} \coqdocvar{i1} (\coqdocvar{tvar} \coqdocvar{y}) (\coqdocvar{trcons} \coqdocvar{i2} (\coqdocvar{tvar} \coqdocvar{y}) \coqdocvar{trnil}))) \symbol{92}\coqdoctac{in}\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Properties of Typing}



 The proofs of progress and preservation for this system are
    essentially the same as for the pure simply typed lambda-calculus,
    but we need to add some technical lemmas involving records. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Well-Formedness}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{wf\_rcd\_lookup} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{T} \coqdocvar{Ti},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{T} = \coqdocvar{Some} \coqdocvar{Ti} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{Ti}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{i} \coqdocvar{T}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{T}; \coqdoctac{intros}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}. \coqdoctac{unfold} \coqdocvar{Tlookup} \coqdoctac{in} \coqdocvar{H0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{i0})...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0}. \coqdoctac{subst}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_preserves\_record\_tm} : \coqdockw{\ensuremath{\forall}} \coqdocvar{tr} \coqdocvar{tr'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{record\_tm} \coqdocvar{tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tr} ==> \coqdocvar{tr'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{record\_tm} \coqdocvar{tr'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{tr} \coqdocvar{tr'} \coqdocvar{Hrt} \coqdocvar{Hstp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{Hrt}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{Hstp}; \coqdoctac{subst}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{has\_type\_\_wf} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{well\_formed\_ty} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Htyp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{IHHtyp1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{wf\_rcd\_lookup}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Field Lookup}



 Lemma: If \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{v} : \coqdocdefinition{T} and \coqdocdefinition{Tlookup} \coqdocabbreviation{i} \coqdocdefinition{T} returns \coqdocconstructor{Some} \coqdocvariable{Ti},
     then \coqdocdefinition{tlookup} \coqdocabbreviation{i} \coqdocvariable{v} returns \coqdocconstructor{Some} \coqdocvariable{ti} for some term \coqdocvariable{ti} such
     that \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{ti} \symbol{92}\coqdoctac{in} \coqdocvariable{Ti}.


    Proof: By induction on the typing derivation \coqdocvar{Htyp}.  Since
      \coqdocdefinition{Tlookup} \coqdocabbreviation{i} \coqdocdefinition{T} = \coqdocconstructor{Some} \coqdocvariable{Ti}, \coqdocdefinition{T} must be a record type, this and
      the fact that \coqdocvariable{v} is a value eliminate most cases by inspection,
      leaving only the \coqdocconstructor{T\_RCons} case.


      If the last step in the typing derivation is by \coqdocconstructor{T\_RCons}, then
      \coqdocvariable{t} = \coqdocconstructor{trcons} \coqdocvar{i0} \coqdocvariable{t} \coqdocvariable{tr} and \coqdocdefinition{T} = \coqdocconstructor{TRCons} \coqdocvar{i0} \coqdocdefinition{T} \coqdocvariable{Tr} for some \coqdocvar{i0},
      \coqdocvariable{t}, \coqdocvariable{tr}, \coqdocdefinition{T} and \coqdocvariable{Tr}.


      This leaves two possiblities to consider - either \coqdocvar{i0} = \coqdocabbreviation{i} or
      not.



\begin{itemize}
\item  If \coqdocabbreviation{i} = \coqdocvar{i0}, then since \coqdocdefinition{Tlookup} \coqdocabbreviation{i} (\coqdocconstructor{TRCons} \coqdocvar{i0} \coqdocdefinition{T} \coqdocvariable{Tr}) = \coqdocconstructor{Some}
        \coqdocvariable{Ti} we have \coqdocdefinition{T} = \coqdocvariable{Ti}.  It follows that \coqdocvariable{t} itself satisfies
        the theorem.



\item  On the other hand, suppose \coqdocabbreviation{i} \ensuremath{\not=} \coqdocvar{i0}.  Then


        Tlookup i T = Tlookup i Tr


        and


        tlookup i t = tlookup i tr,


        so the result follows from the induction hypothesis. \ensuremath{\Box} 

\end{itemize}


    Here is the formal statement:
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{lookup\_field\_in\_value} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v} \coqdocvar{T} \coqdocvar{i} \coqdocvar{Ti},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{v} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{v} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{T} = \coqdocvar{Some} \coqdocvar{Ti} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ti}, \coqdocvar{tlookup} \coqdocvar{i} \coqdocvar{v} = \coqdocvar{Some} \coqdocvar{ti} \ensuremath{\land} \coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{ti} \symbol{92}\coqdoctac{in} \coqdocvar{Ti}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{v} \coqdocvar{T} \coqdocvar{i} \coqdocvar{Ti} \coqdocvar{Hval} \coqdocvar{Htyp} \coqdocvar{Hget}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hget}. \coqdoctac{simpl}. \coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{i0}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}. \coqdoctac{inversion} \coqdocvar{Hget}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{t}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHtyp2} \coqdockw{as} [\coqdocvar{vi} [\coqdocvar{Hgeti} \coqdocvar{Htypi}]]...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Hval}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Progress}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Ht}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{HeqGamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Ht}; \coqdoctac{intros} \coqdocvar{HeqGamma}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{left}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} ([\coqdocvar{x}:=\coqdocvar{t2}]\coqdocvar{t12})...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t2'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2'})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{lookup\_field\_in\_value} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H0} \coqdocvar{Ht} \coqdocvar{H})\coqdoceol
\coqdocindent{4.00em}
\coqdockw{as} [\coqdocvar{ti} [\coqdocvar{Hlkup} \coqdocvar{\_}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ti}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tproj} \coqdocvar{t'} \coqdocvar{i})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{left}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2}; \coqdoctac{try} \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{left}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{H2} \coqdockw{as} [\coqdocvar{tr'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t} \coqdocvar{tr'})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{H1} \coqdockw{as} [\coqdocvar{t'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t'} \coqdocvar{tr})... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Context Invariance}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{appears\_free\_in} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tvar} \coqdocvar{x})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{y} \ensuremath{\not=} \coqdocvar{x}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_proj} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{i},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tproj} \coqdocvar{t} \coqdocvar{i})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_rhead} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{i} \coqdocvar{ti} \coqdocvar{tr},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{ti} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{ti} \coqdocvar{tr})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_rtail} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{i} \coqdocvar{ti} \coqdocvar{tr},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{ti} \coqdocvar{tr}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{appears\_free\_in}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{context\_invariance} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{Gamma'} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Gamma'} \coqdocvar{x})  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma'} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{Gamma'} \coqdocvar{Heqv}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}... \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Heqv}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}... \coqdoctac{apply} \coqdocvar{IHhas\_type}. \coqdoctac{intros} \coqdocvar{y} \coqdocvar{Hafi}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}. \coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_App} \coqdockw{with} \coqdocvar{T1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_RCons}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{free\_in\_context} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}, \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma} \coqdocvar{Hafi} \coqdocvar{Htyp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp}; \coqdoctac{inversion} \coqdocvar{Hafi}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHtyp} \coqdockw{as} [\coqdocvar{T'} \coqdocvar{Hctx}]... \coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id} \coqdoctac{in} \coqdocvar{Hctx}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Preservation}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{substitution\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
(\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{v} \symbol{92}\coqdoctac{in} \coqdocvar{U}   \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Gamma} \ensuremath{\vdash} ([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}) \symbol{92}\coqdoctac{in} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S} \coqdocvar{Htypt} \coqdocvar{Htypv}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{S}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{S} \coqdocvar{Gamma} \coqdocvar{Htypt}; \coqdoctac{simpl}; \coqdoctac{inversion} \coqdocvar{Htypt}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{H0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}) \coqdockw{as} [\coqdocvar{Hxy}\ensuremath{|}\coqdocvar{Hxy}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H0}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hcontra}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{free\_in\_context} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{S} \coqdocvar{empty} \coqdocvar{Hcontra})\coqdoceol
\coqdocindent{4.00em}
\coqdockw{as} [\coqdocvar{T'} \coqdocvar{HT'}]...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT'}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}. \coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{T11}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}) \coqdockw{as} [\coqdocvar{Hxy}\ensuremath{|}\coqdocvar{Hxy}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{y} \coqdocvar{x})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHt}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y} \coqdocvar{z})...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_RCons}... \coqdoctac{inversion} \coqdocvar{H7}; \coqdoctac{subst}; \coqdoctac{simpl}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t} ==> \coqdocvar{t'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty} \ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{HT}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{HeqGamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{HT};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{t'} \coqdocvar{HeqGamma} \coqdocvar{HE}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{substitution\_preserves\_typing} \coqdockw{with} \coqdocvar{T1}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{lookup\_field\_in\_value} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H2} \coqdocvar{HT} \coqdocvar{H})\coqdoceol
\coqdocindent{3.00em}
\coqdockw{as} [\coqdocvar{vi} [\coqdocvar{Hget} \coqdocvar{Htyp}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H4} \coqdoctac{in} \coqdocvar{Hget}. \coqdoctac{inversion} \coqdocvar{Hget}. \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_RCons}... \coqdoctac{eapply} \coqdocvar{step\_preserves\_record\_tm}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{STLCExtendedRecords}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
$Date: 2016-11-29 16:09:40 -0500 (Tue, 29 Nov 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.References}{Library }{Top.References}

\begin{coqdoccode}
\end{coqdoccode}
\section{References: Typing Mutable References}



 Up to this point, we have considered a variety of \textit{pure}
    language features, including functional abstraction, basic types
    such as numbers and booleans, and structured types such as records
    and variants.  These features form the backbone of most
    programming languages -- including purely functional languages
    such as Haskell and ``mostly functional'' languages such as ML, as
    well as imperative languages such as C and object-oriented
    languages such as Java, C\#, and Scala.


    However, most practical languages also include various \textit{impure}
    features that cannot be described in the simple semantic framework
    we have used so far.  In particular, besides just yielding
    results, computation in these languages may assign to mutable
    variables (reference cells, arrays, mutable record fields, etc.);
    perform input and output to files, displays, or network
    connections; make non-local transfers of control via exceptions,
    jumps, or continuations; engage in inter-process synchronization
    and communication; and so on.  In the literature on programming
    languages, such ``side effects'' of computation are collectively
    referred to as \textit{computational effects}.


    In this chapter, we'll see how one sort of computational effect --
    mutable references -- can be added to the calculi we have studied.
    The main extension will be dealing explicitly with a \textit{store} (or
    \textit{heap}) and \textit{pointers} that name store locations.  This extension
    is fairly straightforward to define; the most interesting part is
    the refinement we need to make to the statement of the type
    preservation theorem. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Lists.List}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{ListNotations}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Definitions}



 Pretty much every programming language provides some form of
    assignment operation that changes the contents of a previously
    allocated piece of storage.  (Coq's internal language Gallina is a
    rare exception!)


    In some languages -- notably ML and its relatives -- the
    mechanisms for name-binding and those for assignment are kept
    separate.  We can have a variable \coqdocabbreviation{x} whose \textit{value} is the number
    5, or we can have a variable \coqdocabbreviation{y} whose value is a
    \textit{reference} (or \textit{pointer}) to a mutable cell whose current
    contents is 5.  These are different things, and the difference
    is visible to the programmer.  We can add \coqdocabbreviation{x} to another number,
    but not assign to it.  We can use \coqdocabbreviation{y} to assign a new value to the
    cell that it points to (by writing \coqdocabbreviation{y}:=84), but we cannot use \coqdocabbreviation{y}
    directly as an argument to an operation like +.  Instead, we
    must explicitly \textit{dereference} it, writing !\coqdocabbreviation{y} to obtain its
    current contents.


    In most other languages -- in particular, in all members of the C
    family, including Java -- \textit{every} variable name refers to a
    mutable cell, and the operation of dereferencing a variable to
    obtain its current contents is implicit.


    For purposes of formal study, it is useful to keep these
    mechanisms separate.  The development in this chapter will closely
    follow ML's model.  Applying the lessons learned here to C-like
    languages is a straightforward matter of collapsing some
    distinctions and rendering some operations such as dereferencing
    implicit instead of explicit. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Syntax}



 In this chapter, we study adding mutable references to the
    simply-typed lambda calculus with natural numbers. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{STLCRef}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The basic operations on references are \textit{allocation},
    \textit{dereferencing}, and \textit{assignment}.



\begin{itemize}
\item  To allocate a reference, we use the \coqdocvar{ref} operator, providing
         an initial value for the new cell.  For example, \coqdocvar{ref} 5
         creates a new cell containing the value 5, and reduces to
         a reference to that cell.



\item  To read the current value of this cell, we use the
         dereferencing operator !; for example, !(\coqdocvar{ref} 5) reduces
         to 5.



\item  To change the value stored in a cell, we use the assignment
         operator.  If \coqdocdefinition{r} is a reference, \coqdocdefinition{r} := 7 will store the
         value 7 in the cell referenced by \coqdocdefinition{r}. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Types}



 We start with the simply typed lambda calculus over the
    natural numbers. Besides the base natural number type and arrow
    types, we need to add two more types to deal with
    references. First, we need the \textit{unit type}, which we will use as
    the result type of an assignment operation.  We then add
    \textit{reference types}. 

 If \coqdocdefinition{T} is a type, then \coqdocvar{Ref} \coqdocdefinition{T} is the type of references to
    cells holding values of type \coqdocdefinition{T}.


      T ::= Nat
          | Unit
          | T -> T
          | Ref T
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TNat}   : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TUnit}  : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TRef}   : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Terms}



 Besides variables, abstractions, applications,
    natural-number-related terms, and \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}, we need four more sorts
    of terms in order to handle mutable references:


      t ::= ...              Terms
          | ref t              allocation
          | !t                 dereference
          | t := t             assignment
          | l                  location
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm}  : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar}    : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp}    : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs}    : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tnat}    : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsucc}   : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpred}   : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tmult}   : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif0}    : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tunit}   : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tref}    : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tderef}  : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tassign} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tloc}    : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Intuitively:

\begin{itemize}
\item  \coqdocvar{ref} \coqdocvariable{t} (formally, \coqdocconstructor{tref} \coqdocvariable{t}) allocates a new reference cell
      with the value \coqdocvariable{t} and reduces to the location of the newly
      allocated cell;



\item  !\coqdocvariable{t} (formally, \coqdocconstructor{tderef} \coqdocvariable{t}) reduces to the contents of the
      cell referenced by \coqdocvariable{t};



\item  \coqdocvariable{t1} := \coqdocvariable{t2} (formally, \coqdocconstructor{tassign} \coqdocvariable{t1} \coqdocvariable{t2}) assigns \coqdocvariable{t2} to the
      cell referenced by \coqdocvariable{t1}; and



\item  \coqdocabbreviation{l} (formally, \coqdocconstructor{tloc} \coqdocabbreviation{l}) is a reference to the cell at
      location \coqdocabbreviation{l}.  We'll discuss locations later. 
\end{itemize}


 In informal examples, we'll also freely use the extensions
    of the STLC developed in the \coqdoclibrary{MoreStlc} chapter; however, to keep
    the proofs small, we won't bother formalizing them again here.  (It
    would be easy to do so, since there are no very interesting
    interactions between those features and references.) \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Typing (Preview)}



 Informally, the typing rules for allocation, dereferencing, and
    assignment will look like this:


                           Gamma |- t1 : T1
\par
\noindent\hrulefill\par
\noindent{}                         (T\_Ref)
                       Gamma |- ref t1 : Ref T1


                        Gamma |- t1 : Ref T11
\par
\noindent\hrulefill\par
\noindent{}                         (T\_Deref)
                          Gamma |- !t1 : T11


                        Gamma |- t1 : Ref T11
                          Gamma |- t2 : T11
\par
\noindent\hrulefill\par
\noindent{}                      (T\_Assign)
                       Gamma |- t1 := t2 : Unit


    The rule for locations will require a bit more machinery, and this
    will motivate some changes to the other rules; we'll come back to
    this later. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Values and Substitution}



 Besides abstractions and numbers, we have two new types of values:
    the unit value, and locations.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_abs}  : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_nat} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tnat} \coqdocvar{n})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_unit} :\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{tunit}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_loc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tloc} \coqdocvar{l}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{value}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Extending substitution to handle the new syntax of terms is
    straightforward.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{subst} (\coqdocvar{x}:\coqdocvar{id}) (\coqdocvar{s}:\coqdocvar{tm}) (\coqdocvar{t}:\coqdocvar{tm}) : \coqdocvar{tm} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} \coqdocvar{x'}       \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x'} \coqdockw{then} \coqdocvar{s} \coqdockw{else} \coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}    \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tapp} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} \coqdocvar{x'} \coqdocvar{T} \coqdocvar{t1}  \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x'} \coqdockw{then} \coqdocvar{t} \coqdockw{else} \coqdocvar{tabs} \coqdocvar{x'} \coqdocvar{T} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tnat} \coqdocvar{n}        \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsucc} \coqdocvar{t1}      \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tsucc} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpred} \coqdocvar{t1}      \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tpred} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2}   \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tmult} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif0} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tunit}         \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tref} \coqdocvar{t1}       \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tref} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tderef} \coqdocvar{t1}     \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tderef} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tassign} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tassign} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tloc} \coqdocvar{\_}        \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'[' x ':=' s ']' t" := (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t}) (\coqdoctac{at} \coqdockw{level} 20).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Pragmatics}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Side Effects and Sequencing}



 The fact that we've chosen the result of an assignment
    expression to be the trivial value \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}} allows a nice
    abbreviation for \textit{sequencing}.  For example, we can write


       r:=succ(!r); !r


    as an abbreviation for


       (\symbol{92}x:Unit. !r) (r:=succ(!r)).


    This has the effect of reducing two expressions in order and
    returning the value of the second.  Restricting the type of the
    first expression to \coqdocvar{Unit} helps the typechecker to catch some
    silly errors by permitting us to throw away the first value only
    if it is really guaranteed to be trivial.


    Notice that, if the second expression is also an assignment, then
    the type of the whole sequence will be \coqdocvar{Unit}, so we can validly
    place it to the left of another ; to build longer sequences of
    assignments:


       r:=succ(!r); r:=succ(!r); r:=succ(!r); r:=succ(!r); !r
 Formally, we introduce sequencing as a \textit{derived form}
    \coqdocdefinition{tseq} that expands into an abstraction and an application. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{tseq} \coqdocvar{t1} \coqdocvar{t2} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tapp} (\coqdocvar{tabs} (\coqdocvar{Id} "x") \coqdocvar{TUnit} \coqdocvar{t2}) \coqdocvar{t1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{References and Aliasing}



 It is important to bear in mind the difference between the
    \textit{reference} that is bound to some variable \coqdocdefinition{r} and the \textit{cell} 
    in the store that is pointed to by this reference.


    If we make a copy of \coqdocdefinition{r}, for example by binding its value to
    another variable \coqdocdefinition{s}, what gets copied is only the \textit{reference},
    not the contents of the cell itself.


    For example, after reducing


      let r = ref 5 in
      let s = r in
      s := 82;
      (!r)+1


    the cell referenced by \coqdocdefinition{r} will contain the value 82, while the
    result of the whole expression will be 83.  The references \coqdocdefinition{r}
    and \coqdocdefinition{s} are said to be \textit{aliases} for the same cell.


    The possibility of aliasing can make programs with references
    quite tricky to reason about.  For example, the expression


      r := 5; r := !s


    assigns 5 to \coqdocdefinition{r} and then immediately overwrites it with \coqdocdefinition{s}'s
    current value; this has exactly the same effect as the single
    assignment


      r := !s


    \textit{unless} we happen to do it in a context where \coqdocdefinition{r} and \coqdocdefinition{s} are
    aliases for the same cell! \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Shared State}



 Of course, aliasing is also a large part of what makes references
    useful.  In particular, it allows us to set up ``implicit
    communication channels'' -- shared state -- between different parts
    of a program.  For example, suppose we define a reference cell and
    two functions that manipulate its contents:


      let c = ref 0 in
      let incc = \symbol{92}\_:Unit. (c := succ (!c); !c) in
      let decc = \symbol{92}\_:Unit. (c := pred (!c); !c) in
      ...


 Note that, since their argument types are \coqdocvar{Unit}, the
    arguments to the abstractions in the definitions of \coqdocvar{incc} and
    \coqdocvar{decc} are not providing any useful information to the bodies of
    these functions (using the wildcard \coqdocvar{\_} as the name of the bound
    variable is a reminder of this).  Instead, their purpose of these
    abstractions is to ``slow down'' the execution of the function
    bodies.  Since function abstractions are values, the two \coqdockw{let}s are
    executed simply by binding these functions to the names \coqdocvar{incc} and
    \coqdocvar{decc}, rather than by actually incrementing or decrementing \coqdocconstructor{c}.
    Later, each caddll to one of these functions results in its body
    being executed once and performing the appropriate mutation on
    \coqdocconstructor{c}.  Such functions are often called \textit{thunks}.


    In the context of these declarations, calling \coqdocvar{incc} results in
    changes to \coqdocconstructor{c} that can be observed by calling \coqdocvar{decc}.  For
    example, if we replace the ... with (\coqdocvar{incc} \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}; \coqdocvar{incc} \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}; \coqdocvar{decc}
    \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}), the result of the whole program will be 1. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Objects}



 We can go a step further and write a \textit{function} that creates \coqdocconstructor{c},
    \coqdocvar{incc}, and \coqdocvar{decc}, packages \coqdocvar{incc} and \coqdocvar{decc} together into a
    record, and returns this record:


      newcounter =
          \symbol{92}\_:Unit.
             let c = ref 0 in
             let incc = \symbol{92}\_:Unit. (c := succ (!c); !c) in
             let decc = \symbol{92}\_:Unit. (c := pred (!c); !c) in
             \{i=incc, d=decc\}


 Now, each time we call \coqdocvar{newcounter}, we get a new record of
    functions that share access to the same storage cell \coqdocconstructor{c}.  The
    caller of \coqdocvar{newcounter} can't get at this storage cell directly,
    but can affect it indirectly by calling the two functions.  In
    other words, we've created a simple form of \textit{object}.


      let c1 = newcounter unit in
      let c2 = newcounter unit in
      // Note that we've allocated two separate storage cells now!
      let r1 = c1.i unit in
      let r2 = c2.i unit in
      r2  // yields 1, not 2!


\paragraph{Exercise: 1 star (store\_draw)}

 Draw (on paper) the contents of the store at the point in
    execution where the first two \coqdockw{let}s have finished and the third
    one is about to begin. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{References to Compound Types}



 A reference cell need not contain just a number: the primitives
    we've defined above allow us to create references to values of any
    type, including functions.  For example, we can use references to
    functions to give an (inefficient) implementation of arrays
    of numbers, as follows.  Write \coqdocvar{NatArray} for the type
    \coqdocvar{Ref} (\coqdoclibrary{Nat}\ensuremath{\rightarrow}\coqdoclibrary{Nat}).


    Recall the \coqdocdefinition{equal} function from the \coqdoclibrary{MoreStlc} chapter:


      equal =
        fix
          (\symbol{92}eq:Nat->Nat->Bool.
             \symbol{92}m:Nat. \symbol{92}n:Nat.
               if m=0 then iszero n
               else if n=0 then false
               else eq (pred m) (pred n))


    To build a new array, we allocate a reference cell and fill
    it with a function that, when given an index, always returns 0.


      newarray = \symbol{92}\_:Unit. ref (\symbol{92}n:Nat.0)


    To look up an element of an array, we simply apply
    the function to the desired index.


      lookup = \symbol{92}a:NatArray. \symbol{92}n:Nat. (!a) n


    The interesting part of the encoding is the \coqdocdefinition{update} function.  It
    takes an array, an index, and a new value to be stored at that index, and
    does its job by creating (and storing in the reference) a new function
    that, when it is asked for the value at this very index, returns the new
    value that was given to \coqdocdefinition{update}, while on all other indices it passes the
    lookup to the function that was previously stored in the reference.


      update = \symbol{92}a:NatArray. \symbol{92}m:Nat. \symbol{92}v:Nat.
                   let oldf = !a in
                   a := (\symbol{92}n:Nat. if equal m n then v else oldf n);


    References to values containing other references can also be very
    useful, allowing us to define data structures such as mutable
    lists and trees. 

\paragraph{Exercise: 2 stars, recommended (compact\_update)}

 If we defined \coqdocdefinition{update} more compactly like this


      update = \symbol{92}a:NatArray. \symbol{92}m:Nat. \symbol{92}v:Nat.
                  a := (\symbol{92}n:Nat. if equal m n then v else (!a) n)


would it behave the same? \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Null References}



 There is one final significant difference between our
    references and C-style mutable variables: in C-like languages,
    variables holding pointers into the heap may sometimes have the
    value \coqdocvar{NULL}.  Dereferencing such a ``null pointer'' is an error,
    and results either in a clean exception (Java and C\#) or in
    arbitrary and possibly insecure behavior (C and relatives like
    C++).  Null pointers cause significant trouble in C-like
    languages: the fact that any pointer might be null means that any
    dereference operation in the program can potentially fail.


    Even in ML-like languages, there are occasionally situations where
    we may or may not have a valid pointer in our hands.  Fortunately,
    there is no need to extend the basic mechanisms of references to
    represent such situations: the sum types introduced in the
    \coqdoclibrary{MoreStlc} chapter already give us what we need.


    First, we can use sums to build an analog of the \coqdocinductive{option} types
    introduced in the \coqdoclibrary{Lists} chapter.  Define \coqdocvar{Option} \coqdocdefinition{T} to be an
    abbreviation for \coqdocvar{Unit} + \coqdocdefinition{T}.


    Then a ``nullable reference to a \coqdocdefinition{T}'' is simply an element of the
    type \coqdocvar{Option} (\coqdocvar{Ref} \coqdocdefinition{T}).  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Garbage Collection}



 A last issue that we should mention before we move on with
    formalizing references is storage \textit{de}-allocation.  We have not
    provided any primitives for freeing reference cells when they are
    no longer needed.  Instead, like many modern languages (including
    ML and Java) we rely on the run-time system to perform \textit{garbage
    collection}, automatically identifying and reusing cells that can
    no longer be reached by the program.


    This is \textit{not} just a question of taste in language design: it is
    extremely difficult to achieve type safety in the presence of an
    explicit deallocation operation.  One reason for this is the
    familiar \textit{dangling reference} problem: we allocate a cell holding
    a number, save a reference to it in some data structure, use it
    for a while, then deallocate it and allocate a new cell holding a
    boolean, possibly reusing the same storage.  Now we can have two
    names for the same storage cell -- one with type \coqdocvar{Ref} \coqdoclibrary{Nat} and the
    other with type \coqdocvar{Ref} \coqdoclibrary{Bool}. 

\paragraph{Exercise: 1 star (type\_safety\_violation)}

 Show how this can lead to a violation of type safety. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Operational Semantics}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Locations}



 The most subtle aspect of the treatment of references
    appears when we consider how to formalize their operational
    behavior.  One way to see why is to ask, ``What should be the
    \textit{values} of type \coqdocvar{Ref} \coqdocdefinition{T}?''  The crucial observation that we need
    to take into account is that reduci a \coqdocvar{ref} operator should
    \textit{do} something -- namely, allocate some storage -- and the result
    of the operation should be a reference to this storage.


    What, then, is a reference?


    The run-time store in most programming-language implementations is
    essentially just a big array of bytes.  The run-time system keeps
    track of which parts of this array are currently in use; when we
    need to allocate a new reference cell, we allocate a large enough
    segment from the free region of the store (4 bytes for integer
    cells, 8 bytes for cells storing \coqdocabbreviation{Float}s, etc.), record somewhere
    that it is being used, and return the index (typically, a 32- or
    64-bit integer) of the start of the newly allocated region.  These
    indices are references.


    For present purposes, there is no need to be quite so concrete.
    We can think of the store as an array of \textit{values}, rather than an
    array of bytes, abstracting away from the different sizes of the
    run-time representations of different values.  A reference, then,
    is simply an index into the store.  (If we like, we can even
    abstract away from the fact that these indices are numbers, but
    for purposes of formalization in Coq it is convenient to use
    numbers.)  We use the word \textit{location} instead of \textit{reference} or
    \textit{pointer} to emphasize this abstract quality.


    Treating locations abstractly in this way will prevent us from
    modeling the \textit{pointer arithmetic} found in low-level languages
    such as C.  This limitation is intentional.  While pointer
    arithmetic is occasionally very useful, especially for
    implementing low-level services such as garbage collectors, it
    cannot be tracked by most type systems: knowing that location \coqdocabbreviation{n}
    in the store contains a \coqdocvar{float} doesn't tell us anything useful
    about the type of location \coqdocabbreviation{n}+4.  In C, pointer arithmetic is a
    notorious source of type-safety violations. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Stores}



 Recall that, in the small-step operational semantics for
    IMP, the step relation needed to carry along an auxiliary state in
    addition to the program being executed.  In the same way, once we
    have added reference cells to the STLC, our step relation must
    carry along a store to keep track of the contents of reference
    cells.


    We could re-use the same functional representation we used for
    states in IMP, but for carrying out the proofs in this chapter it
    is actually more convenient to represent a store simply as a
    \textit{list} of values.  (The reason we didn't use this representation
    before is that, in IMP, a program could modify any location at any
    time, so states had to be ready to map \textit{any} variable to a value.
    However, in the STLC with references, the only way to create a
    reference cell is with \coqdocconstructor{tref} \coqdocvariable{t1}, which puts the value of \coqdocvariable{t1}
    in a new reference cell and reduces to the location of the newly
    created reference cell. When reducing such an expression, we can
    just add a new reference cell to the end of the list representing
    the store.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{store} := \coqdocvar{list} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We use \coqdocdefinition{store\_lookup} \coqdocabbreviation{n} \coqdocvariable{st} to retrieve the value of the reference
    cell at location \coqdocabbreviation{n} in the store \coqdocvariable{st}.  Note that we must give a
    default value to \coqexternalref{nth}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Lists.List}{\coqdocdefinition{nth}} in case we try looking up an index which is
    too large. (In fact, we will never actually do this, but proving
    that we don't will require a bit of work.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{store\_lookup} (\coqdocvar{n}:\coqdocvar{nat}) (\coqdocvar{st}:\coqdocvar{store}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{nth} \coqdocvar{n} \coqdocvar{st} \coqdocvar{tunit}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To update the store, we use the \coqdoctac{replace} function, which replaces
    the contents of a cell at a particular index. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{replace} \{\coqdocvar{A}:\coqdockw{Type}\} (\coqdocvar{n}:\coqdocvar{nat}) (\coqdocvar{x}:\coqdocvar{A}) (\coqdocvar{l}:\coqdocvar{list} \coqdocvar{A}) : \coqdocvar{list} \coqdocvar{A} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil}    \ensuremath{\Rightarrow} \coqdocvar{nil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{h} :: \coqdocvar{t} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{O}    \ensuremath{\Rightarrow} \coqdocvar{x} :: \coqdocvar{t}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{n'} \ensuremath{\Rightarrow} \coqdocvar{h} :: \coqdoctac{replace} \coqdocvar{n'} \coqdocvar{x} \coqdocvar{t}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As might be expected, we will also need some technical
    lemmas about \coqdoctac{replace}; they are straightforward to prove. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{replace\_nil} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} \coqdocvar{n} (\coqdocvar{x}:\coqdocvar{A}),\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{replace} \coqdocvar{n} \coqdocvar{x} \coqdocvar{nil} = \coqdocvar{nil}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{n}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{length\_replace} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} \coqdocvar{n} \coqdocvar{x} (\coqdocvar{l}:\coqdocvar{list} \coqdocvar{A}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{length} (\coqdoctac{replace} \coqdocvar{n} \coqdocvar{x} \coqdocvar{l}) = \coqdocvar{length} \coqdocvar{l}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{A} \coqdocvar{n} \coqdocvar{x} \coqdocvar{l}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{n}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{l}; \coqdoctac{intros} \coqdocvar{n}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{n}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{n}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{IHl}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{lookup\_replace\_eq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l} \coqdocvar{t} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l} < \coqdocvar{length} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_lookup} \coqdocvar{l} (\coqdoctac{replace} \coqdocvar{l} \coqdocvar{t} \coqdocvar{st}) = \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{l} \coqdocvar{t} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{store\_lookup}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{l}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{st} \coqdockw{as} [|\coqdocvar{t'} \coqdocvar{st'}]; \coqdoctac{intros} \coqdocvar{l} \coqdocvar{Hlen}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{1.50em}
\coqdoctac{inversion} \coqdocvar{Hlen}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{l}; \coqdoctac{simpl}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHst'}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hlen}. \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{lookup\_replace\_neq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l1} \coqdocvar{l2} \coqdocvar{t} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l1} \ensuremath{\not=} \coqdocvar{l2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_lookup} \coqdocvar{l1} (\coqdoctac{replace} \coqdocvar{l2} \coqdocvar{t} \coqdocvar{st}) = \coqdocvar{store\_lookup} \coqdocvar{l1} \coqdocvar{st}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{store\_lookup}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{l1} \coqdockw{as} [|\coqdocvar{l1'}]; \coqdoctac{intros} \coqdocvar{l2} \coqdocvar{t} \coqdocvar{st} \coqdocvar{Hneq}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{st}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{rewrite} \coqdocvar{replace\_nil}...\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{destruct} \coqdocvar{l2}... \coqdocvar{contradict} \coqdocvar{Hneq}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{st} \coqdockw{as} [|\coqdocvar{t2} \coqdocvar{st2}].\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{destruct} \coqdocvar{l2}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{l2}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}; \coqdoctac{apply} \coqdocvar{IHl1'}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Reduction}



 Next, we need to extend the operational semantics to take
    stores into account.  Since the result of reducing an expression
    will in general depend on the contents of the store in which it is
    reduced, the evaluation rules should take not just a term but
    also a store as argument.  Furthermore, since the reduction of a
    term can cause side effects on the store, and these may affect the
    reduction of other terms in the future, the reduction rules need
    to return a new store.  Thus, the shape of the single-step
    reduction relation needs to change from \coqdocvariable{t} ==> \coqdocvariable{t'} to \coqdocvariable{t} / \coqdocvariable{st} ==> \coqdocvariable{t'} /
    \coqdocvariable{st'}, where \coqdocvariable{st} and \coqdocvariable{st'} are the starting and ending states of
    the store.


    To carry through this change, we first need to augment all of our
    existing reduction rules with stores:


                               value v2
\par
\noindent\hrulefill\par
\noindent{} (ST\_AppAbs) 
                (\symbol{92}x:T.t12) v2 / st ==> \coqdocabbreviation{x}:=\coqdocvariable{v2}t12 / st


                        t1 / st ==> t1' / st'
\par
\noindent\hrulefill\par
\noindent{} (ST\_App1) 
                     t1 t2 / st ==> t1' t2 / st'


                  value v1 t2 / st ==> t2' / st'
\par
\noindent\hrulefill\par
\noindent{} (ST\_App2) 
                     v1 t2 / st ==> v1 t2' / st'


    Note that the first rule here returns the store unchanged, since
    function application, in itself, has no side effects.  The other
    two rules simply propagate side effects from premise to
    conclusion.


    Now, the result of reducing a \coqdocvar{ref} expression will be a fresh
    location; this is why we included locations in the syntax of terms
    and in the set of values.  It is crucial to note that making this 
    extension to the syntax of terms does not mean that we intend 
    \textit{programmers} to write terms involving explicit, concrete locations: 
    such terms will arise only as intermediate results during reduction.  
    This may seem odd, but it follows naturally from our design decision
    to represent the result of every reduction step by a modified \textit{term}. 
    If we had chosen a more ``machine-like'' model, e.g., with an explicit 
    stack to contain values of bound identifiers, then the idea of adding 
    locations to the set of allowed values might seem more obvious.


    In terms of this expanded syntax, we can state reduction rules
    for the new constructs that manipulate locations and the store.
    First, to reduce a dereferencing expression !\coqdocvariable{t1}, we must first
    reduce \coqdocvariable{t1} until it becomes a value:


                        t1 / st ==> t1' / st'
\par
\noindent\hrulefill\par
\noindent{} (ST\_Deref) 
                       !t1 / st ==> !t1' / st'


    Once \coqdocvariable{t1} has finished reducing, we should have an expression of
    the form !\coqdocabbreviation{l}, where \coqdocabbreviation{l} is some location.  (A term that attempts
    to dereference any other sort of value, such as a function or
    \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}, is erroneous, as is a term that tries to dereference a
    location that is larger than the size \ensuremath{|}\coqdocvariable{st}\ensuremath{|} of the currently
    allocated store; the reduction rules simply get stuck in this
    case.  The type-safety properties established below assure us 
    that well-typed terms will never misbehave in this way.)


                               l < |st|
\par
\noindent\hrulefill\par
\noindent{} (ST\_DerefLoc)
                     !(loc l) / st ==> lookup l st / st


    Next, to reduce an assignment expression \coqdocvariable{t1}:=\coqdocvariable{t2}, we must first
    reduce \coqdocvariable{t1} until it becomes a value (a location), and then
    reduce \coqdocvariable{t2} until it becomes a value (of any sort):


                        t1 / st ==> t1' / st'
\par
\noindent\hrulefill\par
\noindent{} (ST\_Assign1) 
                 t1 := t2 / st ==> t1' := t2 / st'


                        t2 / st ==> t2' / st'
\par
\noindent\hrulefill\par
\noindent{} (ST\_Assign2) 
                  v1 := t2 / st ==> v1 := t2' / st'


    Once we have finished with \coqdocvariable{t1} and \coqdocvariable{t2}, we have an expression of
    the form \coqdocabbreviation{l}:=\coqdocvariable{v2}, which we execute by updating the store to make
    location \coqdocabbreviation{l} contain \coqdocvariable{v2}:


                               l < |st|
\par
\noindent\hrulefill\par
\noindent{} (ST\_Assign) 
                loc l := v2 / st ==> unit / \coqdocabbreviation{l}:=\coqdocvariable{v2}st


    The notation [\coqdocabbreviation{l}:=\coqdocvariable{v2}]\coqdocvariable{st} means ``the store that maps \coqdocabbreviation{l} to \coqdocvariable{v2}
    and maps all other locations to the same thing as \coqdocvariable{st}.''  Note
    that the term resulting from this reduction step is just \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}};
    the interesting result is the updated store.


    Finally, to reduct an expression of the form \coqdocvar{ref} \coqdocvariable{t1}, we first
    reduce \coqdocvariable{t1} until it becomes a value:


                        t1 / st ==> t1' / st'
\par
\noindent\hrulefill\par
\noindent{} (ST\_Ref) 
                    ref t1 / st ==> ref t1' / st'


    Then, to reduce the \coqdocvar{ref} itself, we choose a fresh location at
    the end of the current store -- i.e., location \ensuremath{|}\coqdocvariable{st}\ensuremath{|} -- and yield
    a new store that extends \coqdocvariable{st} with the new value \coqdocvariable{v1}.
\par
\noindent\hrulefill\par
\noindent{} (ST\_RefValue) 
                   ref v1 / st ==> loc |st| / st,v1


    The value resulting from this step is the newly allocated location
    itself.  (Formally, \coqdocvariable{st},\coqdocvariable{v1} means \coqdocvariable{st} ++ \coqdocvariable{v1}::\coqdocconstructor{nil} -- i.e., to add
    a new reference cell to the store, we append it to the end.)  


    Note that these reduction rules do not perform any kind of
    garbage collection: we simply allow the store to keep growing
    without bound as reduction proceeds.  This does not affect the
    correctness of the results of reduction (after all, the
    definition of ``garbage'' is precisely parts of the store that are
    no longer reachable and so cannot play any further role in
    reduction), but it means that a naive implementation of our
    evaluator might run out of memory where a more sophisticated 
    evaluator would be able to continue by reusing locations whose 
    contents have become garbage.


    Here are the rules again, formally: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "t1 '/' st1 '==>' t2 '/' st2"\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st1} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{t2} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Import} \coqdocvar{ListNotations}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\times} \coqdocvar{store} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\times} \coqdocvar{store} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_AppAbs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t12} \coqdocvar{v2} \coqdocvar{st},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t12}) \coqdocvar{v2} / \coqdocvar{st} ==> [\coqdocvar{x}:=\coqdocvar{v2}]\coqdocvar{t12} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{t1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} / \coqdocvar{st} ==> \coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2} / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t2} / \coqdocvar{st} ==> \coqdocvar{t2'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2} / \coqdocvar{st} ==> \coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2'}/ \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_SuccNat} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{st},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tsucc} (\coqdocvar{tnat} \coqdocvar{n}) / \coqdocvar{st} ==> \coqdocvar{tnat} (\coqdocvar{S} \coqdocvar{n}) / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Succ} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{t1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tsucc} \coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{tsucc} \coqdocvar{t1'} / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_PredNat} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{st},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tpred} (\coqdocvar{tnat} \coqdocvar{n}) / \coqdocvar{st} ==> \coqdocvar{tnat} (\coqdocvar{pred} \coqdocvar{n}) / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Pred} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{t1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tpred} \coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{tpred} \coqdocvar{t1'} / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_MultNats} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{st},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tmult} (\coqdocvar{tnat} \coqdocvar{n1}) (\coqdocvar{tnat} \coqdocvar{n2}) / \coqdocvar{st} ==> \coqdocvar{tnat} (\coqdocvar{mult} \coqdocvar{n1} \coqdocvar{n2}) / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Mult1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t1'} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{t1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2} / \coqdocvar{st} ==> \coqdocvar{tmult} \coqdocvar{t1'} \coqdocvar{t2} / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Mult2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t2} / \coqdocvar{st} ==> \coqdocvar{t2'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tmult} \coqdocvar{v1} \coqdocvar{t2} / \coqdocvar{st} ==> \coqdocvar{tmult} \coqdocvar{v1} \coqdocvar{t2'} / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If0} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{t1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} / \coqdocvar{st} ==> \coqdocvar{tif0} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3} / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If0\_Zero} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t2} \coqdocvar{t3} \coqdocvar{st},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tif0} (\coqdocvar{tnat} 0) \coqdocvar{t2} \coqdocvar{t3} / \coqdocvar{st} ==> \coqdocvar{t2} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If0\_Nonzero} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{t2} \coqdocvar{t3} \coqdocvar{st},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tif0} (\coqdocvar{tnat} (\coqdocvar{S} \coqdocvar{n})) \coqdocvar{t2} \coqdocvar{t3} / \coqdocvar{st} ==> \coqdocvar{t3} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_RefValue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{st},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tref} \coqdocvar{v1} / \coqdocvar{st} ==> \coqdocvar{tloc} (\coqdocvar{length} \coqdocvar{st}) / (\coqdocvar{st} ++ \coqdocvar{v1}::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Ref} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{t1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tref} \coqdocvar{t1} /  \coqdocvar{st} ==> \coqdocvar{tref} \coqdocvar{t1'} /  \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_DerefLoc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{l},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{l} < \coqdocvar{length} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tderef} (\coqdocvar{tloc} \coqdocvar{l}) / \coqdocvar{st} ==> \coqdocvar{store\_lookup} \coqdocvar{l} \coqdocvar{st} / \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Deref} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{t1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tderef} \coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{tderef} \coqdocvar{t1'} / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Assign} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v2} \coqdocvar{l} \coqdocvar{st},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{l} < \coqdocvar{length} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tassign} (\coqdocvar{tloc} \coqdocvar{l}) \coqdocvar{v2} / \coqdocvar{st} ==> \coqdocvar{tunit} / \coqdoctac{replace} \coqdocvar{l} \coqdocvar{v2} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Assign1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} / \coqdocvar{st} ==> \coqdocvar{t1'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tassign} \coqdocvar{t1} \coqdocvar{t2} / \coqdocvar{st} ==> \coqdocvar{tassign} \coqdocvar{t1'} \coqdocvar{t2} / \coqdocvar{st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Assign2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t2} / \coqdocvar{st} ==> \coqdocvar{t2'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{tassign} \coqdocvar{v1} \coqdocvar{t2} / \coqdocvar{st} ==> \coqdocvar{tassign} \coqdocvar{v1} \coqdocvar{t2'} / \coqdocvar{st'}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "t1 '/' st1 '==>' t2 '/' st2" := (\coqdocvar{step} (\coqdocvar{t1},\coqdocvar{st1}) (\coqdocvar{t2},\coqdocvar{st2})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
One slightly ugly point should be noted here: In the \coqdocconstructor{ST\_RefValue}
    rule, we extend the state by writing \coqdocvariable{st} ++ \coqdocvariable{v1}::\coqdocconstructor{nil} rather than
    the more natural \coqdocvariable{st} ++ [\coqdocvariable{v1}].  The reason for this is that the
    notation we've defined for substitution uses square brackets,
    which clash with the standard library's notation for lists. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{step}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{multistep} := (\coqdocvar{multi} \coqdocvar{step}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "t1 '/' st '==>*' t2 '/' st'" :=\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{multistep} (\coqdocvar{t1},\coqdocvar{st}) (\coqdocvar{t2},\coqdocvar{st'}))\coqdoceol
\coqdocindent{7.50em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{t2} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Typing}



 The contexts assigning types to free variables are exactly the
    same as for the STLC: partial maps from identifiers to types. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdockw{context} := \coqdocvar{partial\_map} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Store typings}



 Having extended our syntax and reduction rules to accommodate
    references, our last job is to write down typing rules for the new
    constructs (and, of course, to check that these rules are sound!).
    Naturally, the key question is, ``What is the type of a location?''


    First of all, notice that this question doesn't arise when
    typechecking terms that programmers actually
    write.  Concrete location constants arise only in terms that are
    the intermediate results of reduction; they are not in the
    language that programmers write.  So we only need to determine the
    type of a location when we're in the middle of a reduction
    sequence, e.g., trying to apply the progress or preservation
    lemmas.  Thus, even though we normally think of typing as a
    \textit{static} program property, it makes sense for the typing of
    locations to depend on the \textit{dynamic} progress of the program too.


    As a first try, note that when we reduce a term containing
    concrete locations, the type of the result depends on the contents
    of the store that we start with.  For example, if we reduce the
    term !(\coqdocvar{loc} 1) in the store [\coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}, \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}], the result is \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}};
    if we reduce the same term in the store [\coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}, \symbol{92}\coqdocabbreviation{x}:\coqdocvar{Unit.x}], the
    result is \symbol{92}\coqdocabbreviation{x}:\coqdocvar{Unit.x}.  With respect to the former store, the
    location 1 has type \coqdocvar{Unit}, and with respect to the latter it
    has type \coqdocvar{Unit}\ensuremath{\rightarrow}\coqdocvar{Unit}. This observation leads us immediately to a
    first attempt at a typing rule for locations:


                             Gamma |- lookup  l st : T1
\par
\noindent\hrulefill\par
\noindent{}
                             Gamma |- loc l : Ref T1


    That is, to find the type of a location \coqdocabbreviation{l}, we look up the
    current contents of \coqdocabbreviation{l} in the store and calculate the type \coqdocvariable{T1}
    of the contents.  The type of the location is then \coqdocvar{Ref} \coqdocvariable{T1}.


    Having begun in this way, we need to go a little further to reach a
    consistent state.  In effect, by making the type of a term depend on
    the store, we have changed the typing relation from a three-place
    relation (between contexts, terms, and types) to a four-place relation
    (between contexts, \textit{stores}, terms, and types).  Since the store is,
    intuitively, part of the context in which we calculate the type of a
    term, let's write this four-place relation with the store to the left
    of the turnstile: \coqdocvariable{Gamma}; \coqdocvariable{st} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T}.  Our rule for typing
    references now has the form


                     Gamma; st |- lookup l st : T1
\par
\noindent\hrulefill\par
\noindent{}
                     Gamma; st |- loc l : Ref T1


    and all the rest of the typing rules in the system are extended
    similarly with stores.  (The other rules do not need to do anything
    interesting with their stores -- just pass them from premise to
    conclusion.)


    However, this rule will not quite do.  For one thing, typechecking
    is rather inefficient, since calculating the type of a location \coqdocabbreviation{l}
    involves calculating the type of the current contents \coqdocvariable{v} of \coqdocabbreviation{l}.  If
    \coqdocabbreviation{l} appears many times in a term \coqdocvariable{t}, we will re-calculate the type of
    \coqdocvariable{v} many times in the course of constructing a typing derivation for
    \coqdocvariable{t}.  Worse, if \coqdocvariable{v} itself contains locations, then we will have to
    recalculate \textit{their} types each time they appear.  Worse yet, the 
    proposed typing rule for locations may not allow us to derive 
    anything at all, if the store contains a \textit{cycle}.  For example,
    there is no finite typing derivation for the location 0 with respect
    to this store:


   \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Nat}. (!(\coqdocvar{loc} 1)) \coqdocabbreviation{x}, \symbol{92}\coqdocabbreviation{x}:\coqdoclibrary{Nat}. (!(\coqdocvar{loc} 0)) \coqdocabbreviation{x}


\paragraph{Exercise: 2 stars (cyclic\_store)}

 Can you find a term whose reduction will create this particular
    cyclic store?  \ensuremath{\Box} 

 These problems arise from the fact that our proposed
    typing rule for locations requires us to recalculate the type of a
    location every time we mention it in a term.  But this,
    intuitively, should not be necessary.  After all, when a location
    is first created, we know the type of the initial value that we
    are storing into it.  Suppose we are willing to enforce the
    invariant that the type of the value contained in a given location
    \textit{never changes}; that is, although we may later store other values
    into this location, those other values will always have the same
    type as the initial one.  In other words, we always have in mind a
    single, definite type for every location in the store, which is
    fixed when the location is allocated.  Then these intended types
    can be collected together as a \textit{store typing} -- a finite function
    mapping locations to types.


    As with the other type systems we've seen, this conservative typing 
    restriction on allowed updates means that we will rule out as 
    ill-typed some programs that could reduce perfectly well without
    getting stuck. 


    Just as we did for stores, we will represent a store type simply
    as a list of types: the type at index \coqdocabbreviation{i} records the type of the
    values that we expect to be stored in cell \coqdocabbreviation{i}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{store\_ty} := \coqdocvar{list} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdocdefinition{store\_Tlookup} function retrieves the type at a particular
    index. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{store\_Tlookup} (\coqdocvar{n}:\coqdocvar{nat}) (\coqdocvar{ST}:\coqdocvar{store\_ty}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{nth} \coqdocvar{n} \coqdocvar{ST} \coqdocvar{TUnit}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Suppose we are given a store typing \coqdocvariable{ST} describing the store
    \coqdocvariable{st} in which some term \coqdocvariable{t} will be reduced.  Then we can use
    \coqdocvariable{ST} to calculate the type of the result of \coqdocvariable{t} without ever
    looking directly at \coqdocvariable{st}.  For example, if \coqdocvariable{ST} is [\coqdocvar{Unit},
    \coqdocvar{Unit}\ensuremath{\rightarrow}\coqdocvar{Unit}], then we can immediately infer that !(\coqdocvar{loc} 1) has
    type \coqdocvar{Unit}\ensuremath{\rightarrow}\coqdocvar{Unit}.  More generally, the typing rule for locations
    can be reformulated in terms of store typings like this:


                                 l < |ST|
\par
\noindent\hrulefill\par
\noindent{}
                   Gamma; ST |- loc l : Ref (lookup l ST)


    That is, as long as \coqdocabbreviation{l} is a valid location, we can compute the 
    type of \coqdocabbreviation{l} just by looking it up in \coqdocvariable{ST}.  Typing is again a 
    four-place relation, but it is parameterized on a store \textit{typing} 
    rather than a concrete store.  The rest of the typing rules are 
    analogously augmented with store typings. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{The Typing Relation}



 We can now formalize the typing relation for the STLC with
    references.  Here, again, are the rules we're adding to the base
    STLC (with numbers and \coqdocvar{Unit}): 



                               l < |ST|
\par
\noindent\hrulefill\par
\noindent{}              (T\_Loc)
                  Gamma; ST |- loc l : Ref (lookup l ST)


                         Gamma; ST |- t1 : T1
\par
\noindent\hrulefill\par
\noindent{}                     (T\_Ref)
                     Gamma; ST |- ref t1 : Ref T1


                      Gamma; ST |- t1 : Ref T11
\par
\noindent\hrulefill\par
\noindent{}                       (T\_Deref)
                        Gamma; ST |- !t1 : T11


                      Gamma; ST |- t1 : Ref T11
                        Gamma; ST |- t2 : T11
\par
\noindent\hrulefill\par
\noindent{}                    (T\_Assign)
                    Gamma; ST |- t1 := t2 : Unit
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "Gamma ';' ST '|-' t '\symbol{92}in' T" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{has\_type} : \coqdockw{context} \ensuremath{\rightarrow} \coqdocvar{store\_ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{x} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tvar} \coqdocvar{x}) \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{T12} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11}); \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t12} \symbol{92}\coqdoctac{in} \coqdocvar{T12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12}) \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_App} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} \coqdocvar{T2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Nat} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{n},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tnat} \coqdocvar{n}) \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Succ} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tsucc} \coqdocvar{t1}) \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Pred} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tpred} \coqdocvar{t1}) \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Mult} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} \coqdocvar{TNat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_If0} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TNat} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t3} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3}) \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Unit} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{tunit} \symbol{92}\coqdoctac{in} \coqdocvar{TUnit}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Loc} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{l},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{l} < \coqdocvar{length} \coqdocvar{ST} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tloc} \coqdocvar{l}) \symbol{92}\coqdoctac{in} (\coqdocvar{TRef} (\coqdocvar{store\_Tlookup} \coqdocvar{l} \coqdocvar{ST}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Ref} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{t1} \coqdocvar{T1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tref} \coqdocvar{t1}) \symbol{92}\coqdoctac{in} (\coqdocvar{TRef} \coqdocvar{T1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Deref} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{t1} \coqdocvar{T11},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} (\coqdocvar{TRef} \coqdocvar{T11}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tderef} \coqdocvar{t1}) \symbol{92}\coqdoctac{in} \coqdocvar{T11}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Assign} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{T11},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} (\coqdocvar{TRef} \coqdocvar{T11}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T11} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{tassign} \coqdocvar{t1} \coqdocvar{t2}) \symbol{92}\coqdoctac{in} \coqdocvar{TUnit}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "Gamma ';' ST '|-' t '\symbol{92}in' T" := (\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{has\_type}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Of course, these typing rules will accurately predict the results
    of reduction only if the concrete store used during reduction
    actually conforms to the store typing that we assume for purposes
    of typechecking.  This proviso exactly parallels the situation
    with free variables in the basic STLC: the substitution lemma
    promises that, if \coqdocvariable{Gamma} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T}, then we can replace the free
    variables in \coqdocvariable{t} with values of the types listed in \coqdocvariable{Gamma} to
    obtain a closed term of type \coqdocdefinition{T}, which, by the type preservation
    theorem will reduce to a final result of type \coqdocdefinition{T} if it yields
    any result at all.  We will see below how to formalize an
    analogous intuition for stores and store typings.


    However, for purposes of typechecking the terms that programmers
    actually write, we do not need to do anything tricky to guess what
    store typing we should use.  Concrete locations arise only in
    terms that are the intermediate results of reduction; they are
    not in the language that programmers write.  Thus, we can simply
    typecheck the programmer's terms with respect to the \textit{empty} store
    typing.  As reduction proceeds and new locations are created, we
    will always be able to see how to extend the store typing by
    looking at the type of the initial values being placed in newly
    allocated cells; this intuition is formalized in the statement of
    the type preservation theorem below.  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Properties}



 Our final task is to check that standard type safety
    properties continue to hold for the STLC with references.  The
    progress theorem (``well-typed terms are not stuck'') can be stated
    and proved almost as for the STLC; we just need to add a few
    straightforward cases to the proof to deal with the new
    constructs.  The preservation theorem is a bit more interesting,
    so let's look at it first.  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Well-Typed Stores}



 Since we have extended both the reduction relation (with
    initial and final stores) and the typing relation (with a store
    typing), we need to change the statement of preservation to
    include these parameters.  But clearly we cannot just add stores
    and store typings without saying anything about how they are
    related -- i.e., this is wrong: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation\_wrong1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{T} \coqdocvar{t} \coqdocvar{st} \coqdocvar{t'} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} / \coqdocvar{st} ==> \coqdocvar{t'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If we typecheck with respect to some set of assumptions about the
    types of the values in the store and then reduce with respect to
    a store that violates these assumptions, the result will be
    disaster.  We say that a store \coqdocvariable{st} is \textit{well typed} with respect a
    store typing \coqdocvariable{ST} if the term at each location \coqdocabbreviation{l} in \coqdocvariable{st} has the
    type at location \coqdocabbreviation{l} in \coqdocvariable{ST}.  Since only closed terms ever get
    stored in locations (why?), it suffices to type them in the empty
    context. The following definition of \coqdocdefinition{store\_well\_typed} formalizes
    this.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{store\_well\_typed} (\coqdocvar{ST}:\coqdocvar{store\_ty}) (\coqdocvar{st}:\coqdocvar{store}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{length} \coqdocvar{ST} = \coqdocvar{length} \coqdocvar{st} \ensuremath{\land}\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{l}, \coqdocvar{l} < \coqdocvar{length} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} (\coqdocvar{store\_lookup} \coqdocvar{l} \coqdocvar{st}) \symbol{92}\coqdoctac{in} (\coqdocvar{store\_Tlookup} \coqdocvar{l} \coqdocvar{ST})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Informally, we will write \coqdocvariable{ST} \ensuremath{\vdash} \coqdocvariable{st} for \coqdocdefinition{store\_well\_typed} \coqdocvariable{ST} \coqdocvariable{st}. 

 Intuitively, a store \coqdocvariable{st} is consistent with a store typing
    \coqdocvariable{ST} if every value in the store has the type predicted by the
    store typing.  The only subtle point is the fact that, when
    typing the values in the store, we supply the very same store
    typing to the typing relation.  This allows us to type circular
    stores like the one we saw above. 

\paragraph{Exercise: 2 stars (store\_not\_unique)}

 Can you find a store \coqdocvariable{st}, and two
    different store typings \coqdocvar{ST1} and \coqdocvar{ST2} such that both
    \coqdocvar{ST1} \ensuremath{\vdash} \coqdocvariable{st} and \coqdocvar{ST2} \ensuremath{\vdash} \coqdocvariable{st}? \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

 We can now state something closer to the desired preservation
    property: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation\_wrong2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{T} \coqdocvar{t} \coqdocvar{st} \coqdocvar{t'} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} / \coqdocvar{st} ==> \coqdocvar{t'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This statement is fine for all of the reduction rules except
    the allocation rule \coqdocconstructor{ST\_RefValue}.  The problem is that this rule
    yields a store with a larger domain than the initial store, which
    falsifies the conclusion of the above statement: if \coqdocvariable{st'} includes
    a binding for a fresh location \coqdocabbreviation{l}, then \coqdocabbreviation{l} cannot be in the
    domain of \coqdocvariable{ST}, and it will not be the case that \coqdocvariable{t'} (which
    definitely mentions \coqdocabbreviation{l}) is typable under \coqdocvariable{ST}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Extending Store Typings}



 Evidently, since the store can increase in size during reduction,
    we need to allow the store typing to grow as well.  This motivates
    the following definition.  We say that the store type \coqdocvariable{ST'}
    \textit{extends} \coqdocvariable{ST} if \coqdocvariable{ST'} is just \coqdocvariable{ST} with some new types added to
    the end. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{extends} : \coqdocvar{store\_ty} \ensuremath{\rightarrow} \coqdocvar{store\_ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{extends\_nil}  : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{extends} \coqdocvar{ST'} \coqdocvar{nil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{extends\_cons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{ST'} \coqdocvar{ST},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{extends} \coqdocvar{ST'} \coqdocvar{ST} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{extends} (\coqdocvar{x}::\coqdocvar{ST'}) (\coqdocvar{x}::\coqdocvar{ST}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{extends}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We'll need a few technical lemmas about extended contexts.


    First, looking up a type in an extended store typing yields the
    same result as in the original: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{extends\_lookup} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l} \coqdocvar{ST} \coqdocvar{ST'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l} < \coqdocvar{length} \coqdocvar{ST} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{extends} \coqdocvar{ST'} \coqdocvar{ST} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_Tlookup} \coqdocvar{l} \coqdocvar{ST'} = \coqdocvar{store\_Tlookup} \coqdocvar{l} \coqdocvar{ST}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{l} \coqdocvar{ST} \coqdocvar{ST'} \coqdocvar{Hlen} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{ST'}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{l}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{ST} \coqdockw{as} [|\coqdocvar{a} \coqdocvar{ST2}]; \coqdoctac{intros} \coqdocvar{l} \coqdocvar{Hlen} \coqdocvar{ST'} \coqdocvar{HST'}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{inversion} \coqdocvar{Hlen}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{unfold} \coqdocvar{store\_Tlookup} \coqdoctac{in} *.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{ST'}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{inversion} \coqdocvar{HST'}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HST'}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{l} \coqdockw{as} [|\coqdocvar{l'}].\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{auto}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{simpl}. \coqdoctac{apply} \coqdocvar{IHST2}...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hlen}; \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next, if \coqdocvariable{ST'} extends \coqdocvariable{ST}, the length of \coqdocvariable{ST'} is at least that
    of \coqdocvariable{ST}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{length\_extends} : \coqdockw{\ensuremath{\forall}} \coqdocvar{l} \coqdocvar{ST} \coqdocvar{ST'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l} < \coqdocvar{length} \coqdocvar{ST} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{extends} \coqdocvar{ST'} \coqdocvar{ST} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l} < \coqdocvar{length} \coqdocvar{ST'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{l}. \coqdoctac{induction} \coqdocvar{H0}; \coqdoctac{intros} \coqdocvar{l} \coqdocvar{Hlen}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Hlen}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl} \coqdoctac{in} *.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{l}; \coqdoctac{try} \coqdoctac{omega}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{lt\_n\_S}. \coqdoctac{apply} \coqdocvar{IHextends}. \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Finally, \coqdocvariable{ST} ++ \coqdocdefinition{T} extends \coqdocvariable{ST}, and \coqdocinductive{extends} is reflexive. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{extends\_app} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{extends} (\coqdocvar{ST} ++ \coqdocvar{T}) \coqdocvar{ST}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{ST}; \coqdoctac{intros} \coqdocvar{T}...\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{extends\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{extends} \coqdocvar{ST} \coqdocvar{ST}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{ST}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Preservation, Finally}



 We can now give the final, correct statement of the type
    preservation property: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{preservation\_theorem} := \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} / \coqdocvar{st} ==> \coqdocvar{t'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{extends} \coqdocvar{ST'} \coqdocvar{ST} \ensuremath{\land}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty}; \coqdocvar{ST'} \ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\land}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST'} \coqdocvar{st'}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that the preservation theorem merely asserts that there is
    \textit{some} store typing \coqdocvariable{ST'} extending \coqdocvariable{ST} (i.e., agreeing with \coqdocvariable{ST}
    on the values of all the old locations) such that the new term
    \coqdocvariable{t'} is well typed with respect to \coqdocvariable{ST'}; it does not tell us
    exactly what \coqdocvariable{ST'} is.  It is intuitively clear, of course, that
    \coqdocvariable{ST'} is either \coqdocvariable{ST} or else exactly \coqdocvariable{ST} ++ \coqdocvariable{T1}::\coqdocconstructor{nil}, where
    \coqdocvariable{T1} is the type of the value \coqdocvariable{v1} in the extended store \coqdocvariable{st} ++
    \coqdocvariable{v1}::\coqdocconstructor{nil}, but stating this explicitly would complicate the statement of
    the theorem without actually making it any more useful: the weaker
    version above is already in the right form (because its conclusion
    implies its hypothesis) to ``turn the crank'' repeatedly and
    conclude that every \textit{sequence} of reduction steps preserves
    well-typedness.  Combining this with the progress property, we
    obtain the usual guarantee that ``well-typed programs never go
    wrong.''


    In order to prove this, we'll need a few lemmas, as usual. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Substitution Lemma}



 First, we need an easy extension of the standard substitution
    lemma, along with the same machinery about context invariance that
    we used in the proof of the substitution lemma for the STLC. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{appears\_free\_in} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tvar} \coqdocvar{x})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{y} \ensuremath{\not=} \coqdocvar{x}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_succ} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tsucc} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_pred} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tpred} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_mult1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_mult2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tmult} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if0\_1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if0\_2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if0\_3} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t3} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{t3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_ref} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tref} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_deref} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tderef} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_assign1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tassign} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_assign2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tassign} \coqdocvar{t1} \coqdocvar{t2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{appears\_free\_in}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{free\_in\_context} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma} \coqdocvar{ST},\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}, \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{T}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{intros}; (\coqdoctac{try} \coqdoctac{solve} [ \coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{subst}; \coqdoctac{eauto} ]).\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H1}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHappears\_free\_in} \coqdoctac{in} \coqdocvar{H8}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{update\_neq} \coqdoctac{in} \coqdocvar{H8}; \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{context\_invariance} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{Gamma'} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Gamma'} \coqdocvar{x}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma'}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H}; \coqdoctac{intros}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}. \coqdoctac{symmetry}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}. \coqdoctac{apply} \coqdocvar{IHhas\_type}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{x0})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_App}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHhas\_type1}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHhas\_type2}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_Mult}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHhas\_type1}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHhas\_type2}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_If0}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHhas\_type1}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHhas\_type2}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHhas\_type3}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_Assign}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHhas\_type1}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHhas\_type2}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{substitution\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{x} \coqdocvar{s} \coqdocvar{S} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{s} \symbol{92}\coqdoctac{in} \coqdocvar{S} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{S}); \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} ([\coqdocvar{x}:=\coqdocvar{s}]\coqdocvar{t}) \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{x} \coqdocvar{s} \coqdocvar{S} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Hs} \coqdocvar{Ht}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{T}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros} \coqdocvar{T} \coqdocvar{Gamma} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{simpl}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{update\_eq} \coqdoctac{in} \coqdocvar{H3}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H3}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hcontra}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{free\_in\_context} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Hcontra} \coqdocvar{Hs})\coqdoceol
\coqdocindent{4.00em}
\coqdockw{as} [\coqdocvar{T'} \coqdocvar{HT'}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT'}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{update\_neq} \coqdoctac{in} \coqdocvar{H3}...\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros}. \coqdoctac{rewrite} \coqdocvar{update\_shadow}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}. \coqdoctac{apply} \coqdocvar{IHt}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y} \coqdocvar{x0})...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Assignment Preserves Store Typing}



 Next, we must show that replacing the contents of a cell in the
    store with a new value of appropriate type does not change the
    overall type of the store.  (This is needed for the \coqdocconstructor{ST\_Assign}
    rule.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{assign\_pres\_store\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{st} \coqdocvar{l} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{l} < \coqdocvar{length} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} (\coqdocvar{store\_Tlookup} \coqdocvar{l} \coqdocvar{ST}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} (\coqdoctac{replace} \coqdocvar{l} \coqdocvar{t} \coqdocvar{st}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{ST} \coqdocvar{st} \coqdocvar{l} \coqdocvar{t} \coqdocvar{Hlen} \coqdocvar{HST} \coqdocvar{Ht}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{HST}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}. \coqdoctac{rewrite} \coqdocvar{length\_replace}...\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{l'} \coqdocvar{Hl'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_nat} \coqdocvar{l'} \coqdocvar{l}) \coqdocvar{eqn}: \coqdocvar{Heqll'}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{beq\_nat\_true} \coqdoctac{in} \coqdocvar{Heqll'}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{lookup\_replace\_eq}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{beq\_nat\_false} \coqdoctac{in} \coqdocvar{Heqll'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{lookup\_replace\_neq}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{length\_replace} \coqdoctac{in} \coqdocvar{Hl'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{H0}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Weakening for Stores}



 Finally, we need a lemma on store typings, stating that, if a
    store typing is extended with a new location, the extended one
    still allows us to assign the same types to the same terms as the
    original.


    (The lemma is called \coqdoclemma{store\_weakening} because it resembles the
    ``weakening'' lemmas found in proof theory, which show that adding a
    new assumption to some logical theory does not decrease the set of
    provable theorems.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{store\_weakening} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{ST} \coqdocvar{ST'} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{extends} \coqdocvar{ST'} \coqdocvar{ST} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Gamma}; \coqdocvar{ST'} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{induction} \coqdocvar{H0}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{erewrite} \ensuremath{\leftarrow} \coqdocvar{extends\_lookup}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Loc}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{length\_extends}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can use the \coqdoclemma{store\_weakening} lemma to prove that if a store is
    well typed with respect to a store typing, then the store extended
    with a new term \coqdocvariable{t} will still be well typed with respect to the
    store typing extended with \coqdocvariable{t}'s type. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{store\_well\_typed\_app} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{st} \coqdocvar{t1} \coqdocvar{T1},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} (\coqdocvar{ST} ++ \coqdocvar{T1}::\coqdocvar{nil}) (\coqdocvar{st} ++ \coqdocvar{t1}::\coqdocvar{nil}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{store\_well\_typed} \coqdoctac{in} *.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [\coqdocvar{Hlen} \coqdocvar{Hmatch}]; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{app\_length}, \coqdocvar{plus\_comm}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{app\_length}, \coqdocvar{plus\_comm}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{l} \coqdocvar{Hl}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{store\_lookup}, \coqdocvar{store\_Tlookup}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{le\_lt\_eq\_dec} \coqdoctac{in} \coqdocvar{Hl}; \coqdoctac{inversion} \coqdocvar{Hl} \coqdockw{as} [\coqdocvar{Hlt} \ensuremath{|} \coqdocvar{Heq}].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{lt\_S\_n} \coqdoctac{in} \coqdocvar{Hlt}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} !\coqdocvar{app\_nth1}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoctac{apply} \coqdocvar{store\_weakening} \coqdockw{with} \coqdocvar{ST}. \coqdoctac{apply} \coqdocvar{extends\_app}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{apply} \coqdocvar{Hmatch}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoctac{rewrite} \coqdocvar{Hlen}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Heq}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{app\_nth2}; \coqdoctac{try} \coqdoctac{omega}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Hlen}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{minus\_diag}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{store\_weakening} \coqdockw{with} \coqdocvar{ST}...\coqdoceol
\coqdocindent{3.00em}
\{ \coqdoctac{apply} \coqdocvar{extends\_app}. \}\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \coqdocvar{app\_nth2}; \coqdoctac{try} \coqdoctac{omega}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{minus\_diag}. \coqdoctac{simpl}. \coqdoctac{trivial}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Preservation!}



 Now that we've got everything set up right, the proof of
    preservation is actually quite straightforward.  

 Begin with one technical lemma: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{nth\_eq\_last} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} (\coqdocvar{l}:\coqdocvar{list} \coqdocvar{A}) \coqdocvar{x} \coqdocvar{d},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{nth} (\coqdocvar{length} \coqdocvar{l}) (\coqdocvar{l} ++ \coqdocvar{x}::\coqdocvar{nil}) \coqdocvar{d} = \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{l}; \coqdoctac{intros}; [ \coqdoctac{auto} \ensuremath{|} \coqdoctac{simpl}; \coqdoctac{rewrite} \coqdocvar{IHl}; \coqdoctac{auto} ].\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
And here, at last, is the preservation theorem and proof: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} / \coqdocvar{st} ==> \coqdocvar{t'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{extends} \coqdocvar{ST'} \coqdocvar{ST} \ensuremath{\land}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{empty}; \coqdocvar{ST'} \ensuremath{\vdash} \coqdocvar{t'} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\land}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST'} \coqdocvar{st'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto} \coqdockw{using} \coqdocvar{store\_weakening}, \coqdocvar{extends\_refl}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{Ht}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Ht}; \coqdoctac{intros} \coqdocvar{t'} \coqdocvar{HST} \coqdocvar{Hstep};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}; \coqdoctac{inversion} \coqdocvar{Hstep}; \coqdoctac{subst};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{eauto} \coqdockw{using} \coqdocvar{store\_weakening}, \coqdocvar{extends\_refl}).\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{\ensuremath{\exists}} \coqdocvar{ST}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Ht1}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{split}; \coqdoctac{try} \coqdoctac{split}... \coqdoctac{eapply} \coqdocvar{substitution\_preserves\_typing}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHt1} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHt2} \coqdoctac{in} \coqdocvar{H5}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H5} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{IHHt} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{IHHt} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHt1} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHt2} \coqdoctac{in} \coqdocvar{H5}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H5} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{IHHt1} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}... \coqdoctac{split}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{ST} ++ \coqdocvar{T1}::\coqdocvar{nil}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HST}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{extends\_app}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{replace} (\coqdocvar{TRef} \coqdocvar{T1})\coqdoceol
\coqdocindent{4.00em}
\coqdockw{with} (\coqdocvar{TRef} (\coqdocvar{store\_Tlookup} (\coqdocvar{length} \coqdocvar{st}) (\coqdocvar{ST} ++ \coqdocvar{T1}::\coqdocvar{nil}))).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{T\_Loc}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}. \coqdoctac{rewrite} \coqdocvar{app\_length}, \coqdocvar{plus\_comm}. \coqdoctac{simpl}. \coqdoctac{omega}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{unfold} \coqdocvar{store\_Tlookup}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}. \coqdoctac{rewrite} \coqdocvar{nth\_eq\_last}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{store\_well\_typed\_app}; \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHt} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST}. \coqdoctac{split}; \coqdoctac{try} \coqdoctac{split}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HST} \coqdockw{as} [\coqdocvar{\_} \coqdocvar{Hsty}].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{replace} \coqdocvar{T11} \coqdockw{with} (\coqdocvar{store\_Tlookup} \coqdocvar{l} \coqdocvar{ST}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{Hsty}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Ht}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHt} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST}. \coqdoctac{split}; \coqdoctac{try} \coqdoctac{split}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{assign\_pres\_store\_typing}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Ht1}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHt1} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHt2} \coqdoctac{in} \coqdocvar{H5}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H5} \coqdockw{as} [\coqdocvar{ST'} [\coqdocvar{Hext} [\coqdocvar{Hty} \coqdocvar{Hsty}]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars (preservation\_informal)}

 Write a careful informal proof of the preservation theorem,
    concentrating on the \coqdocconstructor{T\_App}, \coqdocconstructor{T\_Deref}, \coqdocconstructor{T\_Assign}, and \coqdocconstructor{T\_Ref}
    cases.


\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Progress}



 As we've said, progress for this system is pretty easy to prove;
    the proof is very similar to the proof of progress for the STLC,
    with a few new cases for the new syntactic constructs. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{empty}; \coqdocvar{ST} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}, \coqdocvar{t} / \coqdocvar{st} ==> \coqdocvar{t'} / \coqdocvar{st'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T} \coqdocvar{st} \coqdocvar{Ht} \coqdocvar{HST}. \coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Ht}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt1} \coqdockw{as} [\coqdocvar{Ht1p} \ensuremath{|} \coqdocvar{Ht1p}]...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2} \coqdockw{as} [\coqdocvar{Ht2p} \ensuremath{|} \coqdocvar{Ht2p}]...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{Ht2p} \coqdockw{as} [\coqdocvar{t2'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t}) \coqdocvar{t2'}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p} \coqdockw{as} [\coqdocvar{t1'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt} \coqdockw{as} [\coqdocvar{Ht1p} \ensuremath{|} \coqdocvar{Ht1p}]...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p}; \coqdoctac{subst}; \coqdoctac{try} \coqdoctac{solve} [ \coqdoctac{inversion} \coqdocvar{Ht} ].\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tnat} (\coqdocvar{S} \coqdocvar{n})). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p} \coqdockw{as} [\coqdocvar{t1'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tsucc} \coqdocvar{t1'}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt} \coqdockw{as} [\coqdocvar{Ht1p} \ensuremath{|} \coqdocvar{Ht1p}]...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p}; \coqdoctac{subst}; \coqdoctac{try} \coqdoctac{solve} [\coqdoctac{inversion} \coqdocvar{Ht} ].\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tnat} (\coqdocvar{pred} \coqdocvar{n})). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p} \coqdockw{as} [\coqdocvar{t1'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tpred} \coqdocvar{t1'}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt1} \coqdockw{as} [\coqdocvar{Ht1p} \ensuremath{|} \coqdocvar{Ht1p}]...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p}; \coqdoctac{subst}; \coqdoctac{try} \coqdoctac{solve} [\coqdoctac{inversion} \coqdocvar{Ht1}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2} \coqdockw{as} [\coqdocvar{Ht2p} \ensuremath{|} \coqdocvar{Ht2p}]...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{Ht2p}; \coqdoctac{subst}; \coqdoctac{try} \coqdoctac{solve} [\coqdoctac{inversion} \coqdocvar{Ht2}].\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tnat} (\coqdocvar{mult} \coqdocvar{n} \coqdocvar{n0})). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{Ht2p} \coqdockw{as} [\coqdocvar{t2'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tmult} (\coqdocvar{tnat} \coqdocvar{n}) \coqdocvar{t2'}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p} \coqdockw{as} [\coqdocvar{t1'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tmult} \coqdocvar{t1'} \coqdocvar{t2}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt1} \coqdockw{as} [\coqdocvar{Ht1p} \ensuremath{|} \coqdocvar{Ht1p}]...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p}; \coqdoctac{subst}; \coqdoctac{try} \coqdoctac{solve} [\coqdoctac{inversion} \coqdocvar{Ht1}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{n}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{\ensuremath{\exists}} \coqdocvar{t2}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{st}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{\ensuremath{\exists}} \coqdocvar{t3}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{st}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p} \coqdockw{as} [\coqdocvar{t1'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tif0} \coqdocvar{t1'} \coqdocvar{t2} \coqdocvar{t3}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt} \coqdockw{as} [\coqdocvar{Ht1p} \ensuremath{|} \coqdocvar{Ht1p}]...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p} \coqdockw{as} [\coqdocvar{t1'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tref} \coqdocvar{t1'}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt} \coqdockw{as} [\coqdocvar{Ht1p} \ensuremath{|} \coqdocvar{Ht1p}]...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eexists}. \coqdoctac{eexists}. \coqdoctac{apply} \coqdocvar{ST\_DerefLoc}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht}; \coqdoctac{subst}. \coqdoctac{inversion} \coqdocvar{HST}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p} \coqdockw{as} [\coqdocvar{t1'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tderef} \coqdocvar{t1'}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt1} \coqdockw{as} [\coqdocvar{Ht1p}\ensuremath{|}\coqdocvar{Ht1p}]...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2} \coqdockw{as} [\coqdocvar{Ht2p}\ensuremath{|}\coqdocvar{Ht2p}]...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{eexists}. \coqdoctac{eexists}. \coqdoctac{apply} \coqdocvar{ST\_Assign}...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{HST}; \coqdoctac{subst}. \coqdoctac{inversion} \coqdocvar{Ht1}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{Ht2p} \coqdockw{as} [\coqdocvar{t2'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tassign} \coqdocvar{t1} \coqdocvar{t2'}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p} \coqdockw{as} [\coqdocvar{t1'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tassign} \coqdocvar{t1'} \coqdocvar{t2}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{References and Nontermination}



 An important fact about the STLC (proved in chapter \coqdoclibrary{Norm}) is
    that it is is \textit{normalizing} -- that is, every well-typed term can
    be reduced to a value in a finite number of steps.


    What about STLC + references?  Surprisingly, adding references
    causes us to lose the normalization property: there exist
    well-typed terms in the STLC + references which can continue to
    reduce forever, without ever reaching a normal form!


    How can we construct such a term?  The main idea is to make a
    function which calls itself.  We first make a function which calls
    another function stored in a reference cell; the trick is that we
    then smuggle in a reference to itself!


   (\symbol{92}r:Ref (Unit -> Unit).  
        r := (\symbol{92}x:Unit.(!r) unit); (!r) unit) 
   (ref (\symbol{92}x:Unit.unit))


   First, \coqdocvar{ref} (\symbol{92}\coqdocabbreviation{x}:\coqdocvar{Unit.unit}) creates a reference to a cell of type
   \coqdocvar{Unit} \ensuremath{\rightarrow} \coqdocvar{Unit}.  We then pass this reference as the argument to a
   function which binds it to the name \coqdocdefinition{r}, and assigns to it the
   function \symbol{92}\coqdocabbreviation{x}:\coqdocvar{Unit}.(!\coqdocdefinition{r}) \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}} -- that is, the function which ignores
   its argument and calls the function stored in \coqdocdefinition{r} on the argument
   \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}; but of course, that function is itself!  To start the 
   divergent loop, we execute the function stored in the cell by 
   evaluating (!\coqdocdefinition{r}) \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}. 


   Here is the divergent term in Coq: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{ExampleVariables}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{x} := \coqdocvar{Id} "x".\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{y} := \coqdocvar{Id} "y".\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{r} := \coqdocvar{Id} "r".\coqdoceol
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{s} := \coqdocvar{Id} "s".\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{ExampleVariables}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{RefsAndNontermination}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{ExampleVariables}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{loop\_fun} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TUnit} (\coqdocvar{tapp} (\coqdocvar{tderef} (\coqdocvar{tvar} \coqdocvar{r})) \coqdocvar{tunit}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{loop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tapp}\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tabs} \coqdocvar{r} (\coqdocvar{TRef} (\coqdocvar{TArrow} \coqdocvar{TUnit} \coqdocvar{TUnit}))\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{tseq} (\coqdocvar{tassign} (\coqdocvar{tvar} \coqdocvar{r}) \coqdocvar{loop\_fun})\coqdoceol
\coqdocindent{7.00em}
(\coqdocvar{tapp} (\coqdocvar{tderef} (\coqdocvar{tvar} \coqdocvar{r})) \coqdocvar{tunit})))\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{tref} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TUnit} \coqdocvar{tunit})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This term is well typed: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{loop\_typeable} : \coqdoctac{\ensuremath{\exists}} \coqdocvar{T}, \coqdocvar{empty}; \coqdocvar{nil} \ensuremath{\vdash} \coqdocvar{loop} \symbol{92}\coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eexists}. \coqdoctac{unfold} \coqdocvar{loop}. \coqdoctac{unfold} \coqdocvar{loop\_fun}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{T\_App}...\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{T\_Abs}...\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{T\_App}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_Abs}. \coqdoctac{eapply} \coqdocvar{T\_App}. \coqdoctac{eapply} \coqdocvar{T\_Deref}. \coqdoctac{eapply} \coqdocvar{T\_Var}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}. \coqdoctac{simpl}. \coqdoctac{reflexivity}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{T\_Assign}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_Var}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}. \coqdoctac{simpl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{T\_Abs}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_App}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{T\_Deref}. \coqdoctac{eapply} \coqdocvar{T\_Var}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To show formally that the term diverges, we first define the
    \coqdocinductive{step\_closure} of the single-step reduction relation, written
    ==>+.  This is just like the reflexive step closure of
    single-step reduction (which we're been writing ==>*), except
    that it is not reflexive: \coqdocvariable{t} ==>+ \coqdocvariable{t'} means that \coqdocvariable{t} can reach
    \coqdocvariable{t'} by \textit{one or more} steps of reduction. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step\_closure} \{\coqdocvar{X}:\coqdockw{Type}\} (\coqdocvar{R}: \coqdocvar{relation} \coqdocvar{X}) : \coqdocvar{X} \ensuremath{\rightarrow} \coqdocvar{X} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{sc\_one}  : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x} \coqdocvar{y} : \coqdocvar{X}),\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{step\_closure} \coqdocvar{R} \coqdocvar{x} \coqdocvar{y}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{sc\_step} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x} \coqdocvar{y} \coqdocvar{z} : \coqdocvar{X}),\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{R} \coqdocvar{x} \coqdocvar{y} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{step\_closure} \coqdocvar{R} \coqdocvar{y} \coqdocvar{z} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{step\_closure} \coqdocvar{R} \coqdocvar{x} \coqdocvar{z}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{multistep1} := (\coqdocvar{step\_closure} \coqdocvar{step}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "t1 '/' st '==>+' t2 '/' st'" :=\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{multistep1} (\coqdocvar{t1},\coqdocvar{st}) (\coqdocvar{t2},\coqdocvar{st'}))\coqdoceol
\coqdocindent{4.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{t2} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now, we can show that the expression \coqdocconstructor{loop} reduces to the
    expression !(\coqdocvar{loc} 0) \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}} and the size-one store 
    [\coqdocdefinition{r}:=(\coqdocvar{loc} 0)]\coqdocdefinition{loop\_fun}. 

 As a convenience, we introduce a slight variant of the \coqdocvar{normalize}
    tactic, called \coqdocvar{reduce}, which tries solving the goal with
    \coqdocconstructor{multi\_refl} at each step, instead of waiting until the goal can't
    be reduced any more. Of course, the whole point is that \coqdocconstructor{loop}
    doesn't normalize, so the old \coqdocvar{normalize} tactic would just go
    into an infinite loop reducing it forever! \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{print\_goal} := \coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{x} \ensuremath{\Rightarrow} \coqdoctac{idtac} \coqdocvar{x} \coqdockw{end}.\coqdoceol
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{reduce} :=\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{repeat} (\coqdocvar{print\_goal}; \coqdoctac{eapply} \coqdocvar{multi\_step} ;\coqdoceol
\coqdocindent{6.00em}
[ (\coqdoctac{eauto} 10; \coqdoctac{fail}) \ensuremath{|} (\coqdoctac{instantiate}; \coqdoctac{compute})];\coqdoceol
\coqdocindent{6.00em}
\coqdoctac{try} \coqdoctac{solve} [\coqdoctac{apply} \coqdocvar{multi\_refl}]).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next, we use \coqdocvar{reduce} to show that \coqdocconstructor{loop} steps to 
    !(\coqdocvar{loc} 0) \coqexternalref{unit}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocinductive{unit}}, starting from the empty store. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{loop\_steps\_to\_loop\_fun} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{loop} / \coqdocvar{nil} ==>*\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tapp} (\coqdocvar{tderef} (\coqdocvar{tloc} 0)) \coqdocvar{tunit} / \coqdocvar{cons} ([\coqdocvar{r}:=\coqdocvar{tloc} 0]\coqdocvar{loop\_fun}) \coqdocvar{nil}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{loop}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{reduce}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Finally, we show that the latter expression reduces in
    two steps to itself! \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{loop\_fun\_step\_self} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tapp} (\coqdocvar{tderef} (\coqdocvar{tloc} 0)) \coqdocvar{tunit} / \coqdocvar{cons} ([\coqdocvar{r}:=\coqdocvar{tloc} 0]\coqdocvar{loop\_fun}) \coqdocvar{nil} ==>+\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tapp} (\coqdocvar{tderef} (\coqdocvar{tloc} 0)) \coqdocvar{tunit} / \coqdocvar{cons} ([\coqdocvar{r}:=\coqdocvar{tloc} 0]\coqdocvar{loop\_fun}) \coqdocvar{nil}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{loop\_fun}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{sc\_step}. \coqdoctac{apply} \coqdocvar{ST\_App1}...\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{sc\_one}. \coqdoctac{compute}. \coqdoctac{apply} \coqdocvar{ST\_AppAbs}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 4 stars (factorial\_ref)}

 Use the above ideas to implement a factorial function in STLC with
    references.  (There is no need to prove formally that it really
    behaves like the factorial.  Just uncomment the example below to make
    sure it gives the correct result when applied to the argument
    4.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{factorial} : \coqdocvar{tm} \coqdoceol
\coqdocindent{1.00em}
. \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{factorial\_type} : \coqdocvar{empty}; \coqdocvar{nil} \ensuremath{\vdash} \coqdocvar{factorial} \symbol{92}\coqdoctac{in} (\coqdocvar{TArrow} \coqdocvar{TNat} \coqdocvar{TNat}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If your definition is correct, you should be able to just
    uncomment the example below; the proof should be fully
    automatic using the \coqdocvar{reduce} tactic. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Additional Exercises}



\paragraph{Exercise: 5 stars, optional (garabage\_collector)}

 Challenge problem: modify our formalization to include an account
    of garbage collection, and prove that it satisfies whatever nice
    properties you can think to prove about it. 

 \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{RefsAndNontermination}.\coqdoceol
\coqdocnoindent
\coqdockw{End} \coqdocvar{STLCRef}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
$Date: 2016-10-11 11:45:39 -0400 (Tue, 11 Oct 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.RecordSub}{Library }{Top.RecordSub}

\begin{coqdoccode}
\end{coqdoccode}
\section{RecordSub: Subtyping with Records}



 In this chapter, we combine two significant extensions of the pure
    STLC -- records (from chapter \coqdoclibrary{Records}) and subtyping (from
    chapter \coqdoclibrary{Sub}) -- and explore their interactions.  Most of the
    concepts have already been discussed in those chapters, so the
    presentation here is somewhat terse.  We just comment where things
    are nonstandard. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{MoreStlc}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Core Definitions}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Syntax}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TTop}   : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBase}  : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TRNil} : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TRCons} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tproj} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{trnil} :  \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{trcons} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Well-Formedness}



 The syntax of terms and types is a bit too loose, in the sense
    that it admits things like a record type whose final ``tail'' is
    \coqdocvar{Top} or some arrow type rather than \coqdocvar{Nil}.  To avoid such cases,
    it is useful to assume that all the record types and terms that we
    see will obey some simple well-formedness conditions.


    \coqdocvar{An} \coqdocvar{interesting} \coqdocvar{technical} \coqdocvar{question} \coqdocvar{is} \coqdocvar{whether} \coqdocvar{the} \coqdocvar{basic} \coqdocvar{properties}
    \coqdocvar{of} \coqdocvar{the} \coqdocvar{system} -- \coqdoctac{progress} \coqdocinductive{and} \coqdoclemma{preservation} -- \coqdocvar{remain} \coqdocconstructor{true} \coqdockw{if} \coqdocvar{we}
    \coqdocdefinition{drop} \coqdocvar{these} \coqdocvar{conditions}.  \coqdocconstructor{I} \coqdocvar{believe} \coqdocvar{they} \coqdoctac{do}, \coqdocinductive{and} \coqdocconstructor{I} \coqdocvar{would} \coqdocvar{encourage}
    \coqdocvar{motivated} \coqdocvar{readers} \coqdocvar{to} \coqdoctac{try} \coqdocvar{to} \coqdocvar{check} \coqdocvar{this} \coqdoctac{by} \coqdocvar{dropping} \coqdocvar{the} \coqdocvar{conditions}
    \coqdocvar{from} \coqdocvar{the} \coqdocvar{definitions} \coqdocvar{of} \coqdocvar{typing} \coqdocinductive{and} \coqdocvar{subtyping} \coqdocinductive{and} \coqdocvar{adjusting} \coqdocvar{the}
    \coqdocvar{proofs} \coqdoctac{in} \coqdocvar{the} \coqdocvar{rest} \coqdocvar{of} \coqdocvar{the} \coqdocvar{chapter} \coqdocvar{accordingly}.  \coqdocvar{This} \coqdocvar{is} \coqdocdefinition{not} \coqdocabbreviation{a}
    \coqdoctac{trivial} \coqdocvar{exercise} (\coqdocinductive{or} \coqdocvar{I'd} \coqdocvar{have} \coqdocconstructor{done} \coqdocvar{it}!), \coqdocvar{but} \coqdocvar{it} \coqdocvar{should} \coqdocdefinition{not} \coqdocvar{involve}
    \coqdocvar{changing} \coqdocvar{the} \coqdocvar{basic} \coqdocvar{structure} \coqdocvar{of} \coqdocvar{the} \coqdocvar{proofs}.  \coqdocconstructor{If} \coqdocvar{someone} \coqdocvar{does} \coqdoctac{do}
    \coqdocvar{it}, \coqdocvar{please} \coqdockw{let} \coqdocvar{me} \coqdocvar{know}. --\coqdocvar{BCP} 5/16. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{record\_ty} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{RTnil} :\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{record\_ty} \coqdocvar{TRNil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{RTcons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{record\_ty} (\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{record\_tm} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{rtnil} :\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{record\_tm} \coqdocvar{trnil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{rtcons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{record\_tm} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{t2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{well\_formed\_ty} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wfTTop} :\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{TTop}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wfTBase} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} (\coqdocvar{TBase} \coqdocvar{i})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wfTArrow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wfTRNil} :\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{TRNil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{wfTRCons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{record\_ty} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{well\_formed\_ty} (\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{record\_ty} \coqdocvar{record\_tm} \coqdocvar{well\_formed\_ty}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Substitution}



 Substitution and reduction are as before. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{subst} (\coqdocvar{x}:\coqdocvar{id}) (\coqdocvar{s}:\coqdocvar{tm}) (\coqdocvar{t}:\coqdocvar{tm}) : \coqdocvar{tm} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} \coqdocvar{y} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{s} \coqdockw{else} \coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T} \coqdocvar{t1} \ensuremath{\Rightarrow}  \coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T} (\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{t1}\coqdoceol
\coqdocindent{14.50em}
\coqdockw{else} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow} \coqdocvar{tapp} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tproj} \coqdocvar{t1} \coqdocvar{i} \ensuremath{\Rightarrow} \coqdocvar{tproj} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) \coqdocvar{i}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{trnil} \ensuremath{\Rightarrow} \coqdocvar{trnil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{tr2} \ensuremath{\Rightarrow} \coqdocvar{trcons} \coqdocvar{i} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{tr2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'[' x ':=' s ']' t" := (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t}) (\coqdoctac{at} \coqdockw{level} 20).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Reduction}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_rnil} : \coqdocvar{value} \coqdocvar{trnil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_rcons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{v} \coqdocvar{vr},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{vr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{v} \coqdocvar{vr}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{value}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{Tlookup} (\coqdocvar{i}:\coqdocvar{id}) (\coqdocvar{Tr}:\coqdocvar{ty}) : \coqdocvar{option} \coqdocvar{ty} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{Tr} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TRCons} \coqdocvar{i'} \coqdocvar{T} \coqdocvar{Tr'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{i'} \coqdockw{then} \coqdocvar{Some} \coqdocvar{T} \coqdockw{else} \coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{Tr'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{tlookup} (\coqdocvar{i}:\coqdocvar{id}) (\coqdocvar{tr}:\coqdocvar{tm}) : \coqdocvar{option} \coqdocvar{tm} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{tr} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{trcons} \coqdocvar{i'} \coqdocvar{t} \coqdocvar{tr'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{i'} \coqdockw{then} \coqdocvar{Some} \coqdocvar{t} \coqdockw{else} \coqdocvar{tlookup} \coqdocvar{i} \coqdocvar{tr'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "t1 '==>' t2" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_AppAbs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t12} \coqdocvar{v2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t12}) \coqdocvar{v2}) ==> [\coqdocvar{x}:=\coqdocvar{v2}]\coqdocvar{t12}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) ==> (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2}) ==> (\coqdocvar{tapp} \coqdocvar{v1}  \coqdocvar{t2'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Proj1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{tr} \coqdocvar{tr'} \coqdocvar{i},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{tr} ==> \coqdocvar{tr'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tproj} \coqdocvar{tr} \coqdocvar{i}) ==> (\coqdocvar{tproj} \coqdocvar{tr'} \coqdocvar{i})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_ProjRcd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{tr} \coqdocvar{i} \coqdocvar{vi},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{tlookup} \coqdocvar{i} \coqdocvar{tr} = \coqdocvar{Some} \coqdocvar{vi}    \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{tproj} \coqdocvar{tr} \coqdocvar{i}) ==> \coqdocvar{vi}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Rcd\_Head} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{tr2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{tr2}) ==> (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t1'} \coqdocvar{tr2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Rcd\_Tail} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{v1} \coqdocvar{tr2} \coqdocvar{tr2'},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{tr2} ==> \coqdocvar{tr2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{v1} \coqdocvar{tr2}) ==> (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{v1} \coqdocvar{tr2'})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "t1 '==>' t2" := (\coqdocvar{step} \coqdocvar{t1} \coqdocvar{t2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{step}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Subtyping}



 Now we come to the interesting part, where the features we've
    added start to interact.  We begin by defining the subtyping
    relation and developing some of its important technical
    properties. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Definition}



 The definition of subtyping is essentially just what we sketched
    in the discussion of record subtyping in chapter \coqdoclibrary{Sub}, but we
    need to add well-formedness side conditions to some of the rules.
    Also, we replace the ``n-ary'' width, depth, and permutation
    subtyping rules by binary rules that deal with just the first
    field. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "T '<:' U" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{subtype} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_Refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{T} <: \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_Trans} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S} \coqdocvar{U} \coqdocvar{T},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{S} <: \coqdocvar{U} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{U} <: \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{S} <: \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_Top} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{S} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{S} <: \coqdocvar{TTop}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_Arrow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S1} \coqdocvar{S2} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{T1} <: \coqdocvar{S1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{S2} <: \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{TArrow} \coqdocvar{S1} \coqdocvar{S2} <: \coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_RcdWidth} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{well\_formed\_ty} (\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{T2} <: \coqdocvar{TRNil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_RcdDepth} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{S1} \coqdocvar{T1} \coqdocvar{Sr2} \coqdocvar{Tr2},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{S1} <: \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Sr2} <: \coqdocvar{Tr2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{record\_ty} \coqdocvar{Sr2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{record\_ty} \coqdocvar{Tr2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{S1} \coqdocvar{Sr2} <: \coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{T1} \coqdocvar{Tr2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S\_RcdPerm} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i1} \coqdocvar{i2} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{Tr3},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{well\_formed\_ty} (\coqdocvar{TRCons} \coqdocvar{i1} \coqdocvar{T1} (\coqdocvar{TRCons} \coqdocvar{i2} \coqdocvar{T2} \coqdocvar{Tr3})) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{i1} \ensuremath{\not=} \coqdocvar{i2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{TRCons} \coqdocvar{i1} \coqdocvar{T1} (\coqdocvar{TRCons} \coqdocvar{i2} \coqdocvar{T2} \coqdocvar{Tr3})\coqdoceol
\coqdocindent{2.00em}
<: \coqdocvar{TRCons} \coqdocvar{i2} \coqdocvar{T2} (\coqdocvar{TRCons} \coqdocvar{i1} \coqdocvar{T1} \coqdocvar{Tr3})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "T '<:' U" := (\coqdocvar{subtype} \coqdocvar{T} \coqdocvar{U}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{subtype}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Examples}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Examples}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{x} := (\coqdocvar{Id} "x").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{y} := (\coqdocvar{Id} "y").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{z} := (\coqdocvar{Id} "z").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{j} := (\coqdocvar{Id} "j").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{k} := (\coqdocvar{Id} "k").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{i} := (\coqdocvar{Id} "i").\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{A} := (\coqdocvar{TBase} (\coqdocvar{Id} "A")).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{B} := (\coqdocvar{TBase} (\coqdocvar{Id} "B")).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{C} := (\coqdocvar{TBase} (\coqdocvar{Id} "C")).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{TRcd\_j}  :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{TRCons} \coqdocvar{j} (\coqdocvar{TArrow} \coqdocvar{B} \coqdocvar{B}) \coqdocvar{TRNil}). \coqdocnoindent
\coqdockw{Definition} \coqdocvar{TRcd\_kj} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{TRCons} \coqdocvar{k} (\coqdocvar{TArrow} \coqdocvar{A} \coqdocvar{A}) \coqdocvar{TRcd\_j}. \coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{subtyping\_example\_0} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} (\coqdocvar{TArrow} \coqdocvar{C} \coqdocvar{TRcd\_kj})\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{TArrow} \coqdocvar{C} \coqdocvar{TRNil}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{S\_Arrow}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{S\_Refl}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{TRcd\_kj}, \coqdocvar{TRcd\_j}. \coqdoctac{apply} \coqdocvar{S\_RcdWidth}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The following facts are mostly easy to prove in Coq.  To get full
    benefit, make sure you also understand how to prove them on
    paper! 

\paragraph{Exercise: 2 stars (subtyping\_example\_1)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{subtyping\_example\_1} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} \coqdocvar{TRcd\_kj} \coqdocvar{TRcd\_j}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star (subtyping\_example\_2)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{subtyping\_example\_2} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} (\coqdocvar{TArrow} \coqdocvar{TTop} \coqdocvar{TRcd\_kj})\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{TArrow} (\coqdocvar{TArrow} \coqdocvar{C} \coqdocvar{C}) \coqdocvar{TRcd\_j}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 1 star (subtyping\_example\_3)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{subtyping\_example\_3} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} (\coqdocvar{TArrow} \coqdocvar{TRNil} (\coqdocvar{TRCons} \coqdocvar{j} \coqdocvar{A} \coqdocvar{TRNil}))\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{TArrow} (\coqdocvar{TRCons} \coqdocvar{k} \coqdocvar{B} \coqdocvar{TRNil}) \coqdocvar{TRNil}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars (subtyping\_example\_4)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{subtyping\_example\_4} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} (\coqdocvar{TRCons} \coqdocvar{x} \coqdocvar{A} (\coqdocvar{TRCons} \coqdocvar{y} \coqdocvar{B} (\coqdocvar{TRCons} \coqdocvar{z} \coqdocvar{C} \coqdocvar{TRNil})))\coqdoceol
\coqdocindent{5.00em}
(\coqdocvar{TRCons} \coqdocvar{z} \coqdocvar{C} (\coqdocvar{TRCons} \coqdocvar{y} \coqdocvar{B} (\coqdocvar{TRCons} \coqdocvar{x} \coqdocvar{A} \coqdocvar{TRNil}))).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Examples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Properties of Subtyping}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Well-Formedness}



 To get started proving things about subtyping, we need a couple of
    technical lemmas that intuitively (1) allow us to extract the
    well-formedness assumptions embedded in subtyping derivations
    and (2) record the fact that fields of well-formed record types
    are themselves well-formed types.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{subtype\_\_wf} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} \coqdocvar{S} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T} \ensuremath{\land} \coqdocvar{well\_formed\_ty} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{S} \coqdocvar{T} \coqdocvar{Hsub}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hsub};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}; \coqdoctac{try} (\coqdoctac{destruct} \coqdocvar{IHHsub1}; \coqdoctac{destruct} \coqdocvar{IHHsub2})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{split}... \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}. \coqdoctac{inversion} \coqdocvar{H5}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{wf\_rcd\_lookup} : \coqdockw{\ensuremath{\forall}} \coqdocvar{i} \coqdocvar{T} \coqdocvar{Ti},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{T} = \coqdocvar{Some} \coqdocvar{Ti} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{Ti}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{i} \coqdocvar{T}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{T}; \coqdoctac{intros}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}. \coqdoctac{unfold} \coqdocvar{Tlookup} \coqdoctac{in} \coqdocvar{H0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{i0})... \coqdoctac{inversion} \coqdocvar{H0}; \coqdoctac{subst}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Field Lookup}



 The record matching lemmas get a little more complicated in the
    presence of subtyping, for two reasons.  First, record types no
    longer necessarily describe the exact structure of the
    corresponding terms.  And second, reasoning by induction on typing
    derivations becomes harder in general, because typing is no longer
    syntax directed. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{rcd\_types\_match} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S} \coqdocvar{T} \coqdocvar{i} \coqdocvar{Ti},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} \coqdocvar{S} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{T} = \coqdocvar{Some} \coqdocvar{Ti} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{Si}, \coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{S} = \coqdocvar{Some} \coqdocvar{Si} \ensuremath{\land} \coqdocvar{subtype} \coqdocvar{Si} \coqdocvar{Ti}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} (\coqdoctac{eauto} \coqdockw{using} \coqdocvar{wf\_rcd\_lookup}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{S} \coqdocvar{T} \coqdocvar{i} \coqdocvar{Ti} \coqdocvar{Hsub} \coqdocvar{Hget}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Ti}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hsub}; \coqdoctac{intros} \coqdocvar{Ti} \coqdocvar{Hget};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{Ti}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{IHHsub2} \coqdocvar{Ti}) \coqdockw{as} [\coqdocvar{Ui} \coqdocvar{Hui}]... \coqdoctac{destruct} \coqdocvar{Hui}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{IHHsub1} \coqdocvar{Ui}) \coqdockw{as} [\coqdocvar{Si} \coqdocvar{Hsi}]... \coqdoctac{destruct} \coqdocvar{Hsi}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{Si}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i0} \coqdocvar{into} \coqdocvar{k}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{Tlookup}. \coqdoctac{unfold} \coqdocvar{Tlookup} \coqdoctac{in} \coqdocvar{Hget}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{k})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Hget}. \coqdoctac{subst}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{S1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{Ti}. \coqdoctac{split}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{unfold} \coqdocvar{Tlookup}. \coqdoctac{unfold} \coqdocvar{Tlookup} \coqdoctac{in} \coqdocvar{Hget}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{i} \coqdocvar{i1})...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{i} \coqdocvar{i2})...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} \coqdocvar{H0}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}. \coqdoctac{inversion} \coqdocvar{H5}. \coqdoctac{subst}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 3 stars (rcd\_types\_match\_informal)}

 Write a careful informal proof of the \coqdoclemma{rcd\_types\_match}
    lemma. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Inversion Lemmas}



\paragraph{Exercise: 3 stars, optional (sub\_inversion\_arrow)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{sub\_inversion\_arrow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{U} \coqdocvar{V1} \coqdocvar{V2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{subtype} \coqdocvar{U} (\coqdocvar{TArrow} \coqdocvar{V1} \coqdocvar{V2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{U1}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{U2},\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{U}=(\coqdocvar{TArrow} \coqdocvar{U1} \coqdocvar{U2})) \ensuremath{\land} (\coqdocvar{subtype} \coqdocvar{V1} \coqdocvar{U1}) \ensuremath{\land} (\coqdocvar{subtype} \coqdocvar{U2} \coqdocvar{V2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{U} \coqdocvar{V1} \coqdocvar{V2} \coqdocvar{Hs}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{TArrow} \coqdocvar{V1} \coqdocvar{V2}) \coqdockw{as} \coqdocvar{V}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{V2}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{V1}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Typing}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdockw{context} := \coqdocvar{partial\_map} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "Gamma '|-' t '\symbol{92}in' T" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{has\_type} : \coqdockw{context} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tvar} \coqdocvar{x} \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{T12} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{well\_formed\_ty} \coqdocvar{T11} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11} \ensuremath{\vdash} \coqdocvar{t12} \symbol{92}\coqdoctac{in} \coqdocvar{T12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12} \symbol{92}\coqdoctac{in} \coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_App} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t1} \symbol{92}\coqdoctac{in} \coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} \symbol{92}\coqdoctac{in} \coqdocvar{T2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Proj} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{i} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Ti},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{T} = \coqdocvar{Some} \coqdocvar{Ti} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tproj} \coqdocvar{t} \coqdocvar{i} \symbol{92}\coqdoctac{in} \coqdocvar{Ti}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Sub} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{S} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{S} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{subtype} \coqdocvar{S} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_RNil} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{trnil} \symbol{92}\coqdoctac{in} \coqdocvar{TRNil}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_RCons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{i} \coqdocvar{t} \coqdocvar{T} \coqdocvar{tr} \coqdocvar{Tr},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{t} \symbol{92}\coqdoctac{in} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{tr} \symbol{92}\coqdoctac{in} \coqdocvar{Tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{record\_ty} \coqdocvar{Tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{record\_tm} \coqdocvar{tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \ensuremath{\vdash} \coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t} \coqdocvar{tr} \symbol{92}\coqdoctac{in} \coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{T} \coqdocvar{Tr}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "Gamma '|-' t '\symbol{92}in' T" := (\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{has\_type}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Typing Examples}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Examples2}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{Examples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\paragraph{Exercise: 1 star (typing\_example\_0)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{trcd\_kj} :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{trcons} \coqdocvar{k} (\coqdocvar{tabs} \coqdocvar{z} \coqdocvar{A} (\coqdocvar{tvar} \coqdocvar{z}))\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{trcons} \coqdocvar{j} (\coqdocvar{tabs} \coqdocvar{z} \coqdocvar{B} (\coqdocvar{tvar} \coqdocvar{z}))\coqdoceol
\coqdocindent{11.00em}
\coqdocvar{trnil})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_example\_0} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty}\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{trcons} \coqdocvar{k} (\coqdocvar{tabs} \coqdocvar{z} \coqdocvar{A} (\coqdocvar{tvar} \coqdocvar{z}))\coqdoceol
\coqdocindent{10.50em}
(\coqdocvar{trcons} \coqdocvar{j} (\coqdocvar{tabs} \coqdocvar{z} \coqdocvar{B} (\coqdocvar{tvar} \coqdocvar{z}))\coqdoceol
\coqdocindent{15.50em}
\coqdocvar{trnil}))\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{TRcd\_kj}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars (typing\_example\_1)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_example\_1} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty}\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TRcd\_j} (\coqdocvar{tproj} (\coqdocvar{tvar} \coqdocvar{x}) \coqdocvar{j}))\coqdoceol
\coqdocindent{9.50em}
(\coqdocvar{trcd\_kj}))\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{TArrow} \coqdocvar{B} \coqdocvar{B}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 2 stars, optional (typing\_example\_2)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_example\_2} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty}\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{z} (\coqdocvar{TArrow} (\coqdocvar{TArrow} \coqdocvar{C} \coqdocvar{C}) \coqdocvar{TRcd\_j})\coqdoceol
\coqdocindent{13.50em}
(\coqdocvar{tproj} (\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{z})\coqdoceol
\coqdocindent{22.00em}
(\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{C} (\coqdocvar{tvar} \coqdocvar{x})))\coqdoceol
\coqdocindent{18.00em}
\coqdocvar{j}))\coqdoceol
\coqdocindent{9.50em}
(\coqdocvar{tabs} \coqdocvar{z} (\coqdocvar{TArrow} \coqdocvar{C} \coqdocvar{C}) \coqdocvar{trcd\_kj}))\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{TArrow} \coqdocvar{B} \coqdocvar{B}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Examples2}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Properties of Typing}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Well-Formedness}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{has\_type\_\_wf} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{well\_formed\_ty} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Htyp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{IHHtyp1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{wf\_rcd\_lookup}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{subtype\_\_wf} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{H}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_preserves\_record\_tm} : \coqdockw{\ensuremath{\forall}} \coqdocvar{tr} \coqdocvar{tr'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{record\_tm} \coqdocvar{tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{tr} ==> \coqdocvar{tr'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{record\_tm} \coqdocvar{tr'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{tr} \coqdocvar{tr'} \coqdocvar{Hrt} \coqdocvar{Hstp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{Hrt}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{Hstp}; \coqdoctac{subst}; \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Field Lookup}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{lookup\_field\_in\_value} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v} \coqdocvar{T} \coqdocvar{i} \coqdocvar{Ti},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{v} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{v} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{T} = \coqdocvar{Some} \coqdocvar{Ti} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{vi}, \coqdocvar{tlookup} \coqdocvar{i} \coqdocvar{v} = \coqdocvar{Some} \coqdocvar{vi} \ensuremath{\land} \coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{vi} \coqdocvar{Ti}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} \coqdocvar{empty} \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{T} \coqdocvar{i} \coqdocvar{Ti} \coqdocvar{Hval} \coqdocvar{Htyp}. \coqdocvar{revert} \coqdocvar{Ti} \coqdocvar{HeqGamma} \coqdocvar{Hval}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp}; \coqdoctac{intros}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} (\coqdocvar{rcd\_types\_match} \coqdocvar{S}) \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{Si} [\coqdocvar{HgetSi} \coqdocvar{Hsub}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{IHHtyp} \coqdocvar{Si}) \coqdockw{as} [\coqdocvar{vi} [\coqdocvar{Hget} \coqdocvar{Htyvi}]]...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H0}. \coqdoctac{simpl}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{i0}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H1}. \coqdoctac{subst}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{t}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{IHHtyp2} \coqdocvar{Ti}) \coqdockw{as} [\coqdocvar{vi} [\coqdocvar{get} \coqdocvar{Htyvi}]]...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Hval}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Progress}



\paragraph{Exercise: 3 stars (canonical\_forms\_of\_arrow\_types)}

\begin{coqdoccode}
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{canonical\_forms\_of\_arrow\_types} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{s} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{s} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{value} \coqdocvar{s} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{S1}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{s2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{s} = \coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\end{coqdoccode}
\ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Ht}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} \coqdocvar{empty} \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{revert} \coqdocvar{HeqGamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Ht};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{HeqGamma}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{canonical\_forms\_of\_arrow\_types} \coqdocvar{empty} \coqdocvar{t1} \coqdocvar{T1} \coqdocvar{T2})\coqdoceol
\coqdocindent{5.00em}
\coqdockw{as} [\coqdocvar{x} [\coqdocvar{S1} [\coqdocvar{t12} \coqdocvar{Heqt1}]]]...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{subst}. \coqdoctac{\ensuremath{\exists}} ([\coqdocvar{x}:=\coqdocvar{t2}]\coqdocvar{t12})...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t2'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2'})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{lookup\_field\_in\_value} \coqdocvar{t} \coqdocvar{T} \coqdocvar{i} \coqdocvar{Ti})\coqdoceol
\coqdocindent{4.00em}
\coqdockw{as} [\coqdocvar{t'} [\coqdocvar{Hget} \coqdocvar{Ht'}]]...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tproj} \coqdocvar{t'} \coqdocvar{i})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{H2} \coqdockw{as} [\coqdocvar{tr'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t} \coqdocvar{tr'})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{H1} \coqdockw{as} [\coqdocvar{t'} \coqdocvar{Hstp}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t'} \coqdocvar{tr})... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\textit{Theorem} : For any term \coqdocvariable{t} and type \coqdocdefinition{T}, if \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T}
    then \coqdocvariable{t} is a value or \coqdocvariable{t} ==> \coqdocvariable{t'} for some term \coqdocvariable{t'}.


    \textit{Proof}: Let \coqdocvariable{t} and \coqdocdefinition{T} be given such that \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T}.  We
    proceed by induction on the given typing derivation.



\begin{itemize}
\item  The cases where the last step in the typing derivation is
        \coqdocconstructor{T\_Abs} or \coqdocconstructor{T\_RNil} are immediate because abstractions and
        \{\} are always values.  The case for \coqdocconstructor{T\_Var} is vacuous
        because variables cannot be typed in the empty context.



\item  If the last step in the typing derivation is by \coqdocconstructor{T\_App}, then
        there are terms \coqdocvariable{t1} \coqdocvariable{t2} and types \coqdocvariable{T1} \coqdocvariable{T2} such that \coqdocvariable{t} =
        \coqdocvariable{t1} \coqdocvariable{t2}, \coqdocdefinition{T} = \coqdocvariable{T2}, \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t1} : \coqdocvariable{T1} \ensuremath{\rightarrow} \coqdocvariable{T2} and \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t2} :
        \coqdocvariable{T1}.


        The induction hypotheses for these typing derivations yield
        that \coqdocvariable{t1} is a value or steps, and that \coqdocvariable{t2} is a value or
        steps.



\begin{itemize}
\item  Suppose \coqdocvariable{t1} ==> \coqdocvariable{t1'} for some term \coqdocvariable{t1'}.  Then \coqdocvariable{t1} \coqdocvariable{t2} ==>
          \coqdocvariable{t1'} \coqdocvariable{t2} by \coqdocconstructor{ST\_App1}.



\item  Otherwise \coqdocvariable{t1} is a value.



\begin{itemize}
\item  Suppose \coqdocvariable{t2} ==> \coqdocvariable{t2'} for some term \coqdocvariable{t2'}.  Then \coqdocvariable{t1} \coqdocvariable{t2} ==>
            \coqdocvariable{t1} \coqdocvariable{t2'} by rule \coqdocconstructor{ST\_App2} because \coqdocvariable{t1} is a value.



\item  Otherwise, \coqdocvariable{t2} is a value.  By Lemma
            \coqdocvar{canonical\_forms\_for\_arrow\_types}, \coqdocvariable{t1} = \symbol{92}\coqdocabbreviation{x}:\coqdocvar{S1.s2} for
            some \coqdocabbreviation{x}, \coqdocvariable{S1}, and \coqdocvariable{s2}.  But then (\symbol{92}\coqdocabbreviation{x}:\coqdocvar{S1.s2}) \coqdocvariable{t2} ==>
            [\coqdocabbreviation{x}:=\coqdocvariable{t2}]\coqdocvariable{s2} by \coqdocconstructor{ST\_AppAbs}, since \coqdocvariable{t2} is a value.



\end{itemize}

\end{itemize}

\item  If the last step of the derivation is by \coqdocconstructor{T\_Proj}, then there
        are a term \coqdocvariable{tr}, a type \coqdocvariable{Tr}, and a label \coqdocabbreviation{i} such that \coqdocvariable{t} =
        \coqdocvar{tr.i}, \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{tr} : \coqdocvariable{Tr}, and \coqdocdefinition{Tlookup} \coqdocabbreviation{i} \coqdocvariable{Tr} = \coqdocconstructor{Some} \coqdocdefinition{T}.


        By the IH, either \coqdocvariable{tr} is a value or it steps.  If \coqdocvariable{tr} ==>
        \coqdocvariable{tr'} for some term \coqdocvariable{tr'}, then \coqdocvar{tr.i} ==> \coqdocvar{tr'.i} by rule
        \coqdocconstructor{ST\_Proj1}.


        If \coqdocvariable{tr} is a value, then Lemma \coqdoclemma{lookup\_field\_in\_value} yields
        that there is a term \coqdocvariable{ti} such that \coqdocdefinition{tlookup} \coqdocabbreviation{i} \coqdocvariable{tr} = \coqdocconstructor{Some} \coqdocvariable{ti}.
        It follows that \coqdocvar{tr.i} ==> \coqdocvariable{ti} by rule \coqdocconstructor{ST\_ProjRcd}.



\item  If the final step of the derivation is by \coqdocconstructor{T\_Sub}, then there
        is a type \coqdocconstructor{S} such that \coqdocconstructor{S} <: \coqdocdefinition{T} and \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocconstructor{S}.  The
        desired result is exactly the induction hypothesis for the
        typing subderivation.



\item  If the final step of the derivation is by \coqdocconstructor{T\_RCons}, then
        there exist some terms \coqdocvariable{t1} \coqdocvariable{tr}, types \coqdocvariable{T1} \coqdocvariable{Tr} and a label
        \coqdocvariable{t} such that \coqdocvariable{t} = \{\coqdocabbreviation{i}=\coqdocvariable{t1}, \coqdocvariable{tr}\}, \coqdocdefinition{T} = \{\coqdocabbreviation{i}:\coqdocvariable{T1}, \coqdocvariable{Tr}\}, \coqdocinductive{record\_tm}
        \coqdocvariable{tr}, \coqdocinductive{record\_tm} \coqdocvariable{Tr}, \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t1} : \coqdocvariable{T1} and \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{tr} :
        \coqdocvariable{Tr}.


        The induction hypotheses for these typing derivations yield
        that \coqdocvariable{t1} is a value or steps, and that \coqdocvariable{tr} is a value or
        steps.  We consider each case:



\begin{itemize}
\item  Suppose \coqdocvariable{t1} ==> \coqdocvariable{t1'} for some term \coqdocvariable{t1'}.  Then \{\coqdocabbreviation{i}=\coqdocvariable{t1}, \coqdocvariable{tr}\}
          ==> \{\coqdocabbreviation{i}=\coqdocvariable{t1'}, \coqdocvariable{tr}\} by rule \coqdocconstructor{ST\_Rcd\_Head}.



\item  Otherwise \coqdocvariable{t1} is a value.



\begin{itemize}
\item  Suppose \coqdocvariable{tr} ==> \coqdocvariable{tr'} for some term \coqdocvariable{tr'}.  Then \{\coqdocabbreviation{i}=\coqdocvariable{t1},
            \coqdocvariable{tr}\} ==> \{\coqdocabbreviation{i}=\coqdocvariable{t1}, \coqdocvariable{tr'}\} by rule \coqdocconstructor{ST\_Rcd\_Tail}, since \coqdocvariable{t1} is
            a value.



\item  Otherwise, \coqdocvariable{tr} is also a value.  So, \{\coqdocabbreviation{i}=\coqdocvariable{t1}, \coqdocvariable{tr}\} is a
            value by \coqdocconstructor{v\_rcons}. 
\end{itemize}

\end{itemize}

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Inversion Lemmas}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tvar} \coqdocvar{x}) \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{S},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{S} \ensuremath{\land} \coqdocvar{subtype} \coqdocvar{S} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{tvar} \coqdocvar{x}) \coqdockw{as} \coqdocvar{t}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hty}; \coqdoctac{intros};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqt}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHty} \coqdockw{as} [\coqdocvar{U} [\coqdocvar{Hctx} \coqdocvar{HsubU}]]... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_app} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{T2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t1} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\land}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t2} \coqdocvar{T1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{T2} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) \coqdockw{as} \coqdocvar{t}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hty}; \coqdoctac{intros};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqt}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHty} \coqdockw{as} [\coqdocvar{U1} [\coqdocvar{Hty1} \coqdocvar{Hty2}]]...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{Hwf} := \coqdocvar{has\_type\_\_wf} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Hty2}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{U1}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{t2} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{t2}) \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{S2}, \coqdocvar{subtype} (\coqdocvar{TArrow} \coqdocvar{S1} \coqdocvar{S2}) \coqdocvar{T}\coqdoceol
\coqdocindent{7.00em}
\ensuremath{\land} \coqdocvar{has\_type} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{S1}) \coqdocvar{t2} \coqdocvar{S2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{t2} \coqdocvar{T} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{t2}) \coqdockw{as} \coqdocvar{t}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqt}; \coqdoctac{subst}; \coqdoctac{intros}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{Hwf} := \coqdocvar{has\_type\_\_wf} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H0}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T12}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHhas\_type} \coqdockw{as} [\coqdocvar{S2} [\coqdocvar{Hsub} \coqdocvar{Hty}]]...\coqdoceol
\coqdocindent{2.00em}
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_proj} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{Ti},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tproj} \coqdocvar{t1} \coqdocvar{i}) \coqdocvar{Ti} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{Si},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Tlookup} \coqdocvar{i} \coqdocvar{T} = \coqdocvar{Some} \coqdocvar{Si} \ensuremath{\land} \coqdocvar{subtype} \coqdocvar{Si} \coqdocvar{Ti} \ensuremath{\land} \coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{i} \coqdocvar{t1} \coqdocvar{Ti} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{tproj} \coqdocvar{t1} \coqdocvar{i}) \coqdockw{as} \coqdocvar{t}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqt}; \coqdoctac{subst}; \coqdoctac{intros}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{well\_formed\_ty} \coqdocvar{Ti}) \coqdockw{as} \coqdocvar{Hwf}.\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} (\coqdocvar{wf\_rcd\_lookup} \coqdocvar{i} \coqdocvar{T} \coqdocvar{Ti})...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{has\_type\_\_wf} \coqdoctac{in} \coqdocvar{H}... \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{Ti}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHhas\_type} \coqdockw{as} [\coqdocvar{U} [\coqdocvar{Ui} [\coqdocvar{Hget} [\coqdocvar{Hsub} \coqdocvar{Hty}]]]]...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{U}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{Ui}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{typing\_inversion\_rcons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{i} \coqdocvar{ti} \coqdocvar{tr} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{ti} \coqdocvar{tr}) \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{Si}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{Sr},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{subtype} (\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{Si} \coqdocvar{Sr}) \coqdocvar{T} \ensuremath{\land} \coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{ti} \coqdocvar{Si} \ensuremath{\land}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{record\_tm} \coqdocvar{tr} \ensuremath{\land} \coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{tr} \coqdocvar{Sr}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{i} \coqdocvar{ti} \coqdocvar{tr} \coqdocvar{T} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{ti} \coqdocvar{tr}) \coqdockw{as} \coqdocvar{t}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hty};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heqt}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHHty} \coqdoctac{in} \coqdocvar{H0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{Ri} [\coqdocvar{Rr} [\coqdocvar{HsubRS} [\coqdocvar{HtypRi} \coqdocvar{HtypRr}]]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{Ri}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{Rr}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{well\_formed\_ty} (\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{T} \coqdocvar{Tr})) \coqdockw{as} \coqdocvar{Hwf}.\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{has\_type\_\_wf} \coqdoctac{in} \coqdocvar{Hty1}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{has\_type\_\_wf} \coqdoctac{in} \coqdocvar{Hty2}... \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{Tr}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{abs\_arrow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2}) (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{subtype} \coqdocvar{T1} \coqdocvar{S1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\land} \coqdocvar{has\_type} (\coqdocvar{update} \coqdocvar{empty} \coqdocvar{x} \coqdocvar{S1}) \coqdocvar{s2} \coqdocvar{T2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{typing\_inversion\_abs} \coqdoctac{in} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{Hty} \coqdockw{as} [\coqdocvar{S2} [\coqdocvar{Hsub} \coqdocvar{Hty}]].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{sub\_inversion\_arrow} \coqdoctac{in} \coqdocvar{Hsub}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{Hsub} \coqdockw{as} [\coqdocvar{U1} [\coqdocvar{U2} [\coqdocvar{Heq} [\coqdocvar{Hsub1} \coqdocvar{Hsub2}]]]].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{Heq}; \coqdoctac{subst}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Context Invariance}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{appears\_free\_in} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tvar} \coqdocvar{x})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{y} \ensuremath{\not=} \coqdocvar{x}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_proj} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{i},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tproj} \coqdocvar{t} \coqdocvar{i})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_rhead} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{i} \coqdocvar{t} \coqdocvar{tr},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t} \coqdocvar{tr})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_rtail} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{i} \coqdocvar{t} \coqdocvar{tr},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{tr} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{trcons} \coqdocvar{i} \coqdocvar{t} \coqdocvar{tr}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{appears\_free\_in}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{context\_invariance} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{Gamma'} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{S}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Gamma'} \coqdocvar{x})  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma'} \coqdocvar{t} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{Gamma'} \coqdocvar{Heqv}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}... \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Heqv}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}... \coqdoctac{apply} \coqdocvar{IHhas\_type}. \coqdoctac{intros} \coqdocvar{x0} \coqdocvar{Hafi}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}. \coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{x0})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_App} \coqdockw{with} \coqdocvar{T1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_RCons}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{free\_in\_context} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}, \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma} \coqdocvar{Hafi} \coqdocvar{Htyp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{Hafi}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{IHHtyp} \coqdocvar{H5}) \coqdockw{as} [\coqdocvar{T} \coqdocvar{Hctx}]. \coqdoctac{\ensuremath{\exists}} \coqdocvar{T}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id} \coqdoctac{in} \coqdocvar{Hctx}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Preservation}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{substitution\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \coqdocvar{t} \coqdocvar{S}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{v} \coqdocvar{U}   \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} ([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}) \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S} \coqdocvar{Htypt} \coqdocvar{Htypv}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{S}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{typing\_inversion\_var} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt}) \coqdockw{as} [\coqdocvar{T} [\coqdocvar{Hctx} \coqdocvar{Hsub}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Hctx}; \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{context\_invariance} \coqdockw{with} \coqdocvar{empty}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hcontra}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{free\_in\_context} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{S} \coqdocvar{empty} \coqdocvar{Hcontra}) \coqdockw{as} [\coqdocvar{T'} \coqdocvar{HT'}]...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT'}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{subtype\_\_wf} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Hsub})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{typing\_inversion\_app} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt})\coqdoceol
\coqdocindent{3.00em}
\coqdockw{as} [\coqdocvar{T1} [\coqdocvar{Htypt1} \coqdocvar{Htypt2}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_App}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}. \coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{T1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{typing\_inversion\_abs} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt})\coqdoceol
\coqdocindent{3.00em}
\coqdockw{as} [\coqdocvar{T2} [\coqdocvar{Hsub} \coqdocvar{Htypt2}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{subtype\_\_wf} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Hsub}) \coqdockw{as} [\coqdocvar{Hwf1} \coqdocvar{Hwf2}].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Hwf2}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Sub} \coqdockw{with} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2})... \coqdoctac{apply} \coqdocvar{T\_Abs}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{y} \coqdocvar{x})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHt}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y} \coqdocvar{z})...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{typing\_inversion\_proj} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt})\coqdoceol
\coqdocindent{3.00em}
\coqdockw{as} [\coqdocvar{T} [\coqdocvar{Ti} [\coqdocvar{Hget} [\coqdocvar{Hsub} \coqdocvar{Htypt1}]]]]...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{y} \coqdocvar{Hcontra}. \coqdoctac{inversion} \coqdocvar{Hcontra}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{typing\_inversion\_rcons} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt}) \coqdockw{as}\coqdoceol
\coqdocindent{3.00em}
[\coqdocvar{Ti} [\coqdocvar{Tr} [\coqdocvar{Hsub} [\coqdocvar{HtypTi} [\coqdocvar{Hrcdt2} \coqdocvar{HtypTr}]]]]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Sub} \coqdockw{with} (\coqdocvar{TRCons} \coqdocvar{i} \coqdocvar{Ti} \coqdocvar{Tr})...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_RCons}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{subtype\_\_wf} \coqdoctac{in} \coqdocvar{Hsub}. \coqdoctac{destruct} \coqdocvar{Hsub}. \coqdoctac{inversion} \coqdocvar{H0}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Hrcdt2}; \coqdoctac{subst}; \coqdoctac{simpl}... \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t} ==> \coqdocvar{t'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t'} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{HT}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} \coqdocvar{empty} \coqdockw{as} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{HeqGamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{HT};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{t'} \coqdocvar{HeqGamma} \coqdocvar{HE}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{abs\_arrow} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{HT1}) \coqdockw{as} [\coqdocvar{HA1} \coqdocvar{HA2}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{substitution\_preserves\_typing} \coqdockw{with} \coqdocvar{T}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{lookup\_field\_in\_value} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H2} \coqdocvar{HT} \coqdocvar{H})\coqdoceol
\coqdocindent{3.00em}
\coqdockw{as} [\coqdocvar{vi} [\coqdocvar{Hget} \coqdocvar{Hty}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H4} \coqdoctac{in} \coqdocvar{Hget}. \coqdoctac{inversion} \coqdocvar{Hget}. \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eauto} \coqdockw{using} \coqdocvar{step\_preserves\_record\_tm}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\textit{Theorem}: If \coqdocvariable{t}, \coqdocvariable{t'} are terms and \coqdocdefinition{T} is a type such that
     \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T} and \coqdocvariable{t} ==> \coqdocvariable{t'}, then \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t'} : \coqdocdefinition{T}.


    \textit{Proof}: Let \coqdocvariable{t} and \coqdocdefinition{T} be given such that \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T}.  We go
     by induction on the structure of this typing derivation, leaving
     \coqdocvariable{t'} general.  Cases \coqdocconstructor{T\_Abs} and \coqdocconstructor{T\_RNil} are vacuous because
     abstractions and \{\} don't step.  Case \coqdocconstructor{T\_Var} is vacuous as well,
     since the context is empty.



\begin{itemize}
\item  If the final step of the derivation is by \coqdocconstructor{T\_App}, then there
       are terms \coqdocvariable{t1} \coqdocvariable{t2} and types \coqdocvariable{T1} \coqdocvariable{T2} such that \coqdocvariable{t} = \coqdocvariable{t1} \coqdocvariable{t2},
       \coqdocdefinition{T} = \coqdocvariable{T2}, \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t1} : \coqdocvariable{T1} \ensuremath{\rightarrow} \coqdocvariable{T2} and \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t2} : \coqdocvariable{T1}.


       By inspection of the definition of the step relation, there are
       three ways \coqdocvariable{t1} \coqdocvariable{t2} can step.  Cases \coqdocconstructor{ST\_App1} and \coqdocconstructor{ST\_App2}
       follow immediately by the induction hypotheses for the typing
       subderivations and a use of \coqdocconstructor{T\_App}.


       Suppose instead \coqdocvariable{t1} \coqdocvariable{t2} steps by \coqdocconstructor{ST\_AppAbs}.  Then
       \coqdocvariable{t1} = \symbol{92}\coqdocabbreviation{x}:\coqdocvar{S.t12} for some type \coqdocconstructor{S} and term \coqdocvariable{t12}, and
       \coqdocvariable{t'} = [\coqdocabbreviation{x}:=\coqdocvariable{t2}]\coqdocvariable{t12}.


       By Lemma \coqdoclemma{abs\_arrow}, we have \coqdocvariable{T1} <: \coqdocconstructor{S} and \coqdocabbreviation{x}:\coqdocvariable{S1} \ensuremath{\vdash} \coqdocvariable{s2} : \coqdocvariable{T2}.
       It then follows by lemma \coqdoclemma{substitution\_preserves\_typing} that
       \coqdocdefinition{empty} \ensuremath{\vdash} [\coqdocabbreviation{x}:=\coqdocvariable{t2}] \coqdocvariable{t12} : \coqdocvariable{T2} as desired.



\item  If the final step of the derivation is by \coqdocconstructor{T\_Proj}, then there
       is a term \coqdocvariable{tr}, type \coqdocvariable{Tr} and label \coqdocabbreviation{i} such that \coqdocvariable{t} = \coqdocvar{tr.i},
       \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{tr} : \coqdocvariable{Tr}, and \coqdocdefinition{Tlookup} \coqdocabbreviation{i} \coqdocvariable{Tr} = \coqdocconstructor{Some} \coqdocdefinition{T}.


       The IH for the typing derivation gives us that, for any term
       \coqdocvariable{tr'}, if \coqdocvariable{tr} ==> \coqdocvariable{tr'} then \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{tr'} \coqdocvariable{Tr}.  Inspection of
       the definition of the step relation reveals that there are two
       ways a projection can step.  Case \coqdocconstructor{ST\_Proj1} follows
       immediately by the IH.


       Instead suppose \coqdocvar{tr.i} steps by \coqdocconstructor{ST\_ProjRcd}.  Then \coqdocvariable{tr} is a
       value and there is some term \coqdocvariable{vi} such that
       \coqdocdefinition{tlookup} \coqdocabbreviation{i} \coqdocvariable{tr} = \coqdocconstructor{Some} \coqdocvariable{vi} and \coqdocvariable{t'} = \coqdocvariable{vi}.  But by lemma
       \coqdoclemma{lookup\_field\_in\_value}, \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{vi} : \coqdocvariable{Ti} as desired.



\item  If the final step of the derivation is by \coqdocconstructor{T\_Sub}, then there
       is a type \coqdocconstructor{S} such that \coqdocconstructor{S} <: \coqdocdefinition{T} and \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocconstructor{S}.  The
       result is immediate by the induction hypothesis for the typing
       subderivation and an application of \coqdocconstructor{T\_Sub}.



\item  If the final step of the derivation is by \coqdocconstructor{T\_RCons}, then there
       exist some terms \coqdocvariable{t1} \coqdocvariable{tr}, types \coqdocvariable{T1} \coqdocvariable{Tr} and a label \coqdocvariable{t} such
       that \coqdocvariable{t} = \{\coqdocabbreviation{i}=\coqdocvariable{t1}, \coqdocvariable{tr}\}, \coqdocdefinition{T} = \{\coqdocabbreviation{i}:\coqdocvariable{T1}, \coqdocvariable{Tr}\}, \coqdocinductive{record\_tm} \coqdocvariable{tr},
       \coqdocinductive{record\_tm} \coqdocvariable{Tr}, \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{t1} : \coqdocvariable{T1} and \coqdocdefinition{empty} \ensuremath{\vdash} \coqdocvariable{tr} : \coqdocvariable{Tr}.


       By the definition of the step relation, \coqdocvariable{t} must have stepped
       by \coqdocconstructor{ST\_Rcd\_Head} or \coqdocconstructor{ST\_Rcd\_Tail}.  In the first case, the
       result follows by the IH for \coqdocvariable{t1}'s typing derivation and
       \coqdocconstructor{T\_RCons}.  In the second case, the result follows by the IH
       for \coqdocvariable{tr}'s typing derivation, \coqdocconstructor{T\_RCons}, and a use of the
       \coqdoclemma{step\_preserves\_record\_tm} lemma. 
\end{itemize}


 $Date: 2016-10-19 09:26:05 -0400 (Wed, 19 Oct 2016) $ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Norm}{Library }{Top.Norm}

\begin{coqdoccode}
\end{coqdoccode}
\section{Norm: Normalization of STLC}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
This optional chapter is based on chapter 12 of \textit{Types and
    Programming Languages} (Pierce).  It may be useful to look at the
    two together, as that chapter includes explanations and informal
    proofs that are not repeated here.


    In this chapter, we consider another fundamental theoretical
    property of the simply typed lambda-calculus: the fact that the
    evaluation of a well-typed program is guaranteed to halt in a
    finite number of steps---i.e., every well-typed term is
    \textit{normalizable}.


    Unlike the type-safety properties we have considered so far, the
    normalization property does not extend to full-blown programming
    languages, because these languages nearly always extend the simply
    typed lambda-calculus with constructs, such as general
    recursion (see the \coqdoclibrary{MoreStlc} chapter) or recursive types, that
    can be used to write nonterminating programs.  However, the issue
    of normalization reappears at the level of \textit{types} when we
    consider the metatheory of polymorphic versions of the lambda
    calculus such as System F-omega: in this system, the language of
    types effectively contains a copy of the simply typed
    lambda-calculus, and the termination of the typechecking algorithm
    will hinge on the fact that a ``normalization'' operation on type
    expressions is guaranteed to terminate.


    Another reason for studying normalization proofs is that they are
    some of the most beautiful---and mind-blowing---mathematics to be
    found in the type theory literature, often (as here) involving the
    fundamental proof technique of \textit{logical relations}.


    The calculus we shall consider here is the simply typed
    lambda-calculus over a single base type \coqdocinductive{bool} and with
    pairs. We'll give most details of the development for the basic
    lambda-calculus terms treating \coqdocinductive{bool} as an uninterpreted base
    type, and leave the extension to the boolean operators and pairs
    to the reader.  Even for the base calculus, normalization is not
    entirely trivial to prove, since each reduction of a term can
    duplicate redexes in subterms. 

\paragraph{Exercise: 2 starsM (norm\_fail)}

 Where do we fail if we attempt to prove normalization by a
    straightforward induction on the size of a well-typed term? \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\ensuremath{\Box} 

\paragraph{Exercise: 5 stars, recommended (norm)}

 The best ways to understand an intricate proof like this is
    are (1) to help fill it in and (2) to extend it.  We've left out some
    parts of the following development, including some proofs of lemmas
    and the all the cases involving products and conditionals.  Fill them
    in.  \ensuremath{\Box} \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Language}



 We begin by repeating the relevant language definition, which is
    similar to those in the \coqdoclibrary{MoreStlc} chapter, plus supporting
    results including type preservation and step determinism.  (We
    won't need progress.)  You may just wish to skip down to the
    Normalization section... \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Syntax and Operational Semantics}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Lists.List}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{ListNotations}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{multi}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ty} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TBool} : \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TArrow} : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{TProd}  : \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{ty}\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{tm} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpair} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfst} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsnd} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} : \coqdocvar{tm}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Substitution}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdoctac{subst} (\coqdocvar{x}:\coqdocvar{id}) (\coqdocvar{s}:\coqdocvar{tm}) (\coqdocvar{t}:\coqdocvar{tm}) : \coqdocvar{tm} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tvar} \coqdocvar{y} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{s} \coqdockw{else} \coqdocvar{t}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T} \coqdocvar{t1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T} (\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{t1} \coqdockw{else} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow} \coqdocvar{tapp} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tpair} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow} \coqdocvar{tpair} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfst} \coqdocvar{t1} \ensuremath{\Rightarrow} \coqdocvar{tfst} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tsnd} \coqdocvar{t1} \ensuremath{\Rightarrow} \coqdocvar{tsnd} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ttrue} \ensuremath{\Rightarrow} \coqdocvar{ttrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tfalse} \ensuremath{\Rightarrow} \coqdocvar{tfalse}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{tif} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{t2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{tif} (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t0}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t1}) (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'[' x ':=' s ']' t" := (\coqdoctac{subst} \coqdocvar{x} \coqdocvar{s} \coqdocvar{t}) (\coqdoctac{at} \coqdockw{level} 20).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Reduction}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{value} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_pair} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{v2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{value} (\coqdocvar{tpair} \coqdocvar{v1} \coqdocvar{v2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_true} : \coqdocvar{value} \coqdocvar{ttrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{v\_false} : \coqdocvar{value} \coqdocvar{tfalse}\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{value}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "t1 '==>' t2" (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{step} : \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_AppAbs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12} \coqdocvar{v2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12}) \coqdocvar{v2}) ==> [\coqdocvar{x}:=\coqdocvar{v2}]\coqdocvar{t12}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) ==> (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_App2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2}) ==> (\coqdocvar{tapp} \coqdocvar{v1} \coqdocvar{t2'})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Pair1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tpair} \coqdocvar{t1} \coqdocvar{t2}) ==> (\coqdocvar{tpair} \coqdocvar{t1'} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Pair2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{t2} \coqdocvar{t2'},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t2} ==> \coqdocvar{t2'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tpair} \coqdocvar{v1} \coqdocvar{t2}) ==> (\coqdocvar{tpair} \coqdocvar{v1} \coqdocvar{t2'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Fst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tfst} \coqdocvar{t1}) ==> (\coqdocvar{tfst} \coqdocvar{t1'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_FstPair} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{v2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tfst} (\coqdocvar{tpair} \coqdocvar{v1} \coqdocvar{v2})) ==> \coqdocvar{v1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_Snd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t1'},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t1} ==> \coqdocvar{t1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tsnd} \coqdocvar{t1}) ==> (\coqdocvar{tsnd} \coqdocvar{t1'})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_SndPair} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v1} \coqdocvar{v2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{value} \coqdocvar{v2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tsnd} (\coqdocvar{tpair} \coqdocvar{v1} \coqdocvar{v2})) ==> \coqdocvar{v2}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tif} \coqdocvar{ttrue} \coqdocvar{t1} \coqdocvar{t2}) ==> \coqdocvar{t1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tif} \coqdocvar{tfalse} \coqdocvar{t1} \coqdocvar{t2}) ==> \coqdocvar{t2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ST\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t0} \coqdocvar{t0'} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{t0} ==> \coqdocvar{t0'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tif} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{t2}) ==> (\coqdocvar{tif} \coqdocvar{t0'} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocnoindent
\coqdockw{where} "t1 '==>' t2" := (\coqdocvar{step} \coqdocvar{t1} \coqdocvar{t2}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{multistep} := (\coqdocvar{multi} \coqdocvar{step}).\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "t1 '==>*' t2" := (\coqdocvar{multistep} \coqdocvar{t1} \coqdocvar{t2}) (\coqdoctac{at} \coqdockw{level} 40).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{step}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} \coqdocvar{step\_normal\_form} := (\coqdocvar{normal\_form} \coqdocvar{step}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{value\_\_normal} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t}, \coqdocvar{value} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{step\_normal\_form} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{H}; \coqdoctac{induction} \coqdocvar{H}; \coqdoctac{intros} [\coqdocvar{t'} \coqdocvar{ST}]; \coqdoctac{inversion} \coqdocvar{ST}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Typing}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdockw{context} := \coqdocvar{partial\_map} \coqdocvar{ty}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{has\_type} : \coqdockw{context} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdocvar{ty} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tvar} \coqdocvar{x}) \coqdocvar{T}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{T12} \coqdocvar{t12},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{T11}) \coqdocvar{t12} \coqdocvar{T12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} \coqdocvar{t12}) (\coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_App} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t1} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t2} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) \coqdocvar{T2}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Pair} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t2} \coqdocvar{T2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tpair} \coqdocvar{t1} \coqdocvar{t2}) (\coqdocvar{TProd} \coqdocvar{T1} \coqdocvar{T2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Fst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} (\coqdocvar{TProd} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tfst} \coqdocvar{t}) \coqdocvar{T1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_Snd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} (\coqdocvar{TProd} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tsnd} \coqdocvar{t}) \coqdocvar{T2}\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_True} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{ttrue} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_False} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{tfalse} \coqdocvar{TBool}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{T\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{t2} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t0} \coqdocvar{TBool} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t1} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t2} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{tif} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{t2}) \coqdocvar{T}\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{has\_type}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Extern} 2 (\coqdocvar{has\_type} \coqdocvar{\_} (\coqdocvar{tapp} \coqdocvar{\_} \coqdocvar{\_}) \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{eapply} \coqdocvar{T\_App}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Extern} 2 (\coqdocvar{\_} = \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{compute}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Context Invariance}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{appears\_free\_in} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{tm} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_var} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tvar} \coqdocvar{x})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_app2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow} \coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_abs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12},\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{y} \ensuremath{\not=} \coqdocvar{x}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t12} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{T11} \coqdocvar{t12})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_pair1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tpair} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_pair2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tpair} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_fst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tfst} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_snd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tsnd} \coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if0} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t0} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{afi\_if2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{t2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} (\coqdocvar{tif} \coqdocvar{t0} \coqdocvar{t1} \coqdocvar{t2})\coqdoceol
\coqdocnoindent
.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{appears\_free\_in}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{closed} (\coqdocvar{t}:\coqdocvar{tm}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \ensuremath{\lnot} \coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{context\_invariance} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{Gamma'} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{S}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Gamma'} \coqdocvar{x})  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma'} \coqdocvar{t} \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{Gamma'} \coqdocvar{Heqv}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}... \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Heqv}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}... \coqdoctac{apply} \coqdocvar{IHhas\_type}. \coqdoctac{intros} \coqdocvar{y} \coqdocvar{Hafi}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}. \coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Pair}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{T\_If}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{free\_in\_context} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma},\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}, \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{T'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Gamma} \coqdocvar{Hafi} \coqdocvar{Htyp}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Htyp}; \coqdoctac{inversion} \coqdocvar{Hafi}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{IHHtyp} \coqdockw{as} [\coqdocvar{T'} \coqdocvar{Hctx}]... \coqdoctac{\ensuremath{\exists}} \coqdocvar{T'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id} \coqdoctac{in} \coqdocvar{Hctx}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Corollary} \coqdocvar{typable\_empty\_\_closed} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{closed} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{unfold} \coqdocvar{closed}. \coqdoctac{intros} \coqdocvar{x} \coqdocvar{H1}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{free\_in\_context} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H1} \coqdocvar{H}) \coqdockw{as} [\coqdocvar{T'} \coqdocvar{C}].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{C}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Preservation}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{substitution\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \coqdocvar{t} \coqdocvar{S}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{v} \coqdocvar{U}   \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} ([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}) \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S} \coqdocvar{Htypt} \coqdocvar{Htypv}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{S}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{S} \coqdocvar{Gamma} \coqdocvar{Htypt}; \coqdoctac{simpl}; \coqdoctac{inversion} \coqdocvar{Htypt}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{H1}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H1}; \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H1}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hcontra}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{free\_in\_context} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{S} \coqdocvar{empty} \coqdocvar{Hcontra}) \coqdockw{as} [\coqdocvar{T'} \coqdocvar{HT'}]...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT'}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{T\_Var}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}. \coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{T11}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{T\_Abs}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{y} \coqdocvar{x})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHt}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y} \coqdocvar{z})...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{t} ==> \coqdocvar{t'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t'} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{HT}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{HeqGamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{HT};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{t'} \coqdocvar{HeqGamma} \coqdocvar{HE}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{substitution\_preserves\_typing} \coqdockw{with} \coqdocvar{T1}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HT}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HT}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Determinism}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_deterministic} :\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{deterministic} \coqdocvar{step}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{unfold} \coqdocvar{deterministic}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{t'{}'} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{t'{}'}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros} \coqdocvar{t'{}'} \coqdocvar{E2}; \coqdoctac{inversion} \coqdocvar{E2}; \coqdoctac{subst}; \coqdoctac{clear} \coqdocvar{E2}...\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{inversion} \coqdocvar{H3}.\coqdoceol
\coqdocindent{1.50em}
- \coqdocvar{exfalso}; \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H}...\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{inversion} \coqdocvar{E1}.\coqdoceol
\coqdocindent{1.50em}
-  \coqdoctac{f\_equal}...\coqdoceol
\coqdocindent{1.50em}
- \coqdocvar{exfalso}; \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H1}...\coqdoceol
\coqdocindent{1.50em}
- \coqdocvar{exfalso}; \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H3}...\coqdoceol
\coqdocindent{1.50em}
- \coqdocvar{exfalso}; \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H}...\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{f\_equal}...\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{f\_equal}...\coqdoceol
\coqdocindent{1.50em}
- \coqdocvar{exfalso}; \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H1}...\coqdoceol
\coqdocindent{1.50em}
- \coqdocvar{exfalso}; \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H}...\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{f\_equal}...\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{f\_equal}...\coqdoceol
\coqdocindent{1.50em}
- \coqdocvar{exfalso}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{E1}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H1}...\coqdoceol
\coqdocindent{1.50em}
- \coqdocvar{exfalso}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{H2}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H}...\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{f\_equal}...\coqdoceol
\coqdocindent{1.50em}
- \coqdocvar{exfalso}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{E1}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H1}...\coqdoceol
\coqdocindent{1.50em}
- \coqdocvar{exfalso}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{H2}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H}...\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{H0}...\coqdoceol
\coqdocindent{1.50em}
- \coqdoceol
\coqdocindent{3.50em}
\coqdoctac{inversion} \coqdocvar{H3}.\coqdoceol
\coqdocindent{1.50em}
- \coqdoceol
\coqdocindent{3.50em}
\coqdoctac{inversion} \coqdocvar{H3}.\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{inversion} \coqdocvar{E1}.\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{inversion} \coqdocvar{E1}.\coqdoceol
\coqdocindent{1.50em}
- \coqdoctac{f\_equal}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Normalization}



 Now for the actual normalization proof.


    Our goal is to prove that every well-typed term reduces to a
    normal form.  In fact, it turns out to be convenient to prove
    something slightly stronger, namely that every well-typed term
    reduces to a \textit{value}.  This follows from the weaker property
    anyway via Progress (why?) but otherwise we don't need Progress,
    and we didn't bother re-proving it above.


    Here's the key definition: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{halts}  (\coqdocvar{t}:\coqdocvar{tm}) : \coqdockw{Prop} :=  \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==>* \coqdocvar{t'} \ensuremath{\land}  \coqdocvar{value} \coqdocvar{t'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A trivial fact: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{value\_halts} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v}, \coqdocvar{value} \coqdocvar{v} \ensuremath{\rightarrow} \coqdocvar{halts} \coqdocvar{v}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{v} \coqdocvar{H}. \coqdoctac{unfold} \coqdocvar{halts}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{v}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The key issue in the normalization proof (as in many proofs by
    induction) is finding a strong enough induction hypothesis.  To
    this end, we begin by defining, for each type \coqdocdefinition{T}, a set \coqdocvar{R\_T} of
    closed terms of type \coqdocdefinition{T}.  We will specify these sets using a
    relation \coqdocdefinition{R} and write \coqdocdefinition{R} \coqdocdefinition{T} \coqdocvariable{t} when \coqdocvariable{t} is in \coqdocvar{R\_T}. (The sets
    \coqdocvar{R\_T} are sometimes called \textit{saturated sets} or \textit{reducibility
    candidates}.)


    Here is the definition of \coqdocdefinition{R} for the base language:



\begin{itemize}
\item  \coqdocdefinition{R} \coqdocinductive{bool} \coqdocvariable{t} iff \coqdocvariable{t} is a closed term of type \coqdocinductive{bool} and \coqdocvariable{t} halts
      in a value



\item  \coqdocdefinition{R} (\coqdocvariable{T1} \ensuremath{\rightarrow} \coqdocvariable{T2}) \coqdocvariable{t} iff \coqdocvariable{t} is a closed term of type \coqdocvariable{T1} \ensuremath{\rightarrow} \coqdocvariable{T2} and
      \coqdocvariable{t} halts in a value \textit{and} for any term \coqdocdefinition{s} such that \coqdocdefinition{R} \coqdocvariable{T1} \coqdocdefinition{s},
      we have \coqdocdefinition{R} \coqdocvariable{T2} (\coqdocvariable{t} \coqdocdefinition{s}). 
\end{itemize}


 This definition gives us the strengthened induction hypothesis that we
    need.  Our primary goal is to show that all \textit{programs} ---i.e., all
    closed terms of base type---halt.  But closed terms of base type can
    contain subterms of functional type, so we need to know something
    about these as well.  Moreover, it is not enough to know that these
    subterms halt, because the application of a normalized function to a
    normalized argument involves a substitution, which may enable more
    reduction steps.  So we need a stronger condition for terms of
    functional type: not only should they halt themselves, but, when
    applied to halting arguments, they should yield halting results.


    The form of \coqdocdefinition{R} is characteristic of the \textit{logical relations} proof
    technique.  (Since we are just dealing with unary relations here, we
    could perhaps more properly say \textit{logical properties}.)  If we want to
    prove some property \coqdocaxiom{P} of all closed terms of type \coqdocabbreviation{A}, we proceed by
    proving, by induction on types, that all terms of type \coqdocabbreviation{A} \textit{possess}
    property \coqdocaxiom{P}, all terms of type \coqdocabbreviation{A}\ensuremath{\rightarrow}\coqdocabbreviation{A} \textit{preserve} property \coqdocaxiom{P}, all
    terms of type (\coqdocabbreviation{A}\ensuremath{\rightarrow}\coqdocabbreviation{A})->(\coqdocabbreviation{A}\ensuremath{\rightarrow}\coqdocabbreviation{A}) \textit{preserve the property of preserving}
    property \coqdocaxiom{P}, and so on.  We do this by defining a family of
    properties, indexed by types.  For the base type \coqdocabbreviation{A}, the property is
    just \coqdocaxiom{P}.  For functional types, it says that the function should map
    values satisfying the property at the input type to values satisfying
    the property at the output type.


    When we come to formalize the definition of \coqdocdefinition{R} in Coq, we hit a
    problem.  The most obvious formulation would be as a parameterized
    Inductive proposition like this:


      Inductive R : ty -> tm -> Prop :=
      | R\_bool : forall b t, has\_type empty t TBool ->
                      halts t ->
                      R TBool t
      | R\_arrow : forall T1 T2 t, has\_type empty t (TArrow T1 T2) ->
                      halts t ->
                      (forall s, R T1 s -> R T2 (tapp t s)) ->
                      R (TArrow T1 T2) t.


    Unfortunately, Coq rejects this definition because it violates the
    \textit{strict positivity requirement} for inductive definitions, which says
    that the type being defined must not occur to the left of an arrow in
    the type of a constructor argument. Here, it is the third argument to
    \coqdocvar{R\_arrow}, namely (\coqdockw{\ensuremath{\forall}} \coqdocdefinition{s}, \coqdocdefinition{R} \coqdocvariable{T1} \coqdocdefinition{s} \ensuremath{\rightarrow} \coqdocdefinition{R} \coqdocvar{TS} (\coqdocconstructor{tapp} \coqdocvariable{t} \coqdocdefinition{s})), and
    specifically the \coqdocdefinition{R} \coqdocvariable{T1} \coqdocdefinition{s} part, that violates this rule.  (The
    outermost arrows separating the constructor arguments don't count when
    applying this rule; otherwise we could never have genuinely inductive
    properties at all!)  The reason for the rule is that types defined
    with non-positive recursion can be used to build non-terminating
    functions, which as we know would be a disaster for Coq's logical
    soundness. Even though the relation we want in this case might be
    perfectly innocent, Coq still rejects it because it fails the
    positivity test.


    Fortunately, it turns out that we \textit{can} define \coqdocdefinition{R} using a
    \coqdockw{Fixpoint}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{R} (\coqdocvar{T}:\coqdocvar{ty}) (\coqdocvar{t}:\coqdocvar{tm}) \{\coqdockw{struct} \coqdocvar{T}\} : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T} \ensuremath{\land} \coqdocvar{halts} \coqdocvar{t} \ensuremath{\land}\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{1.50em}
\ensuremath{|} \coqdocvar{TBool}  \ensuremath{\Rightarrow} \coqdocvar{True}\coqdoceol
\coqdocindent{1.50em}
\ensuremath{|} \coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2} \ensuremath{\Rightarrow} (\coqdockw{\ensuremath{\forall}} \coqdocvar{s}, \coqdocvar{R} \coqdocvar{T1} \coqdocvar{s} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T2} (\coqdocvar{tapp} \coqdocvar{t} \coqdocvar{s}))\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.50em}
\coqdoceol
\coqdocindent{1.50em}
\ensuremath{|} \coqdocvar{TProd} \coqdocvar{T1} \coqdocvar{T2} \ensuremath{\Rightarrow} \coqdocvar{False} \coqdoceol
\coqdocindent{1.50em}
\coqdockw{end}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
As immediate consequences of this definition, we have that every
    element of every set \coqdocvar{R\_T} halts in a value and is closed with type
    \coqdocvariable{t} :\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{R\_halts} : \coqdockw{\ensuremath{\forall}} \{\coqdocvar{T}\} \{\coqdocvar{t}\}, \coqdocvar{R} \coqdocvar{T} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{halts} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{destruct} \coqdocvar{T}; \coqdoctac{unfold} \coqdocvar{R} \coqdoctac{in} \coqdocvar{H}; \coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{inversion} \coqdocvar{H1};  \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{R\_typable\_empty} : \coqdockw{\ensuremath{\forall}} \{\coqdocvar{T}\} \{\coqdocvar{t}\}, \coqdocvar{R} \coqdocvar{T} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{destruct} \coqdocvar{T}; \coqdoctac{unfold} \coqdocvar{R} \coqdoctac{in} \coqdocvar{H}; \coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{inversion} \coqdocvar{H1}; \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now we proceed to show the main result, which is that every
    well-typed term of type \coqdocdefinition{T} is an element of \coqdocvar{R\_T}.  Together with
    \coqdoclemma{R\_halts}, that will show that every well-typed term halts in a
    value.  \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Membership in \texorpdfstring{\protect}{R\_T}\coqdocvar{R\_T} Is Invariant Under Reduction}



 We start with a preliminary lemma that shows a kind of strong
    preservation property, namely that membership in \coqdocvar{R\_T} is \textit{invariant}
    under reduction. We will need this property in both directions,
    i.e., both to show that a term in \coqdocvar{R\_T} stays in \coqdocvar{R\_T} when it takes a
    forward step, and to show that any term that ends up in \coqdocvar{R\_T} after a
    step must have been in \coqdocvar{R\_T} to begin with.


    First of all, an easy preliminary lemma. Note that in the forward
    direction the proof depends on the fact that our language is
    determinstic. This lemma might still be true for nondeterministic
    languages, but the proof would be harder! \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_preserves\_halting} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'}, (\coqdocvar{t} ==> \coqdocvar{t'}) \ensuremath{\rightarrow} (\coqdocvar{halts} \coqdocvar{t} \ensuremath{\leftrightarrow} \coqdocvar{halts} \coqdocvar{t'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{0.50em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{ST}. \coqdoctac{unfold} \coqdocvar{halts}.\coqdoceol
\coqdocindent{0.50em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{0.50em}
- \coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [\coqdocvar{t'{}'} [\coqdocvar{STM} \coqdocvar{V}]].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{STM}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{exfalso}. \coqdoctac{apply} \coqdocvar{value\_\_normal} \coqdoctac{in} \coqdocvar{V}. \coqdoctac{unfold} \coqdocvar{normal\_form} \coqdoctac{in} \coqdocvar{V}. \coqdoctac{apply} \coqdocvar{V}. \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{rewrite} (\coqdocvar{step\_deterministic} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{ST} \coqdocvar{H}). \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'{}'}. \coqdoctac{split}; \coqdoctac{assumption}.\coqdoceol
\coqdocindent{0.50em}
- \coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} [\coqdocvar{t'0} [\coqdocvar{STM} \coqdocvar{V}]].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{t'0}. \coqdoctac{split}; \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now the main lemma, which comes in two parts, one for each
    direction.  Each proceeds by induction on the structure of the type
    \coqdocdefinition{T}. In fact, this is where we make fundamental use of the
    structure of types.


    One requirement for staying in \coqdocvar{R\_T} is to stay in type \coqdocdefinition{T}. In the
    forward direction, we get this from ordinary type Preservation. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_preserves\_R} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} \coqdocvar{t} \coqdocvar{t'}, (\coqdocvar{t} ==> \coqdocvar{t'}) \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T} \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{0.50em}
\coqdoctac{induction} \coqdocvar{T};  \coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{E} \coqdocvar{Rt}; \coqdoctac{unfold} \coqdocvar{R}; \coqdoctac{fold} \coqdocvar{R}; \coqdoctac{unfold} \coqdocvar{R} \coqdoctac{in} \coqdocvar{Rt}; \coqdoctac{fold} \coqdocvar{R} \coqdoctac{in} \coqdocvar{Rt};\coqdoceol
\coqdocindent{7.50em}
\coqdoctac{destruct} \coqdocvar{Rt} \coqdockw{as} [\coqdocvar{typable\_empty\_t} [\coqdocvar{halts\_t} \coqdocvar{RRt}]].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}. \coqdoctac{eapply} \coqdocvar{preservation}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}. \coqdoctac{apply} (\coqdocvar{step\_preserves\_halting} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{E}); \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}. \coqdoctac{eapply} \coqdocvar{preservation}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}. \coqdoctac{apply} (\coqdocvar{step\_preserves\_halting} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{E}); \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{IHT2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply}  \coqdocvar{ST\_App1}. \coqdoctac{apply} \coqdocvar{E}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{RRt}; \coqdoctac{auto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The generalization to multiple steps is trivial: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{multistep\_preserves\_R} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} \coqdocvar{t} \coqdocvar{t'},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{t} ==>* \coqdocvar{t'}) \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T} \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{STM}; \coqdoctac{induction} \coqdocvar{STM}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{IHSTM}. \coqdoctac{eapply} \coqdocvar{step\_preserves\_R}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In the reverse direction, we must add the fact that \coqdocvariable{t} has type
   \coqdocdefinition{T} before stepping as an additional hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{step\_preserves\_R'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} \coqdocvar{t} \coqdocvar{t'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow} (\coqdocvar{t} ==> \coqdocvar{t'}) \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T} \coqdocvar{t'} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{multistep\_preserves\_R'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T} \coqdocvar{t} \coqdocvar{t'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow} (\coqdocvar{t} ==>* \coqdocvar{t'}) \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T} \coqdocvar{t'} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{T} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{HT} \coqdocvar{STM}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{STM}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{step\_preserves\_R'}. \coqdoctac{assumption}. \coqdoctac{apply} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{IHSTM}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{preservation};  \coqdoctac{eauto}. \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Closed Instances of Terms of Type \texorpdfstring{\protect\coqdocvariable{t}}{t} Belong to \texorpdfstring{\protect}{R\_T}\coqdocvar{R\_T}}



 Now we proceed to show that every term of type \coqdocdefinition{T} belongs to
    \coqdocvar{R\_T}.  Here, the induction will be on typing derivations (it would be
    surprising to see a proof about well-typed terms that did not
    somewhere involve induction on typing derivations!).  The only
    technical difficulty here is in dealing with the abstraction case.
    Since we are arguing by induction, the demonstration that a term
    \coqdocconstructor{tabs} \coqdocabbreviation{x} \coqdocvariable{T1} \coqdocvariable{t2} belongs to \coqdocvar{R\_}(\coqdocvariable{T1}\ensuremath{\rightarrow}\coqdocvariable{T2}) should involve applying the
    induction hypothesis to show that \coqdocvariable{t2} belongs to \coqdocvar{R\_}(\coqdocvariable{T2}).  But
    \coqdocvar{R\_}(\coqdocvariable{T2}) is defined to be a set of \textit{closed} terms, while \coqdocvariable{t2} may
    contain \coqdocabbreviation{x} free, so this does not make sense.


    This problem is resolved by using a standard trick to suitably
    generalize the induction hypothesis: instead of proving a statement
    involving a closed term, we generalize it to cover all closed
    \textit{instances} of an open term \coqdocvariable{t}.  Informally, the statement of the
    lemma will look like this:


    If \coqdocvariable{x1}:\coqdocvariable{T1},..\coqdocvar{xn}:\coqdocvar{Tn} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T} and \coqdocvariable{v1},...,\coqdocvar{vn} are values such that
    \coqdocdefinition{R} \coqdocvariable{T1} \coqdocvariable{v1}, \coqdocdefinition{R} \coqdocvariable{T2} \coqdocvariable{v2}, ..., \coqdocdefinition{R} \coqdocvar{Tn} \coqdocvar{vn}, then
    \coqdocdefinition{R} \coqdocdefinition{T} ([\coqdocvariable{x1}:=\coqdocvariable{v1}][\coqdocvariable{x2}:=\coqdocvariable{v2}]...[\coqdocvar{xn}:=\coqdocvar{vn}]\coqdocvariable{t}).


    The proof will proceed by induction on the typing derivation
    \coqdocvariable{x1}:\coqdocvariable{T1},..\coqdocvar{xn}:\coqdocvar{Tn} \ensuremath{\vdash} \coqdocvariable{t} : \coqdocdefinition{T}; the most interesting case will be the one
    for abstraction. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Multisubstitutions, Multi-Extensions, and Instantiations}



 However, before we can proceed to formalize the statement and
    proof of the lemma, we'll need to build some (rather tedious)
    machinery to deal with the fact that we are performing \textit{multiple}
    substitutions on term \coqdocvariable{t} and \textit{multiple} extensions of the typing
    context.  In particular, we must be precise about the order in which
    the substitutions occur and how they act on each other.  Often these
    details are simply elided in informal paper proofs, but of course Coq
    won't let us do that. Since here we are substituting closed terms, we
    don't need to worry about how one substitution might affect the term
    put in place by another.  But we still do need to worry about the
    \textit{order} of substitutions, because it is quite possible for the same
    identifier to appear multiple times among the \coqdocvariable{x1},...\coqdocvar{xn} with
    different associated \coqdocvariable{vi} and \coqdocvariable{Ti}.


    To make everything precise, we will assume that environments are
    extended from left to right, and multiple substitutions are performed
    from right to left.  To see that this is consistent, suppose we have
    an environment written as ...,\coqdocabbreviation{y}:\coqdocinductive{bool},...,\coqdocabbreviation{y}:\coqdocdefinition{nat},...  and a
    corresponding term substitution written as ...[\coqdocabbreviation{y}:=(\coqdocvar{tbool}
    \coqdocconstructor{true})]...[\coqdocabbreviation{y}:=(\coqdocconstructor{tnat} 3)]...\coqdocvariable{t}.  Since environments are extended from
    left to right, the binding \coqdocabbreviation{y}:\coqdocdefinition{nat} hides the binding \coqdocabbreviation{y}:\coqdocinductive{bool}; since
    substitutions are performed right to left, we do the substitution
    \coqdocabbreviation{y}:=(\coqdocconstructor{tnat} 3) first, so that the substitution \coqdocabbreviation{y}:=(\coqdocvar{tbool} \coqdocconstructor{true}) has
    no effect. Substitution thus correctly preserves the type of the term.


    With these points in mind, the following definitions should make sense.


    A \textit{multisubstitution} is the result of applying a list of
    substitutions, which we call an \textit{environment}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{env} := \coqdocvar{list} (\coqdocvar{id} \ensuremath{\times} \coqdocvar{tm}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{msubst} (\coqdocvar{ss}:\coqdocvar{env}) (\coqdocvar{t}:\coqdocvar{tm}) \{\coqdockw{struct} \coqdocvar{ss}\} : \coqdocvar{tm} :=\coqdoceol
\coqdocnoindent
\coqdockw{match} \coqdocvar{ss} \coqdockw{with}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{t}\coqdoceol
\coqdocnoindent
\ensuremath{|} ((\coqdocvar{x},\coqdocvar{s})::\coqdocvar{ss'}) \ensuremath{\Rightarrow} \coqdocvar{msubst} \coqdocvar{ss'} ([\coqdocvar{x}:=\coqdocvar{s}]\coqdocvar{t})\coqdoceol
\coqdocnoindent
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We need similar machinery to talk about repeated extension of a
    typing context using a list of (identifier, type) pairs, which we
    call a \textit{type assignment}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{tass} := \coqdocvar{list} (\coqdocvar{id} \ensuremath{\times} \coqdocvar{ty}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{mupdate} (\coqdocvar{Gamma} : \coqdockw{context}) (\coqdocvar{xts} : \coqdocvar{tass}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{xts} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{Gamma}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ((\coqdocvar{x},\coqdocvar{v})::\coqdocvar{xts'}) \ensuremath{\Rightarrow} \coqdocvar{update} (\coqdocvar{mupdate} \coqdocvar{Gamma} \coqdocvar{xts'}) \coqdocvar{x} \coqdocvar{v}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We will need some simple operations that work uniformly on
    environments and type assigments \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{lookup} \{\coqdocvar{X}:\coqdockw{Set}\} (\coqdocvar{k} : \coqdocvar{id}) (\coqdocvar{l} : \coqdocvar{list} (\coqdocvar{id} \ensuremath{\times} \coqdocvar{X})) \{\coqdockw{struct} \coqdocvar{l}\}\coqdoceol
\coqdocindent{7.00em}
: \coqdocvar{option} \coqdocvar{X} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{j},\coqdocvar{x}) :: \coqdocvar{l'} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{j} \coqdocvar{k} \coqdockw{then} \coqdocvar{Some} \coqdocvar{x} \coqdockw{else} \coqdocvar{lookup} \coqdocvar{k} \coqdocvar{l'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{drop} \{\coqdocvar{X}:\coqdockw{Set}\} (\coqdocvar{n}:\coqdocvar{id}) (\coqdocvar{nxs}:\coqdocvar{list} (\coqdocvar{id} \ensuremath{\times} \coqdocvar{X})) \{\coqdockw{struct} \coqdocvar{nxs}\}\coqdoceol
\coqdocindent{6.00em}
: \coqdocvar{list} (\coqdocvar{id} \ensuremath{\times} \coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{nxs} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{nil}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} ((\coqdocvar{n'},\coqdocvar{x})::\coqdocvar{nxs'}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.00em}
\coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{n'} \coqdocvar{n} \coqdockw{then} \coqdocvar{drop} \coqdocvar{n} \coqdocvar{nxs'}\coqdoceol
\coqdocindent{4.00em}
\coqdockw{else} (\coqdocvar{n'},\coqdocvar{x})::(\coqdocvar{drop} \coqdocvar{n} \coqdocvar{nxs'})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
An \textit{instantiation} combines a type assignment and a value
    environment with the same domains, where corresponding elements are
    in R. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{instantiation} :  \coqdocvar{tass} \ensuremath{\rightarrow} \coqdocvar{env} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{V\_nil} :\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{instantiation} \coqdocvar{nil} \coqdocvar{nil}\coqdoceol
\coqdocnoindent
\ensuremath{|} \coqdocvar{V\_cons} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{T} \coqdocvar{v} \coqdocvar{c} \coqdocvar{e},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{value} \coqdocvar{v} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T} \coqdocvar{v} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{instantiation} \coqdocvar{c} \coqdocvar{e} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{instantiation} ((\coqdocvar{x},\coqdocvar{T})::\coqdocvar{c}) ((\coqdocvar{x},\coqdocvar{v})::\coqdocvar{e}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We now proceed to prove various properties of these definitions. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{More Substitution Facts}



 First we need some additional lemmas on (ordinary) substitution. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{vacuous\_substitution} : \coqdockw{\ensuremath{\forall}}  \coqdocvar{t} \coqdocvar{x},\coqdoceol
\coqdocindent{2.50em}
\ensuremath{\lnot} \coqdocvar{appears\_free\_in} \coqdocvar{x} \coqdocvar{t}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{t'}, [\coqdocvar{x}:=\coqdocvar{t'}]\coqdocvar{t} = \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{subst\_closed}: \coqdockw{\ensuremath{\forall}} \coqdocvar{t},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{closed} \coqdocvar{t}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t'}, [\coqdocvar{x}:=\coqdocvar{t'}]\coqdocvar{t} = \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{apply} \coqdocvar{vacuous\_substitution}. \coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{subst\_not\_afi} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{x} \coqdocvar{v},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{closed} \coqdocvar{v} \ensuremath{\rightarrow}  \ensuremath{\lnot} \coqdocvar{appears\_free\_in} \coqdocvar{x} ([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}. \coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{closed}, \coqdocvar{not}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros} \coqdocvar{x} \coqdocvar{v} \coqdocvar{P} \coqdocvar{A}; \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{A}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{i})...\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{A}; \coqdoctac{subst}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{A}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{i})...\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{inversion} \coqdocvar{A}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.50em}
+ \coqdoctac{inversion} \coqdocvar{A}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{A}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{A}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{A}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{A}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{A}.\coqdoceol
\coqdocindent{2.00em}
- \coqdoceol
\coqdocindent{2.50em}
\coqdoctac{inversion} \coqdocvar{A}; \coqdoctac{subst}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{duplicate\_subst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t'} \coqdocvar{x} \coqdocvar{t} \coqdocvar{v},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{closed} \coqdocvar{v} \ensuremath{\rightarrow} [\coqdocvar{x}:=\coqdocvar{t}]([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t'}) = [\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{eapply} \coqdocvar{vacuous\_substitution}. \coqdoctac{apply} \coqdocvar{subst\_not\_afi}. \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{swap\_subst} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{x} \coqdocvar{x1} \coqdocvar{v} \coqdocvar{v1},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{x} \ensuremath{\not=} \coqdocvar{x1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{closed} \coqdocvar{v} \ensuremath{\rightarrow} \coqdocvar{closed} \coqdocvar{v1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
[\coqdocvar{x1}:=\coqdocvar{v1}]([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}) = [\coqdocvar{x}:=\coqdocvar{v}]([\coqdocvar{x1}:=\coqdocvar{v1}]\coqdocvar{t}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{0.50em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{1.50em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{i}); \coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x1} \coqdocvar{i}).\coqdoceol
\coqdocindent{1.50em}
+ \coqdoctac{subst}. \coqdocvar{exfalso}...\coqdoceol
\coqdocindent{1.50em}
+ \coqdoctac{subst}. \coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_refl}. \coqdoctac{apply} \coqdocvar{subst\_closed}...\coqdoceol
\coqdocindent{1.50em}
+ \coqdoctac{subst}. \coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_refl}. \coqdoctac{rewrite} \coqdocvar{subst\_closed}...\coqdoceol
\coqdocindent{1.50em}
+ \coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}... \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Properties of Multi-Substitutions}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{msubst\_closed}: \coqdockw{\ensuremath{\forall}} \coqdocvar{t}, \coqdocvar{closed} \coqdocvar{t} \ensuremath{\rightarrow} \coqdockw{\ensuremath{\forall}} \coqdocvar{ss}, \coqdocvar{msubst} \coqdocvar{ss} \coqdocvar{t} = \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{ss}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{a}. \coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{subst\_closed}; \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Closed environments are those that contain only closed terms. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{closed\_env} (\coqdocvar{env}:\coqdocvar{env}) \{\coqdockw{struct} \coqdocvar{env}\} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{env} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{True}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{x},\coqdocvar{t})::\coqdocvar{env'} \ensuremath{\Rightarrow} \coqdocvar{closed} \coqdocvar{t} \ensuremath{\land} \coqdocvar{closed\_env} \coqdocvar{env'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next come a series of lemmas charcterizing how \coqdocdefinition{msubst} of closed terms
    distributes over \coqdoctac{subst} and over each term form \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{subst\_msubst}: \coqdockw{\ensuremath{\forall}} \coqdocvar{env} \coqdocvar{x} \coqdocvar{v} \coqdocvar{t}, \coqdocvar{closed} \coqdocvar{v} \ensuremath{\rightarrow} \coqdocvar{closed\_env} \coqdocvar{env} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{msubst} \coqdocvar{env} ([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}) = [\coqdocvar{x}:=\coqdocvar{v}](\coqdocvar{msubst} (\coqdocvar{drop} \coqdocvar{x} \coqdocvar{env}) \coqdocvar{t}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{env0}; \coqdoctac{intros}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{a}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H0}. \coqdoctac{fold} \coqdocvar{closed\_env} \coqdoctac{in} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{i} \coqdocvar{x}).\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{duplicate\_subst}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{swap\_subst}; \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{msubst\_var}:  \coqdockw{\ensuremath{\forall}} \coqdocvar{ss} \coqdocvar{x}, \coqdocvar{closed\_env} \coqdocvar{ss} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{msubst} \coqdocvar{ss} (\coqdocvar{tvar} \coqdocvar{x}) =\coqdoceol
\coqdocindent{1.50em}
\coqdockw{match} \coqdocvar{lookup} \coqdocvar{x} \coqdocvar{ss} \coqdockw{with}\coqdoceol
\coqdocindent{1.50em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{t} \ensuremath{\Rightarrow} \coqdocvar{t}\coqdoceol
\coqdocindent{1.50em}
\ensuremath{|} \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{tvar} \coqdocvar{x}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{ss}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{a}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{simpl}. \coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{x}).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{msubst\_closed}. \coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHss}. \coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{msubst\_abs}: \coqdockw{\ensuremath{\forall}} \coqdocvar{ss} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{msubst} \coqdocvar{ss} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t}) = \coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} (\coqdocvar{msubst} (\coqdocvar{drop} \coqdocvar{x} \coqdocvar{ss}) \coqdocvar{t}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{ss}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{a}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}. \coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{x}); \coqdoctac{simpl}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{msubst\_app} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ss} \coqdocvar{t1} \coqdocvar{t2}, \coqdocvar{msubst} \coqdocvar{ss} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2}) = \coqdocvar{tapp} (\coqdocvar{msubst} \coqdocvar{ss} \coqdocvar{t1}) (\coqdocvar{msubst} \coqdocvar{ss} \coqdocvar{t2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{0.50em}
\coqdoctac{induction} \coqdocvar{ss}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{destruct} \coqdocvar{a}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{IHss}. \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
You'll need similar functions for the other term constructors. \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Properties of Multi-Extensions}



 We need to connect the behavior of type assignments with that of
    their corresponding contexts. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{mupdate\_lookup} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{c} : \coqdocvar{tass}) (\coqdocvar{x}:\coqdocvar{id}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{lookup} \coqdocvar{x} \coqdocvar{c} = (\coqdocvar{mupdate} \coqdocvar{empty} \coqdocvar{c}) \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{c}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{a}. \coqdoctac{unfold} \coqdocvar{lookup}, \coqdocvar{mupdate}, \coqdocvar{update}, \coqdocvar{t\_update}. \coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{x}); \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{mupdate\_drop} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{c}: \coqdocvar{tass}) \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{x'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{mupdate} \coqdocvar{Gamma} (\coqdocvar{drop} \coqdocvar{x} \coqdocvar{c}) \coqdocvar{x'}\coqdoceol
\coqdocindent{2.00em}
= \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x'} \coqdockw{then} \coqdocvar{Gamma} \coqdocvar{x'} \coqdockw{else} \coqdocvar{mupdate} \coqdocvar{Gamma} \coqdocvar{c} \coqdocvar{x'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{c}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{x'}); \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{destruct} \coqdocvar{a}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{i} \coqdocvar{x}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{IHc}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}. \coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{x'}); \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{simpl}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}. \coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{i} \coqdocvar{x'}); \coqdoctac{auto}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}; \coqdoctac{congruence}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Properties of Instantiations}



 These are strightforward. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{instantiation\_domains\_match}: \coqdockw{\ensuremath{\forall}} \{\coqdocvar{c}\} \{\coqdocvar{e}\},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{instantiation} \coqdocvar{c} \coqdocvar{e} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{\ensuremath{\forall}} \{\coqdocvar{x}\} \{\coqdocvar{T}\},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{lookup} \coqdocvar{x} \coqdocvar{c} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t}, \coqdocvar{lookup} \coqdocvar{x} \coqdocvar{e} = \coqdocvar{Some} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{e} \coqdocvar{V}. \coqdoctac{induction} \coqdocvar{V}; \coqdoctac{intros} \coqdocvar{x0} \coqdocvar{T0} \coqdocvar{C}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl} \coqdoctac{in} *.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x0}); \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{instantiation\_env\_closed} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{e},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{instantiation} \coqdocvar{c} \coqdocvar{e} \ensuremath{\rightarrow} \coqdocvar{closed\_env} \coqdocvar{e}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{e} \coqdocvar{V}; \coqdoctac{induction} \coqdocvar{V}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{econstructor}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{closed\_env}. \coqdoctac{fold} \coqdocvar{closed\_env}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{split}. \coqdoctac{eapply} \coqdocvar{typable\_empty\_\_closed}. \coqdoctac{eapply} \coqdocvar{R\_typable\_empty}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{instantiation\_R} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{e},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{instantiation} \coqdocvar{c} \coqdocvar{e} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{lookup} \coqdocvar{x} \coqdocvar{c} = \coqdocvar{Some} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{lookup} \coqdocvar{x} \coqdocvar{e} = \coqdocvar{Some} \coqdocvar{t} \ensuremath{\rightarrow} \coqdocvar{R} \coqdocvar{T} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{e} \coqdocvar{V}. \coqdoctac{induction} \coqdocvar{V}; \coqdoctac{intros} \coqdocvar{x'} \coqdocvar{t'} \coqdocvar{T'} \coqdocvar{G} \coqdocvar{E}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{lookup} \coqdoctac{in} *. \coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x'}).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{G}; \coqdoctac{inversion} \coqdocvar{E}; \coqdoctac{subst}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{instantiation\_drop} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{env},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{instantiation} \coqdocvar{c} \coqdocvar{env} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{instantiation} (\coqdocvar{drop} \coqdocvar{x} \coqdocvar{c}) (\coqdocvar{drop} \coqdocvar{x} \coqdocvar{env}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{e} \coqdocvar{V}. \coqdoctac{induction} \coqdocvar{V}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}. \coqdoctac{simpl}. \coqdoctac{constructor}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}. \coqdoctac{unfold} \coqdocvar{drop}. \coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x0}); \coqdoctac{auto}. \coqdoctac{constructor}; \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Congruence Lemmas on Multistep}



 We'll need just a few of these; add them as the demand arises. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{multistep\_App2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{v} \coqdocvar{t} \coqdocvar{t'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{v} \ensuremath{\rightarrow} (\coqdocvar{t} ==>* \coqdocvar{t'}) \ensuremath{\rightarrow} (\coqdocvar{tapp} \coqdocvar{v} \coqdocvar{t}) ==>* (\coqdocvar{tapp} \coqdocvar{v} \coqdocvar{t'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{v} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{V} \coqdocvar{STM}. \coqdoctac{induction} \coqdocvar{STM}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{apply} \coqdocvar{multi\_refl}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{eapply} \coqdocvar{multi\_step}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{apply} \coqdocvar{ST\_App2}; \coqdoctac{eauto}. \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\subsubsection{The R Lemma.}



 We can finally put everything together.


    The key lemma about preservation of typing under substitution can
    be lifted to multi-substitutions: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{msubst\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{e},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{instantiation} \coqdocvar{c} \coqdocvar{e} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{t} \coqdocvar{S}, \coqdocvar{has\_type} (\coqdocvar{mupdate} \coqdocvar{Gamma} \coqdocvar{c}) \coqdocvar{t} \coqdocvar{S} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} (\coqdocvar{msubst} \coqdocvar{e} \coqdocvar{t}) \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} 1; \coqdoctac{intros}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{simpl}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHinstantiation}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{substitution\_preserves\_typing}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} (\coqdocvar{R\_typable\_empty} \coqdocvar{H0}).\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
And at long last, the main lemma. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{msubst\_R} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{env} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{has\_type} (\coqdocvar{mupdate} \coqdocvar{empty} \coqdocvar{c}) \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{instantiation} \coqdocvar{c} \coqdocvar{env} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{R} \coqdocvar{T} (\coqdocvar{msubst} \coqdocvar{env} \coqdocvar{t}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{env0} \coqdocvar{t} \coqdocvar{T} \coqdocvar{HT} \coqdocvar{V}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{env0}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{mupdate} \coqdocvar{empty} \coqdocvar{c}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{Gamma} \coqdocvar{x} = \coqdocvar{lookup} \coqdocvar{x} \coqdocvar{c}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}. \coqdoctac{rewrite} \coqdocvar{HeqGamma}. \coqdoctac{rewrite} \coqdocvar{mupdate\_lookup}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{clear} \coqdocvar{HeqGamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{c}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{HT}; \coqdoctac{intros}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{1.50em}
\coqdoctac{rewrite} \coqdocvar{H0} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{destruct} (\coqdocvar{instantiation\_domains\_match} \coqdocvar{V} \coqdocvar{H}) \coqdockw{as} [\coqdocvar{t} \coqdocvar{P}].\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{eapply} \coqdocvar{instantiation\_R}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{rewrite} \coqdocvar{msubst\_var}. \coqdoctac{rewrite} \coqdocvar{P}. \coqdoctac{auto}. \coqdoctac{eapply} \coqdocvar{instantiation\_env\_closed}; \coqdoctac{eauto}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{msubst\_abs}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{WT}: \coqdocvar{has\_type} \coqdocvar{empty} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T11} (\coqdocvar{msubst} (\coqdocvar{drop} \coqdocvar{x} \coqdocvar{env0}) \coqdocvar{t12})) (\coqdocvar{TArrow} \coqdocvar{T11} \coqdocvar{T12})).\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoctac{eapply} \coqdocvar{T\_Abs}. \coqdoctac{eapply} \coqdocvar{msubst\_preserves\_typing}.\coqdoceol
\coqdocindent{3.00em}
\{ \coqdoctac{eapply} \coqdocvar{instantiation\_drop}; \coqdoctac{eauto}. \}\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}.\coqdoceol
\coqdocindent{3.00em}
\{ \coqdoctac{apply} \coqdocvar{HT}. \}\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}. \coqdoctac{rewrite} \coqdocvar{mupdate\_drop}. \coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{x0}).\coqdoceol
\coqdocindent{3.00em}
+ \coqdoctac{auto}.\coqdoceol
\coqdocindent{3.00em}
+ \coqdoctac{rewrite} \coqdocvar{H}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{clear} - \coqdocvar{c} \coqdocvar{n}. \coqdoctac{induction} \coqdocvar{c}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{simpl}. \coqdoctac{destruct} \coqdocvar{a}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{i} \coqdocvar{x0}); \coqdoctac{auto}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{R}. \coqdoctac{fold} \coqdocvar{R}. \coqdoctac{split}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{auto}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{split}. \coqdoctac{apply} \coqdocvar{value\_halts}. \coqdoctac{apply} \coqdocvar{v\_abs}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{destruct} (\coqdocvar{R\_halts} \coqdocvar{H0}) \coqdockw{as} [\coqdocvar{v} [\coqdocvar{P} \coqdocvar{Q}]].\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{pose} \coqdocvar{proof} (\coqdocvar{multistep\_preserves\_R} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{P} \coqdocvar{H0}).\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{apply} \coqdocvar{multistep\_preserves\_R'} \coqdockw{with} (\coqdocvar{msubst} ((\coqdocvar{x},\coqdocvar{v})::\coqdocvar{env0}) \coqdocvar{t12}).\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{eapply} \coqdocvar{T\_App}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{apply} \coqdocvar{R\_typable\_empty}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{eapply} \coqdocvar{multi\_trans}. \coqdoctac{eapply} \coqdocvar{multistep\_App2}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{eapply} \coqdocvar{multi\_R}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{subst\_msubst}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{eapply} \coqdocvar{ST\_AppAbs}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{eapply} \coqdocvar{typable\_empty\_\_closed}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{apply} (\coqdocvar{R\_typable\_empty} \coqdocvar{H1}).\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{eapply} \coqdocvar{instantiation\_env\_closed}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{eapply} (\coqdocvar{IHHT} ((\coqdocvar{x},\coqdocvar{T11})::\coqdocvar{c})).\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{intros}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}, \coqdocvar{lookup}. \coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{x0}); \coqdoctac{auto}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{constructor}; \coqdoctac{auto}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{msubst\_app}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{IHHT1} \coqdocvar{c} \coqdocvar{H} \coqdocvar{env0} \coqdocvar{V}) \coqdockw{as} [\coqdocvar{\_} [\coqdocvar{\_} \coqdocvar{P1}]].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{pose} \coqdocvar{proof} (\coqdocvar{IHHT2} \coqdocvar{c} \coqdocvar{H} \coqdocvar{env0} \coqdocvar{V}) \coqdockw{as} \coqdocvar{P2}. \coqdoctac{fold} \coqdocvar{R} \coqdoctac{in} \coqdocvar{P1}. \coqdoctac{auto}.\coqdoceol
\coqdocemptyline
 \coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Normalization Theorem}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{normalization} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T}, \coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{halts} \coqdocvar{t}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{replace} \coqdocvar{t} \coqdockw{with} (\coqdocvar{msubst} \coqdocvar{nil} \coqdocvar{t}) \coqdoctac{by} \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (@\coqdocvar{R\_halts} \coqdocvar{T}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{msubst\_R} \coqdocvar{nil}); \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{V\_nil}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
$Date: 2016-10-19 09:26:05 -0400 (Wed, 19 Oct 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.LibTactics}{Library }{Top.LibTactics}

\begin{coqdoccode}
\end{coqdoccode}
\section{LibTactics: A Collection of Handy General-Purpose Tactics}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
This file contains a set of tactics that extends the set of builtin
    tactics provided with the standard distribution of Coq. It intends
    to overcome a number of limitations of the standard set of tactics,
    and thereby to help user to write shorter and more robust scripts.


    Hopefully, Coq tactics will be improved as time goes by, and this
    file should ultimately be useless. In the meanwhile, serious Coq
    users will probably find it very useful.


    The present file contains the implementation and the detailed
    documentation of those tactics. The SF reader need not read this
    file; instead, he/she is encouraged to read the chapter named
    UseTactics.v, which is gentle introduction to the most useful
    tactics from the LibTactic library. 

 The main features offered are:

\begin{itemize}
\item  More convenient syntax for naming hypotheses, with tactics for
    introduction and inversion that take as input only the name of
    hypotheses of type \coqdockw{Prop}, rather than the name of all variables.

\item  Tactics providing true support for manipulating N-ary conjunctions,
    disjunctions and existentials, hidding the fact that the underlying
    implementation is based on binary propositions.

\item  Convenient support for automation: tactic followed with the symbol
    ``\~{}'' or ``*'' will call automation on the generated subgoals.
    Symbol ``\~{}'' stands for \coqdoctac{auto} and ``*'' for \coqdoctac{intuition} \coqdoctac{eauto}.
    These bindings can be customized.

\item  Forward-chaining tactics are provided to instantiate lemmas
    either with variable or hypotheses or a mix of both.

\item  A more powerful implementation of \coqdoctac{apply} is provided (it is based
    on \coqdoctac{refine} and thus behaves better with respect to conversion).

\item  An improved inversion tactic which substitutes equalities on variables
    generated by the standard inversion mecanism. Moreover, it supports
    the elimination of dependently-typed equalities (requires axiom \coqdocvar{K},
    which is a weak form of Proof Irrelevance).

\item  Tactics for saving time when writing proofs, with tactics to
    asserts hypotheses or sub-goals, and improved tactics for
    clearing, renaming, and sorting hypotheses.

\end{itemize}


 External credits:

\begin{itemize}
\item  thanks to Xavier Leroy for providing the idea of tactic \coqdocvar{forward},

\item  thanks to Georges Gonthier for the implementation trick in \coqdocvar{rapply},

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Set Implicit Arguments}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{List}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdocvar{Remove} \coqdocvar{Hints} \coqdocvar{Bool.trans\_eq\_bool}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Tools for Programming with Ltac}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Identity Continuation}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{idcont} \coqdocvar{tt} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{idtac}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Untyped Arguments for Tactics}



 Any Coq value can be boxed into the type \coqdocinductive{Boxer}. This is
    useful to use Coq computations for implementing tactics. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{Boxer} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{boxer} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{A}:\coqdockw{Type}), \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{Boxer}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Optional Arguments for Tactics}



 \coqdocconstructor{ltac\_no\_arg} is a constant that can be used to simulate
    optional arguments in tactic definitions.
    Use \coqdocvar{mytactic} \coqdocconstructor{ltac\_no\_arg} on the tactic invokation,
    and use \coqdockw{match} \coqdocvar{arg} \coqdockw{with} \coqdocconstructor{ltac\_no\_arg} \ensuremath{\Rightarrow} .. or
    \coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{arg} \coqdockw{with} \coqdocinductive{ltac\_No\_arg}  \ensuremath{\Rightarrow} .. to
    test whether an argument was provided. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ltac\_No\_arg} : \coqdockw{Set} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ltac\_no\_arg} : \coqdocvar{ltac\_No\_arg}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Wildcard Arguments for Tactics}



 \coqdocconstructor{ltac\_wild} is a constant that can be used to simulate
    wildcard arguments in tactic definitions. Notation is \coqdocvar{\_\_}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ltac\_Wild} : \coqdockw{Set} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ltac\_wild} : \coqdocvar{ltac\_Wild}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'\_\_'" := \coqdocvar{ltac\_wild} : \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocconstructor{ltac\_wilds} is another constant that is typically used to
    simulate a sequence of \coqdocvar{N} wildcards, with \coqdocvar{N} chosen
    appropriately depending on the context. Notation is \coqdocvar{\_\_\_}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ltac\_Wilds} : \coqdockw{Set} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ltac\_wilds} : \coqdocvar{ltac\_Wilds}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'\_\_\_'" := \coqdocvar{ltac\_wilds} : \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Open} \coqdockw{Scope} \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Position Markers}



 \coqdocinductive{ltac\_Mark} and \coqdocconstructor{ltac\_mark} are dummy definitions used as sentinel
    by tactics, to mark a certain position in the context or in the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ltac\_Mark} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ltac\_mark} : \coqdocvar{ltac\_Mark}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{gen\_until\_mark} repeats \coqdoctac{generalize} on hypotheses from the
    context, starting from the bottom and stopping as soon as reaching
    an hypothesis of type \coqdocvar{Mark}. If fails if \coqdocvar{Mark} does not
    appear in the context. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{gen\_until\_mark} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: ?\coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ltac\_Mark} \ensuremath{\Rightarrow} \coqdoctac{clear} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{generalize} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}; \coqdocvar{gen\_until\_mark}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{intro\_until\_mark} repeats \coqdoctac{intro} until reaching an hypothesis of
    type \coqdocvar{Mark}. It throws away the hypothesis \coqdocvar{Mark}.
    It fails if \coqdocvar{Mark} does not appear as an hypothesis in the
    goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{intro\_until\_mark} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdocvar{ltac\_Mark} \ensuremath{\rightarrow} \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{intros} \coqdocvar{\_}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{intro}; \coqdocvar{intro\_until\_mark}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{List of Arguments for Tactics}



 A datatype of type \coqdocinductive{list} \coqdocinductive{Boxer} is used to manipulate list of
    Coq values in ltac. Notation is >> \coqdocvariable{v1} \coqdocvariable{v2} ... \coqdocvar{vN} for building
    a list containing the values \coqdocvariable{v1} through \coqdocvar{vN}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'>>'" :=\coqdoceol
\coqdocindent{1.00em}
(@\coqdocvar{nil} \coqdocvar{Boxer})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3 v4" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::(\coqdocvar{boxer} \coqdocvar{v4})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v4} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3 v4 v5" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::(\coqdocvar{boxer} \coqdocvar{v4})::(\coqdocvar{boxer} \coqdocvar{v5})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v4} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v5} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3 v4 v5 v6" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::(\coqdocvar{boxer} \coqdocvar{v4})::(\coqdocvar{boxer} \coqdocvar{v5})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v6})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v4} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v5} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v6} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3 v4 v5 v6 v7" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::(\coqdocvar{boxer} \coqdocvar{v4})::(\coqdocvar{boxer} \coqdocvar{v5})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v6})::(\coqdocvar{boxer} \coqdocvar{v7})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v4} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v5} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v6} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v7} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3 v4 v5 v6 v7 v8" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::(\coqdocvar{boxer} \coqdocvar{v4})::(\coqdocvar{boxer} \coqdocvar{v5})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v6})::(\coqdocvar{boxer} \coqdocvar{v7})::(\coqdocvar{boxer} \coqdocvar{v8})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v4} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v5} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v6} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v7} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v8} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::(\coqdocvar{boxer} \coqdocvar{v4})::(\coqdocvar{boxer} \coqdocvar{v5})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v6})::(\coqdocvar{boxer} \coqdocvar{v7})::(\coqdocvar{boxer} \coqdocvar{v8})::(\coqdocvar{boxer} \coqdocvar{v9})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v4} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v5} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v6} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v7} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v8} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v9} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::(\coqdocvar{boxer} \coqdocvar{v4})::(\coqdocvar{boxer} \coqdocvar{v5})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v6})::(\coqdocvar{boxer} \coqdocvar{v7})::(\coqdocvar{boxer} \coqdocvar{v8})::(\coqdocvar{boxer} \coqdocvar{v9})::(\coqdocvar{boxer} \coqdocvar{v10})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v4} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v5} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v6} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v7} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v8} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v9} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v10} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::(\coqdocvar{boxer} \coqdocvar{v4})::(\coqdocvar{boxer} \coqdocvar{v5})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v6})::(\coqdocvar{boxer} \coqdocvar{v7})::(\coqdocvar{boxer} \coqdocvar{v8})::(\coqdocvar{boxer} \coqdocvar{v9})::(\coqdocvar{boxer} \coqdocvar{v10})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v11})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v4} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v5} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v6} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v7} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v8} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v9} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v10} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v11} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::(\coqdocvar{boxer} \coqdocvar{v4})::(\coqdocvar{boxer} \coqdocvar{v5})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v6})::(\coqdocvar{boxer} \coqdocvar{v7})::(\coqdocvar{boxer} \coqdocvar{v8})::(\coqdocvar{boxer} \coqdocvar{v9})::(\coqdocvar{boxer} \coqdocvar{v10})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v11})::(\coqdocvar{boxer} \coqdocvar{v12})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v4} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v5} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v6} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v7} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v8} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v9} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v10} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v11} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v12} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocnoindent
\coqdockw{Notation} "'>>' v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13" :=\coqdoceol
\coqdocindent{1.00em}
((\coqdocvar{boxer} \coqdocvar{v1})::(\coqdocvar{boxer} \coqdocvar{v2})::(\coqdocvar{boxer} \coqdocvar{v3})::(\coqdocvar{boxer} \coqdocvar{v4})::(\coqdocvar{boxer} \coqdocvar{v5})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v6})::(\coqdocvar{boxer} \coqdocvar{v7})::(\coqdocvar{boxer} \coqdocvar{v8})::(\coqdocvar{boxer} \coqdocvar{v9})::(\coqdocvar{boxer} \coqdocvar{v10})\coqdoceol
\coqdocindent{1.50em}
::(\coqdocvar{boxer} \coqdocvar{v11})::(\coqdocvar{boxer} \coqdocvar{v12})::(\coqdocvar{boxer} \coqdocvar{v13})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v1} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v2} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v3} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v4} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v5} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v6} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v7} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v8} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v9} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v10} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v11} \coqdoctac{at} \coqdockw{level} 0,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{v12} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{v13} \coqdoctac{at} \coqdockw{level} 0)\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{ltac\_scope}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{list\_boxer\_of} inputs a term \coqdocvar{E} and returns a term
    of type ``list boxer'', according to the following rules:

\begin{itemize}
\item  if \coqdocvar{E} is already of type ``list Boxer'', then it returns \coqdocvar{E};

\item  otherwise, it returns the list (\coqdocconstructor{boxer} \coqdocvar{E})::\coqdocconstructor{nil}. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{list\_boxer\_of} \coqdocvar{E} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{List.list} \coqdocvar{Boxer} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{E})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:((\coqdocvar{boxer} \coqdocvar{E})::\coqdocvar{nil})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Databases of Lemmas}



 Use the hint facility to implement a database mapping
    terms to terms. To declare a new database, use a definition:
    \coqdockw{Definition} \coqdocvar{mydatabase} := \coqdocinductive{True}.


    Then, to map \coqdocvar{mykey} to \coqdocvar{myvalue}, write the hint:
    \coqdockw{Hint} \coqdockw{Extern} 1 (\coqdocvar{Register} \coqdocvar{mydatabase} \coqdocvar{mykey}) \ensuremath{\Rightarrow} \coqdocvar{Provide} \coqdocvar{myvalue}.


    Finally, to query the value associated with a key, run the
    tactic \coqdocvar{ltac\_database\_get} \coqdocvar{mydatabase} \coqdocvar{mykey}. This will leave
    at the head of the goal the term \coqdocvar{myvalue}. It can then be
    named and exploited using \coqdoctac{intro}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{Ltac\_database\_token} : \coqdockw{Prop} := \coqdocvar{ltac\_database\_token}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ltac\_database} (\coqdocvar{D}:\coqdocvar{Boxer}) (\coqdocvar{T}:\coqdocvar{Boxer}) (\coqdocvar{A}:\coqdocvar{Boxer}) := \coqdocvar{Ltac\_database\_token}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'Register' D T" := (\coqdocvar{ltac\_database} (\coqdocvar{boxer} \coqdocvar{D}) (\coqdocvar{boxer} \coqdocvar{T}) \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 69, \coqdocvar{D} \coqdoctac{at} \coqdockw{level} 0, \coqdocvar{T} \coqdoctac{at} \coqdockw{level} 0).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{ltac\_database\_provide} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{A}:\coqdocvar{Boxer}) (\coqdocvar{D}:\coqdocvar{Boxer}) (\coqdocvar{T}:\coqdocvar{Boxer}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ltac\_database} \coqdocvar{D} \coqdocvar{T} \coqdocvar{A}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{using}. \coqdoctac{split}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{Provide} \coqdocvar{T} := \coqdoctac{apply} (@\coqdocvar{ltac\_database\_provide} (\coqdocvar{boxer} \coqdocvar{T})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{ltac\_database\_get} \coqdocvar{D} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{A} := \coqdoctac{fresh} "TEMP" \coqdoctac{in} \coqdoctac{evar} (\coqdocvar{A}:\coqdocvar{Boxer});\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "TEMP" \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H} : \coqdocvar{ltac\_database} (\coqdocvar{boxer} \coqdocvar{D}) (\coqdocvar{boxer} \coqdocvar{T}) \coqdocvar{A});\coqdoceol
\coqdocindent{1.00em}
[ \coqdoctac{subst} \coqdocvar{A}; \coqdoctac{auto}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{subst} \coqdocvar{A}; \coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdockw{with} \coqdocvar{ltac\_database} \coqdocvar{\_} \coqdocvar{\_} (\coqdocvar{boxer} ?\coqdocvar{L}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{7.50em}
\coqdoctac{generalize} \coqdocvar{L} \coqdockw{end}; \coqdoctac{clear} \coqdocvar{H} ].\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\subsection{On-the-Fly Removal of Hypotheses}



 In a list of arguments >> \coqdocvar{H1} \coqdocvar{H2} .. \coqdocvar{HN} passed to a tactic
    such as \coqdocvar{lets} or \coqdocvar{applys} or \coqdocvar{forwards} or \coqdocvar{specializes},
    the term \coqdocdefinition{rm}, an identity function, can be placed in front
    of the name of an hypothesis to be deleted. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{rm} (\coqdocvar{A}:\coqdockw{Type}) (\coqdocvar{X}:\coqdocvar{A}) := \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{rm\_term} \coqdocvar{E} removes one hypothesis that admits the same
    type as \coqdocvar{E}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{rm\_term} \coqdocvar{E} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{T} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: \coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{try} \coqdoctac{clear} \coqdocvar{H} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{rm\_inside} \coqdocvar{E} calls \coqdocvar{rm\_term} \coqdocvar{Ei} for any subterm
    of the form \coqdocdefinition{rm} \coqdocvar{Ei} found in E \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{rm\_inside} \coqdocvar{E} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{go} \coqdocvar{E} := \coqdocvar{rm\_inside} \coqdocvar{E} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{E} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{rm} ?\coqdocvar{X} \ensuremath{\Rightarrow} \coqdocvar{rm\_term} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{go} \coqdocvar{X1}; \coqdocvar{go} \coqdocvar{X2}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{go} \coqdocvar{X1}; \coqdocvar{go} \coqdocvar{X2}; \coqdocvar{go} \coqdocvar{X3}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{go} \coqdocvar{X1}; \coqdocvar{go} \coqdocvar{X2}; \coqdocvar{go} \coqdocvar{X3}; \coqdocvar{go} \coqdocvar{X4}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} ?\coqdocvar{X5} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{go} \coqdocvar{X1}; \coqdocvar{go} \coqdocvar{X2}; \coqdocvar{go} \coqdocvar{X3}; \coqdocvar{go} \coqdocvar{X4}; \coqdocvar{go} \coqdocvar{X5}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} ?\coqdocvar{X5} ?\coqdocvar{X6} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{go} \coqdocvar{X1}; \coqdocvar{go} \coqdocvar{X2}; \coqdocvar{go} \coqdocvar{X3}; \coqdocvar{go} \coqdocvar{X4}; \coqdocvar{go} \coqdocvar{X5}; \coqdocvar{go} \coqdocvar{X6}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} ?\coqdocvar{X5} ?\coqdocvar{X6} ?\coqdocvar{X7} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{go} \coqdocvar{X1}; \coqdocvar{go} \coqdocvar{X2}; \coqdocvar{go} \coqdocvar{X3}; \coqdocvar{go} \coqdocvar{X4}; \coqdocvar{go} \coqdocvar{X5}; \coqdocvar{go} \coqdocvar{X6}; \coqdocvar{go} \coqdocvar{X7}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} ?\coqdocvar{X5} ?\coqdocvar{X6} ?\coqdocvar{X7} ?\coqdocvar{X8} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{go} \coqdocvar{X1}; \coqdocvar{go} \coqdocvar{X2}; \coqdocvar{go} \coqdocvar{X3}; \coqdocvar{go} \coqdocvar{X4}; \coqdocvar{go} \coqdocvar{X5}; \coqdocvar{go} \coqdocvar{X6}; \coqdocvar{go} \coqdocvar{X7}; \coqdocvar{go} \coqdocvar{X8}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} ?\coqdocvar{X5} ?\coqdocvar{X6} ?\coqdocvar{X7} ?\coqdocvar{X8} ?\coqdocvar{X9} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{go} \coqdocvar{X1}; \coqdocvar{go} \coqdocvar{X2}; \coqdocvar{go} \coqdocvar{X3}; \coqdocvar{go} \coqdocvar{X4}; \coqdocvar{go} \coqdocvar{X5}; \coqdocvar{go} \coqdocvar{X6}; \coqdocvar{go} \coqdocvar{X7}; \coqdocvar{go} \coqdocvar{X8}; \coqdocvar{go} \coqdocvar{X9}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} ?\coqdocvar{X5} ?\coqdocvar{X6} ?\coqdocvar{X7} ?\coqdocvar{X8} ?\coqdocvar{X9} ?\coqdocvar{X10} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{go} \coqdocvar{X1}; \coqdocvar{go} \coqdocvar{X2}; \coqdocvar{go} \coqdocvar{X3}; \coqdocvar{go} \coqdocvar{X4}; \coqdocvar{go} \coqdocvar{X5}; \coqdocvar{go} \coqdocvar{X6}; \coqdocvar{go} \coqdocvar{X7}; \coqdocvar{go} \coqdocvar{X8}; \coqdocvar{go} \coqdocvar{X9}; \coqdocvar{go} \coqdocvar{X10}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For faster performance, one may deactivate \coqdocvar{rm\_inside} by
    replacing the body of this definition with \coqdoctac{idtac}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{fast\_rm\_inside} \coqdocvar{E} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rm\_inside} \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Numbers as Arguments}



 When tactic takes a natural number as argument, it may be
    parsed either as a natural number or as a relative number.
    In order for tactics to convert their arguments into natural numbers,
    we provide a conversion tactic. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdocvar{BinPos} \coqdocvar{Coq.ZArith.BinInt}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ltac\_nat\_from\_int} (\coqdocvar{x}:\coqdocvar{BinInt.Z}) : \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{x} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BinInt.Z0} \ensuremath{\Rightarrow} 0\%\coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BinInt.Zpos} \coqdocvar{p} \ensuremath{\Rightarrow} \coqdocvar{BinPos.nat\_of\_P} \coqdocvar{p}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BinInt.Zneg} \coqdocvar{p} \ensuremath{\Rightarrow} 0\%\coqdocvar{nat}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{nat\_from\_number} \coqdocvar{N} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{N} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nat} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{N})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BinInt.Z} \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{N'} := \coqdockw{constr}:(\coqdocvar{ltac\_nat\_from\_int} \coqdocvar{N}) \coqdoctac{in} \coqdoctac{eval} \coqdoctac{compute} \coqdoctac{in} \coqdocvar{N'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{ltac\_pattern} \coqdocvar{E} \coqdoctac{at} \coqdocvar{K} is the same as \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} \coqdocvar{K} except that
    \coqdocvar{K} is a Coq natural rather than a Ltac integer. Syntax
    \coqdocvar{ltac\_pattern} \coqdocvar{E} \coqdockw{as} \coqdocvar{K} \coqdoctac{in} \coqdocvariable{H} is also available. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "ltac\_pattern" \coqdockw{constr}(\coqdocvar{E}) "at" \coqdockw{constr}(\coqdocvar{K}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{nat\_from\_number} \coqdocvar{K} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 1 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 1\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 2 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 2\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 3 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 3\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 4 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 4\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 5 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 5\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 6 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 6\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 7 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 7\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 8 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 8\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "ltac\_pattern" \coqdockw{constr}(\coqdocvar{E}) "at" \coqdockw{constr}(\coqdocvar{K}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{nat\_from\_number} \coqdocvar{K} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 1 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 1 \coqdoctac{in} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 2 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 2 \coqdoctac{in} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 3 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 3 \coqdoctac{in} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 4 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 4 \coqdoctac{in} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 5 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 5 \coqdoctac{in} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 6 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 6 \coqdoctac{in} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 7 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 7 \coqdoctac{in} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 8 \ensuremath{\Rightarrow} \coqdoctac{pattern} \coqdocvar{E} \coqdoctac{at} 8 \coqdoctac{in} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Testing Tactics}



 \coqdocvar{show} \coqdocvar{tac} executes a tactic \coqdocvar{tac} that produces a result,
    and then display its result. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "show" \coqdocvar{tactic}(\coqdocvar{tac}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{R} := \coqdocvar{tac} \coqdoctac{in} \coqdoctac{pose} \coqdocvar{R}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{dup} \coqdocvar{N} produces \coqdocvar{N} copies of the current goal. It is useful
    for building examples on which to illustrate behaviour of tactics.
    \coqdocvar{dup} is short for \coqdocvar{dup} 2. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{dup\_lemma} : \coqdockw{\ensuremath{\forall}} \coqdocvar{P}, \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{using}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{dup\_tactic} \coqdocvar{N} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{nat\_from\_number} \coqdocvar{N} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} 0 \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} ?\coqdocvar{N'} \ensuremath{\Rightarrow} \coqdoctac{apply} \coqdocvar{dup\_lemma}; [ \ensuremath{|} \coqdocvar{dup\_tactic} \coqdocvar{N'} ]\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "dup" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dup\_tactic} \coqdocvar{N}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "dup" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dup} 2.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Check No Evar in Goal}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{check\_noevar} \coqdocvar{M} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first} [ \coqdocvar{has\_evar} \coqdocvar{M}; \coqdoctac{fail} 2 \ensuremath{|} \coqdoctac{idtac} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{check\_noevar\_hyp} \coqdocvar{H} := \coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{T} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdoctac{in} \coqdocvar{check\_noevar} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{check\_noevar\_goal} := \coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{G} \ensuremath{\Rightarrow} \coqdocvar{check\_noevar} \coqdocvar{G} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Helper Function for Introducing Evars}



 \coqdocvar{with\_evar} \coqdocdefinition{T} (\coqdockw{fun} \coqdocvar{M} \ensuremath{\Rightarrow} \coqdocvar{tac}) creates a new evar that can
    be used in the tactic \coqdocvar{tac} under the name \coqdocvar{M}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{with\_evar\_base} \coqdocvar{T} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{x} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{evar} (\coqdocvar{x}:\coqdocvar{T}); \coqdocvar{cont} \coqdocvar{x}; \coqdoctac{subst} \coqdocvar{x}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "with\_evar" \coqdockw{constr}(\coqdocvar{T}) \coqdocvar{tactic}(\coqdocvar{cont}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{with\_evar\_base} \coqdocvar{T} \coqdocvar{cont}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Tagging of Hypotheses}



 \coqdocvar{get\_last\_hyp} \coqexternalref{tt}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocconstructor{tt}} is a function that returns the last hypothesis
    at the bottom of the context. It is useful to obtain the default
    name associated with the hypothesis, e.g.
    \coqdoctac{intro}; \coqdockw{let} \coqdocvariable{H} := \coqdocvar{get\_last\_hyp} \coqexternalref{tt}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Init.Datatypes}{\coqdocconstructor{tt}} \coqdoctac{in} \coqdockw{let} \coqdocvar{H'} := \coqdoctac{fresh} "\coqdocaxiom{P}" \coqdocvariable{H} \coqdoctac{in} ... \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{get\_last\_hyp} \coqdocvar{tt} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{H}) \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{More Tagging of Hypotheses}



 \coqdocdefinition{ltac\_tag\_subst} is a specific marker for hypotheses
    which is used to tag hypotheses that are equalities to
    be substituted. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ltac\_tag\_subst} (\coqdocvar{A}:\coqdockw{Type}) (\coqdocvar{x}:\coqdocvar{A}) := \coqdocvar{x}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocdefinition{ltac\_to\_generalize} is a specific marker for hypotheses
    to be generalized. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ltac\_to\_generalize} (\coqdocvar{A}:\coqdockw{Type}) (\coqdocvar{x}:\coqdocvar{A}) := \coqdocvar{x}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{gen\_to\_generalize} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{H}: \coqdocvar{ltac\_to\_generalize} \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{generalize} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{mark\_to\_generalize} \coqdocvar{H} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{T} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{change} \coqdocvar{T} \coqdockw{with} (\coqdocvar{ltac\_to\_generalize} \coqdocvar{T}) \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Deconstructing Terms}



 \coqdocvar{get\_head} \coqdocvar{E} is a tactic that returns the head constant of the
    term \coqdocvar{E}, ie, when applied to a term of the form \coqdocaxiom{P} \coqdocvariable{x1} ... \coqdocvar{xN}
    it returns \coqdocaxiom{P}. If \coqdocvar{E} is not an application, it returns \coqdocvar{E}.
    Warning: the tactic seems to loop in some cases when the goal is
    a product and one uses the result of this function. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{get\_head} \coqdocvar{E} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{E} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{P})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{get\_fun\_arg} \coqdocvar{E} is a tactic that decomposes an application
  term \coqdocvar{E}, ie, when applied to a term of the form \coqdocvar{X1} ... \coqdocvar{XN}
  it returns a pair made of \coqdocvar{X1} .. \coqdocdefinition{X}(\coqdocvar{N}-1) and \coqdocvar{XN}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{get\_fun\_arg} \coqdocvar{E} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{E} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} ?\coqdocvar{X5} ?\coqdocvar{X6} ?\coqdocvar{X7} ?\coqdocvar{X} \ensuremath{\Rightarrow} \coqdockw{constr}:((\coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3} \coqdocvar{X4} \coqdocvar{X5} \coqdocvar{X6},\coqdocvar{X}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} ?\coqdocvar{X5} ?\coqdocvar{X6} ?\coqdocvar{X} \ensuremath{\Rightarrow} \coqdockw{constr}:((\coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3} \coqdocvar{X4} \coqdocvar{X5},\coqdocvar{X}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} ?\coqdocvar{X5} ?\coqdocvar{X} \ensuremath{\Rightarrow} \coqdockw{constr}:((\coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3} \coqdocvar{X4},\coqdocvar{X}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X4} ?\coqdocvar{X} \ensuremath{\Rightarrow} \coqdockw{constr}:((\coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3},\coqdocvar{X}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X3} ?\coqdocvar{X} \ensuremath{\Rightarrow} \coqdockw{constr}:((\coqdocvar{X1} \coqdocvar{X2},\coqdocvar{X}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X2} ?\coqdocvar{X} \ensuremath{\Rightarrow} \coqdockw{constr}:((\coqdocvar{X1},\coqdocvar{X}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{X1} ?\coqdocvar{X} \ensuremath{\Rightarrow} \coqdockw{constr}:((\coqdocvar{X1},\coqdocvar{X}))\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Action at Occurence and Action Not at Occurence}



 \coqdocvar{ltac\_action\_at} \coqdocvar{K} \coqdocvar{of} \coqdocvar{E} \coqdoctac{do} \coqdocvar{Tac} isolates the \coqdocvar{K}-th occurence of \coqdocvar{E} in the
    goal, setting it in the form \coqdocaxiom{P} \coqdocvar{E} for some named pattern \coqdocaxiom{P},
    then calls tactic \coqdocvar{Tac}, and finally unfolds \coqdocaxiom{P}. Syntax
    \coqdocvar{ltac\_action\_at} \coqdocvar{K} \coqdocvar{of} \coqdocvar{E} \coqdoctac{in} \coqdocvariable{H} \coqdoctac{do} \coqdocvar{Tac} is also available. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "ltac\_action\_at" \coqdockw{constr}(\coqdocvar{K}) "of" \coqdockw{constr}(\coqdocvar{E}) "do" \coqdocvar{tactic}(\coqdocvar{Tac}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{p} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{ltac\_pattern} \coqdocvar{E} \coqdoctac{at} \coqdocvar{K};\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{P} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{set} (\coqdocvar{p}:=\coqdocvar{P}) \coqdockw{end};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Tac}; \coqdoctac{unfold} \coqdocvar{p}; \coqdoctac{clear} \coqdocvar{p}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "ltac\_action\_at" \coqdockw{constr}(\coqdocvar{K}) "of" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) "do" \coqdocvar{tactic}(\coqdocvar{Tac}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{p} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{ltac\_pattern} \coqdocvar{E} \coqdoctac{at} \coqdocvar{K} \coqdoctac{in} \coqdocvar{H};\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdockw{with} ?\coqdocvar{P} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{set} (\coqdocvar{p}:=\coqdocvar{P}) \coqdoctac{in} \coqdocvar{H} \coqdockw{end};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Tac}; \coqdoctac{unfold} \coqdocvar{p} \coqdoctac{in} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{p}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{protects} \coqdocvar{E} \coqdoctac{do} \coqdocvar{Tac} temporarily assigns a name to the expression \coqdocvar{E}
    so that the execution of tactic \coqdocvar{Tac} will not modify \coqdocvar{E}. This is
    useful for instance to restrict the action of \coqdoctac{simpl}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "protects" \coqdockw{constr}(\coqdocvar{E}) "do" \coqdocvar{tactic}(\coqdocvar{Tac}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{x} := \coqdoctac{fresh} "TEMP" \coqdoctac{in} \coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "TEMP" \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}) \coqdoctac{in} *; \coqdoctac{assert} (\coqdocvar{H} : \coqdocvar{X} = \coqdocvar{E}) \coqdoctac{by} \coqdoctac{reflexivity};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clearbody} \coqdocvar{X}; \coqdocvar{Tac}; \coqdoctac{subst} \coqdocvar{x}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "protects" \coqdockw{constr}(\coqdocvar{E}) "do" \coqdocvar{tactic}(\coqdocvar{Tac}) "/" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{protects} \coqdocvar{E} \coqdoctac{do} \coqdocvar{Tac}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{An Alias for \texorpdfstring{\protect\coqdocabbreviation{eq}}{eq}}



 \coqdocdefinition{eq'} is an alias for \coqdocabbreviation{eq} to be used for equalities in
    inductive definitions, so that they don't get mixed with
    equalities generated by \coqdoctac{inversion}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{eq'} := @\coqdocvar{eq}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Unfold} \coqdocvar{eq'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "x '='{}' y" := (@\coqdocvar{eq'} \coqdocvar{\_} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 70, \coqdocvar{y} \coqdoctac{at} \coqdocvar{next} \coqdockw{level}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Common Tactics for Simplifying Goals Like \texorpdfstring{\protect\coqdoctac{intuition}}{intuition}}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{jauto\_set\_hyps} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: ?\coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{H}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdoctac{\ensuremath{\exists}} \coqdocvar{a}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{H} \coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{generalize} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{jauto\_set\_goal} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdoctac{\ensuremath{\exists}} \coqdocvar{a}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{esplit}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{split}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{jauto\_set} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}; \coqdocvar{jauto\_set\_hyps}; \coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}; \coqdocvar{jauto\_set\_goal};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{not} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Backward and Forward Chaining}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Application}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{old\_refine} \coqdocvar{f} := \coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} \coqdocvar{f}. \coqdocemptyline
\end{coqdoccode}
\coqdocvar{rapply} is a tactic similar to \coqdoctac{eapply} except that it is
    based on the \coqdoctac{refine} tactics, and thus is strictly more
    powerful (at least in theory :). In short, it is able to perform
    on-the-fly conversions when required for arguments to match,
    and it is able to instantiate existentials when required. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first}  \coqdoceol
\coqdocindent{1.00em}
[ \coqdoctac{eexact} (@\coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_})\coqdoceol
\coqdocindent{1.00em}
].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactics \coqdocvar{applys\_N} \coqdocdefinition{T}, where \coqdocvar{N} is a natural number,
    provides a more efficient way of using \coqdocvar{applys} \coqdocdefinition{T}. It avoids
    trying out all possible arities, by specifying explicitely
    the arity of function \coqdocdefinition{T}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_0" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_1" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_2" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_3" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_4" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_5" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_6" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_7" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_8" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_9" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rapply\_10" \coqdockw{constr}(\coqdocvar{t}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{refine} (@\coqdocvar{t} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{lets\_base} \coqdocvariable{H} \coqdocvar{E} adds an hypothesis \coqdocvariable{H} : \coqdocdefinition{T} to the context, where \coqdocdefinition{T} is
    the type of term \coqdocvar{E}. If \coqdocvariable{H} is an introduction pattern, it will
    destruct \coqdocvariable{H} according to the pattern. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{lets\_base} \coqdocvar{I} \coqdocvar{E} := \coqdoctac{generalize} \coqdocvar{E}; \coqdoctac{intros} \coqdocvar{I}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{applys\_to} \coqdocvariable{H} \coqdocvar{E} transform the type of hypothesis \coqdocvariable{H} by
    replacing it by the result of the application of the term
    \coqdocvar{E} to \coqdocvariable{H}. Intuitively, it is equivalent to \coqdocvar{lets} \coqdocvariable{H}: (\coqdocvar{E} \coqdocvariable{H}). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_to" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H'} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{rename} \coqdocvar{H} \coqdocvar{into} \coqdocvar{H'};\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{first} [ \coqdocvar{lets\_base} \coqdocvar{H} (\coqdocvar{E} \coqdocvar{H'})\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{lets\_base} \coqdocvar{H} (\coqdocvar{E} \coqdocvar{\_} \coqdocvar{H'})\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{lets\_base} \coqdocvar{H} (\coqdocvar{E} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H'})\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{lets\_base} \coqdocvar{H} (\coqdocvar{E} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H'})\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{lets\_base} \coqdocvar{H} (\coqdocvar{E} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H'})\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{lets\_base} \coqdocvar{H} (\coqdocvar{E} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H'})\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{lets\_base} \coqdocvar{H} (\coqdocvar{E} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H'})\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{lets\_base} \coqdocvar{H} (\coqdocvar{E} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H'})\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{lets\_base} \coqdocvar{H} (\coqdocvar{E} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H'})\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{lets\_base} \coqdocvar{H} (\coqdocvar{E} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H'}) ]\coqdoceol
\coqdocindent{1.00em}
); \coqdoctac{clear} \coqdocvar{H'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{applys\_to} \coqdocvar{H1},...,\coqdocvar{HN} \coqdocvar{E} applys \coqdocvar{E} to several hypotheses \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_to" \coqdocvar{hyp}(\coqdocvar{H1}) "," \coqdocvar{hyp}(\coqdocvar{H2}) \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_to} \coqdocvar{H1} \coqdocvar{E}; \coqdocvar{applys\_to} \coqdocvar{H2} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_to" \coqdocvar{hyp}(\coqdocvar{H1}) "," \coqdocvar{hyp}(\coqdocvar{H2}) "," \coqdocvar{hyp}(\coqdocvar{H3}) \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_to} \coqdocvar{H1} \coqdocvar{E}; \coqdocvar{applys\_to} \coqdocvar{H2} \coqdocvar{E}; \coqdocvar{applys\_to} \coqdocvar{H3} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_to" \coqdocvar{hyp}(\coqdocvar{H1}) "," \coqdocvar{hyp}(\coqdocvar{H2}) "," \coqdocvar{hyp}(\coqdocvar{H3}) "," \coqdocvar{hyp}(\coqdocvar{H4}) \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_to} \coqdocvar{H1} \coqdocvar{E}; \coqdocvar{applys\_to} \coqdocvar{H2} \coqdocvar{E}; \coqdocvar{applys\_to} \coqdocvar{H3} \coqdocvar{E}; \coqdocvar{applys\_to} \coqdocvar{H4} \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{constructors} calls \coqdoctac{constructor} or \coqdoctac{econstructor}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "constructors" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first} [ \coqdoctac{constructor} \ensuremath{|} \coqdoctac{econstructor} ]; \coqdoctac{unfold} \coqdocvar{eq'}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Assertions}



 \coqdocvar{asserts} \coqdocvariable{H}: \coqdocdefinition{T} is another syntax for \coqdoctac{assert} (\coqdocvariable{H} : \coqdocdefinition{T}), which
    also works with introduction patterns. For instance, one can write:
    \coqdocvar{asserts} \symbol{92}[\coqdocabbreviation{x} \coqdocaxiom{P}\symbol{92}] (\coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{n}, \coqdocabbreviation{n} = 3), or
    \coqdocvar{asserts} \symbol{92}[\coqdocvariable{H}\ensuremath{|}\coqdocvariable{H}\symbol{92}] (\coqdocabbreviation{n} = 0 \ensuremath{\lor} \coqdocabbreviation{n} = 1). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{assert} (\coqdocvar{H} : \coqdocvar{T});\coqdoceol
\coqdocindent{1.00em}
[ \ensuremath{|} \coqdoctac{generalize} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}; \coqdoctac{intros} \coqdocvar{I} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{asserts} \coqdocvar{H1} .. \coqdocvar{HN}: \coqdocdefinition{T} is a shorthand for
    \coqdocvar{asserts} \symbol{92}[\coqdocvar{H1} \symbol{92}[\coqdocvar{H2} \symbol{92}[.. \coqdocvar{HN}\symbol{92}]\symbol{92}]\symbol{92}]\symbol{92}: T]. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts} [\coqdocvar{I1} \coqdocvar{I2}]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts} [\coqdocvar{I1} [\coqdocvar{I2} \coqdocvar{I3}]]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I4}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} \coqdocvar{I4}]]]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} [\coqdocvar{I4} \coqdocvar{I5}]]]]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I6}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} [\coqdocvar{I4} [\coqdocvar{I5} \coqdocvar{I6}]]]]]: \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{asserts}: \coqdocdefinition{T} is \coqdocvar{asserts} \coqdocvariable{H}: \coqdocdefinition{T} with \coqdocvariable{H} being chosen automatically. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{asserts} \coqdocvar{H} : \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{cuts} \coqdocvariable{H}: \coqdocdefinition{T} is the same as \coqdocvar{asserts} \coqdocvariable{H}: \coqdocdefinition{T} except that the two subgoals
    generated are swapped: the subgoal \coqdocdefinition{T} comes second. Note that contrary
    to \coqdoctac{cut}, it introduces the hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{cut} (\coqdocvar{T}); [ \coqdoctac{intros} \coqdocvar{I} \ensuremath{|} \coqdoctac{idtac} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{cuts}: \coqdocdefinition{T} is \coqdocvar{cuts} \coqdocvariable{H}: \coqdocdefinition{T} with \coqdocvariable{H} being chosen automatically. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{cuts} \coqdocvar{H}: \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{cuts} \coqdocvar{H1} .. \coqdocvar{HN}: \coqdocdefinition{T} is a shorthand for
    \coqdocvar{cuts} \symbol{92}[\coqdocvar{H1} \symbol{92}[\coqdocvar{H2} \symbol{92}[.. \coqdocvar{HN}\symbol{92}]\symbol{92}]\symbol{92}]\symbol{92}: T]. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts} [\coqdocvar{I1} \coqdocvar{I2}]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts} [\coqdocvar{I1} [\coqdocvar{I2} \coqdocvar{I3}]]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I4}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} \coqdocvar{I4}]]]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} [\coqdocvar{I4} \coqdocvar{I5}]]]]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I6}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} [\coqdocvar{I4} [\coqdocvar{I5} \coqdocvar{I6}]]]]]: \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Instantiation and Forward-Chaining}



 The instantiation tactics are used to instantiate a lemma \coqdocvar{E}
    (whose type is a product) on some arguments. The type of \coqdocvar{E} is
    made of implications and universal quantifications, e.g.
    \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{x}, \coqdocaxiom{P} \coqdocabbreviation{x} \ensuremath{\rightarrow} \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{y} \coqdocabbreviation{z}, \coqdocvariable{Q} \coqdocabbreviation{x} \coqdocabbreviation{y} \coqdocabbreviation{z} \ensuremath{\rightarrow} \coqdocdefinition{R} \coqdocabbreviation{z}.


    The first possibility is to provide arguments in order: first \coqdocabbreviation{x},
    then a proof of \coqdocaxiom{P} \coqdocabbreviation{x}, then \coqdocabbreviation{y} etc... In this mode, called ``Args'',
    all the arguments are to be provided. If a wildcard is provided
    (written \coqdocvar{\_\_}), then an existential variable will be introduced in
    place of the argument.


      It is very convenient to give some arguments the lemma should be
    instantiated on, and let the tactic find out automatically where
    underscores should be insterted. Underscore arguments \coqdocvar{\_\_} are
    interpret as follows: an underscore means that we want to skip the
    argument that has the same type as the next real argument provided
    (real means not an underscore). If there is no real argument after
    underscore, then the underscore is used for the first possible argument.


    The general syntax is \coqdocvar{tactic} (>> \coqdocvar{E1} .. \coqdocvar{EN}) where \coqdocvar{tactic} is
    the name of the tactic (possibly with some arguments) and \coqdocvar{Ei}
    are the arguments. Moreover, some tactics accept the syntax
    \coqdocvar{tactic} \coqdocvar{E1} .. \coqdocvar{EN} as short for \coqdocvar{tactic} (>> \coqdocvar{E1} .. \coqdocvar{EN}) for
    values of \coqdocvar{N} up to 5.


    Finally, if the argument \coqdocvar{EN} given is a triple-underscore \coqdocvar{\_\_\_},
    then it is equivalent to providing a list of wildcards, with
    the appropriate number of wildcards. This means that all
    the remaining arguments of the lemma will be instantiated. 
    Definitions in the conclusion are not unfolded in this case. \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{P} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "TEMP" \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H} : \coqdocvar{P}); [ \ensuremath{|} \coqdocvar{cont}(\coqdocvar{t} \coqdocvar{H}); \coqdoctac{clear} \coqdocvar{H} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{x} := \coqdoctac{fresh} "TEMP" \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{evar} (\coqdocvar{x}:\coqdocvar{A});\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{t'} := \coqdockw{constr}:(\coqdocvar{t} \coqdocvar{x}) \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{t'{}'} := (\coqdoctac{eval} \coqdoctac{unfold} \coqdocvar{x} \coqdoctac{in} \coqdocvar{t'}) \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{subst} \coqdocvar{x}; \coqdocvar{cont} \coqdocvar{t'{}'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{app\_arg} \coqdocvar{t} \coqdocvar{P} \coqdocvar{v} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "TEMP" \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H} : \coqdocvar{P}); [ \coqdoctac{apply} \coqdocvar{v} \ensuremath{|} \coqdocvar{cont}(\coqdocvar{t} \coqdocvar{H}); \coqdoctac{try} \coqdoctac{clear} \coqdocvar{H} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{build\_app\_alls} \coqdocvar{t} \coqdocvar{final} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{rec} \coqdocvar{go} \coqdocvar{t} :=\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{t} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{P} \coqdocvar{go}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:?\coqdocvar{A}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{go}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{final} \coqdocvar{t}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{go} \coqdocvar{t}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{boxerlist\_next\_type} \coqdocvar{vs} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{vs} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{ltac\_wild})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{boxer} \coqdocvar{ltac\_wild})::?\coqdocvar{vs'} \ensuremath{\Rightarrow} \coqdocvar{boxerlist\_next\_type} \coqdocvar{vs'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{boxer} \coqdocvar{ltac\_wilds})::\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{ltac\_wild})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (@\coqdocvar{boxer} ?\coqdocvar{T} \coqdocvar{\_})::\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{T})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{build\_app\_hnts} \coqdocvar{t} \coqdocvar{vs} \coqdocvar{final} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{rec} \coqdocvar{go} \coqdocvar{t} \coqdocvar{vs} :=\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{vs} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{final} \coqdocvar{t} \ensuremath{|} \coqdoctac{fail} 1 ]\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{boxer} \coqdocvar{ltac\_wilds})::\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{build\_app\_alls} \coqdocvar{t} \coqdocvar{final} \ensuremath{|} \coqdoctac{fail} 1 ]\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{boxer} ?\coqdocvar{v})::?\coqdocvar{vs'} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{3.00em}
\coqdockw{let} \coqdocvar{cont} \coqdocvar{t'} := \coqdocvar{go} \coqdocvar{t'} \coqdocvar{vs} \coqdoctac{in}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{let} \coqdocvar{cont'} \coqdocvar{t'} := \coqdocvar{go} \coqdocvar{t'} \coqdocvar{vs'} \coqdoctac{in}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{let} \coqdocvar{T} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{t} \coqdoctac{in} \coqdoceol
\coqdocindent{3.00em}
\coqdockw{let} \coqdocvar{T} := \coqdoctac{eval} \coqdoctac{hnf} \coqdoctac{in} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{v} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{ltac\_wild} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{4.50em}
\coqdoctac{first} [ \coqdockw{let} \coqdocvar{U} := \coqdocvar{boxerlist\_next\_type} \coqdocvar{vs'} \coqdoctac{in}\coqdoceol
\coqdocindent{5.50em}
\coqdockw{match} \coqdocvar{U} \coqdockw{with}\coqdoceol
\coqdocindent{5.50em}
\ensuremath{|} \coqdocvar{ltac\_wild} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{6.50em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}  \coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{P} \coqdocvar{cont'} \ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:?\coqdocvar{A}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{cont'} \ensuremath{|} \coqdoctac{fail} 3 ] \coqdoceol
\coqdocindent{6.50em}
\coqdockw{end} \coqdoceol
\coqdocindent{5.50em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{6.50em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}  \coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdocvar{U} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{U} \coqdocvar{cont'} \ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:\coqdocvar{U}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{U} \coqdocvar{cont'} \ensuremath{|} \coqdoctac{fail} 3 ] \coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{P} \coqdocvar{cont} \ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:?\coqdocvar{A}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{cont} \ensuremath{|} \coqdoctac{fail} 3 ] \coqdoceol
\coqdocindent{6.50em}
\coqdockw{end} \coqdoceol
\coqdocindent{5.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdoctac{fail} 2 ]\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{5.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_arg} \coqdocvar{t} \coqdocvar{P} \coqdocvar{v} \coqdocvar{cont'}\coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{P} \coqdocvar{cont}\coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{5.50em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:\coqdockw{Type}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{7.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{v} \coqdockw{with} \coqdoceol
\coqdocindent{7.00em}
\ensuremath{|} \coqdockw{Type} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{cont'} (\coqdocvar{t} \coqdocvar{v}) \coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdocvar{app\_evar} \coqdocvar{t} \coqdockw{Type} \coqdocvar{cont}\coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{7.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_evar} \coqdocvar{t} \coqdockw{Type} \coqdocvar{cont}\coqdoceol
\coqdocindent{13.50em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{7.00em}
\coqdockw{end} \coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:?\coqdocvar{A}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{6.50em}
\coqdockw{let} \coqdocvar{V} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{v} \coqdoctac{in}\coqdoceol
\coqdocindent{6.50em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{V} \coqdockw{with}\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdockw{Prop} \ensuremath{\Rightarrow}  \coqdoctac{first} [ \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{cont}\coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{cont'} (\coqdocvar{t} \coqdocvar{v}) \coqdoceol
\coqdocindent{13.00em}
\ensuremath{|} \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{cont}\coqdoceol
\coqdocindent{13.00em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{6.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{go} \coqdocvar{t} \coqdocvar{vs}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
newer version : support for typeclasses \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{app\_typeclass} \coqdocvar{t} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{t'} := \coqdockw{constr}:(\coqdocvar{t} \coqdocvar{\_}) \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cont} \coqdocvar{t'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{build\_app\_alls} \coqdocvar{t} \coqdocvar{final} ::=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{rec} \coqdocvar{go} \coqdocvar{t} :=\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{t} \coqdockw{with} \coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{P} \coqdocvar{go}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:?\coqdocvar{A}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{first} [ \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{go}\coqdoceol
\coqdocindent{7.00em}
\ensuremath{|} \coqdocvar{app\_typeclass} \coqdocvar{t} \coqdocvar{go}\coqdoceol
\coqdocindent{7.00em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{final} \coqdocvar{t}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end} \coqdoctac{in} \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{go} \coqdocvar{t}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{build\_app\_hnts} \coqdocvar{t} \coqdocvar{vs} \coqdocvar{final} ::=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{rec} \coqdocvar{go} \coqdocvar{t} \coqdocvar{vs} :=\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{vs} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{final} \coqdocvar{t} \ensuremath{|} \coqdoctac{fail} 1 ]\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{boxer} \coqdocvar{ltac\_wilds})::\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{build\_app\_alls} \coqdocvar{t} \coqdocvar{final} \ensuremath{|} \coqdoctac{fail} 1 ]\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} (\coqdocvar{boxer} ?\coqdocvar{v})::?\coqdocvar{vs'} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{3.00em}
\coqdockw{let} \coqdocvar{cont} \coqdocvar{t'} := \coqdocvar{go} \coqdocvar{t'} \coqdocvar{vs} \coqdoctac{in}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{let} \coqdocvar{cont'} \coqdocvar{t'} := \coqdocvar{go} \coqdocvar{t'} \coqdocvar{vs'} \coqdoctac{in}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{let} \coqdocvar{T} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{t} \coqdoctac{in} \coqdoceol
\coqdocindent{3.00em}
\coqdockw{let} \coqdocvar{T} := \coqdoctac{eval} \coqdoctac{hnf} \coqdoctac{in} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{v} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{ltac\_wild} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{4.50em}
\coqdoctac{first} [ \coqdockw{let} \coqdocvar{U} := \coqdocvar{boxerlist\_next\_type} \coqdocvar{vs'} \coqdoctac{in}\coqdoceol
\coqdocindent{5.50em}
\coqdockw{match} \coqdocvar{U} \coqdockw{with}\coqdoceol
\coqdocindent{5.50em}
\ensuremath{|} \coqdocvar{ltac\_wild} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{6.50em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}  \coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{P} \coqdocvar{cont'} \ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:?\coqdocvar{A}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_typeclass} \coqdocvar{t} \coqdocvar{cont'}\coqdoceol
\coqdocindent{19.50em}
\ensuremath{|} \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{cont'} \coqdoceol
\coqdocindent{19.50em}
\ensuremath{|} \coqdoctac{fail} 3 ] \coqdoceol
\coqdocindent{6.50em}
\coqdockw{end} \coqdoceol
\coqdocindent{5.50em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{6.50em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}  \coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdocvar{U} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{U} \coqdocvar{cont'} \ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:\coqdocvar{U}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} \coqdoceol
\coqdocindent{8.50em}
[ \coqdocvar{app\_typeclass} \coqdocvar{t} \coqdocvar{cont'}\coqdoceol
\coqdocindent{8.50em}
\ensuremath{|} \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{U} \coqdocvar{cont'} \coqdoceol
\coqdocindent{8.50em}
\ensuremath{|} \coqdoctac{fail} 3 ] \coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{P} \coqdocvar{cont} \ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:?\coqdocvar{A}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} \coqdoceol
\coqdocindent{8.50em}
[ \coqdocvar{app\_typeclass} \coqdocvar{t} \coqdocvar{cont}\coqdoceol
\coqdocindent{8.50em}
\ensuremath{|} \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{cont}\coqdoceol
\coqdocindent{8.50em}
\ensuremath{|} \coqdoctac{fail} 3 ] \coqdoceol
\coqdocindent{6.50em}
\coqdockw{end} \coqdoceol
\coqdocindent{5.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdoctac{fail} 2 ]\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{5.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_arg} \coqdocvar{t} \coqdocvar{P} \coqdocvar{v} \coqdocvar{cont'}\coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdocvar{app\_assert} \coqdocvar{t} \coqdocvar{P} \coqdocvar{cont}\coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{5.50em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:\coqdockw{Type}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{7.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{v} \coqdockw{with} \coqdoceol
\coqdocindent{7.00em}
\ensuremath{|} \coqdockw{Type} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{cont'} (\coqdocvar{t} \coqdocvar{v}) \coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdocvar{app\_evar} \coqdocvar{t} \coqdockw{Type} \coqdocvar{cont}\coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{7.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_evar} \coqdocvar{t} \coqdockw{Type} \coqdocvar{cont}\coqdoceol
\coqdocindent{13.50em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{7.00em}
\coqdockw{end} \coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:?\coqdocvar{A}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{6.50em}
\coqdockw{let} \coqdocvar{V} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{v} \coqdoctac{in}\coqdoceol
\coqdocindent{6.50em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{V} \coqdockw{with}\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdockw{Prop} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{app\_typeclass} \coqdocvar{t} \coqdocvar{cont}\coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{cont}\coqdoceol
\coqdocindent{15.00em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{cont'} (\coqdocvar{t} \coqdocvar{v}) \coqdoceol
\coqdocindent{13.00em}
\ensuremath{|} \coqdocvar{app\_typeclass} \coqdocvar{t} \coqdocvar{cont}\coqdoceol
\coqdocindent{13.00em}
\ensuremath{|} \coqdocvar{app\_evar} \coqdocvar{t} \coqdocvar{A} \coqdocvar{cont}\coqdoceol
\coqdocindent{13.00em}
\ensuremath{|} \coqdoctac{fail} 3 ]\coqdoceol
\coqdocindent{6.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{5.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{go} \coqdocvar{t} \coqdocvar{vs}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{build\_app} \coqdocvar{args} \coqdocvar{final} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first} [\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{args} \coqdockw{with} (@\coqdocvar{boxer} ?\coqdocvar{T} ?\coqdocvar{t})::?\coqdocvar{vs} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{let} \coqdocvar{t} := \coqdockw{constr}:(\coqdocvar{t}:\coqdocvar{T}) \coqdoctac{in}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{build\_app\_hnts} \coqdocvar{t} \coqdocvar{vs} \coqdocvar{final};\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{fast\_rm\_inside} \coqdocvar{args}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{fail} 1 "Instantiation fails for:" \coqdocvar{args}].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{unfold\_head\_until\_product} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eval} \coqdoctac{hnf} \coqdoctac{in} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{args\_unfold\_head\_if\_not\_product} \coqdocvar{args} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{args} \coqdockw{with} (@\coqdocvar{boxer} ?\coqdocvar{T} ?\coqdocvar{t})::?\coqdocvar{vs} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{let} \coqdocvar{T'} := \coqdocvar{unfold\_head\_until\_product} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{constr}:((@\coqdocvar{boxer} \coqdocvar{T'} \coqdocvar{t})::\coqdocvar{vs})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{args\_unfold\_head\_if\_not\_product\_but\_params} \coqdocvar{args} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{args} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{boxer} ?\coqdocvar{t})::(\coqdocvar{boxer} ?\coqdocvar{v})::?\coqdocvar{vs} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{args\_unfold\_head\_if\_not\_product} \coqdocvar{args}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{args})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{lets} \coqdocvariable{H}: (>> \coqdocvar{E0} \coqdocvar{E1} .. \coqdocvar{EN}) will instantiate lemma \coqdocvar{E0}
    on the arguments \coqdocvar{Ei} (which may be wildcards \coqdocvar{\_\_}),
    and name \coqdocvariable{H} the resulting term. \coqdocvariable{H} may be an introduction
    pattern, or a sequence of introduction patterns \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{IN},
    or empty.
    Syntax \coqdocvar{lets} \coqdocvariable{H}: \coqdocvar{E0} \coqdocvar{E1} .. \coqdocvar{EN} is also available. If the last
    argument \coqdocvar{EN} is \coqdocvar{\_\_\_} (triple-underscore), then all
    arguments of \coqdocvariable{H} will be instantiated. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{lets\_build} \coqdocvar{I} \coqdocvar{Ei} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{list\_boxer\_of} \coqdocvar{Ei} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{args\_unfold\_head\_if\_not\_product\_but\_params} \coqdocvar{args} \coqdoctac{in}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{build\_app} \coqdocvar{args} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{R} \ensuremath{\Rightarrow} \coqdocvar{lets\_base} \coqdocvar{I} \coqdocvar{R}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets\_build} \coqdocvar{I} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{lets} \coqdocvar{H}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: (>> \coqdocvar{E0} \coqdocvar{A1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} [\coqdocvar{I1} \coqdocvar{I2}]: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} [\coqdocvar{I1} [\coqdocvar{I2} \coqdocvar{I3}]]: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} \coqdocvar{I4}]]]: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5})\coqdoceol
\coqdocindent{0.50em}
":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} [\coqdocvar{I4} \coqdocvar{I5}]]]]: \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: (>> \coqdocvar{E0} \coqdocvar{A1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} [\coqdocvar{I1} \coqdocvar{I2}]: \coqdocvar{E0} \coqdocvar{A1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} [\coqdocvar{I1} \coqdocvar{I2}]: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} [\coqdocvar{I1} \coqdocvar{I2}]: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} [\coqdocvar{I1} \coqdocvar{I2}]: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} [\coqdocvar{I1} \coqdocvar{I2}]: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{forwards} \coqdocvariable{H}: (>> \coqdocvar{E0} \coqdocvar{E1} .. \coqdocvar{EN}) is short for
    \coqdocvar{forwards} \coqdocvariable{H}: (>> \coqdocvar{E0} \coqdocvar{E1} .. \coqdocvar{EN} \coqdocvar{\_\_\_}).
    The arguments \coqdocvar{Ei} can be wildcards \coqdocvar{\_\_} (except \coqdocvar{E0}).
    \coqdocvariable{H} may be an introduction pattern, or a sequence of
    introduction pattern, or empty.
    Syntax \coqdocvar{forwards} \coqdocvariable{H}: \coqdocvar{E0} \coqdocvar{E1} .. \coqdocvar{EN} is also available. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{forwards\_build\_app\_arg} \coqdocvar{Ei} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{list\_boxer\_of} \coqdocvar{Ei} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := (\coqdoctac{eval} \coqdoctac{simpl} \coqdoctac{in} (\coqdocvar{args} ++ ((\coqdocvar{boxer} \coqdocvar{\_\_\_})::\coqdocvar{nil}))) \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{args\_unfold\_head\_if\_not\_product} \coqdocvar{args} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{args}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{forwards\_then} \coqdocvar{Ei} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{forwards\_build\_app\_arg} \coqdocvar{Ei} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{args\_unfold\_head\_if\_not\_product\_but\_params} \coqdocvar{args} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{build\_app} \coqdocvar{args} \coqdocvar{cont}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{Ei}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{forwards\_build\_app\_arg} \coqdocvar{Ei} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{args}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{forwards} \coqdocvar{H}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: (>> \coqdocvar{E0} \coqdocvar{A1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} [\coqdocvar{I1} \coqdocvar{I2}]: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} [\coqdocvar{I1} [\coqdocvar{I2} \coqdocvar{I3}]]: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} \coqdocvar{I4}]]]: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5})\coqdoceol
\coqdocindent{0.50em}
":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} [\coqdocvar{I4} \coqdocvar{I5}]]]]: \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: (>> \coqdocvar{E0} \coqdocvar{A1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards\_nounfold" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{Ei}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{list\_boxer\_of} \coqdocvar{Ei} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := (\coqdoctac{eval} \coqdoctac{simpl} \coqdoctac{in} (\coqdocvar{args} ++ ((\coqdocvar{boxer} \coqdocvar{\_\_\_})::\coqdocvar{nil}))) \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{build\_app} \coqdocvar{args} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{R} \ensuremath{\Rightarrow} \coqdocvar{lets\_base} \coqdocvar{I} \coqdocvar{R}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{forwards\_nounfold\_then} \coqdocvar{Ei} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{list\_boxer\_of} \coqdocvar{Ei} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := (\coqdoctac{eval} \coqdoctac{simpl} \coqdoctac{in} (\coqdocvar{args} ++ ((\coqdocvar{boxer} \coqdocvar{\_\_\_})::\coqdocvar{nil}))) \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{build\_app} \coqdocvar{args} \coqdocvar{cont}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{applys} (>> \coqdocvar{E0} \coqdocvar{E1} .. \coqdocvar{EN}) instantiates lemma \coqdocvar{E0}
    on the arguments \coqdocvar{Ei} (which may be wildcards \coqdocvar{\_\_}),
    and apply the resulting term to the current goal,
    using the tactic \coqdocvar{applys} defined earlier on.
    \coqdocvar{applys} \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} .. \coqdocvar{EN} is also available. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{applys\_build} \coqdocvar{Ei} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{list\_boxer\_of} \coqdocvar{Ei} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{args\_unfold\_head\_if\_not\_product\_but\_params} \coqdocvar{args} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{build\_app} \coqdocvar{args} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{R} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{first} [ \coqdoctac{apply} \coqdocvar{R} \ensuremath{|} \coqdoctac{eapply} \coqdocvar{R} \ensuremath{|} \coqdocvar{rapply} \coqdocvar{R} ]).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{applys\_base} \coqdocvar{E} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{list} \coqdocvar{Boxer} \ensuremath{\Rightarrow} \coqdocvar{applys\_build} \coqdocvar{E}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{rapply} \coqdocvar{E} \ensuremath{|} \coqdocvar{applys\_build} \coqdocvar{E} ]\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}; \coqdocvar{fast\_rm\_inside} \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_base} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} (>> \coqdocvar{E0} \coqdocvar{A1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{fapplys} (>> \coqdocvar{E0} \coqdocvar{E1} .. \coqdocvar{EN}) instantiates lemma \coqdocvar{E0}
    on the arguments \coqdocvar{Ei} and on the argument \coqdocvar{\_\_\_} meaning
    that all evars should be explicitly instantiated,
    and apply the resulting term to the current goal.
    \coqdocvar{fapplys} \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} .. \coqdocvar{EN} is also available. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{fapplys\_build} \coqdocvar{Ei} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{list\_boxer\_of} \coqdocvar{Ei} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := (\coqdoctac{eval} \coqdoctac{simpl} \coqdoctac{in} (\coqdocvar{args} ++ ((\coqdocvar{boxer} \coqdocvar{\_\_\_})::\coqdocvar{nil}))) \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{args\_unfold\_head\_if\_not\_product\_but\_params} \coqdocvar{args} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{build\_app} \coqdocvar{args} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{R} \ensuremath{\Rightarrow} \coqdoctac{apply} \coqdocvar{R}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "fapplys" \coqdockw{constr}(\coqdocvar{E0}) :=  \coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E0} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{list} \coqdocvar{Boxer} \ensuremath{\Rightarrow} \coqdocvar{fapplys\_build} \coqdocvar{E0}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{fapplys\_build} (>> \coqdocvar{E0})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "fapplys" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fapplys} (>> \coqdocvar{E0} \coqdocvar{A1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "fapplys" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fapplys} (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "fapplys" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fapplys} (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "fapplys" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fapplys} (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "fapplys" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fapplys} (>> \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{specializes} \coqdocvariable{H} (>> \coqdocvar{E1} \coqdocvar{E2} .. \coqdocvar{EN}) will instantiate hypothesis \coqdocvariable{H}
    on the arguments \coqdocvar{Ei} (which may be wildcards \coqdocvar{\_\_}). If the last
    argument \coqdocvar{EN} is \coqdocvar{\_\_\_} (triple-underscore), then all arguments of
    \coqdocvariable{H} get instantiated. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{specializes\_build} \coqdocvar{H} \coqdocvar{Ei} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H'} := \coqdoctac{fresh} "TEMP" \coqdoctac{in} \coqdoctac{rename} \coqdocvar{H} \coqdocvar{into} \coqdocvar{H'};\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{list\_boxer\_of} \coqdocvar{Ei} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdockw{constr}:((\coqdocvar{boxer} \coqdocvar{H'})::\coqdocvar{args}) \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{args} := \coqdocvar{args\_unfold\_head\_if\_not\_product} \coqdocvar{args} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{build\_app} \coqdocvar{args} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{R} \ensuremath{\Rightarrow} \coqdocvar{lets} \coqdocvar{H}: \coqdocvar{R});\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{clear} \coqdocvar{H'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{specializes\_base} \coqdocvar{H} \coqdocvar{Ei} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes\_build} \coqdocvar{H} \coqdocvar{Ei}; \coqdocvar{fast\_rm\_inside} \coqdocvar{Ei}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes\_base} \coqdocvar{H} (\coqdocvar{\_\_\_}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes\_base} \coqdocvar{H} \coqdocvar{A}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} (>> \coqdocvar{A1} \coqdocvar{A2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} (>> \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} (>> \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} (>> \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{specializes\_vars} \coqdocvariable{H} is equivalent to \coqdocvar{specializes} \coqdocvariable{H} \coqdocvar{\_\_} .. \coqdocvar{\_\_} 
    with as many double underscore as the number of dependent arguments
    visible from the type of \coqdocvariable{H}. Note that no unfolding is currently
    being performed (this behavior might change in the future).
    The current implementation is restricted to the case where
    \coqdocvariable{H} is an existing hypothesis -- TODO: generalize. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{specializes\_var\_base} \coqdocvar{H} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdockw{with} \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{fail} 1\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}:\coqdocvar{\_}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{specializes} \coqdocvar{H} \coqdocvar{\_\_}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{specializes\_vars\_base} \coqdocvar{H} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} (\coqdocvar{specializes\_var\_base} \coqdocvar{H}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes\_var" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes\_var\_base} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes\_vars" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes\_vars\_base} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Experimental Tactics for Application}



 \coqdocvar{fapply} is a version of \coqdoctac{apply} based on \coqdocvar{forwards}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "fapply" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{forwards} \coqdocvar{H}: \coqdocvar{E};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first} [ \coqdoctac{apply} \coqdocvar{H} \ensuremath{|} \coqdoctac{eapply} \coqdocvar{H} \ensuremath{|} \coqdocvar{rapply} \coqdocvar{H} \ensuremath{|} \coqdoctac{hnf}; \coqdoctac{apply} \coqdocvar{H}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|} \coqdoctac{hnf}; \coqdoctac{eapply} \coqdocvar{H} \ensuremath{|} \coqdocvar{applys} \coqdocvar{H} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{sapply} stands for ``super apply''. It tries
    \coqdoctac{apply}, \coqdoctac{eapply}, \coqdocvar{applys} and \coqdocvar{fapply},
    and also tries to head-normalize the goal first. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "sapply" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first} [ \coqdoctac{apply} \coqdocvar{H} \ensuremath{|} \coqdoctac{eapply} \coqdocvar{H} \ensuremath{|} \coqdocvar{rapply} \coqdocvar{H} \ensuremath{|} \coqdocvar{applys} \coqdocvar{H}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|} \coqdoctac{hnf}; \coqdoctac{apply} \coqdocvar{H} \ensuremath{|} \coqdoctac{hnf}; \coqdoctac{eapply} \coqdocvar{H} \ensuremath{|} \coqdoctac{hnf}; \coqdocvar{applys} \coqdocvar{H}\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|} \coqdocvar{fapply} \coqdocvar{H} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Adding Assumptions}



 \coqdocvar{lets\_simpl} \coqdocvariable{H}: \coqdocvar{E} is the same as \coqdocvar{lets} \coqdocvariable{H}: \coqdocvar{E} excepts that it
    calls \coqdoctac{simpl} on the hypothesis H.
    \coqdocvar{lets\_simpl}: \coqdocvar{E} is also provided. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets\_simpl" \coqdocvar{ident}(\coqdocvar{H}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{H}: \coqdocvar{E}; \coqdoctac{try} \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets\_simpl" ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{lets\_simpl} \coqdocvar{H}: \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{lets\_hnf} \coqdocvariable{H}: \coqdocvar{E} is the same as \coqdocvar{lets} \coqdocvariable{H}: \coqdocvar{E} excepts that it
    calls \coqdoctac{hnf} to set the definition in head normal form. 
    \coqdocvar{lets\_hnf}: \coqdocvar{E} is also provided. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets\_hnf" \coqdocvar{ident}(\coqdocvar{H}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{H}: \coqdocvar{E}; \coqdoctac{hnf} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets\_hnf" ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{lets\_hnf} \coqdocvar{H}: \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{puts} \coqdocdefinition{X}: \coqdocvar{E} is a synonymous for \coqdoctac{pose} (\coqdocdefinition{X} := \coqdocvar{E}).
    Alternative syntax is \coqdocvar{puts}: \coqdocvar{E}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "puts" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{pose} (\coqdocvar{X} := \coqdocvar{E}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "puts" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "X" \coqdoctac{in} \coqdoctac{pose} (\coqdocvar{X} := \coqdocvar{E}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Application of Tautologies}



 \coqdocvar{logic} \coqdocvar{E}, where \coqdocvar{E} is a fact, is equivalent to
    \coqdoctac{assert} \coqdocvariable{H}:\coqdocvar{E}; [\coqdoctac{tauto} \ensuremath{|} \coqdoctac{eapply} \coqdocvariable{H}; \coqdoctac{clear} \coqdocvariable{H}]. \coqdocvar{It} \coqdocvar{is} \coqdocvar{useful} \coqdockw{for} \coqdocvar{instance}
    \coqdocvar{to} \coqdocvar{prove} \coqdocabbreviation{a} \coqdocvar{conjunction} [\coqdocabbreviation{A} \ensuremath{\land} \coqdocabbreviation{B}] \coqdoctac{by} \coqdocvar{showing} \coqdoctac{first} [\coqdocabbreviation{A}] \coqdocinductive{and} \coqdockw{then} [\coqdocabbreviation{A} \ensuremath{\rightarrow} \coqdocabbreviation{B}],
    \coqdocvar{through} \coqdocvar{the} \coqdocvar{command} [\coqdocvar{logic} (\coqdocvar{foral} \coqdocabbreviation{A} \coqdocabbreviation{B}, \coqdocabbreviation{A} \ensuremath{\rightarrow} (\coqdocabbreviation{A} \ensuremath{\rightarrow} \coqdocabbreviation{B}) \ensuremath{\rightarrow} \coqdocabbreviation{A} \ensuremath{\land} \coqdocabbreviation{B})] \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{logic\_base} \coqdocvar{E} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H}:\coqdocvar{E}); [ \coqdocvar{cont} \coqdocvar{tt} \ensuremath{|} \coqdoctac{eapply} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "logic" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{logic\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{tauto}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Application Modulo Equalities}



 The tactic \coqdocvar{equates} replaces a goal of the form
    \coqdocaxiom{P} \coqdocabbreviation{x} \coqdocabbreviation{y} \coqdocabbreviation{z} with a goal of the form \coqdocaxiom{P} \coqdocabbreviation{x} ?\coqdocabbreviation{a} \coqdocabbreviation{z} and a
    subgoal ?\coqdocabbreviation{a} = \coqdocabbreviation{y}. The introduction of the evar ?\coqdocabbreviation{a} makes
    it possible to apply lemmas that would not apply to the
    original goal, for example a lemma of the form
    \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n} \coqdocabbreviation{m}, \coqdocaxiom{P} \coqdocabbreviation{n} \coqdocabbreviation{n} \coqdocabbreviation{m}, because \coqdocabbreviation{x} and \coqdocabbreviation{y} might be equal
    but not convertible.


    Usage is \coqdocvar{equates} \coqdocabbreviation{i1} ... \coqdocvar{ik}, where the indices are the
    positions of the arguments to be replaced by evars,
    counting from the right-hand side. If 0 is given as
    argument, then the entire goal is replaced by an evar. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Section} \coqdocvar{equatesLemma}.\coqdoceol
\coqdocnoindent
\coqdockw{Variables} (\coqdocvar{A0} \coqdocvar{A1} : \coqdockw{Type}).\coqdoceol
\coqdocnoindent
\coqdockw{Variables} (\coqdocvar{A2} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x1} : \coqdocvar{A1}), \coqdockw{Type}).\coqdoceol
\coqdocnoindent
\coqdockw{Variables} (\coqdocvar{A3} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x1} : \coqdocvar{A1}) (\coqdocvar{x2} : \coqdocvar{A2} \coqdocvar{x1}), \coqdockw{Type}).\coqdoceol
\coqdocnoindent
\coqdockw{Variables} (\coqdocvar{A4} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x1} : \coqdocvar{A1}) (\coqdocvar{x2} : \coqdocvar{A2} \coqdocvar{x1}) (\coqdocvar{x3} : \coqdocvar{A3} \coqdocvar{x2}), \coqdockw{Type}).\coqdoceol
\coqdocnoindent
\coqdockw{Variables} (\coqdocvar{A5} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x1} : \coqdocvar{A1}) (\coqdocvar{x2} : \coqdocvar{A2} \coqdocvar{x1}) (\coqdocvar{x3} : \coqdocvar{A3} \coqdocvar{x2}) (\coqdocvar{x4} : \coqdocvar{A4} \coqdocvar{x3}), \coqdockw{Type}).\coqdoceol
\coqdocnoindent
\coqdockw{Variables} (\coqdocvar{A6} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x1} : \coqdocvar{A1}) (\coqdocvar{x2} : \coqdocvar{A2} \coqdocvar{x1}) (\coqdocvar{x3} : \coqdocvar{A3} \coqdocvar{x2}) (\coqdocvar{x4} : \coqdocvar{A4} \coqdocvar{x3}) (\coqdocvar{x5} : \coqdocvar{A5} \coqdocvar{x4}), \coqdockw{Type}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{equates\_0} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q}:\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{P} = \coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{Q}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{subst}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{equates\_1} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{P}:\coqdocvar{A0}\ensuremath{\rightarrow}\coqdockw{Prop}) \coqdocvar{x1} \coqdocvar{y1},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \coqdocvar{y1} \ensuremath{\rightarrow} \coqdocvar{x1} = \coqdocvar{y1} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{x1}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{subst}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{equates\_2} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{y1} (\coqdocvar{P}:\coqdocvar{A0}\ensuremath{\rightarrow}\coqdockw{\ensuremath{\forall}}(\coqdocvar{x1}:\coqdocvar{A1}),\coqdockw{Prop}) \coqdocvar{x1} \coqdocvar{x2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \coqdocvar{y1} \coqdocvar{x2} \ensuremath{\rightarrow} \coqdocvar{x1} = \coqdocvar{y1} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{x1} \coqdocvar{x2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{subst}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{equates\_3} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{y1} (\coqdocvar{P}:\coqdocvar{A0}\ensuremath{\rightarrow}\coqdockw{\ensuremath{\forall}}(\coqdocvar{x1}:\coqdocvar{A1})(\coqdocvar{x2}:\coqdocvar{A2} \coqdocvar{x1}),\coqdockw{Prop}) \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \coqdocvar{y1} \coqdocvar{x2} \coqdocvar{x3} \ensuremath{\rightarrow} \coqdocvar{x1} = \coqdocvar{y1} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{subst}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{equates\_4} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{y1} (\coqdocvar{P}:\coqdocvar{A0}\ensuremath{\rightarrow}\coqdockw{\ensuremath{\forall}}(\coqdocvar{x1}:\coqdocvar{A1})(\coqdocvar{x2}:\coqdocvar{A2} \coqdocvar{x1})(\coqdocvar{x3}:\coqdocvar{A3} \coqdocvar{x2}),\coqdockw{Prop}) \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \coqdocvar{y1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \ensuremath{\rightarrow} \coqdocvar{x1} = \coqdocvar{y1} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{subst}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{equates\_5} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{y1} (\coqdocvar{P}:\coqdocvar{A0}\ensuremath{\rightarrow}\coqdockw{\ensuremath{\forall}}(\coqdocvar{x1}:\coqdocvar{A1})(\coqdocvar{x2}:\coqdocvar{A2} \coqdocvar{x1})(\coqdocvar{x3}:\coqdocvar{A3} \coqdocvar{x2})(\coqdocvar{x4}:\coqdocvar{A4} \coqdocvar{x3}),\coqdockw{Prop}) \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \coqdocvar{x5},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \coqdocvar{y1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \coqdocvar{x5} \ensuremath{\rightarrow} \coqdocvar{x1} = \coqdocvar{y1} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \coqdocvar{x5}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{subst}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{equates\_6} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{y1} (\coqdocvar{P}:\coqdocvar{A0}\ensuremath{\rightarrow}\coqdockw{\ensuremath{\forall}}(\coqdocvar{x1}:\coqdocvar{A1})(\coqdocvar{x2}:\coqdocvar{A2} \coqdocvar{x1})(\coqdocvar{x3}:\coqdocvar{A3} \coqdocvar{x2})(\coqdocvar{x4}:\coqdocvar{A4} \coqdocvar{x3})(\coqdocvar{x5}:\coqdocvar{A5} \coqdocvar{x4}),\coqdockw{Prop})\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \coqdocvar{x5} \coqdocvar{x6},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \coqdocvar{y1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \coqdocvar{x5} \coqdocvar{x6} \ensuremath{\rightarrow} \coqdocvar{x1} = \coqdocvar{y1} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \coqdocvar{x5} \coqdocvar{x6}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{subst}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{equatesLemma}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{equates\_lemma} \coqdocvar{n} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{nat\_from\_number} \coqdocvar{n} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{equates\_0})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 1 \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{equates\_1})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 2 \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{equates\_2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 3 \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{equates\_3})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 4 \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{equates\_4})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 5 \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{equates\_5})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 6 \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{equates\_6})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{equates\_one} \coqdocvar{n} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{L} := \coqdocvar{equates\_lemma} \coqdocvar{n} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{L}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{equates\_several} \coqdocvar{E} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{all\_pos} := \coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{List.list} \coqdocvar{Boxer} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{E})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:((\coqdocvar{boxer} \coqdocvar{E})::\coqdocvar{nil})\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{rec} \coqdocvar{go} \coqdocvar{pos} :=\coqdoceol
\coqdocindent{2.50em}
\coqdockw{match} \coqdocvar{pos} \coqdockw{with}\coqdoceol
\coqdocindent{2.50em}
\ensuremath{|} \coqdocvar{nil} \ensuremath{\Rightarrow} \coqdocvar{cont} \coqdocvar{tt}\coqdoceol
\coqdocindent{2.50em}
\ensuremath{|} (\coqdocvar{boxer} ?\coqdocvar{n})::?\coqdocvar{pos'} \ensuremath{\Rightarrow} \coqdocvar{equates\_one} \coqdocvar{n}; [ \coqdoctac{instantiate}; \coqdocvar{go} \coqdocvar{pos'} \ensuremath{|} ]\coqdoceol
\coqdocindent{2.50em}
\coqdockw{end} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{go} \coqdocvar{all\_pos}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates\_several} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{idtac}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates} (>> \coqdocvar{n1} \coqdocvar{n2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates} (>> \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) \coqdockw{constr}(\coqdocvar{n4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates} (>> \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3} \coqdocvar{n4}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{applys\_eq} \coqdocvariable{H} \coqdocabbreviation{i1} .. \coqdocvar{iK} is the same as
    \coqdocvar{equates} \coqdocabbreviation{i1} .. \coqdocvar{iK} followed by \coqdoctac{apply} \coqdocvariable{H}
    on the first subgoal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates\_several} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{sapply} \coqdocvar{H}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} (>> \coqdocvar{n1} \coqdocvar{n2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} (>> \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) \coqdockw{constr}(\coqdocvar{n4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} (>> \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3} \coqdocvar{n4}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Absurd Goals}



 \coqdocvar{false\_goal} replaces any goal by the goal \coqdocinductive{False}. 
    Contrary to the tactic \coqdocconstructor{false} (below), it does not try to do
    anything else \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "false\_goal" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{elimtype} \coqdocvar{False}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{false\_post} is the underlying tactic used to prove goals
    of the form \coqdocinductive{False}. In the default implementation, it proves
    the goal if the context contains \coqdocinductive{False} or an hypothesis of the
    form \coqdocabbreviation{C} \coqdocvariable{x1} .. \coqdocvar{xN}  =  \coqdocvariable{D} \coqdocvariable{y1} .. \coqdocvar{yM}, or if the \coqdoctac{congruence} tactic
    finds a proof of \coqdocabbreviation{x} \ensuremath{\not=} \coqdocabbreviation{x} for some \coqdocabbreviation{x}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{false\_post} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{solve} [ \coqdoctac{assumption} \ensuremath{|} \coqdoctac{discriminate} \ensuremath{|} \coqdoctac{congruence} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocconstructor{false} replaces any goal by the goal \coqdocinductive{False}, and calls \coqdocvar{false\_post} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "false" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false\_goal}; \coqdoctac{try} \coqdocvar{false\_post}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{tryfalse} tries to solve a goal by contradiction, and leaves
    the goal unchanged if it cannot solve it.
    It is equivalent to \coqdoctac{try} \coqdoctac{solve} \symbol{92}[ \coqdocconstructor{false} \symbol{92}]. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "tryfalse" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdoctac{solve} [ \coqdocvar{false} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocconstructor{false} \coqdocvar{E} tries to exploit lemma \coqdocvar{E} to prove the goal false.
    \coqdocconstructor{false} \coqdocvar{E1} .. \coqdocvar{EN} is equivalent to \coqdocconstructor{false} (>> \coqdocvar{E1} .. \coqdocvar{EN}),
    which tries to apply \coqdocvar{applys} (>> \coqdocvar{E1} .. \coqdocvar{EN}) and if it
    does not work then tries \coqdocvar{forwards} \coqdocvariable{H}: (>> \coqdocvar{E1} .. \coqdocvar{EN})
    followed with \coqdocconstructor{false} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{false\_then} \coqdocvar{E} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false\_goal}; \coqdoctac{first}\coqdoceol
\coqdocindent{1.00em}
[ \coqdocvar{applys} \coqdocvar{E}; \coqdoctac{instantiate}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{forwards\_then} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{M} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{pose} \coqdocvar{M}; \coqdocvar{jauto\_set\_hyps}; \coqdoctac{intros}; \coqdocvar{false}) ]; \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cont} \coqdocvar{tt}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "false" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false\_then} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{idtac}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" \coqdockw{constr}(\coqdocvar{E}) \coqdockw{constr}(\coqdocvar{E1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false} (>> \coqdocvar{E} \coqdocvar{E1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" \coqdockw{constr}(\coqdocvar{E}) \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false} (>> \coqdocvar{E} \coqdocvar{E1} \coqdocvar{E2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" \coqdockw{constr}(\coqdocvar{E}) \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) \coqdockw{constr}(\coqdocvar{E3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false} (>> \coqdocvar{E} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" \coqdockw{constr}(\coqdocvar{E}) \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) \coqdockw{constr}(\coqdocvar{E3}) \coqdockw{constr}(\coqdocvar{E4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false} (>> \coqdocvar{E} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3} \coqdocvar{E4}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{false\_invert} \coqdocvariable{H} proves a goal if it absurd after
    calling \coqdoctac{inversion} \coqdocvariable{H} and \coqdocconstructor{false} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{false\_invert\_for} \coqdocvar{H} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{M} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{pose} (\coqdocvar{M} := \coqdocvar{H}); \coqdoctac{inversion} \coqdocvar{H}; \coqdocvar{false}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "false\_invert" \coqdockw{constr}(\coqdocvar{H}) :=  \coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdoctac{solve} [ \coqdocvar{false\_invert\_for} \coqdocvar{H} \ensuremath{|} \coqdocvar{false} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{false\_invert} proves any goal provided there is at least 
    one hypothesis \coqdocvariable{H} in the context (or as a universally quantified
    hypothesis visible at the head of the goal) that can be proved absurd by calling 
    \coqdoctac{inversion} \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{false\_invert\_iter} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}:\coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{solve} [ \coqdoctac{inversion} \coqdocvar{H}; \coqdocvar{false}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdoctac{clear} \coqdocvar{H}; \coqdocvar{false\_invert\_iter}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdoctac{fail} 2 ] \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "false\_invert" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}; \coqdoctac{solve} [ \coqdocvar{false\_invert\_iter} \ensuremath{|} \coqdocvar{false} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{tryfalse\_invert} \coqdocvariable{H} and \coqdocvar{tryfalse\_invert} are like the 
    above but leave the goal unchanged if they don't solve it. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "tryfalse\_invert" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} (\coqdocvar{false\_invert} \coqdocvar{H}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "tryfalse\_invert" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdocvar{false\_invert}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{false\_neq\_self\_hyp} proves any goal if the context
    contains an hypothesis of the form \coqdocvar{E} \ensuremath{\not=} \coqdocvar{E}. It is 
    a restricted and optimized version of \coqdocconstructor{false}. It is 
    intended to be used by other tactics only. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{false\_neq\_self\_hyp} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: ?\coqdocvar{x} \ensuremath{\not=} ?\coqdocvar{x} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{false\_goal}; \coqdoctac{apply} \coqdocvar{H}; \coqdoctac{reflexivity} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Introduction and Generalization}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Introduction}



 \coqdocvar{introv} is used to name only non-dependent hypothesis.

\begin{itemize}
\item  If \coqdocvar{introv} is called on a goal of the form \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{x}, \coqdocvariable{H},
   it should introduce all the variables quantified with a
   \coqdockw{\ensuremath{\forall}} at the head of the goal, but it does not introduce
   hypotheses that preceed an arrow constructor, like in \coqdocaxiom{P} \ensuremath{\rightarrow} \coqdocvariable{Q}.

\item  If \coqdocvar{introv} is called on a goal that is not of the form
   \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{x}, \coqdocvariable{H} nor \coqdocaxiom{P} \ensuremath{\rightarrow} \coqdocvariable{Q}, the tactic unfolds definitions
   until the goal takes the form \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{x}, \coqdocvariable{H} or \coqdocaxiom{P} \ensuremath{\rightarrow} \coqdocvariable{Q}.
   If unfolding definitions does not produces a goal of this form,
   then the tactic \coqdocvar{introv} does nothing at all. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{introv\_rec} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{intro}; \coqdocvar{introv\_rec}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{introv\_noarg} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{introv\_rec}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} ?\coqdocvar{G} \ensuremath{\Rightarrow} \coqdoctac{hnf};\coqdoceol
\coqdocindent{2.50em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{2.50em}
\ensuremath{|} \ensuremath{\vdash} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{2.50em}
\ensuremath{|} \ensuremath{\vdash} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{introv\_rec}\coqdoceol
\coqdocindent{2.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdockw{Ltac} \coqdocvar{introv\_noarg\_not\_optimized} :=\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intro}; \coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}:\coqdocvar{\_}\ensuremath{\vdash}\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{revert} \coqdocvar{H} \coqdockw{end}; \coqdocvar{introv\_rec}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{introv\_arg} \coqdocvar{H} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{hnf}; \coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} ?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q} \ensuremath{\Rightarrow} \coqdoctac{intros} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{intro}; \coqdocvar{introv\_arg} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv\_noarg}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv\_arg} \coqdocvar{I1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{I1}; \coqdocvar{introv} \coqdocvar{I2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{I1}; \coqdocvar{introv} \coqdocvar{I2} \coqdocvar{I3}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{I1}; \coqdocvar{introv} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{I1}; \coqdocvar{introv} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4} \coqdocvar{I5}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{I1}; \coqdocvar{introv} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4} \coqdocvar{I5} \coqdocvar{I6}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I6}) \coqdocvar{simple\_intropattern}(\coqdocvar{I7}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{I1}; \coqdocvar{introv} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4} \coqdocvar{I5} \coqdocvar{I6} \coqdocvar{I7}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I6}) \coqdocvar{simple\_intropattern}(\coqdocvar{I7}) \coqdocvar{simple\_intropattern}(\coqdocvar{I8}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{I1}; \coqdocvar{introv} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4} \coqdocvar{I5} \coqdocvar{I6} \coqdocvar{I7} \coqdocvar{I8}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I6}) \coqdocvar{simple\_intropattern}(\coqdocvar{I7}) \coqdocvar{simple\_intropattern}(\coqdocvar{I8})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I9}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{I1}; \coqdocvar{introv} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4} \coqdocvar{I5} \coqdocvar{I6} \coqdocvar{I7} \coqdocvar{I8} \coqdocvar{I9}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "introv" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) \coqdocvar{simple\_intropattern}(\coqdocvar{I2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I6}) \coqdocvar{simple\_intropattern}(\coqdocvar{I7}) \coqdocvar{simple\_intropattern}(\coqdocvar{I8})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I9}) \coqdocvar{simple\_intropattern}(\coqdocvar{I10}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{I1}; \coqdocvar{introv} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4} \coqdocvar{I5} \coqdocvar{I6} \coqdocvar{I7} \coqdocvar{I8} \coqdocvar{I9} \coqdocvar{I10}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{intros\_all} repeats \coqdoctac{intro} as long as possible. Contrary to \coqdoctac{intros},
    it unfolds any definition on the way. Remark that it also unfolds the
    definition of negation, so applying \coqdocvar{introz} to a goal of the form
    \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{x}, \coqdocaxiom{P} \coqdocabbreviation{x} \ensuremath{\rightarrow} \ensuremath{\lnot}\coqdocvariable{Q} will introduce \coqdocabbreviation{x} and \coqdocaxiom{P} \coqdocabbreviation{x} and \coqdocvariable{Q}, and will
    leave \coqdocinductive{False} in the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "intros\_all" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{intro}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{intros\_hnf} introduces an hypothesis and sets in head normal form \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "intro\_hnf" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intro}; \coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{hnf} \coqdoctac{in} \coqdocvar{H} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Generalization}



 \coqdocvar{gen} \coqdocvar{X1} .. \coqdocvar{XN} is a shorthand for calling \coqdoctac{generalize} \coqdoctac{dependent}
    successively on variables \coqdocvar{XN}...\coqdocvar{X1}. Note that the variables
    are generalized in reverse order, following the convention of
    the \coqdoctac{generalize} tactic: it means that \coqdocvar{X1} will be the first
    quantified variable in the resulting goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "gen" \coqdocvar{ident}(\coqdocvar{X1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{X1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen} \coqdocvar{X2}; \coqdocvar{gen} \coqdocvar{X1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen} \coqdocvar{X3}; \coqdocvar{gen} \coqdocvar{X2}; \coqdocvar{gen} \coqdocvar{X1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4})  :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen} \coqdocvar{X4}; \coqdocvar{gen} \coqdocvar{X3}; \coqdocvar{gen} \coqdocvar{X2}; \coqdocvar{gen} \coqdocvar{X1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen} \coqdocvar{X5}; \coqdocvar{gen} \coqdocvar{X4}; \coqdocvar{gen} \coqdocvar{X3}; \coqdocvar{gen} \coqdocvar{X2}; \coqdocvar{gen} \coqdocvar{X1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen} \coqdocvar{X6}; \coqdocvar{gen} \coqdocvar{X5}; \coqdocvar{gen} \coqdocvar{X4}; \coqdocvar{gen} \coqdocvar{X3}; \coqdocvar{gen} \coqdocvar{X2}; \coqdocvar{gen} \coqdocvar{X1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X6}) \coqdocvar{ident}(\coqdocvar{X7}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen} \coqdocvar{X7}; \coqdocvar{gen} \coqdocvar{X6}; \coqdocvar{gen} \coqdocvar{X5}; \coqdocvar{gen} \coqdocvar{X4}; \coqdocvar{gen} \coqdocvar{X3}; \coqdocvar{gen} \coqdocvar{X2}; \coqdocvar{gen} \coqdocvar{X1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X6}) \coqdocvar{ident}(\coqdocvar{X7}) \coqdocvar{ident}(\coqdocvar{X8}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen} \coqdocvar{X8}; \coqdocvar{gen} \coqdocvar{X7}; \coqdocvar{gen} \coqdocvar{X6}; \coqdocvar{gen} \coqdocvar{X5}; \coqdocvar{gen} \coqdocvar{X4}; \coqdocvar{gen} \coqdocvar{X3}; \coqdocvar{gen} \coqdocvar{X2}; \coqdocvar{gen} \coqdocvar{X1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X6}) \coqdocvar{ident}(\coqdocvar{X7}) \coqdocvar{ident}(\coqdocvar{X8}) \coqdocvar{ident}(\coqdocvar{X9}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen} \coqdocvar{X9}; \coqdocvar{gen} \coqdocvar{X8}; \coqdocvar{gen} \coqdocvar{X7}; \coqdocvar{gen} \coqdocvar{X6}; \coqdocvar{gen} \coqdocvar{X5}; \coqdocvar{gen} \coqdocvar{X4}; \coqdocvar{gen} \coqdocvar{X3}; \coqdocvar{gen} \coqdocvar{X2}; \coqdocvar{gen} \coqdocvar{X1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X6}) \coqdocvar{ident}(\coqdocvar{X7}) \coqdocvar{ident}(\coqdocvar{X8}) \coqdocvar{ident}(\coqdocvar{X9}) \coqdocvar{ident}(\coqdocvar{X10}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen} \coqdocvar{X10}; \coqdocvar{gen} \coqdocvar{X9}; \coqdocvar{gen} \coqdocvar{X8}; \coqdocvar{gen} \coqdocvar{X7}; \coqdocvar{gen} \coqdocvar{X6}; \coqdocvar{gen} \coqdocvar{X5}; \coqdocvar{gen} \coqdocvar{X4}; \coqdocvar{gen} \coqdocvar{X3}; \coqdocvar{gen} \coqdocvar{X2}; \coqdocvar{gen} \coqdocvar{X1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{generalizes} \coqdocdefinition{X} is a shorthand for calling \coqdoctac{generalize} \coqdocdefinition{X}; \coqdoctac{clear} \coqdocdefinition{X}.
    It is weaker than tactic \coqdocvar{gen} \coqdocdefinition{X} since it does not support
    dependencies. It is mainly intended for writing tactics. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "generalizes" \coqdocvar{hyp}(\coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdocvar{X}; \coqdoctac{clear} \coqdocvar{X}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "generalizes" \coqdocvar{hyp}(\coqdocvar{X1}) \coqdocvar{hyp}(\coqdocvar{X2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{generalizes} \coqdocvar{X1}; \coqdocvar{generalizes} \coqdocvar{X2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "generalizes" \coqdocvar{hyp}(\coqdocvar{X1}) \coqdocvar{hyp}(\coqdocvar{X2}) \coqdocvar{hyp}(\coqdocvar{X3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{generalizes} \coqdocvar{X1} \coqdocvar{X2}; \coqdocvar{generalizes} \coqdocvar{X3}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "generalizes" \coqdocvar{hyp}(\coqdocvar{X1}) \coqdocvar{hyp}(\coqdocvar{X2}) \coqdocvar{hyp}(\coqdocvar{X3}) \coqdocvar{hyp}(\coqdocvar{X4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{generalizes} \coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3}; \coqdocvar{generalizes} \coqdocvar{X4}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Naming}



 \coqdocvar{sets} \coqdocdefinition{X}: \coqdocvar{E} is the same as \coqdoctac{set} (\coqdocdefinition{X} := \coqdocvar{E}) \coqdoctac{in} *, that is,
    it replaces all occurences of \coqdocvar{E} by a fresh meta-variable \coqdocdefinition{X}
    whose definition is \coqdocvar{E}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "sets" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}) \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{def\_to\_eq} \coqdocvar{E} \coqdocdefinition{X} \coqdocvariable{H} applies when \coqdocdefinition{X} := \coqdocvar{E} is a local
    definition. It adds an assumption \coqdocvariable{H}: \coqdocdefinition{X} = \coqdocvar{E}
    and then clears the definition of \coqdocdefinition{X}.
    \coqdocvar{def\_to\_eq\_sym} is similar except that it generates
    the equality \coqdocvariable{H}: \coqdocvar{E} = \coqdocdefinition{X}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{def\_to\_eq} \coqdocvar{X} \coqdocvar{HX} \coqdocvar{E} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{HX} : \coqdocvar{X} = \coqdocvar{E}) \coqdoctac{by} \coqdoctac{reflexivity}; \coqdocvar{clearbody} \coqdocvar{X}.\coqdoceol
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{def\_to\_eq\_sym} \coqdocvar{X} \coqdocvar{HX} \coqdocvar{E} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{HX} : \coqdocvar{E} = \coqdocvar{X}) \coqdoctac{by} \coqdoctac{reflexivity}; \coqdocvar{clearbody} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{set\_eq} \coqdocdefinition{X} \coqdocvariable{H}: \coqdocvar{E} generates the equality \coqdocvariable{H}: \coqdocdefinition{X} = \coqdocvar{E},
    for a fresh name \coqdocdefinition{X}, and replaces \coqdocvar{E} by \coqdocdefinition{X} in the
    current goal. Syntaxes \coqdocvar{set\_eq} \coqdocdefinition{X}: \coqdocvar{E} and
    \coqdocvar{set\_eq}: \coqdocvar{E} are also available. Similarly,
    \coqdocvar{set\_eq} \ensuremath{\leftarrow} \coqdocdefinition{X} \coqdocvariable{H}: \coqdocvar{E} generates the equality \coqdocvariable{H}: \coqdocvar{E} = \coqdocdefinition{X}.


    \coqdocvar{sets\_eq} \coqdocdefinition{X} \coqdocvar{HX}: \coqdocvar{E} does the same but replaces \coqdocvar{E} by \coqdocdefinition{X}
    everywhere in the goal. \coqdocvar{sets\_eq} \coqdocdefinition{X} \coqdocvar{HX}: \coqdocvar{E} \coqdoctac{in} \coqdocvariable{H} replaces in \coqdocvariable{H}.
    \coqdocvar{set\_eq} \coqdocdefinition{X} \coqdocvar{HX}: \coqdocvar{E} \coqdoctac{in} \ensuremath{\vdash} performs no substitution at all. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" \coqdocvar{ident}(\coqdocvar{X}) \coqdocvar{ident}(\coqdocvar{HX}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}); \coqdocvar{def\_to\_eq} \coqdocvar{X} \coqdocvar{HX} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{HX} := \coqdoctac{fresh} "EQ" \coqdocvar{X} \coqdoctac{in} \coqdocvar{set\_eq} \coqdocvar{X} \coqdocvar{HX}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "X" \coqdoctac{in} \coqdocvar{set\_eq} \coqdocvar{X}: \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" "<-" \coqdocvar{ident}(\coqdocvar{X}) \coqdocvar{ident}(\coqdocvar{HX}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}); \coqdocvar{def\_to\_eq\_sym} \coqdocvar{X} \coqdocvar{HX} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" "<-" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{HX} := \coqdoctac{fresh} "EQ" \coqdocvar{X} \coqdoctac{in} \coqdocvar{set\_eq} \ensuremath{\leftarrow} \coqdocvar{X} \coqdocvar{HX}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" "<-" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "X" \coqdoctac{in} \coqdocvar{set\_eq} \ensuremath{\leftarrow} \coqdocvar{X}: \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "sets\_eq" \coqdocvar{ident}(\coqdocvar{X}) \coqdocvar{ident}(\coqdocvar{HX}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}) \coqdoctac{in} *; \coqdocvar{def\_to\_eq} \coqdocvar{X} \coqdocvar{HX} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "sets\_eq" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{HX} := \coqdoctac{fresh} "EQ" \coqdocvar{X} \coqdoctac{in} \coqdocvar{sets\_eq} \coqdocvar{X} \coqdocvar{HX}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "sets\_eq" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "X" \coqdoctac{in} \coqdocvar{sets\_eq} \coqdocvar{X}: \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "sets\_eq" "<-" \coqdocvar{ident}(\coqdocvar{X}) \coqdocvar{ident}(\coqdocvar{HX}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}) \coqdoctac{in} *; \coqdocvar{def\_to\_eq\_sym} \coqdocvar{X} \coqdocvar{HX} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "sets\_eq" "<-" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{HX} := \coqdoctac{fresh} "EQ" \coqdocvar{X} \coqdoctac{in} \coqdocvar{sets\_eq} \ensuremath{\leftarrow} \coqdocvar{X} \coqdocvar{HX}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "sets\_eq" "<-" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "X" \coqdoctac{in} \coqdocvar{sets\_eq} \ensuremath{\leftarrow} \coqdocvar{X}: \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" \coqdocvar{ident}(\coqdocvar{X}) \coqdocvar{ident}(\coqdocvar{HX}) ":" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}) \coqdoctac{in} \coqdocvar{H}; \coqdocvar{def\_to\_eq} \coqdocvar{X} \coqdocvar{HX} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{HX} := \coqdoctac{fresh} "EQ" \coqdocvar{X} \coqdoctac{in} \coqdocvar{set\_eq} \coqdocvar{X} \coqdocvar{HX}: \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" ":" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "X" \coqdoctac{in} \coqdocvar{set\_eq} \coqdocvar{X}: \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" "<-" \coqdocvar{ident}(\coqdocvar{X}) \coqdocvar{ident}(\coqdocvar{HX}) ":" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}) \coqdoctac{in} \coqdocvar{H}; \coqdocvar{def\_to\_eq\_sym} \coqdocvar{X} \coqdocvar{HX} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" "<-" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{HX} := \coqdoctac{fresh} "EQ" \coqdocvar{X} \coqdoctac{in} \coqdocvar{set\_eq} \ensuremath{\leftarrow} \coqdocvar{X} \coqdocvar{HX}: \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" "<-" ":" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "X" \coqdoctac{in} \coqdocvar{set\_eq} \ensuremath{\leftarrow} \coqdocvar{X}: \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" \coqdocvar{ident}(\coqdocvar{X}) \coqdocvar{ident}(\coqdocvar{HX}) ":" \coqdockw{constr}(\coqdocvar{E}) "in" "|-" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}) \coqdoctac{in} |-; \coqdocvar{def\_to\_eq} \coqdocvar{X} \coqdocvar{HX} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) "in" "|-" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{HX} := \coqdoctac{fresh} "EQ" \coqdocvar{X} \coqdoctac{in} \coqdocvar{set\_eq} \coqdocvar{X} \coqdocvar{HX}: \coqdocvar{E} \coqdoctac{in} \ensuremath{\vdash}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" ":" \coqdockw{constr}(\coqdocvar{E}) "in" "|-" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "X" \coqdoctac{in} \coqdocvar{set\_eq} \coqdocvar{X}: \coqdocvar{E} \coqdoctac{in} \ensuremath{\vdash}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" "<-" \coqdocvar{ident}(\coqdocvar{X}) \coqdocvar{ident}(\coqdocvar{HX}) ":" \coqdockw{constr}(\coqdocvar{E}) "in" "|-" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}) \coqdoctac{in} |-; \coqdocvar{def\_to\_eq\_sym} \coqdocvar{X} \coqdocvar{HX} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" "<-" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) "in" "|-" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{HX} := \coqdoctac{fresh} "EQ" \coqdocvar{X} \coqdoctac{in} \coqdocvar{set\_eq} \ensuremath{\leftarrow} \coqdocvar{X} \coqdocvar{HX}: \coqdocvar{E} \coqdoctac{in} \ensuremath{\vdash}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "set\_eq" "<-" ":" \coqdockw{constr}(\coqdocvar{E}) "in" "|-" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "X" \coqdoctac{in} \coqdocvar{set\_eq} \ensuremath{\leftarrow} \coqdocvar{X}: \coqdocvar{E} \coqdoctac{in} \ensuremath{\vdash}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{gen\_eq} \coqdocdefinition{X}: \coqdocvar{E} is a tactic whose purpose is to introduce
    equalities so as to work around the limitation of the \coqdoctac{induction}
    tactic which typically loses information. \coqdocvar{gen\_eq} \coqdocvar{E} \coqdockw{as} \coqdocdefinition{X} replaces
    all occurences of term \coqdocvar{E} with a fresh variable \coqdocdefinition{X} and the equality
    \coqdocdefinition{X} = \coqdocvar{E} as extra hypothesis to the current conclusion. In other words
    a conclusion \coqdocabbreviation{C} will be turned into (\coqdocdefinition{X} = \coqdocvar{E}) \ensuremath{\rightarrow} \coqdocabbreviation{C}.
    \coqdocvar{gen\_eq}: \coqdocvar{E} and \coqdocvar{gen\_eq}: \coqdocvar{E} \coqdockw{as} \coqdocdefinition{X} are also accepted. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "gen\_eq" \coqdocvar{ident}(\coqdocvar{X}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{EQ} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{sets\_eq} \coqdocvar{X} \coqdocvar{EQ}: \coqdocvar{E}; \coqdocvar{revert} \coqdocvar{EQ}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen\_eq" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "X" \coqdoctac{in} \coqdocvar{gen\_eq} \coqdocvar{X}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen\_eq" ":" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{ident}(\coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen\_eq} \coqdocvar{X}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen\_eq" \coqdocvar{ident}(\coqdocvar{X1}) ":" \coqdockw{constr}(\coqdocvar{E1}) ","\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ident}(\coqdocvar{X2}) ":" \coqdockw{constr}(\coqdocvar{E2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen\_eq} \coqdocvar{X2}: \coqdocvar{E2}; \coqdocvar{gen\_eq} \coqdocvar{X1}: \coqdocvar{E1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "gen\_eq" \coqdocvar{ident}(\coqdocvar{X1}) ":" \coqdockw{constr}(\coqdocvar{E1}) ","\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{ident}(\coqdocvar{X2}) ":" \coqdockw{constr}(\coqdocvar{E2}) "," \coqdocvar{ident}(\coqdocvar{X3}) ":" \coqdockw{constr}(\coqdocvar{E3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{gen\_eq} \coqdocvar{X3}: \coqdocvar{E3}; \coqdocvar{gen\_eq} \coqdocvar{X2}: \coqdocvar{E2}; \coqdocvar{gen\_eq} \coqdocvar{X1}: \coqdocvar{E1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{sets\_let} \coqdocdefinition{X} finds the first let-expression in the goal
    and names its body \coqdocdefinition{X}. \coqdocvar{sets\_eq\_let} \coqdocdefinition{X} is similar,
    except that it generates an explicit equality.
    Tactics \coqdocvar{sets\_let} \coqdocdefinition{X} \coqdoctac{in} \coqdocvariable{H} and \coqdocvar{sets\_eq\_let} \coqdocdefinition{X} \coqdoctac{in} \coqdocvariable{H}
    allow specifying a particular hypothesis (by default,
    the first one that contains a \coqdockw{let} is considered).


    Known limitation: it does not seem possible to support
    naming of multiple let-in constructs inside a term, from ltac. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{sets\_let\_base} \coqdocvar{tac} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdockw{context}[\coqdockw{let} \coqdocvar{\_} := ?\coqdocvar{E} \coqdoctac{in} \coqdocvar{\_}] \ensuremath{\Rightarrow} \coqdocvar{tac} \coqdocvar{E}; \coqdoctac{cbv} \coqdockw{zeta}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H}: \coqdockw{context}[\coqdockw{let} \coqdocvar{\_} := ?\coqdocvar{E} \coqdoctac{in} \coqdocvar{\_}] \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{tac} \coqdocvar{E}; \coqdoctac{cbv} \coqdockw{zeta} \coqdoctac{in} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{sets\_let\_in\_base} \coqdocvar{H} \coqdocvar{tac} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdockw{with} \coqdockw{context}[\coqdockw{let} \coqdocvar{\_} := ?\coqdocvar{E} \coqdoctac{in} \coqdocvar{\_}] \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{tac} \coqdocvar{E}; \coqdoctac{cbv} \coqdockw{zeta} \coqdoctac{in} \coqdocvar{H} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "sets\_let" \coqdocvar{ident}(\coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sets\_let\_base} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{E} \ensuremath{\Rightarrow} \coqdocvar{sets} \coqdocvar{X}: \coqdocvar{E}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "sets\_let" \coqdocvar{ident}(\coqdocvar{X}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sets\_let\_in\_base} \coqdocvar{H} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{E} \ensuremath{\Rightarrow} \coqdocvar{sets} \coqdocvar{X}: \coqdocvar{E}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "sets\_eq\_let" \coqdocvar{ident}(\coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sets\_let\_base} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{E} \ensuremath{\Rightarrow} \coqdocvar{sets\_eq} \coqdocvar{X}: \coqdocvar{E}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "sets\_eq\_let" \coqdocvar{ident}(\coqdocvar{X}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sets\_let\_in\_base} \coqdocvar{H} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{E} \ensuremath{\Rightarrow} \coqdocvar{sets\_eq} \coqdocvar{X}: \coqdocvar{E}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Rewriting}



 \coqdocvar{rewrites} \coqdocvar{E} is similar to \coqdoctac{rewrite} except that
    it supports the \coqdocdefinition{rm} directives to clear hypotheses
    on the fly, and that it supports a list of arguments in the form
    \coqdocvar{rewrites} (>> \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3}) to indicate that \coqdocvar{forwards} should be 
    invoked first before \coqdocvar{rewrites} is called. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{rewrites\_base} \coqdocvar{E} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with} \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{List.list} \coqdocvar{Boxer} \ensuremath{\Rightarrow} \coqdocvar{forwards\_then} \coqdocvar{E} \coqdocvar{cont}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{cont} \coqdocvar{E}; \coqdocvar{fast\_rm\_inside} \coqdocvar{E}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{M} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \coqdocvar{M} ).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{M} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \coqdocvar{M} \coqdoctac{in} \coqdocvar{H}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{M} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \coqdocvar{M} \coqdoctac{in} *).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{M} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{M} ).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{M} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{M} \coqdoctac{in} \coqdocvar{H}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{M} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{M} \coqdoctac{in} *).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{rewrite\_all} \coqdocvar{E} iterates version of \coqdoctac{rewrite} \coqdocvar{E} as long as possible.
    Warning: this tactic can easily get into an infinite loop.
    Syntax for rewriting from right to left and/or into an hypothese
    is similar to the one of \coqdoctac{rewrite}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{E} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{asserts\_rewrite} \coqdocvar{E} asserts that an equality \coqdocvar{E} holds (generating a
    corresponding subgoal) and rewrite it straight away in the current
    goal. It avoids giving a name to the equality and later clearing it.
    Syntax for rewriting from right to left and/or into an hypothese
    is similar to the one of \coqdoctac{rewrite}. Note: the tactic \coqdocvar{replaces}
    plays a similar role. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{asserts\_rewrite\_tactic} \coqdocvar{E} \coqdocvar{action} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{EQ} := \coqdoctac{fresh} \coqdoctac{in} (\coqdoctac{assert} (\coqdocvar{EQ} : \coqdocvar{E});\coqdoceol
\coqdocindent{1.00em}
[ \coqdoctac{idtac} \ensuremath{|} \coqdocvar{action} \coqdocvar{EQ}; \coqdoctac{clear} \coqdocvar{EQ} ]).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite\_tactic} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{EQ} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \coqdocvar{EQ}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite\_tactic} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{EQ} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{EQ}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite\_tactic} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{EQ} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \coqdocvar{EQ} \coqdoctac{in} \coqdocvar{H}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite\_tactic} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{EQ} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{EQ} \coqdoctac{in} \coqdocvar{H}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite\_tactic} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{EQ} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \coqdocvar{EQ} \coqdoctac{in} *).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite\_tactic} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{EQ} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{EQ} \coqdoctac{in} *).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{cuts\_rewrite} \coqdocvar{E} is the same as \coqdocvar{asserts\_rewrite} \coqdocvar{E} except
    that subgoals are permuted. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{cuts\_rewrite\_tactic} \coqdocvar{E} \coqdocvar{action} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{EQ} := \coqdoctac{fresh} \coqdoctac{in} (\coqdocvar{cuts} \coqdocvar{EQ}: \coqdocvar{E};\coqdoceol
\coqdocindent{1.00em}
[ \coqdocvar{action} \coqdocvar{EQ}; \coqdoctac{clear} \coqdocvar{EQ} \ensuremath{|} \coqdoctac{idtac} ]).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite\_tactic} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{EQ} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \coqdocvar{EQ}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite\_tactic} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{EQ} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{EQ}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite\_tactic} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{EQ} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \coqdocvar{EQ} \coqdoctac{in} \coqdocvar{H}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite\_tactic} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{EQ} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{EQ} \coqdoctac{in} \coqdocvar{H}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{rewrite\_except} \coqdocvariable{H} \coqdocvar{EQ} rewrites equality \coqdocvar{EQ} everywhere
    but in hypothesis \coqdocvariable{H}. Mainly useful for other tactics. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{rewrite\_except} \coqdocvar{H} \coqdocvar{EQ} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{K} := \coqdoctac{fresh} \coqdoctac{in} \coqdockw{let} \coqdocvar{T} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{K} := \coqdocvar{T}) \coqdoctac{in} \coqdocvar{H};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{EQ} \coqdoctac{in} *; \coqdoctac{unfold} \coqdocvar{K} \coqdoctac{in} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{K}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{rewrites} \coqdocvar{E} \coqdoctac{at} \coqdocvar{K} applies when \coqdocvar{E} is of the form \coqdocvariable{T1} = \coqdocvariable{T2}
    rewrites the equality \coqdocvar{E} at the \coqdocvar{K}-th occurence of \coqdocvariable{T1}
    in the current goal.
    Syntaxes \coqdocvar{rewrites} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{at} \coqdocvar{K} and \coqdocvar{rewrites} \coqdocvar{E} \coqdoctac{at} \coqdocvar{K} \coqdoctac{in} \coqdocvariable{H}
    are also available. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" \coqdockw{constr}(\coqdocvar{E}) "at" \coqdockw{constr}(\coqdocvar{K}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with} ?\coqdocvar{T1} = ?\coqdocvar{T2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{ltac\_action\_at} \coqdocvar{K} \coqdocvar{of} \coqdocvar{T1} \coqdoctac{do} (\coqdocvar{rewrites} \coqdocvar{E}) \coqdockw{end}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "<-" \coqdockw{constr}(\coqdocvar{E}) "at" \coqdockw{constr}(\coqdocvar{K}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with} ?\coqdocvar{T1} = ?\coqdocvar{T2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{ltac\_action\_at} \coqdocvar{K} \coqdocvar{of} \coqdocvar{T2} \coqdoctac{do} (\coqdocvar{rewrites} \ensuremath{\leftarrow} \coqdocvar{E}) \coqdockw{end}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" \coqdockw{constr}(\coqdocvar{E}) "at" \coqdockw{constr}(\coqdocvar{K}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with} ?\coqdocvar{T1} = ?\coqdocvar{T2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{ltac\_action\_at} \coqdocvar{K} \coqdocvar{of} \coqdocvar{T1} \coqdoctac{in} \coqdocvar{H} \coqdoctac{do} (\coqdocvar{rewrites} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}) \coqdockw{end}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "<-" \coqdockw{constr}(\coqdocvar{E}) "at" \coqdockw{constr}(\coqdocvar{K}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with} ?\coqdocvar{T1} = ?\coqdocvar{T2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{ltac\_action\_at} \coqdocvar{K} \coqdocvar{of} \coqdocvar{T2} \coqdoctac{in} \coqdocvar{H} \coqdoctac{do} (\coqdocvar{rewrites} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}) \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Replace}



 \coqdocvar{replaces} \coqdocvar{E} \coqdockw{with} \coqdocvariable{F} is the same as \coqdoctac{replace} \coqdocvar{E} \coqdockw{with} \coqdocvariable{F} except that
    the equality \coqdocvar{E} = \coqdocvariable{F} is generated as first subgoal. Syntax
    \coqdocvar{replaces} \coqdocvar{E} \coqdockw{with} \coqdocvariable{F} \coqdoctac{in} \coqdocvariable{H} is also available. Note that contrary to
    \coqdoctac{replace}, \coqdocvar{replaces} does not try to solve the equality
    by \coqdoctac{assumption}. Note: \coqdocvar{replaces} \coqdocvar{E} \coqdockw{with} \coqdocvariable{F} is similar to
    \coqdocvar{asserts\_rewrite} (\coqdocvar{E} = \coqdocvariable{F}). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "replaces" \coqdockw{constr}(\coqdocvar{E}) "with" \coqdockw{constr}(\coqdocvar{F}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{T} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{assert} (\coqdocvar{T}: \coqdocvar{E} = \coqdocvar{F}); [ \ensuremath{|} \coqdoctac{replace} \coqdocvar{E} \coqdockw{with} \coqdocvar{F}; \coqdoctac{clear} \coqdocvar{T} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "replaces" \coqdockw{constr}(\coqdocvar{E}) "with" \coqdockw{constr}(\coqdocvar{F}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{T} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{assert} (\coqdocvar{T}: \coqdocvar{E} = \coqdocvar{F}); [ \ensuremath{|} \coqdoctac{replace} \coqdocvar{E} \coqdockw{with} \coqdocvar{F} \coqdoctac{in} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{T} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{replaces} \coqdocvar{E} \coqdoctac{at} \coqdocvar{K} \coqdockw{with} \coqdocvariable{F} replaces the \coqdocvar{K}-th occurence of \coqdocvar{E}
    with \coqdocvariable{F} in the current goal. Syntax \coqdocvar{replaces} \coqdocvar{E} \coqdoctac{at} \coqdocvar{K} \coqdockw{with} \coqdocvariable{F} \coqdoctac{in} \coqdocvariable{H}
    is also available. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "replaces" \coqdockw{constr}(\coqdocvar{E}) "at" \coqdockw{constr}(\coqdocvar{K}) "with" \coqdockw{constr}(\coqdocvar{F}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{T} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{assert} (\coqdocvar{T}: \coqdocvar{E} = \coqdocvar{F}); [ \ensuremath{|} \coqdocvar{rewrites} \coqdocvar{T} \coqdoctac{at} \coqdocvar{K}; \coqdoctac{clear} \coqdocvar{T} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "replaces" \coqdockw{constr}(\coqdocvar{E}) "at" \coqdockw{constr}(\coqdocvar{K}) "with" \coqdockw{constr}(\coqdocvar{F}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{T} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{assert} (\coqdocvar{T}: \coqdocvar{E} = \coqdocvar{F}); [ \ensuremath{|} \coqdocvar{rewrites} \coqdocvar{T} \coqdoctac{at} \coqdocvar{K} \coqdoctac{in} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{T} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Change}



 \coqdocvar{changes} is like \coqdoctac{change} except that it does not silently
   fail to perform its task. (Note that, \coqdocvar{changes} is implemented
   using \coqdoctac{rewrite}, meaning that it might perform additional 
   beta-reductions compared with the original \coqdoctac{change} tactic. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "changes" \coqdockw{constr}(\coqdocvar{E1}) "with" \coqdockw{constr}(\coqdocvar{E2}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} (\coqdocvar{E1} = \coqdocvar{E2}) \coqdoctac{in} \coqdocvar{H}; [ \coqdoctac{reflexivity} \ensuremath{|} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "changes" \coqdockw{constr}(\coqdocvar{E1}) "with" \coqdockw{constr}(\coqdocvar{E2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} (\coqdocvar{E1} = \coqdocvar{E2}); [ \coqdoctac{reflexivity} \ensuremath{|} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "changes" \coqdockw{constr}(\coqdocvar{E1}) "with" \coqdockw{constr}(\coqdocvar{E2}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} (\coqdocvar{E1} = \coqdocvar{E2}) \coqdoctac{in} *; [ \coqdoctac{reflexivity} \ensuremath{|} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Renaming}



 \coqdocvar{renames} \coqdocvar{X1} \coqdocvar{to} \coqdocvar{Y1}, ..., \coqdocvar{XN} \coqdocvar{to} \coqdocvar{YN} is a shorthand for a sequence of
    renaming operations \coqdoctac{rename} \coqdocvar{Xi} \coqdocvar{into} \coqdocvar{Yi}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "renames" \coqdocvar{ident}(\coqdocvar{X1}) "to" \coqdocvar{ident}(\coqdocvar{Y1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rename} \coqdocvar{X1} \coqdocvar{into} \coqdocvar{Y1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "renames" \coqdocvar{ident}(\coqdocvar{X1}) "to" \coqdocvar{ident}(\coqdocvar{Y1}) ","\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X2}) "to" \coqdocvar{ident}(\coqdocvar{Y2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{renames} \coqdocvar{X1} \coqdocvar{to} \coqdocvar{Y1}; \coqdocvar{renames} \coqdocvar{X2} \coqdocvar{to} \coqdocvar{Y2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "renames" \coqdocvar{ident}(\coqdocvar{X1}) "to" \coqdocvar{ident}(\coqdocvar{Y1}) ","\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X2}) "to" \coqdocvar{ident}(\coqdocvar{Y2}) "," \coqdocvar{ident}(\coqdocvar{X3}) "to" \coqdocvar{ident}(\coqdocvar{Y3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{renames} \coqdocvar{X1} \coqdocvar{to} \coqdocvar{Y1}; \coqdocvar{renames} \coqdocvar{X2} \coqdocvar{to} \coqdocvar{Y2}, \coqdocvar{X3} \coqdocvar{to} \coqdocvar{Y3}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "renames" \coqdocvar{ident}(\coqdocvar{X1}) "to" \coqdocvar{ident}(\coqdocvar{Y1}) ","\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X2}) "to" \coqdocvar{ident}(\coqdocvar{Y2}) "," \coqdocvar{ident}(\coqdocvar{X3}) "to" \coqdocvar{ident}(\coqdocvar{Y3}) ","\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X4}) "to" \coqdocvar{ident}(\coqdocvar{Y4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{renames} \coqdocvar{X1} \coqdocvar{to} \coqdocvar{Y1}; \coqdocvar{renames} \coqdocvar{X2} \coqdocvar{to} \coqdocvar{Y2}, \coqdocvar{X3} \coqdocvar{to} \coqdocvar{Y3}, \coqdocvar{X4} \coqdocvar{to} \coqdocvar{Y4}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "renames" \coqdocvar{ident}(\coqdocvar{X1}) "to" \coqdocvar{ident}(\coqdocvar{Y1}) ","\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X2}) "to" \coqdocvar{ident}(\coqdocvar{Y2}) "," \coqdocvar{ident}(\coqdocvar{X3}) "to" \coqdocvar{ident}(\coqdocvar{Y3}) ","\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X4}) "to" \coqdocvar{ident}(\coqdocvar{Y4}) "," \coqdocvar{ident}(\coqdocvar{X5}) "to" \coqdocvar{ident}(\coqdocvar{Y5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{renames} \coqdocvar{X1} \coqdocvar{to} \coqdocvar{Y1}; \coqdocvar{renames} \coqdocvar{X2} \coqdocvar{to} \coqdocvar{Y2}, \coqdocvar{X3} \coqdocvar{to} \coqdocvar{Y3}, \coqdocvar{X4} \coqdocvar{to} \coqdocvar{Y4}, \coqdocvar{X5} \coqdocvar{to} \coqdocvar{Y5}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "renames" \coqdocvar{ident}(\coqdocvar{X1}) "to" \coqdocvar{ident}(\coqdocvar{Y1}) ","\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X2}) "to" \coqdocvar{ident}(\coqdocvar{Y2}) "," \coqdocvar{ident}(\coqdocvar{X3}) "to" \coqdocvar{ident}(\coqdocvar{Y3}) ","\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X4}) "to" \coqdocvar{ident}(\coqdocvar{Y4}) "," \coqdocvar{ident}(\coqdocvar{X5}) "to" \coqdocvar{ident}(\coqdocvar{Y5}) ","\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X6}) "to" \coqdocvar{ident}(\coqdocvar{Y6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{renames} \coqdocvar{X1} \coqdocvar{to} \coqdocvar{Y1}; \coqdocvar{renames} \coqdocvar{X2} \coqdocvar{to} \coqdocvar{Y2}, \coqdocvar{X3} \coqdocvar{to} \coqdocvar{Y3}, \coqdocvar{X4} \coqdocvar{to} \coqdocvar{Y4}, \coqdocvar{X5} \coqdocvar{to} \coqdocvar{Y5}, \coqdocvar{X6} \coqdocvar{to} \coqdocvar{Y6}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Unfolding}



 \coqdocvar{unfolds} unfolds the head definition in the goal, i.e., if the
    goal has form \coqdocaxiom{P} \coqdocvariable{x1} ... \coqdocvar{xN} then it calls \coqdoctac{unfold} \coqdocaxiom{P}.
    If the goal is an equality, it tries to unfold the head constant
    on the left-hand side, and otherwise tries on the right-hand side.
    If the goal is a product, it calls \coqdoctac{intros} first.
 warning: this tactic is overriden in LibReflect. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{apply\_to\_head\_of} \coqdocvar{E} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{go} \coqdocvar{E} :=\coqdoceol
\coqdocindent{2.00em}
\coqdockw{let} \coqdocvar{P} := \coqdocvar{get\_head} \coqdocvar{E} \coqdoctac{in} \coqdocvar{cont} \coqdocvar{P} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{E} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdockw{\ensuremath{\forall}} \coqdocvar{\_},\coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{intros}; \coqdocvar{apply\_to\_head\_of} \coqdocvar{E} \coqdocvar{cont}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{A} = ?\coqdocvar{B} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdocvar{go} \coqdocvar{A} \ensuremath{|} \coqdocvar{go} \coqdocvar{B} ]\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{A} \ensuremath{\Rightarrow} \coqdocvar{go} \coqdocvar{A}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{unfolds\_base} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{G} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{apply\_to\_head\_of} \coqdocvar{G} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{P} \ensuremath{\Rightarrow} \coqdoctac{unfold} \coqdocvar{P}) \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds\_base}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{unfolds} \coqdoctac{in} \coqdocvariable{H} unfolds the head definition of hypothesis \coqdocvariable{H}, i.e., if
    \coqdocvariable{H} has type \coqdocaxiom{P} \coqdocvariable{x1} ... \coqdocvar{xN} then it calls \coqdoctac{unfold} \coqdocaxiom{P} \coqdoctac{in} \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{unfolds\_in\_base} \coqdocvar{H} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdockw{with} ?\coqdocvar{G} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{apply\_to\_head\_of} \coqdocvar{G} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{P} \ensuremath{\Rightarrow} \coqdoctac{unfold} \coqdocvar{P} \coqdoctac{in} \coqdocvar{H}) \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds\_in\_base} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{unfolds} \coqdoctac{in} \coqdocvar{H1},\coqdocvar{H2},..,\coqdocvar{HN} allows unfolding the head constant
    in several hypotheses at once. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "in" \coqdocvar{hyp}(\coqdocvar{H1}) \coqdocvar{hyp}(\coqdocvar{H2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdoctac{in} \coqdocvar{H1}; \coqdocvar{unfolds} \coqdoctac{in} \coqdocvar{H2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "in" \coqdocvar{hyp}(\coqdocvar{H1}) \coqdocvar{hyp}(\coqdocvar{H2}) \coqdocvar{hyp}(\coqdocvar{H3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdoctac{in} \coqdocvar{H1}; \coqdocvar{unfolds} \coqdoctac{in} \coqdocvar{H2} \coqdocvar{H3}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "in" \coqdocvar{hyp}(\coqdocvar{H1}) \coqdocvar{hyp}(\coqdocvar{H2}) \coqdocvar{hyp}(\coqdocvar{H3}) \coqdocvar{hyp}(\coqdocvar{H4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdoctac{in} \coqdocvar{H1}; \coqdocvar{unfolds} \coqdoctac{in} \coqdocvar{H2} \coqdocvar{H3} \coqdocvar{H4}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{unfolds} \coqdocvariable{P1},..,\coqdocvar{PN} is a shortcut for \coqdoctac{unfold} \coqdocvariable{P1},..,\coqdocvar{PN} \coqdoctac{in} *. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" \coqdockw{constr}(\coqdocvar{F1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{F1} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{F1},\coqdocvar{F2} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) \coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{F3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{F1},\coqdocvar{F2},\coqdocvar{F3} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) \coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{F3}) "," \coqdockw{constr}(\coqdocvar{F4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{F1},\coqdocvar{F2},\coqdocvar{F3},\coqdocvar{F4} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) \coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{F3}) "," \coqdockw{constr}(\coqdocvar{F4}) "," \coqdockw{constr}(\coqdocvar{F5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{F1},\coqdocvar{F2},\coqdocvar{F3},\coqdocvar{F4},\coqdocvar{F5} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) \coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{F3}) "," \coqdockw{constr}(\coqdocvar{F4}) "," \coqdockw{constr}(\coqdocvar{F5}) "," \coqdockw{constr}(\coqdocvar{F6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{F1},\coqdocvar{F2},\coqdocvar{F3},\coqdocvar{F4},\coqdocvar{F5},\coqdocvar{F6} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) \coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{F3}) "," \coqdockw{constr}(\coqdocvar{F4}) "," \coqdockw{constr}(\coqdocvar{F5}) \coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{F6}) "," \coqdockw{constr}(\coqdocvar{F7}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{F1},\coqdocvar{F2},\coqdocvar{F3},\coqdocvar{F4},\coqdocvar{F5},\coqdocvar{F6},\coqdocvar{F7} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) \coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{F3}) "," \coqdockw{constr}(\coqdocvar{F4}) "," \coqdockw{constr}(\coqdocvar{F5}) \coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{F6}) "," \coqdockw{constr}(\coqdocvar{F7}) "," \coqdockw{constr}(\coqdocvar{F8}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{F1},\coqdocvar{F2},\coqdocvar{F3},\coqdocvar{F4},\coqdocvar{F5},\coqdocvar{F6},\coqdocvar{F7},\coqdocvar{F8} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{folds} \coqdocvariable{P1},..,\coqdocvar{PN} is a shortcut for \coqdoctac{fold} \coqdocvariable{P1} \coqdoctac{in} *; ..; \coqdoctac{fold} \coqdocvar{PN} \coqdoctac{in} *. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "folds" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{fold} \coqdocvar{H} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "folds" \coqdockw{constr}(\coqdocvar{H1}) "," \coqdockw{constr}(\coqdocvar{H2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{folds} \coqdocvar{H1}; \coqdocvar{folds} \coqdocvar{H2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "folds" \coqdockw{constr}(\coqdocvar{H1}) "," \coqdockw{constr}(\coqdocvar{H2}) "," \coqdockw{constr}(\coqdocvar{H3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{folds} \coqdocvar{H1}; \coqdocvar{folds} \coqdocvar{H2}; \coqdocvar{folds} \coqdocvar{H3}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "folds" \coqdockw{constr}(\coqdocvar{H1}) "," \coqdockw{constr}(\coqdocvar{H2}) "," \coqdockw{constr}(\coqdocvar{H3})\coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{H4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{folds} \coqdocvar{H1}; \coqdocvar{folds} \coqdocvar{H2}; \coqdocvar{folds} \coqdocvar{H3}; \coqdocvar{folds} \coqdocvar{H4}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "folds" \coqdockw{constr}(\coqdocvar{H1}) "," \coqdockw{constr}(\coqdocvar{H2}) "," \coqdockw{constr}(\coqdocvar{H3})\coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{H4}) "," \coqdockw{constr}(\coqdocvar{H5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{folds} \coqdocvar{H1}; \coqdocvar{folds} \coqdocvar{H2}; \coqdocvar{folds} \coqdocvar{H3}; \coqdocvar{folds} \coqdocvar{H4}; \coqdocvar{folds} \coqdocvar{H5}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Simplification}



 \coqdocvar{simpls} is a shortcut for \coqdoctac{simpl} \coqdoctac{in} *. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "simpls" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{simpls} \coqdocvariable{P1},..,\coqdocvar{PN} is a shortcut for
    \coqdoctac{simpl} \coqdocvariable{P1} \coqdoctac{in} *; ..; \coqdoctac{simpl} \coqdocvar{PN} \coqdoctac{in} *. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "simpls" \coqdockw{constr}(\coqdocvar{F1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl} \coqdocvar{F1} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "simpls" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{simpls} \coqdocvar{F1}; \coqdocvar{simpls} \coqdocvar{F2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "simpls" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) \coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{F3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{simpls} \coqdocvar{F1}; \coqdocvar{simpls} \coqdocvar{F2}; \coqdocvar{simpls} \coqdocvar{F3}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "simpls" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) \coqdoceol
\coqdocindent{0.50em}
"," \coqdockw{constr}(\coqdocvar{F3}) "," \coqdockw{constr}(\coqdocvar{F4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{simpls} \coqdocvar{F1}; \coqdocvar{simpls} \coqdocvar{F2}; \coqdocvar{simpls} \coqdocvar{F3}; \coqdocvar{simpls} \coqdocvar{F4}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{unsimpl} \coqdocvar{E} replaces all occurence of \coqdocdefinition{X} by \coqdocvar{E}, where \coqdocdefinition{X} is
   the result which the tactic \coqdoctac{simpl} would give when applied to \coqdocvar{E}.
   It is useful to undo what \coqdoctac{simpl} has simplified too far. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "unsimpl" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{F} := (\coqdoctac{eval} \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{E}) \coqdoctac{in} \coqdoctac{change} \coqdocvar{F} \coqdockw{with} \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{unsimpl} \coqdocvar{E} \coqdoctac{in} \coqdocvariable{H} is similar to \coqdocvar{unsimpl} \coqdocvar{E} but it applies
    inside a particular hypothesis \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "unsimpl" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{F} := (\coqdoctac{eval} \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{E}) \coqdoctac{in} \coqdoctac{change} \coqdocvar{F} \coqdockw{with} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{unsimpl} \coqdocvar{E} \coqdoctac{in} * applies \coqdocvar{unsimpl} \coqdocvar{E} everywhere possible.
    \coqdocvar{unsimpls} \coqdocvar{E} is a synonymous. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "unsimpl" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{F} := (\coqdoctac{eval} \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{E}) \coqdoctac{in} \coqdoctac{change} \coqdocvar{F} \coqdockw{with} \coqdocvar{E} \coqdoctac{in} *.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unsimpls" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unsimpl} \coqdocvar{E} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{nosimpl} \coqdocvariable{t} protects the Coq term\coqdocvariable{t} against some forms of
    simplification. See Gonthier's work for details on this trick. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'nosimpl' t" := (\coqdockw{match} \coqdocvar{tt} \coqdockw{with} \coqdocvar{tt} \ensuremath{\Rightarrow} \coqdocvar{t} \coqdockw{end})\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 10).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Reduction}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "hnfs" := \coqdoctac{hnf} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Substitution}



 \coqdocvar{substs} does the same as \coqdoctac{subst}, except that it does not fail
    when there are circular equalities in the context. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "substs" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} (\coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: ?\coqdocvar{x} = ?\coqdocvar{y} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{6.00em}
\coqdoctac{first} [ \coqdoctac{subst} \coqdocvar{x} \ensuremath{|} \coqdoctac{subst} \coqdocvar{y} ] \coqdockw{end}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Implementation of \coqdocvar{substs} \coqdocvar{below}, which allows to call
    \coqdoctac{subst} on all the hypotheses that lie beyond a given
    position in the proof context. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{substs\_below} \coqdocvar{limit} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: ?\coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{limit} \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{x} = ?\coqdocvar{y} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{first} [ \coqdoctac{subst} \coqdocvar{x}; \coqdocvar{substs\_below} \coqdocvar{limit}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdoctac{subst} \coqdocvar{y}; \coqdocvar{substs\_below} \coqdocvar{limit}\coqdoceol
\coqdocindent{5.00em}
\ensuremath{|} \coqdocvar{generalizes} \coqdocvar{H}; \coqdocvar{substs\_below} \coqdocvar{limit}; \coqdoctac{intro} ]\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{substs} \coqdocvar{below} \coqdocconstructor{body} \coqdocvar{E} applies \coqdoctac{subst} on all equalities that appear
    in the context below the first hypothesis whose body is \coqdocvar{E}.
    If there is no such hypothesis in the context, it is equivalent
    to \coqdoctac{subst}. For instance, if \coqdocvariable{H} is an hypothesis, then
    \coqdocvar{substs} \coqdocvar{below} \coqdocvariable{H} will substitute equalities below hypothesis \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "substs" "below" "body" \coqdockw{constr}(\coqdocvar{M}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{substs\_below} \coqdocvar{M}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{substs} \coqdocvar{below} \coqdocvariable{H} applies \coqdoctac{subst} on all equalities that appear
    in the context below the hypothesis named \coqdocvariable{H}. Note that
    the current implementation is technically incorrect since it
    will confuse different hypotheses with the same body. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "substs" "below" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdockw{with} ?\coqdocvar{M} \ensuremath{\Rightarrow} \coqdocvar{substs} \coqdocvar{below} \coqdocvar{body} \coqdocvar{M} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{subst\_hyp} \coqdocvariable{H} substitutes the equality contained in the
    first hypothesis from the context. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{intro\_subst\_hyp} := \coqdoctac{fail}. \coqdocemptyline
\end{coqdoccode}
\coqdocvar{subst\_hyp} \coqdocvariable{H} substitutes the equality contained in \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{subst\_hyp\_base} \coqdocvar{H} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) = (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{injection} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}; \coqdoctac{do} 4 \coqdocvar{intro\_subst\_hyp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) = (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{injection} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}; \coqdoctac{do} 4 \coqdocvar{intro\_subst\_hyp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) = (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{injection} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}; \coqdoctac{do} 3 \coqdocvar{intro\_subst\_hyp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{\_},\coqdocvar{\_}) = (\coqdocvar{\_},\coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{injection} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}; \coqdoctac{do} 2 \coqdocvar{intro\_subst\_hyp}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{x} = ?\coqdocvar{x} \ensuremath{\Rightarrow} \coqdoctac{clear} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{x} = ?\coqdocvar{y} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdoctac{subst} \coqdocvar{x} \ensuremath{|} \coqdoctac{subst} \coqdocvar{y} ]\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "subst\_hyp" \coqdocvar{hyp}(\coqdocvar{H}) := \coqdocvar{subst\_hyp\_base} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{intro\_subst\_hyp} ::=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "TEMP" \coqdoctac{in} \coqdoctac{intros} \coqdocvar{H}; \coqdocvar{subst\_hyp} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{intro\_subst} is a shorthand for \coqdoctac{intro} \coqdocvariable{H}; \coqdocvar{subst\_hyp} \coqdocvariable{H}:
    it introduces and substitutes the equality at the head
    of the current goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "intro\_subst" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "TEMP" \coqdoctac{in} \coqdoctac{intros} \coqdocvar{H}; \coqdocvar{subst\_hyp} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{subst\_local} substitutes all local definition from the context \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{subst\_local} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}:=\coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{subst} \coqdocvar{H} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{subst\_eq} \coqdocvar{E} takes an equality \coqdocabbreviation{x} = \coqdocvariable{t} and replace \coqdocabbreviation{x}
    with \coqdocvariable{t} everywhere in the goal \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{subst\_eq\_base} \coqdocvar{E} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "TEMP" \coqdoctac{in} \coqdocvar{lets} \coqdocvar{H}: \coqdocvar{E}; \coqdocvar{subst\_hyp} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "subst\_eq" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subst\_eq\_base} \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Tactics to Work with Proof Irrelevance}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{ProofIrrelevance}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{pi\_rewrite} \coqdocvar{E} replaces \coqdocvar{E} of type \coqdockw{Prop} with a fresh
    unification variable, and is thus a practical way to
    exploit proof irrelevance, without writing explicitly
    \coqdoctac{rewrite} (\coqexternalref{proof irrelevance}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Logic.ProofIrrelevance}{\coqdocaxiom{proof\_irrelevance}} \coqdocvar{E} \coqdocvar{E'}). Particularly useful
    when \coqdocvar{E'} is a big expression. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{pi\_rewrite\_base} \coqdocvar{E} \coqdocvar{rewrite\_tac} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{E'} := \coqdoctac{fresh} \coqdoctac{in} \coqdockw{let} \coqdocvar{T} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdoctac{in} \coqdoctac{evar} (\coqdocvar{E'}:\coqdocvar{T});\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_tac} (@\coqdocvar{proof\_irrelevance} \coqdocvar{\_} \coqdocvar{E} \coqdocvar{E'}); \coqdoctac{subst} \coqdocvar{E'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "pi\_rewrite" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pi\_rewrite\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{X} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \coqdocvar{X}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "pi\_rewrite" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pi\_rewrite\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{X} \ensuremath{\Rightarrow} \coqdoctac{rewrite} \coqdocvar{X} \coqdoctac{in} \coqdocvar{H}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Proving Equalities}



 Note: current implementation only supports up to arity 5 

 \coqdocvar{fequal} is a variation on \coqdoctac{f\_equal} which has a better behaviour
    on equalities between n-ary tuples. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{fequal\_base} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{go} := \coqdoctac{f\_equal}; [ \coqdocvar{fequal\_base} \ensuremath{|} ] \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) = (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdocvar{go}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) = (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdocvar{go}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) = (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdocvar{go}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) = (\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_},\coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdocvar{go}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{f\_equal}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "fequal" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fequal\_base}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{fequals} is the same as \coqdocvar{fequal} except that it tries and solve
    all trivial subgoals, using \coqdoctac{reflexivity} and \coqdoctac{congruence}
    (as well as the proof-irrelevance principle).
    \coqdocvar{fequals} applies to goals of the form \coqdocabbreviation{f} \coqdocvariable{x1} .. \coqdocvar{xN} = \coqdocabbreviation{f} \coqdocvariable{y1} .. \coqdocvar{yN}
    and produces some subgoals of the form \coqdocvar{xi} = \coqdocvar{yi}). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{fequal\_post} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first} [ \coqdoctac{reflexivity} \ensuremath{|} \coqdoctac{congruence} \ensuremath{|} \coqdoctac{apply} \coqdocvar{proof\_irrelevance} \ensuremath{|} \coqdoctac{idtac} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "fequals" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fequal}; \coqdocvar{fequal\_post}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{fequals\_rec} calls \coqdocvar{fequals} recursively.
    It is equivalent to \coqdoctac{repeat} (\coqdoctac{progress} \coqdocvar{fequals}). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "fequals\_rec" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} (\coqdoctac{progress} \coqdocvar{fequals}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Inversion}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Basic Inversion}



 \coqdocvar{invert} \coqdocvar{keep} \coqdocvariable{H} is same to \coqdoctac{inversion} \coqdocvariable{H} except that it puts all the
    facts obtained in the goal. The keyword \coqdocvar{keep} means that the
    hypothesis \coqdocvariable{H} should not be removed. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "invert" "keep" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{pose} \coqdocvar{ltac\_mark}; \coqdoctac{inversion} \coqdocvar{H}; \coqdocvar{gen\_until\_mark}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{invert} \coqdocvar{keep} \coqdocvariable{H} \coqdockw{as} \coqdocvar{X1} .. \coqdocvar{XN} is the same as \coqdoctac{inversion} \coqdocvariable{H} \coqdockw{as} ... except
    that only hypotheses which are not variable need to be named
    explicitely, in a similar fashion as \coqdocvar{introv} is used to name
    only hypotheses. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "invert" "keep" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert} \coqdocvar{keep} \coqdocvar{H}; \coqdocvar{introv} \coqdocvar{I1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "invert" "keep" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert} \coqdocvar{keep} \coqdocvar{H}; \coqdocvar{introv} \coqdocvar{I1} \coqdocvar{I2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "invert" "keep" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert} \coqdocvar{keep} \coqdocvar{H}; \coqdocvar{introv} \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{I3}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{invert} \coqdocvariable{H} is same to \coqdoctac{inversion} \coqdocvariable{H} except that it puts all the
    facts obtained in the goal and clears hypothesis \coqdocvariable{H}.
    In other words, it is equivalent to \coqdocvar{invert} \coqdocvar{keep} \coqdocvariable{H}; \coqdoctac{clear} \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "invert" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert} \coqdocvar{keep} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{invert} \coqdocvariable{H} \coqdockw{as} \coqdocvar{X1} .. \coqdocvar{XN} is the same as \coqdocvar{invert} \coqdocvar{keep} \coqdocvariable{H} \coqdockw{as} \coqdocvar{X1} .. \coqdocvar{XN}
    but it also clears hypothesis \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "invert\_tactic" \coqdocvar{hyp}(\coqdocvar{H}) \coqdocvar{tactic}(\coqdocvar{tac}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H'} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{rename} \coqdocvar{H} \coqdocvar{into} \coqdocvar{H'}; \coqdocvar{tac} \coqdocvar{H'}; \coqdoctac{clear} \coqdocvar{H'}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "invert" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert\_tactic} \coqdocvar{H} (\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{invert} \coqdocvar{keep} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "invert" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert\_tactic} \coqdocvar{H} (\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{invert} \coqdocvar{keep} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1} \coqdocvar{I2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "invert" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert\_tactic} \coqdocvar{H} (\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{invert} \coqdocvar{keep} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{I3}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Inversion with Substitution}



 Our inversion tactics is able to get rid of dependent equalities
    generated by \coqdoctac{inversion}, using proof irrelevance. \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Axiom} \coqdocvar{inj\_pair2} :  \coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{U} : \coqdockw{Type}) (\coqdocvar{P} : \coqdocvar{U} \ensuremath{\rightarrow} \coqdockw{Type}) (\coqdocvar{p} : \coqdocvar{U}) (\coqdocvar{x} \coqdocvar{y} : \coqdocvar{P} \coqdocvar{p}),\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{existT} \coqdocvar{P} \coqdocvar{p} \coqdocvar{x} = \coqdocvar{existT} \coqdocvar{P} \coqdocvar{p} \coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{x} = \coqdocvar{y}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{inverts\_tactic} \coqdocvar{H} \coqdocvar{i1} \coqdocvar{i2} \coqdocvar{i3} \coqdocvar{i4} \coqdocvar{i5} \coqdocvar{i6} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{rec} \coqdocvar{go} \coqdocvar{i1} \coqdocvar{i2} \coqdocvar{i3} \coqdocvar{i4} \coqdocvar{i5} \coqdocvar{i6} :=\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdocvar{ltac\_Mark} \ensuremath{\rightarrow} \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{intros} \coqdocvar{\_}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (?\coqdocvar{x} = ?\coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{intro} \coqdocvar{H};\coqdoceol
\coqdocindent{13.50em}
\coqdoctac{first} [ \coqdoctac{subst} \coqdocvar{x} \ensuremath{|} \coqdoctac{subst} \coqdocvar{y} ];\coqdoceol
\coqdocindent{13.50em}
\coqdocvar{go} \coqdocvar{i1} \coqdocvar{i2} \coqdocvar{i3} \coqdocvar{i4} \coqdocvar{i5} \coqdocvar{i6}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdocvar{existT} ?\coqdocvar{P} ?\coqdocvar{p} ?\coqdocvar{x} = \coqdocvar{existT} ?\coqdocvar{P} ?\coqdocvar{p} ?\coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{\_}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{intro} \coqdocvar{H};\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{generalize} (@\coqdocvar{inj\_pair2} \coqdocvar{\_} \coqdocvar{P} \coqdocvar{p} \coqdocvar{x} \coqdocvar{y} \coqdocvar{H});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{clear} \coqdocvar{H}; \coqdocvar{go} \coqdocvar{i1} \coqdocvar{i2} \coqdocvar{i3} \coqdocvar{i4} \coqdocvar{i5} \coqdocvar{i6}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (?\coqdocvar{P} \ensuremath{\rightarrow} ?\coqdocvar{Q}) \ensuremath{\Rightarrow} \coqdocvar{i1}; \coqdocvar{go} \coqdocvar{i2} \coqdocvar{i3} \coqdocvar{i4} \coqdocvar{i5} \coqdocvar{i6} \coqdockw{ltac}:(\coqdoctac{intro})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdockw{\ensuremath{\forall}} \coqdocvar{\_}, \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{intro}; \coqdocvar{go} \coqdocvar{i1} \coqdocvar{i2} \coqdocvar{i3} \coqdocvar{i4} \coqdocvar{i5} \coqdocvar{i6}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdocvar{ltac\_mark}; \coqdocvar{invert} \coqdocvar{keep} \coqdocvar{H}; \coqdocvar{go} \coqdocvar{i1} \coqdocvar{i2} \coqdocvar{i3} \coqdocvar{i4} \coqdocvar{i5} \coqdocvar{i6};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{eq'} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{inverts} \coqdocvar{keep} \coqdocvariable{H} is same to \coqdocvar{invert} \coqdocvar{keep} \coqdocvariable{H} except that it
    applies \coqdoctac{subst} to all the equalities generated by the inversion. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "keep" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts\_tactic} \coqdocvar{H} \coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro})\coqdoceol
\coqdocindent{9.50em}
\coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{inverts} \coqdocvar{keep} \coqdocvariable{H} \coqdockw{as} \coqdocvar{X1} .. \coqdocvar{XN} is the same as
    \coqdocvar{invert} \coqdocvar{keep} \coqdocvariable{H} \coqdockw{as} \coqdocvar{X1} .. \coqdocvar{XN} except that it applies \coqdoctac{subst} to all the
    equalities generated by the inversion \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "keep" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts\_tactic} \coqdocvar{H} \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I1})\coqdoceol
\coqdocindent{1.50em}
\coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "keep" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts\_tactic} \coqdocvar{H} \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I1}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I2})\coqdoceol
\coqdocindent{1.50em}
\coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "keep" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts\_tactic} \coqdocvar{H} \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I1}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I2}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I3})\coqdoceol
\coqdocindent{1.50em}
\coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "keep" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts\_tactic} \coqdocvar{H} \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I1}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I2}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I3})\coqdoceol
\coqdocindent{1.50em}
\coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I4}) \coqdockw{ltac}:(\coqdoctac{intro}) \coqdockw{ltac}:(\coqdoctac{intro}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "keep" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts\_tactic} \coqdocvar{H} \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I1}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I2}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I3})\coqdoceol
\coqdocindent{1.50em}
\coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I4}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I5}) \coqdockw{ltac}:(\coqdoctac{intro}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "keep" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I5}) \coqdocvar{simple\_intropattern}(\coqdocvar{I6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts\_tactic} \coqdocvar{H} \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I1}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I2}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I3})\coqdoceol
\coqdocindent{1.50em}
\coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I4}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I5}) \coqdockw{ltac}:(\coqdoctac{intros} \coqdocvar{I6}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{inverts} \coqdocvariable{H} is same to \coqdocvar{inverts} \coqdocvar{keep} \coqdocvariable{H} except that it
    clears hypothesis \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{keep} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{inverts} \coqdocvariable{H} \coqdockw{as} \coqdocvar{X1} .. \coqdocvar{XN} is the same as \coqdocvar{inverts} \coqdocvar{keep} \coqdocvariable{H} \coqdockw{as} \coqdocvar{X1} .. \coqdocvar{XN}
    but it also clears the hypothesis \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts\_tactic" \coqdocvar{hyp}(\coqdocvar{H}) \coqdocvar{tactic}(\coqdocvar{tac}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H'} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{rename} \coqdocvar{H} \coqdocvar{into} \coqdocvar{H'}; \coqdocvar{tac} \coqdocvar{H'}; \coqdoctac{clear} \coqdocvar{H'}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert\_tactic} \coqdocvar{H} (\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{keep} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert\_tactic} \coqdocvar{H} (\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{keep} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1} \coqdocvar{I2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert\_tactic} \coqdocvar{H} (\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{keep} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{I3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert\_tactic} \coqdocvar{H} (\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{keep} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert\_tactic} \coqdocvar{H} (\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{keep} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4} \coqdocvar{I5}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I5}) \coqdocvar{simple\_intropattern}(\coqdocvar{I6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert\_tactic} \coqdocvar{H} (\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{keep} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4} \coqdocvar{I5} \coqdocvar{I6}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{inverts} \coqdocvariable{H} \coqdockw{as} performs an inversion on hypothesis \coqdocvariable{H}, substitutes
    generated equalities, and put in the goal the other freshly-created
    hypotheses, for the user to name explicitly.
    \coqdocvar{inverts} \coqdocvar{keep} \coqdocvariable{H} \coqdockw{as} is the same except that it does not clear \coqdocvariable{H}.
TODO: reimplement \coqdocvar{inverts} above using this one \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{inverts\_as\_tactic} \coqdocvar{H} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{rec} \coqdocvar{go} \coqdocvar{tt} :=\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdocvar{ltac\_Mark} \ensuremath{\rightarrow} \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{intros} \coqdocvar{\_}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (?\coqdocvar{x} = ?\coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "TEMP" \coqdoctac{in} \coqdoctac{intro} \coqdocvar{H};\coqdoceol
\coqdocindent{13.50em}
\coqdoctac{first} [ \coqdoctac{subst} \coqdocvar{x} \ensuremath{|} \coqdoctac{subst} \coqdocvar{y} ];\coqdoceol
\coqdocindent{13.50em}
\coqdocvar{go} \coqdocvar{tt}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdocvar{existT} ?\coqdocvar{P} ?\coqdocvar{p} ?\coqdocvar{x} = \coqdocvar{existT} ?\coqdocvar{P} ?\coqdocvar{p} ?\coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{\_}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{intro} \coqdocvar{H};\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{generalize} (@\coqdocvar{inj\_pair2} \coqdocvar{\_} \coqdocvar{P} \coqdocvar{p} \coqdocvar{x} \coqdocvar{y} \coqdocvar{H});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{clear} \coqdocvar{H}; \coqdocvar{go} \coqdocvar{tt}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdockw{\ensuremath{\forall}} \coqdocvar{\_}, \coqdocvar{\_}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{intro}; \coqdockw{let} \coqdocvar{H} := \coqdocvar{get\_last\_hyp} \coqdocvar{tt} \coqdoctac{in} \coqdocvar{mark\_to\_generalize} \coqdocvar{H}; \coqdocvar{go} \coqdocvar{tt}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{pose} \coqdocvar{ltac\_mark}; \coqdoctac{inversion} \coqdocvar{H};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdocvar{ltac\_mark}; \coqdocvar{gen\_until\_mark};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{go} \coqdocvar{tt}; \coqdocvar{gen\_to\_generalize}; \coqdocvar{unfolds} \coqdocvar{ltac\_to\_generalize};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{eq'} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "keep" \coqdocvar{hyp}(\coqdocvar{H}) "as" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts\_as\_tactic} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" \coqdocvar{hyp}(\coqdocvar{H}) "as" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts\_as\_tactic} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I5}) \coqdocvar{simple\_intropattern}(\coqdocvar{I6}) \coqdocvar{simple\_intropattern}(\coqdocvar{I7}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H} \coqdockw{as}; \coqdocvar{introv} \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4} \coqdocvar{I5} \coqdocvar{I6} \coqdocvar{I7}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I5}) \coqdocvar{simple\_intropattern}(\coqdocvar{I6}) \coqdocvar{simple\_intropattern}(\coqdocvar{I7})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I8}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H} \coqdockw{as}; \coqdocvar{introv} \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4} \coqdocvar{I5} \coqdocvar{I6} \coqdocvar{I7} \coqdocvar{I8}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{lets\_inverts} \coqdocvar{E} \coqdockw{as} \coqdocvar{I1} .. \coqdocvar{IN} is intuitively equivalent to
    \coqdocvar{inverts} \coqdocvar{E}, with the difference that it applies to any 
    expression and not just to the name of an hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{lets\_inverts\_base} \coqdocvar{E} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "TEMP" \coqdoctac{in} \coqdocvar{lets} \coqdocvar{H}: \coqdocvar{E}; \coqdoctac{try} \coqdocvar{cont} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets\_inverts" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets\_inverts\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{H}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets\_inverts" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets\_inverts\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets\_inverts" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets\_inverts\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1} \coqdocvar{I2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets\_inverts" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets\_inverts\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{I3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets\_inverts" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) \coqdocvar{simple\_intropattern}(\coqdocvar{I4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets\_inverts\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{H} \ensuremath{\Rightarrow} \coqdocvar{inverts} \coqdocvar{H} \coqdockw{as} \coqdocvar{I1} \coqdocvar{I2} \coqdocvar{I3} \coqdocvar{I4}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Injection with Substitution}



 Underlying implementation of \coqdocvar{injects} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{injects\_tactic} \coqdocvar{H} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{rec} \coqdocvar{go} \coqdocvar{\_} :=\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (\coqdocvar{ltac\_Mark} \ensuremath{\rightarrow} \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{intros} \coqdocvar{\_}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \ensuremath{\vdash} (?\coqdocvar{x} = ?\coqdocvar{y} \ensuremath{\rightarrow} \coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{intro} \coqdocvar{H};\coqdoceol
\coqdocindent{13.50em}
\coqdoctac{first} [ \coqdoctac{subst} \coqdocvar{x} \ensuremath{|} \coqdoctac{subst} \coqdocvar{y} \ensuremath{|} \coqdoctac{idtac} ];\coqdoceol
\coqdocindent{13.50em}
\coqdocvar{go} \coqdocvar{tt}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdocvar{ltac\_mark}; \coqdoctac{injection} \coqdocvar{H}; \coqdocvar{go} \coqdocvar{tt}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{injects} \coqdocvar{keep} \coqdocvariable{H} takes an hypothesis \coqdocvariable{H} of the form
    \coqdocabbreviation{C} \coqdocvariable{a1} .. \coqdocvar{aN} = \coqdocabbreviation{C} \coqdocvariable{b1} .. \coqdocvar{bN} and substitute all equalities
    \coqdocvar{ai} = \coqdocvar{bi} that have been generated. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "injects" "keep" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{injects\_tactic} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{injects} \coqdocvariable{H} is similar to \coqdocvar{injects} \coqdocvar{keep} \coqdocvariable{H} but clears
    the hypothesis \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "injects" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{injects\_tactic} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{inject} \coqdocvariable{H} \coqdockw{as} \coqdocvar{X1} .. \coqdocvar{XN} is the same as \coqdoctac{injection}
    followed by \coqdoctac{intros} \coqdocvar{X1} .. \coqdocvar{XN} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inject" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{injection} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inject" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{ident}(\coqdocvar{X1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{injection} \coqdocvar{H}; \coqdoctac{intros} \coqdocvar{X1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inject" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{injection} \coqdocvar{H}; \coqdoctac{intros} \coqdocvar{X1} \coqdocvar{X2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inject" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{injection} \coqdocvar{H}; \coqdoctac{intros} \coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inject" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{injection} \coqdocvar{H}; \coqdoctac{intros} \coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3} \coqdocvar{X4}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inject" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{injection} \coqdocvar{H}; \coqdoctac{intros} \coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3} \coqdocvar{X4} \coqdocvar{X5}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Inversion and Injection with Substitution --rough implementation}



 The tactics \coqdocvar{inversions} and \coqdocvar{injections} provided in this section
    are similar to \coqdocvar{inverts} and \coqdocvar{injects} except that they perform
    substitution on all equalities from the context and not only
    the ones freshly generated. The counterpart is that they have
    simpler implementations. 

 \coqdocvar{inversions} \coqdocvar{keep} \coqdocvariable{H} is the same as \coqdocvar{inversions} \coqdocvariable{H} but it does
    not clear hypothesis \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inversions" "keep" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{inversions} \coqdocvariable{H} is a shortcut for \coqdoctac{inversion} \coqdocvariable{H} followed by \coqdoctac{subst}
    and \coqdoctac{clear} \coqdocvariable{H}.
    It is a rough implementation of \coqdocvar{inverts} \coqdocvar{keep} \coqdocvariable{H} which behave
    badly when the proof context already contains equalities.
    It is provided in case the better implementation turns out to be
    too slow. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inversions" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{injections} \coqdocvar{keep} \coqdocvariable{H} is the same as \coqdoctac{injection} \coqdocvariable{H} followed
    by \coqdoctac{intros} and \coqdoctac{subst}. It is a rough implementation of
    \coqdocvar{injects} \coqdocvar{keep} \coqdocvariable{H} which behave
    badly when the proof context already contains equalities,
    or when the goal starts with a forall or an implication. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "injections" "keep" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{injection} \coqdocvar{H}; \coqdoctac{intros}; \coqdoctac{subst}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{injections} \coqdocvariable{H} is the same as \coqdoctac{injection} \coqdocvariable{H} followed
    by \coqdoctac{intros} and \coqdoctac{clear} \coqdocvariable{H} and \coqdoctac{subst}. It is a rough
    implementation of \coqdocvar{injects} \coqdocvar{keep} \coqdocvariable{H} which behave
    badly when the proof context already contains equalities,
    or when the goal starts with a forall or an implication. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "injections" "keep" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{injection} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}; \coqdoctac{intros}; \coqdoctac{subst}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Case Analysis}



 \coqdocvar{cases} is similar to \coqdocvar{case\_eq} \coqdocvar{E} except that it generates the
    equality in the context and not in the goal, and generates the
    equality the other way round. The syntax \coqdocvar{cases} \coqdocvar{E} \coqdockw{as} \coqdocvariable{H}
    allows specifying the name \coqdocvariable{H} of that hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "TEMP" \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}) \coqdoctac{in} *; \coqdocvar{def\_to\_eq\_sym} \coqdocvar{X} \coqdocvar{H} \coqdocvar{E};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "Eq" \coqdoctac{in} \coqdocvar{cases} \coqdocvar{E} \coqdockw{as} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{case\_if\_post} is to be defined later as a tactic to clean
    up goals. By defaults, it looks for obvious contradictions. 
    Currently, this tactic is extended in LibReflect to clean up
    boolean propositions. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{case\_if\_post} := \coqdocvar{tryfalse}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{case\_if} looks for a pattern of the form \coqdockw{if} ?\coqdocabbreviation{B} \coqdockw{then} ?\coqdocvar{E1} \coqdockw{else} ?\coqdocvar{E2}
    in the goal, and perform a case analysis on \coqdocabbreviation{B} by calling
    \coqdoctac{destruct} \coqdocabbreviation{B}. Subgoals containing a contradiction are discarded.
    \coqdocvar{case\_if} looks in the goal first, and otherwise in the
    first hypothesis that contains and \coqdockw{if} statement.
    \coqdocvar{case\_if} \coqdoctac{in} \coqdocvariable{H} can be used to specify which hypothesis to consider.
    Syntaxes \coqdocvar{case\_if} \coqdockw{as} \coqdocvar{Eq} and \coqdocvar{case\_if} \coqdoctac{in} \coqdocvariable{H} \coqdockw{as} \coqdocvar{Eq} allows to name
    the hypothesis coming from the case analysis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{case\_if\_on\_tactic\_core} \coqdocvar{E} \coqdocvar{Eq} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \{\coqdocvar{\_}\}+\{\coqdocvar{\_}\} \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{E} \coqdockw{as} [\coqdocvar{Eq} \ensuremath{|} \coqdocvar{Eq}]\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} \coqdoctac{in}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{sets\_eq} \ensuremath{\leftarrow} \coqdocvar{X} \coqdocvar{Eq}: \coqdocvar{E};\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{destruct} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{case\_if\_on\_tactic} \coqdocvar{E} \coqdocvar{Eq} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{case\_if\_on\_tactic\_core} \coqdocvar{E} \coqdocvar{Eq}; \coqdocvar{case\_if\_post}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_if\_on" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{case\_if\_on\_tactic} \coqdocvar{E} \coqdocvar{Eq}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_if" "as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\Rightarrow} \coqdocvar{case\_if\_on} \coqdocvar{B} \coqdockw{as} \coqdocvar{Eq}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{K}: \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{case\_if\_on} \coqdocvar{B} \coqdockw{as} \coqdocvar{Eq}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_if" "in" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdockw{with} \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{case\_if\_on} \coqdocvar{B} \coqdockw{as} \coqdocvar{Eq} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_if" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{Eq} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{case\_if} \coqdockw{as} \coqdocvar{Eq}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_if" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{Eq} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{case\_if} \coqdoctac{in} \coqdocvar{H} \coqdockw{as} \coqdocvar{Eq}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{cases\_if} is similar to \coqdocvar{case\_if} with two main differences:
    if it creates an equality of the form \coqdocabbreviation{x} = \coqdocabbreviation{y} and then 
    substitutes it in the goal \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{cases\_if\_on\_tactic\_core} \coqdocvar{E} \coqdocvar{Eq} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \{\coqdocvar{\_}\}+\{\coqdocvar{\_}\} \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{E} \coqdockw{as} [\coqdocvar{Eq}\ensuremath{|}\coqdocvar{Eq}]; \coqdoctac{try} \coqdocvar{subst\_hyp} \coqdocvar{Eq}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} \coqdoctac{in}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{sets\_eq} \ensuremath{\leftarrow} \coqdocvar{X} \coqdocvar{Eq}: \coqdocvar{E};\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{destruct} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{cases\_if\_on\_tactic} \coqdocvar{E} \coqdocvar{Eq} := \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases\_if\_on\_tactic\_core} \coqdocvar{E} \coqdocvar{Eq}; \coqdocvar{tryfalse}; \coqdocvar{case\_if\_post}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if\_on" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases\_if\_on\_tactic} \coqdocvar{E} \coqdocvar{Eq}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if" "as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\Rightarrow} \coqdocvar{cases\_if\_on} \coqdocvar{B} \coqdockw{as} \coqdocvar{Eq}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{K}: \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{cases\_if\_on} \coqdocvar{B} \coqdockw{as} \coqdocvar{Eq}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if" "in" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdockw{with} \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{cases\_if\_on} \coqdocvar{B} \coqdockw{as} \coqdocvar{Eq} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{Eq} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{cases\_if} \coqdockw{as} \coqdocvar{Eq}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{Eq} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{cases\_if} \coqdoctac{in} \coqdocvar{H} \coqdockw{as} \coqdocvar{Eq}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{case\_ifs} is like \coqdoctac{repeat} \coqdocvar{case\_if} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{case\_ifs\_core} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdocvar{case\_if}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_ifs" := \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{case\_ifs\_core}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{destruct\_if} looks for a pattern of the form \coqdockw{if} ?\coqdocabbreviation{B} \coqdockw{then} ?\coqdocvar{E1} \coqdockw{else} ?\coqdocvar{E2}
    in the goal, and perform a case analysis on \coqdocabbreviation{B} by calling
    \coqdoctac{destruct} \coqdocabbreviation{B}. It looks in the goal first, and otherwise in the
    first hypothesis that contains and \coqdockw{if} statement. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{destruct\_if\_post} := \coqdocvar{tryfalse}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_if"\coqdoceol
\coqdocindent{0.50em}
"as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq1}) \coqdocvar{simple\_intropattern}(\coqdocvar{Eq2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{B} \coqdockw{as} [\coqdocvar{Eq1}\ensuremath{|}\coqdocvar{Eq2}]\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{K}: \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{B} \coqdockw{as} [\coqdocvar{Eq1}\ensuremath{|}\coqdocvar{Eq2}]\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_if\_post}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_if" "in" \coqdocvar{hyp}(\coqdocvar{H})\coqdoceol
\coqdocindent{0.50em}
"as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq1}) \coqdocvar{simple\_intropattern}(\coqdocvar{Eq2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{H} \coqdockw{with} \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{B} \coqdockw{as} [\coqdocvar{Eq1}\ensuremath{|}\coqdocvar{Eq2}] \coqdockw{end};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_if\_post}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_if" "as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_if} \coqdockw{as} \coqdocvar{Eq} \coqdocvar{Eq}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_if" "in" \coqdocvar{hyp}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_if} \coqdoctac{in} \coqdocvar{H} \coqdockw{as} \coqdocvar{Eq} \coqdocvar{Eq}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_if" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{Eq} := \coqdoctac{fresh} "C" \coqdoctac{in} \coqdocvar{destruct\_if} \coqdockw{as} \coqdocvar{Eq} \coqdocvar{Eq}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_if" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{Eq} := \coqdoctac{fresh} "C" \coqdoctac{in} \coqdocvar{destruct\_if} \coqdoctac{in} \coqdocvar{H} \coqdockw{as} \coqdocvar{Eq} \coqdocvar{Eq}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
BROKEN since v8.5beta2.


    \coqdocvar{destruct\_head\_match} performs a case analysis on the argument
    of the head pattern matching when the goal has the form
    \coqdockw{match} ?\coqdocvar{E} \coqdockw{with} ... or \coqdockw{match} ?\coqdocvar{E} \coqdockw{with} ... = \coqdocvar{\_} or
    \coqdocvar{\_} = \coqdockw{match} ?\coqdocvar{E} \coqdockw{with} .... Due to the limits of Ltac, this tactic
    will not fail if a match does not occur. Instead, it might
    perform a case analysis on an unspecified subterm from the goal.
    Warning: experimental. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{find\_head\_match} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with} \coqdockw{context} [?\coqdocvar{E}] \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{E} \ensuremath{\Rightarrow} \coqdoctac{fail} 1\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(\coqdocvar{E})\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{destruct\_head\_match\_core} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} ?\coqdocvar{T1} = ?\coqdocvar{T2} \ensuremath{\Rightarrow} \coqdoctac{first} [ \coqdockw{let} \coqdocvar{E} := \coqdocvar{find\_head\_match} \coqdocvar{T1} \coqdoctac{in} \coqdocvar{cont} \coqdocvar{E}\coqdoceol
\coqdocindent{13.00em}
\ensuremath{|} \coqdockw{let} \coqdocvar{E} := \coqdocvar{find\_head\_match} \coqdocvar{T2} \coqdoctac{in} \coqdocvar{cont} \coqdocvar{E} ]\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} ?\coqdocvar{T1} \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{E} := \coqdocvar{find\_head\_match} \coqdocvar{T1} \coqdoctac{in} \coqdocvar{cont} \coqdocvar{E}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_if\_post}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_head\_match" "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_head\_match\_core} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{E} \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{E} \coqdockw{as} \coqdocvar{I}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_head\_match" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_head\_match\_core} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{E} \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{E}).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{cases'} \coqdocvar{E} is similar to \coqdocvar{case\_eq} \coqdocvar{E} except that it generates the
    equality in the context and not in the goal. The syntax \coqdocvar{cases} \coqdocvar{E} \coqdockw{as} \coqdocvariable{H}
    allows specifying the name \coqdocvariable{H} of that hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases'" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} "TEMP" \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{set} (\coqdocvar{X} := \coqdocvar{E}) \coqdoctac{in} *; \coqdocvar{def\_to\_eq} \coqdocvar{X} \coqdocvar{H} \coqdocvar{E};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases'" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{x} := \coqdoctac{fresh} "Eq" \coqdoctac{in} \coqdocvar{cases'} \coqdocvar{E} \coqdockw{as} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{cases\_if'} is similar to \coqdocvar{cases\_if} except that it generates
    the symmetric equality. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{cases\_if\_on'} \coqdocvar{E} \coqdocvar{Eq} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{E} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \{\coqdocvar{\_}\}+\{\coqdocvar{\_}\} \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{E} \coqdockw{as} [\coqdocvar{Eq}\ensuremath{|}\coqdocvar{Eq}]; \coqdoctac{try} \coqdocvar{subst\_hyp} \coqdocvar{Eq}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{X} := \coqdoctac{fresh} \coqdoctac{in}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{sets\_eq} \coqdocvar{X} \coqdocvar{Eq}: \coqdocvar{E};\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{destruct} \coqdocvar{X}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}; \coqdocvar{case\_if\_post}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if'" "as" \coqdocvar{simple\_intropattern}(\coqdocvar{Eq}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\Rightarrow} \coqdocvar{cases\_if\_on'} \coqdocvar{B} \coqdocvar{Eq}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{K}: \coqdockw{context} [\coqdockw{if} ?\coqdocvar{B} \coqdockw{then} \coqdocvar{\_} \coqdockw{else} \coqdocvar{\_}] \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{cases\_if\_on'} \coqdocvar{B} \coqdocvar{Eq}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if'" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{Eq} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{cases\_if'} \coqdockw{as} \coqdocvar{Eq}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Induction}



 \coqdocvar{inductions} \coqdocvar{E} is a shorthand for \coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E}.
    \coqdocvar{inductions} \coqdocvar{E} \coqdocvar{gen} \coqdocvar{X1} .. \coqdocvar{XN} is a shorthand for
    \coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E} \coqdocvar{generalizing} \coqdocvar{X1} .. \coqdocvar{XN}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Program.Equality}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{inductions\_post} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{eq'} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "inductions" \coqdocvar{ident}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E}; \coqdocvar{inductions\_post}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inductions" \coqdocvar{ident}(\coqdocvar{E}) "gen" \coqdocvar{ident}(\coqdocvar{X1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E} \coqdocvar{generalizing} \coqdocvar{X1}; \coqdocvar{inductions\_post}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inductions" \coqdocvar{ident}(\coqdocvar{E}) "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E} \coqdocvar{generalizing} \coqdocvar{X1} \coqdocvar{X2}; \coqdocvar{inductions\_post}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inductions" \coqdocvar{ident}(\coqdocvar{E}) "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E} \coqdocvar{generalizing} \coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3}; \coqdocvar{inductions\_post}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inductions" \coqdocvar{ident}(\coqdocvar{E}) "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E} \coqdocvar{generalizing} \coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3} \coqdocvar{X4}; \coqdocvar{inductions\_post}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inductions" \coqdocvar{ident}(\coqdocvar{E}) "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E} \coqdocvar{generalizing} \coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3} \coqdocvar{X4} \coqdocvar{X5}; \coqdocvar{inductions\_post}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inductions" \coqdocvar{ident}(\coqdocvar{E}) "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5}) \coqdocvar{ident}(\coqdocvar{X6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E} \coqdocvar{generalizing} \coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3} \coqdocvar{X4} \coqdocvar{X5} \coqdocvar{X6}; \coqdocvar{inductions\_post}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inductions" \coqdocvar{ident}(\coqdocvar{E}) "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5}) \coqdocvar{ident}(\coqdocvar{X6}) \coqdocvar{ident}(\coqdocvar{X7}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E} \coqdocvar{generalizing} \coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3} \coqdocvar{X4} \coqdocvar{X5} \coqdocvar{X6} \coqdocvar{X7}; \coqdocvar{inductions\_post}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inductions" \coqdocvar{ident}(\coqdocvar{E}) "gen" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) \coqdocvar{ident}(\coqdocvar{X5}) \coqdocvar{ident}(\coqdocvar{X6}) \coqdocvar{ident}(\coqdocvar{X7}) \coqdocvar{ident}(\coqdocvar{X8}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{dependent} \coqdoctac{induction} \coqdocvar{E} \coqdocvar{generalizing} \coqdocvar{X1} \coqdocvar{X2} \coqdocvar{X3} \coqdocvar{X4} \coqdocvar{X5} \coqdocvar{X6} \coqdocvar{X7} \coqdocvar{X8}; \coqdocvar{inductions\_post}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{induction\_wf} \coqdocvar{IH}: \coqdocvar{E} \coqdocdefinition{X} is used to apply the well-founded induction
    principle, for a given well-founded relation. It applies to a goal
    \coqdocvar{PX} where \coqdocvar{PX} is a proposition on \coqdocdefinition{X}. First, it sets up the
    goal in the form (\coqdockw{fun} \coqdocabbreviation{a} \ensuremath{\Rightarrow} \coqdocaxiom{P} \coqdocabbreviation{a}) \coqdocdefinition{X}, using \coqdoctac{pattern} \coqdocdefinition{X}, and then
    it applies the well-founded induction principle instantiated on \coqdocvar{E},
    where \coqdocvar{E} is a term of type \coqdocvar{well\_founded} \coqdocdefinition{R}, and \coqdocdefinition{R} is a binary
    relation.
    Syntaxes \coqdocvar{induction\_wf}: \coqdocvar{E} \coqdocdefinition{X} and \coqdocvar{induction\_wf} \coqdocvar{E} \coqdocdefinition{X}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "induction\_wf" \coqdocvar{ident}(\coqdocvar{IH}) ":" \coqdockw{constr}(\coqdocvar{E}) \coqdocvar{ident}(\coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{pattern} \coqdocvar{X}; \coqdoctac{apply} (\coqdocvar{well\_founded\_ind} \coqdocvar{E}); \coqdoctac{clear} \coqdocvar{X}; \coqdoctac{intros} \coqdocvar{X} \coqdocvar{IH}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "induction\_wf" ":" \coqdockw{constr}(\coqdocvar{E}) \coqdocvar{ident}(\coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{IH} := \coqdoctac{fresh} "IH" \coqdoctac{in} \coqdocvar{induction\_wf} \coqdocvar{IH}: \coqdocvar{E} \coqdocvar{X}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "induction\_wf" ":" \coqdockw{constr}(\coqdocvar{E}) \coqdocvar{ident}(\coqdocvar{X}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{induction\_wf}: \coqdocvar{E} \coqdocvar{X}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Induction on the height of a derivation: the helper tactic
    \coqdocvar{induct\_height} helps proving the equivalence of the auxiliary 
    judgment that includes a counter for the maximal height
    (see LibTacticsDemos for an example) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Compare\_dec} \coqdocvar{Omega}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{induct\_height\_max2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n1} \coqdocvar{n2} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{n}, \coqdocvar{n1} < \coqdocvar{n} \ensuremath{\land} \coqdocvar{n2} < \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{using}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{destruct} (\coqdocvar{lt\_dec} \coqdocvar{n1} \coqdocvar{n2}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{S} \coqdocvar{n2}). \coqdoctac{omega}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{S} \coqdocvar{n1}). \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{induct\_height\_step} \coqdocvar{x} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H}: \coqdoctac{\ensuremath{\exists}} \coqdocvar{\_}, \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow}  \coqdoceol
\coqdocindent{2.50em}
\coqdockw{let} \coqdocvar{n} := \coqdoctac{fresh} "n" \coqdoctac{in} \coqdockw{let} \coqdocvar{y} := \coqdoctac{fresh} "x" \coqdoctac{in}\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{destruct} \coqdocvar{H} \coqdockw{as} [\coqdocvar{n} ?]; \coqdoceol
\coqdocindent{2.50em}
\coqdocvar{forwards} (\coqdocvar{y}\&?\&?): \coqdocvar{induct\_height\_max2} \coqdocvar{n} \coqdocvar{x};\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{induct\_height\_step} \coqdocvar{y}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{\ensuremath{\exists}} (\coqdocvar{S} \coqdocvar{x}); \coqdoctac{eauto}\coqdoceol
\coqdocindent{0.50em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{induct\_height} := \coqdocvar{induct\_height\_step} \coqdocvar{O}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Coinduction}



 Tactic \coqdocvar{cofixs} \coqdocvar{IH} is like \coqdockw{cofix} \coqdocvar{IH} except that the
    coinduction hypothesis is tagged in the form \coqdocvar{IH}: \coqdocdefinition{COIND} \coqdocaxiom{P}
    instead of being just \coqdocvar{IH}: \coqdocaxiom{P}. This helps other tactics
    clearing the coinduction hypothesis using \coqdocvar{clear\_coind} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{COIND} (\coqdocvar{P}:\coqdockw{Prop}) := \coqdocvar{P}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cofixs" \coqdocvar{ident}(\coqdocvar{IH}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{cofix} \coqdocvar{IH}; \coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{IH} \coqdockw{with} ?\coqdocvar{P} \ensuremath{\Rightarrow} \coqdoctac{change} \coqdocvar{P} \coqdockw{with} (\coqdocvar{COIND} \coqdocvar{P}) \coqdoctac{in} \coqdocvar{IH} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Tactic \coqdocvar{clear\_coind} clears all the coinduction hypotheses,
    assuming that they have been tagged \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{clear\_coind} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: \coqdocvar{COIND} \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{clear} \coqdocvar{H} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Tactic \coqdocvar{abstracts} \coqdocvar{tac} is like \coqdoctac{abstract} \coqdocvar{tac} except that
    it clears the coinduction hypotheses so that the productivity
    check will be happy. For example, one can use \coqdocvar{abstracts} \coqdoctac{omega}
    to obtain the same behavior as \coqdoctac{omega} but with an auxiliary
    lemma being generated. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "abstracts" \coqdocvar{tactic}(\coqdocvar{tac}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clear\_coind}; \coqdocvar{tac}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Decidable Equality}



 \coqdocvar{decides\_equality} is the same as \coqdocvar{decide} \coqdocvar{equality} excepts that it
    is able to unfold definitions at head of the current goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{decides\_equality\_tactic} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first} [ \coqdocvar{decide} \coqdocvar{equality} \ensuremath{|} \coqdoctac{progress}(\coqdocvar{unfolds}); \coqdocvar{decides\_equality\_tactic} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "decides\_equality" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{decides\_equality\_tactic}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Equivalence}



 \coqdocdefinition{iff} \coqdocvariable{H} can be used to prove an equivalence \coqdocaxiom{P} \ensuremath{\leftrightarrow} \coqdocvariable{Q} and name \coqdocvariable{H}
    the hypothesis obtained in each case. The syntaxes \coqdocdefinition{iff} and \coqdocdefinition{iff} \coqdocvar{H1} \coqdocvar{H2}
    are also available to specify zero or two names. The tactic \coqdocdefinition{iff} \ensuremath{\leftarrow} \coqdocvariable{H}
    swaps the two subgoals, i.e., produces (Q -> P) as first subgoal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{iff\_intro\_swap} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{Q} \ensuremath{\rightarrow} \coqdocvar{P}) \ensuremath{\rightarrow} (\coqdocvar{P} \ensuremath{\rightarrow} \coqdocvar{Q}) \ensuremath{\rightarrow} (\coqdocvar{P} \ensuremath{\leftrightarrow} \coqdocvar{Q}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{using}. \coqdoctac{intuition}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "iff" \coqdocvar{simple\_intropattern}(\coqdocvar{H1}) \coqdocvar{simple\_intropattern}(\coqdocvar{H2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; [ \coqdoctac{intros} \coqdocvar{H1} \ensuremath{|} \coqdoctac{intros} \coqdocvar{H2} ].\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "iff" \coqdocvar{simple\_intropattern}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{iff} \coqdocvar{H} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "iff" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "H" \coqdoctac{in} \coqdocvar{iff} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "iff" "<-" \coqdocvar{simple\_intropattern}(\coqdocvar{H1}) \coqdocvar{simple\_intropattern}(\coqdocvar{H2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{iff\_intro\_swap}; [ \coqdoctac{intros} \coqdocvar{H1} \ensuremath{|} \coqdoctac{intros} \coqdocvar{H2} ].\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "iff" "<-" \coqdocvar{simple\_intropattern}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{iff} \ensuremath{\leftarrow} \coqdocvar{H} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "iff" "<-" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "H" \coqdoctac{in} \coqdocvar{iff} \ensuremath{\leftarrow} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{N-ary Conjunctions and Disjunctions}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
N-ary Conjunctions Splitting in Goals 

 Underlying implementation of \coqdocvar{splits}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{splits\_tactic} \coqdocvar{N} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{N} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdoctac{fail}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} \coqdocvar{O} \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} ?\coqdocvar{N'} \ensuremath{\Rightarrow} \coqdoctac{split}; [| \coqdocvar{splits\_tactic} \coqdocvar{N'}]\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{unfold\_goal\_until\_conjunction} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{progress}(\coqdocvar{unfolds}); \coqdocvar{unfold\_goal\_until\_conjunction}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{get\_term\_conjunction\_arity} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(8)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(7)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(6)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(5)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(4)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(3)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(2)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\rightarrow} ?\coqdocvar{T'} \ensuremath{\Rightarrow} \coqdocvar{get\_term\_conjunction\_arity} \coqdocvar{T'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{P} := \coqdocvar{get\_head} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{let} \coqdocvar{T'} := \coqdoctac{eval} \coqdoctac{unfold} \coqdocvar{P} \coqdoctac{in} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{match} \coqdocvar{T'} \coqdockw{with}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{T} \ensuremath{\Rightarrow} \coqdoctac{fail} 1\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{get\_term\_conjunction\_arity} \coqdocvar{T'}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{4.50em}
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{get\_goal\_conjunction\_arity} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{T} \ensuremath{\Rightarrow} \coqdocvar{get\_term\_conjunction\_arity} \coqdocvar{T} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{splits} applies to a goal of the form (\coqdocvariable{T1} \ensuremath{\land} .. \ensuremath{\land} \coqdocvar{TN}) and
    destruct it into \coqdocvar{N} subgoals \coqdocvariable{T1} .. \coqdocvar{TN}. If the goal is not a
    conjunction, then it unfolds the head definition. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "splits" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfold\_goal\_until\_conjunction};\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{N} := \coqdocvar{get\_goal\_conjunction\_arity} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{splits\_tactic} \coqdocvar{N}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{splits} \coqdocvar{N} is similar to \coqdocvar{splits}, except that it will unfold as many
    definitions as necessary to obtain an \coqdocvar{N}-ary conjunction. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "splits" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{N} := \coqdocvar{nat\_from\_number} \coqdocvar{N} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{splits\_tactic} \coqdocvar{N}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{splits\_all} will recursively split any conjunction, unfolding
    definitions when necessary. Warning: this tactic will loop
    on goals of the form \coqdocvar{well\_founded} \coqdocdefinition{R}. Todo: fix this \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{splits\_all\_base} := \coqdoctac{repeat} \coqdoctac{split}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "splits\_all" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{splits\_all\_base}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
N-ary Conjunctions Deconstruction 

 Underlying implementation of \coqdocvar{destructs}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{destructs\_conjunction\_tactic} \coqdocvar{N} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{N} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 2 \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{T} \coqdockw{as} [? ?]\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 3 \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{T} \coqdockw{as} [? [? ?]]\coqdoceol
  \ensuremath{|} 4 \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{T} \coqdockw{as} [? [? [? ?]]]\coqdoceol
  \ensuremath{|} 5 \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{T} \coqdockw{as} [? [? [? [? ?]]]]\coqdoceol
  \ensuremath{|} 6 \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{T} \coqdockw{as} [? [? [? [? [? ?]]]]]\coqdoceol
  \ensuremath{|} 7 \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{T} \coqdockw{as} [? [? [? [? [? [? ?]]]]]]\coqdoceol
  \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{destructs} \coqdocdefinition{T} allows destructing a term \coqdocdefinition{T} which is a N-ary
    conjunction. It is equivalent to \coqdoctac{destruct} \coqdocdefinition{T} \coqdockw{as} (\coqdocvar{H1} .. \coqdocvar{HN}),
    except that it does not require to manually specify N different
    names. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destructs" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{TT} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{N} := \coqdocvar{get\_term\_conjunction\_arity} \coqdocvar{TT} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destructs\_conjunction\_tactic} \coqdocvar{N} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{destructs} \coqdocvar{N} \coqdocdefinition{T} is equivalent to \coqdoctac{destruct} \coqdocdefinition{T} \coqdockw{as} (\coqdocvar{H1} .. \coqdocvar{HN}),
    except that it does not require to manually specify N different
    names. Remark that it is not restricted to N-ary conjunctions. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destructs" \coqdockw{constr}(\coqdocvar{N}) \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{N} := \coqdocvar{nat\_from\_number} \coqdocvar{N} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destructs\_conjunction\_tactic} \coqdocvar{N} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Proving goals which are N-ary disjunctions 

 Underlying implementation of \coqdocvar{branch}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{branch\_tactic} \coqdocvar{K} \coqdocvar{N} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{constr}:((\coqdocvar{K},\coqdocvar{N})) \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{\_},0) \ensuremath{\Rightarrow} \coqdoctac{fail} 1\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (0,\coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{fail} 1\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (1,1) \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (1,\coqdocvar{\_}) \ensuremath{\Rightarrow} \coqdoctac{left}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{S} ?\coqdocvar{K'}, \coqdocvar{S} ?\coqdocvar{N'}) \ensuremath{\Rightarrow} \coqdoctac{right}; \coqdocvar{branch\_tactic} \coqdocvar{K'} \coqdocvar{N'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{unfold\_goal\_until\_disjunction} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{progress}(\coqdocvar{unfolds}); \coqdocvar{unfold\_goal\_until\_disjunction}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{get\_term\_disjunction\_arity} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(8)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(7)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(6)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(5)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(4)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(3)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\lor} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(2)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\rightarrow} ?\coqdocvar{T'} \ensuremath{\Rightarrow} \coqdocvar{get\_term\_disjunction\_arity} \coqdocvar{T'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{P} := \coqdocvar{get\_head} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{let} \coqdocvar{T'} := \coqdoctac{eval} \coqdoctac{unfold} \coqdocvar{P} \coqdoctac{in} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{match} \coqdocvar{T'} \coqdockw{with}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{T} \ensuremath{\Rightarrow} \coqdoctac{fail} 1\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{get\_term\_disjunction\_arity} \coqdocvar{T'}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{get\_goal\_disjunction\_arity} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{T} \ensuremath{\Rightarrow} \coqdocvar{get\_term\_disjunction\_arity} \coqdocvar{T} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{branch} \coqdocvar{N} applies to a goal of the form
    \coqdocvariable{P1} \ensuremath{\lor} ... \ensuremath{\lor} \coqdocvar{PK} \ensuremath{\lor} ... \ensuremath{\lor} \coqdocvar{PN} and leaves the goal \coqdocvar{PK}.
    It only able to unfold the head definition (if there is one),
    but for more complex unfolding one should use the tactic
    \coqdocvar{branch} \coqdocvar{K} \coqdocvar{of} \coqdocvar{N}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "branch" \coqdockw{constr}(\coqdocvar{K}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{K} := \coqdocvar{nat\_from\_number} \coqdocvar{K} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfold\_goal\_until\_disjunction};\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{N} := \coqdocvar{get\_goal\_disjunction\_arity} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{branch\_tactic} \coqdocvar{K} \coqdocvar{N}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{branch} \coqdocvar{K} \coqdocvar{of} \coqdocvar{N} is similar to \coqdocvar{branch} \coqdocvar{K} except that the
    arity of the disjunction \coqdocvar{N} is given manually, and so this
    version of the tactic is able to unfold definitions.
    In other words, applies to a goal of the form
    \coqdocvariable{P1} \ensuremath{\lor} ... \ensuremath{\lor} \coqdocvar{PK} \ensuremath{\lor} ... \ensuremath{\lor} \coqdocvar{PN} and leaves the goal \coqdocvar{PK}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "branch" \coqdockw{constr}(\coqdocvar{K}) "of" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{N} := \coqdocvar{nat\_from\_number} \coqdocvar{N} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{K} := \coqdocvar{nat\_from\_number} \coqdocvar{K} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{branch\_tactic} \coqdocvar{K} \coqdocvar{N}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
N-ary Disjunction Deconstruction 

 Underlying implementation of \coqdocvar{branches}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{destructs\_disjunction\_tactic} \coqdocvar{N} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{N} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 2 \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{T} \coqdockw{as} [? \ensuremath{|} ?]\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 3 \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{T} \coqdockw{as} [? \ensuremath{|} [? \ensuremath{|} ?]]\coqdoceol
  \ensuremath{|} 4 \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{T} \coqdockw{as} [? \ensuremath{|} [? \ensuremath{|} [? \ensuremath{|} ?]]]\coqdoceol
  \ensuremath{|} 5 \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{T} \coqdockw{as} [? \ensuremath{|} [? \ensuremath{|} [? \ensuremath{|} [? \ensuremath{|} ?]]]]\coqdoceol
  \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{branches} \coqdocdefinition{T} allows destructing a term \coqdocdefinition{T} which is a N-ary
    disjunction. It is equivalent to \coqdoctac{destruct} \coqdocdefinition{T} \coqdockw{as} [ \coqdocvar{H1} \ensuremath{|} .. \ensuremath{|} \coqdocvar{HN} ] ,
    and produces \coqdocvar{N} subgoals corresponding to the \coqdocvar{N} possible cases. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "branches" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{TT} := \coqdocvar{type} \coqdocvar{of} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{N} := \coqdocvar{get\_term\_disjunction\_arity} \coqdocvar{TT} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destructs\_disjunction\_tactic} \coqdocvar{N} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{branches} \coqdocvar{N} \coqdocdefinition{T} is the same as \coqdocvar{branches} \coqdocdefinition{T} except that the arity is
    forced to \coqdocvar{N}. This version is useful to unfold definitions
    on the fly. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "branches" \coqdockw{constr}(\coqdocvar{N}) \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{N} := \coqdocvar{nat\_from\_number} \coqdocvar{N} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destructs\_disjunction\_tactic} \coqdocvar{N} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
N-ary Existentials \begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{get\_term\_existential\_arity} \coqdocvar{T} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{\ensuremath{\exists}} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \coqdocvar{x5} \coqdocvar{x6} \coqdocvar{x7} \coqdocvar{x8}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(8)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{\ensuremath{\exists}} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \coqdocvar{x5} \coqdocvar{x6} \coqdocvar{x7}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(7)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{\ensuremath{\exists}} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \coqdocvar{x5} \coqdocvar{x6}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(6)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{\ensuremath{\exists}} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4} \coqdocvar{x5}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(5)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{\ensuremath{\exists}} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3} \coqdocvar{x4}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(4)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{\ensuremath{\exists}} \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{x3}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(3)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{\ensuremath{\exists}} \coqdocvar{x1} \coqdocvar{x2}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(2)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdoctac{\ensuremath{\exists}} \coqdocvar{x1}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{constr}:(1)\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\rightarrow} ?\coqdocvar{T'} \ensuremath{\Rightarrow} \coqdocvar{get\_term\_existential\_arity} \coqdocvar{T'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdockw{let} \coqdocvar{P} := \coqdocvar{get\_head} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{let} \coqdocvar{T'} := \coqdoctac{eval} \coqdoctac{unfold} \coqdocvar{P} \coqdoctac{in} \coqdocvar{T} \coqdoctac{in}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{match} \coqdocvar{T'} \coqdockw{with}\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{T} \ensuremath{\Rightarrow} \coqdoctac{fail} 1\coqdoceol
\coqdocindent{4.50em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{get\_term\_existential\_arity} \coqdocvar{T'}\coqdoceol
\coqdocindent{4.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{get\_goal\_existential\_arity} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{T} \ensuremath{\Rightarrow} \coqdocvar{get\_term\_existential\_arity} \coqdocvar{T} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdoctac{\ensuremath{\exists}} \coqdocvariable{T1} ... \coqdocvar{TN} is a shorthand for \coqdoctac{\ensuremath{\exists}} \coqdocvariable{T1}; ...; \coqdoctac{\ensuremath{\exists}} \coqdocvar{TN}.
    It is intended to prove goals of the form \coqdocvar{exist} \coqdocvar{X1} .. \coqdocvar{XN}, \coqdocaxiom{P}.
    If an argument provided is \coqdocvar{\_\_} (double underscore), then an
    evar is introduced. \coqdoctac{\ensuremath{\exists}} \coqdocvariable{T1} .. \coqdocvar{TN} \coqdocvar{\_\_\_} is equivalent to
    \coqdoctac{\ensuremath{\exists}} \coqdocvariable{T1} .. \coqdocvar{TN} \coqdocvar{\_\_} \coqdocvar{\_\_} \coqdocvar{\_\_} with as many \coqdocvar{\_\_} as possible. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "exists\_original" \coqdockw{constr}(\coqdocvar{T1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" \coqdockw{constr}(\coqdocvar{T1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{T1} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ltac\_wild} \ensuremath{\Rightarrow} \coqdocvar{esplit}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ltac\_wilds} \ensuremath{\Rightarrow} \coqdoctac{repeat} \coqdocvar{esplit}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T2}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T3}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) \coqdockw{constr}(\coqdocvar{T4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T2}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T3}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T4}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) \coqdockw{constr}(\coqdocvar{T4})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{T5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T2}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T3}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T4}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T5}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) \coqdockw{constr}(\coqdocvar{T4})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{T5}) \coqdockw{constr}(\coqdocvar{T6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T2}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T3}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T4}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T5}; \coqdoctac{\ensuremath{\exists}} \coqdocvar{T6}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "exists\_\_\_" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{rec} \coqdocvar{aux} \coqdocvar{N} :=\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{N} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{S} ?\coqdocvar{N'} \ensuremath{\Rightarrow} \coqdocvar{esplit}; \coqdocvar{aux} \coqdocvar{N'}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{N} := \coqdocvar{nat\_from\_number} \coqdocvar{N} \coqdoctac{in} \coqdocvar{aux} \coqdocvar{N}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "exists\_\_\_" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{N} := \coqdocvar{get\_goal\_existential\_arity} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{exists\_\_\_} \coqdocvar{N}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" := \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{exists\_\_\_}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "exists\_all" := \coqdocvar{exists\_\_\_}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Existentials and conjunctions in hypotheses 

 \coqdocvar{unpack} or \coqdocvar{unpack} \coqdocvariable{H} destructs conjunctions and existentials in
    all or one hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{unpack\_core} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H}: \coqdocvar{\_} \ensuremath{\land} \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H}: \coqdoctac{\ensuremath{\exists}} \coqdocvar{a}, \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{destruct} \coqdocvar{H}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{unpack\_from} \coqdocvar{H} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first} [ \coqdoctac{progress} (\coqdocvar{unpack\_core})\coqdoceol
\coqdocindent{4.00em}
\ensuremath{|} \coqdoctac{destruct} \coqdocvar{H}; \coqdocvar{unpack\_core} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "unpack" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unpack\_core}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unpack" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unpack\_from} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Tactics to Prove Typeclass Instances}



 \coqdocvar{typeclass} is an automation tactic specialized for finding
    typeclass instances. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "typeclass" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{go} \coqdocvar{\_} := \coqdoctac{eauto} \coqdockw{with} \coqdocvar{typeclass\_instances} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{solve} [ \coqdocvar{go} \coqdocvar{tt} \ensuremath{|} \coqdoctac{constructor}; \coqdocvar{go} \coqdocvar{tt} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{solve\_typeclass} is a simpler version of \coqdocvar{typeclass}, to use
    in hint tactics for resolving instances \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "solve\_typeclass" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{solve} [ \coqdoctac{eauto} \coqdockw{with} \coqdocvar{typeclass\_instances} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Tactics to Invoke Automation}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Definitions for Parsing Compatibility}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "f\_equal" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{f\_equal}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "constructor" := \coqdoceol
\coqdocindent{1.00em}
\coqdoctac{constructor}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "simple" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "split" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "right" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{right}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "left" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{left}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{\texorpdfstring{\protect}{hint}\coqdocvar{hint} to Add Hints Local to a Lemma}



 \coqdocvar{hint} \coqdocvar{E} adds \coqdocvar{E} as an hypothesis so that automation can use it.
    Syntax \coqdocvar{hint} \coqdocvar{E1},..,\coqdocvar{EN} is available \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "hint" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "Hint" \coqdoctac{in} \coqdocvar{lets} \coqdocvar{H}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "hint" \coqdockw{constr}(\coqdocvar{E1}) "," \coqdockw{constr}(\coqdocvar{E2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{hint} \coqdocvar{E1}; \coqdocvar{hint} \coqdocvar{E2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "hint" \coqdockw{constr}(\coqdocvar{E1}) "," \coqdockw{constr}(\coqdocvar{E2}) "," \coqdockw{constr}(\coqdocvar{E3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{hint} \coqdocvar{E1}; \coqdocvar{hint} \coqdocvar{E2}; \coqdocvar{hint}(\coqdocvar{E3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "hint" \coqdockw{constr}(\coqdocvar{E1}) "," \coqdockw{constr}(\coqdocvar{E2}) "," \coqdockw{constr}(\coqdocvar{E3}) "," \coqdockw{constr}(\coqdocvar{E4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{hint} \coqdocvar{E1}; \coqdocvar{hint} \coqdocvar{E2}; \coqdocvar{hint}(\coqdocvar{E3}); \coqdocvar{hint}(\coqdocvar{E4} ).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{\texorpdfstring{\protect}{jauto}\coqdocvar{jauto}, a New Automation Tactic}



 \coqdocvar{jauto} is better at \coqdoctac{intuition} \coqdoctac{eauto} because it can open existentials
    from the context. In the same time, \coqdocvar{jauto} can be faster than
    \coqdoctac{intuition} \coqdoctac{eauto} because it does not destruct disjunctions from the
    context. The strategy of \coqdocvar{jauto} can be summarized as follows:

\begin{itemize}
\item  open all the existentials and conjunctions from the context

\item  call esplit and split on the existentials and conjunctions in the goal

\item  call eauto. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "jauto" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdoctac{solve} [ \coqdocvar{jauto\_set}; \coqdoctac{eauto} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "jauto\_fast" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdoctac{solve} [ \coqdoctac{auto} \ensuremath{|} \coqdoctac{eauto} \ensuremath{|} \coqdocvar{jauto} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{iauto} is a shorthand for \coqdoctac{intuition} \coqdoctac{eauto} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "iauto" := \coqdoctac{try} \coqdoctac{solve} [\coqdoctac{intuition} \coqdoctac{eauto}].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Definitions of Automation Tactics}



 The two following tactics defined the default behaviour of
    ``light automation'' and ``strong automation''. These tactics
    may be redefined at any time using the syntax \coqdockw{Ltac} .. ::= ... 

 \coqdocvar{auto\_tilde} is the tactic which will be called each time a symbol
    \ensuremath{\lnot} is used after a tactic. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{auto\_tilde\_default} := \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{auto\_tilde} := \coqdocvar{auto\_tilde\_default}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{auto\_star} is the tactic which will be called each time a symbol
    \ensuremath{\times} is used after a tactic. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{auto\_star\_default} := \coqdoctac{try} \coqdoctac{solve} [ \coqdocvar{jauto} ].\coqdoceol
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{auto\_star} := \coqdocvar{auto\_star\_default}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{autos}\ensuremath{\lnot} is a notation for tactic \coqdocvar{auto\_tilde}. It may be followed
    by lemmas (or proofs terms) which auto will be able to use
    for solving the goal.  \coqdocvar{autos} is an alias for \coqdocvar{autos}\ensuremath{\lnot} \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "autos" := \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "autos" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "autos" "\~{}" \coqdockw{constr}(\coqdocvar{E1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E1}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "autos" "\~{}" \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E1}; \coqdocvar{lets}: \coqdocvar{E2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "autos" "\~{}" \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) \coqdockw{constr}(\coqdocvar{E3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E1}; \coqdocvar{lets}: \coqdocvar{E2}; \coqdocvar{lets}: \coqdocvar{E3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{autos}\ensuremath{\times} is a notation for tactic \coqdocvar{auto\_star}. It may be followed
    by lemmas (or proofs terms) which auto will be able to use
    for solving the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "autos" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "autos" "*" \coqdockw{constr}(\coqdocvar{E1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E1}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "autos" "*" \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E1}; \coqdocvar{lets}: \coqdocvar{E2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "autos" "*" \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) \coqdockw{constr}(\coqdocvar{E3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E1}; \coqdocvar{lets}: \coqdocvar{E2}; \coqdocvar{lets}: \coqdocvar{E3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{auto\_false} is a version of \coqdoctac{auto} able to spot some contradictions.
    There is an ad-hoc support for goals in \ensuremath{\leftrightarrow}: split is called first.
    \coqdocvar{auto\_false}\ensuremath{\lnot} and \coqdocvar{auto\_false}\ensuremath{\times} are also available. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{auto\_false\_base} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdoctac{solve} [ \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{intros\_all}; \coqdoctac{try} \coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\leftrightarrow} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{split} \coqdockw{end};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{solve} [ \coqdocvar{cont} \coqdocvar{tt} \ensuremath{|} \coqdocvar{intros\_all}; \coqdocvar{false}; \coqdocvar{cont} \coqdocvar{tt} ] ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "auto\_false" :=\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{auto\_false\_base} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{tt} \ensuremath{\Rightarrow} \coqdoctac{auto}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "auto\_false" "\~{}" :=\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{auto\_false\_base} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{tt} \ensuremath{\Rightarrow} \coqdocvar{auto\_tilde}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "auto\_false" "*" :=\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{auto\_false\_base} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{tt} \ensuremath{\Rightarrow} \coqdocvar{auto\_star}).\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\subsection{Parsing for Light Automation}



 Any tactic followed by the symbol \ensuremath{\lnot} will have \coqdocvar{auto\_tilde} called
    on all of its subgoals. Three exceptions:

\begin{itemize}
\item  \coqdocvar{cuts} and \coqdocvar{asserts} only call \coqdoctac{auto} on their first subgoal,

\item  \coqdoctac{apply}\ensuremath{\lnot} relies on \coqdocvar{sapply} rather than \coqdoctac{apply},

\item  \coqdocvar{tryfalse}\ensuremath{\lnot} is defined as \coqdocvar{tryfalse} \coqdoctac{by} \coqdocvar{auto\_tilde}.

\end{itemize}


   Some builtin tactics are not defined using tactic notations
   and thus cannot be extended, e.g., \coqdoctac{simpl} and \coqdoctac{unfold}.
   For these, notation such as \coqdoctac{simpl}\ensuremath{\lnot} will not be available. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{equates} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" "\~{}" \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates} \coqdocvar{n1} \coqdocvar{n2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" "\~{}" \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates} \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" "\~{}" \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) \coqdockw{constr}(\coqdocvar{n4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates} \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3} \coqdocvar{n4}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" "\~{}" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" "\~{}" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} \coqdocvar{n1} \coqdocvar{n2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" "\~{}" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" "\~{}" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) \coqdockw{constr}(\coqdocvar{n4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3} \coqdocvar{n4}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "apply" "\~{}" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sapply} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct" "\~{}" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct" "\~{}" \coqdockw{constr}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{H} \coqdockw{as} \coqdocvar{I}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "f\_equal" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{f\_equal}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "induction" "\~{}" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inversion" "\~{}" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "split" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "subst" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{subst}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "right" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{right}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "left" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{left}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "constructor" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{constructor}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "constructors" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{constructors}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false\_then} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{auto\_tilde}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "\~{}" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{E1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}\ensuremath{\lnot} (>> \coqdocvar{E0} \coqdocvar{E1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "\~{}" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}\ensuremath{\lnot} (>> \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "\~{}" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) \coqdockw{constr}(\coqdocvar{E3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}\ensuremath{\lnot} (>> \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "\~{}" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) \coqdockw{constr}(\coqdocvar{E3}) \coqdockw{constr}(\coqdocvar{E4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}\ensuremath{\lnot} (>> \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3} \coqdocvar{E4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "tryfalse" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdoctac{solve} [ \coqdocvar{false}\ensuremath{\lnot} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{H}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts} \coqdocvar{H}: \coqdocvar{E}; [ \coqdocvar{auto\_tilde} \ensuremath{|} \coqdoctac{idtac} ].\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "H" \coqdoctac{in} \coqdocvar{asserts}\ensuremath{\lnot} \coqdocvar{H}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{H}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts} \coqdocvar{H}: \coqdocvar{E}; [ \coqdocvar{auto\_tilde} \ensuremath{|} \coqdoctac{idtac} ].\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts}: \coqdocvar{E}; [ \coqdocvar{auto\_tilde} \ensuremath{|} \coqdoctac{idtac} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "\~{}" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "\~{}" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sapply} \coqdocvar{H}; \coqdocvar{auto\_tilde}. \coqdocnoindent
\coqdockw{Tactic Notation} "applys" "\~{}" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "\~{}" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "\~{}" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "\~{}" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "\~{}" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "\~{}" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" "\~{}" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" "\~{}" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} \coqdocvar{A1}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "fapply" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fapply} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "sapply" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sapply} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "logic" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{logic\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{auto\_tilde}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "intros\_all" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{intros\_all}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "\~{}" \coqdockw{constr}(\coqdocvar{F1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdocvar{F1}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "\~{}" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdocvar{F1}, \coqdocvar{F2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "\~{}" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) "," \coqdockw{constr}(\coqdocvar{F3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdocvar{F1}, \coqdocvar{F2}, \coqdocvar{F3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "\~{}" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) "," \coqdockw{constr}(\coqdocvar{F3}) ","  \coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{F4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdocvar{F1}, \coqdocvar{F2}, \coqdocvar{F3}, \coqdocvar{F4}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "simple" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "simple" "\~{}" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "simpls" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{simpls}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "hnfs" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{hnfs}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "hnfs" "\~{}" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{hnf} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "substs" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{substs}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "intro\_hyp" "\~{}" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subst\_hyp} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "intro\_subst" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{intro\_subst}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "subst\_eq" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subst\_eq} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" "\~{}" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "erewrite" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{erewrite} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "fequal" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fequal}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "fequals" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fequals}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "pi\_rewrite" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pi\_rewrite} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "pi\_rewrite" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pi\_rewrite} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "invert" "\~{}" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "\~{}" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "\~{}" \coqdocvar{hyp}(\coqdocvar{E}) "as" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{E} \coqdockw{as}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "injects" "\~{}" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{injects} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inversions" "\~{}" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inversions} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases} \coqdocvar{E} \coqdockw{as} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_if" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{case\_if}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_ifs" "\~{}" := \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{case\_ifs}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_if" "\~{}" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{case\_if} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases\_if}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if" "\~{}" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases\_if} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_if" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_if}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_if" "\~{}" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_if} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_head\_match" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_head\_match}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases'" "\~{}" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases'} \coqdocvar{E} \coqdockw{as} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases'" "\~{}" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases'} \coqdocvar{E}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if'" "\~{}" "as" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases\_if'} \coqdockw{as} \coqdocvar{H}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if'" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases\_if'}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "decides\_equality" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{decides\_equality}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "iff" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{iff}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "splits" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{splits}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "splits" "\~{}" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{splits} \coqdocvar{N}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "splits\_all" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{splits\_all}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destructs" "\~{}" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destructs} \coqdocvar{T}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destructs" "\~{}" \coqdockw{constr}(\coqdocvar{N}) \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destructs} \coqdocvar{N} \coqdocvar{T}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "branch" "\~{}" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{branch} \coqdocvar{N}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "branch" "\~{}" \coqdockw{constr}(\coqdocvar{K}) "of" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{branch} \coqdocvar{K} \coqdocvar{of} \coqdocvar{N}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "branches" "\~{}" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{branches} \coqdocvar{T}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "branches" "\~{}" \coqdockw{constr}(\coqdocvar{N}) \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{branches} \coqdocvar{N} \coqdocvar{T}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "\~{}" := \coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists\_\_\_" "\~{}" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{exists\_\_\_}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "\~{}" \coqdockw{constr}(\coqdocvar{T1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "\~{}" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1} \coqdocvar{T2}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "\~{}" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{T3}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "\~{}" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) \coqdockw{constr}(\coqdocvar{T4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{T3} \coqdocvar{T4}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "\~{}" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) \coqdockw{constr}(\coqdocvar{T4})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{T5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{T3} \coqdocvar{T4} \coqdocvar{T5}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "\~{}" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) \coqdockw{constr}(\coqdocvar{T4})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{T5}) \coqdockw{constr}(\coqdocvar{T6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{T3} \coqdocvar{T4} \coqdocvar{T5} \coqdocvar{T6}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Parsing for Strong Automation}



 Any tactic followed by the symbol \ensuremath{\times} will have \coqdoctac{auto}\ensuremath{\times} called
    on all of its subgoals. The exceptions to these rules are the
    same as for light automation.


    Exception: use \coqdocvar{subs}\ensuremath{\times} instead of \coqdoctac{subst}\ensuremath{\times} if you
    import the library \coqdocvar{Coq.Classes.Equivalence}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{equates} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" "*" \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates} \coqdocvar{n1} \coqdocvar{n2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" "*" \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates} \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "equates" "*" \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) \coqdockw{constr}(\coqdocvar{n4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{equates} \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3} \coqdocvar{n4}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" "*" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" "*" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} \coqdocvar{n1} \coqdocvar{n2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" "*" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys\_eq" "*" \coqdockw{constr}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{n1}) \coqdockw{constr}(\coqdocvar{n2}) \coqdockw{constr}(\coqdocvar{n3}) \coqdockw{constr}(\coqdocvar{n4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} \coqdocvar{n1} \coqdocvar{n2} \coqdocvar{n3} \coqdocvar{n4}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "apply" "*" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sapply} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct" "*" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct" "*" \coqdockw{constr}(\coqdocvar{H}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{H} \coqdockw{as} \coqdocvar{I}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "f\_equal" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{f\_equal}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "induction" "*" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inversion" "*" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "split" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "subs" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{subst}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "subst" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{subst}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "right" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{right}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "left" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{left}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "constructor" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{constructor}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "constructors" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{constructors}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false\_then} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{auto\_star}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "*" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{E1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}\ensuremath{\times} (>> \coqdocvar{E0} \coqdocvar{E1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "*" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}\ensuremath{\times} (>> \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "*" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) \coqdockw{constr}(\coqdocvar{E3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}\ensuremath{\times} (>> \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "false" "*" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{E1}) \coqdockw{constr}(\coqdocvar{E2}) \coqdockw{constr}(\coqdocvar{E3}) \coqdockw{constr}(\coqdocvar{E4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}\ensuremath{\times} (>> \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3} \coqdocvar{E4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "tryfalse" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdoctac{solve} [ \coqdocvar{false}\ensuremath{\times} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{H}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts} \coqdocvar{H}: \coqdocvar{E}; [ \coqdocvar{auto\_star} \ensuremath{|} \coqdoctac{idtac} ].\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts" "*" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "H" \coqdoctac{in} \coqdocvar{asserts}\ensuremath{\times} \coqdocvar{H}: \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{H}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts} \coqdocvar{H}: \coqdocvar{E}; [ \coqdocvar{auto\_star} \ensuremath{|} \coqdoctac{idtac} ].\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts" "*" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts}: \coqdocvar{E}; [ \coqdocvar{auto\_star} \ensuremath{|} \coqdoctac{idtac} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "lets" "*" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards} \coqdocvar{I}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" ":" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "forwards" "*" ":" \coqdockw{constr}(\coqdocvar{E0})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "*" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sapply} \coqdocvar{H}; \coqdocvar{auto\_star}. \coqdocnoindent
\coqdockw{Tactic Notation} "applys" "*" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "*" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "*" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "*" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "*" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "applys" "*" \coqdockw{constr}(\coqdocvar{E0}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys} \coqdocvar{E0} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" "*" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" "\~{}" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} \coqdocvar{A1}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} \coqdocvar{A1} \coqdocvar{A2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "specializes" \coqdocvar{hyp}(\coqdocvar{H}) \coqdockw{constr}(\coqdocvar{A1}) \coqdockw{constr}(\coqdocvar{A2}) \coqdockw{constr}(\coqdocvar{A3}) \coqdockw{constr}(\coqdocvar{A4}) \coqdockw{constr}(\coqdocvar{A5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{specializes} \coqdocvar{H} \coqdocvar{A1} \coqdocvar{A2} \coqdocvar{A3} \coqdocvar{A4} \coqdocvar{A5}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "fapply" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fapply} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "sapply" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sapply} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "logic" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{logic\_base} \coqdocvar{E} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{auto\_star}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "intros\_all" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{intros\_all}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "*" \coqdockw{constr}(\coqdocvar{F1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdocvar{F1}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "*" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdocvar{F1}, \coqdocvar{F2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "*" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) "," \coqdockw{constr}(\coqdocvar{F3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdocvar{F1}, \coqdocvar{F2}, \coqdocvar{F3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "unfolds" "*" \coqdockw{constr}(\coqdocvar{F1}) "," \coqdockw{constr}(\coqdocvar{F2}) "," \coqdockw{constr}(\coqdocvar{F3}) ","  \coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{F4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{unfolds} \coqdocvar{F1}, \coqdocvar{F2}, \coqdocvar{F3}, \coqdocvar{F4}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "simple" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "simple" "*" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "simpls" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{simpls}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "hnfs" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{hnfs}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "hnfs" "*" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{hnf} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "substs" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{substs}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "intro\_hyp" "*" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subst\_hyp} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "intro\_subst" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{intro\_subst}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "subst\_eq" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subst\_eq} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite" "*" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "*" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}):=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "*" \coqdockw{constr}(\coqdocvar{E}) "in" "*":=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}):=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrites" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" "*":=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrites} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "*" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "*" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "rewrite\_all" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{rewrite\_all} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "*" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "*" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "asserts\_rewrite" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} *; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite} \ensuremath{\leftarrow} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" "*" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cuts\_rewrite" "*" "<-" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite} \ensuremath{\leftarrow} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "erewrite" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{erewrite} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "fequal" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fequal}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "fequals" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{fequals}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "pi\_rewrite" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pi\_rewrite} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "pi\_rewrite" "*" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pi\_rewrite} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "invert" "*" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{invert} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "*" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inverts" "*" \coqdocvar{hyp}(\coqdocvar{E}) "as" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{E} \coqdockw{as}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "injects" "*" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{injects} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "inversions" "*" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inversions} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases" "*" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases} \coqdocvar{E} \coqdockw{as} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_if" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{case\_if}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_ifs" "*" := \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{case\_ifs}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "case\_if" "*" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{case\_if} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases\_if}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if" "*" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases\_if} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocindent{0.50em}
\coqdockw{Tactic Notation} "destruct\_if" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_if}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_if" "*" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_if} \coqdoctac{in} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destruct\_head\_match" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destruct\_head\_match}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "cases'" "*" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases'} \coqdocvar{E} \coqdockw{as} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases'" "*" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases'} \coqdocvar{E}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if'" "*" "as" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases\_if'} \coqdockw{as} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "cases\_if'" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cases\_if'}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "decides\_equality" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{decides\_equality}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "iff" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{iff}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "iff" "*" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{iff} \coqdocvar{I}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "splits" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{splits}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "splits" "*" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{splits} \coqdocvar{N}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "splits\_all" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{splits\_all}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "destructs" "*" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destructs} \coqdocvar{T}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "destructs" "*" \coqdockw{constr}(\coqdocvar{N}) \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{destructs} \coqdocvar{N} \coqdocvar{T}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "branch" "*" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{branch} \coqdocvar{N}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "branch" "*" \coqdockw{constr}(\coqdocvar{K}) "of" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{branch} \coqdocvar{K} \coqdocvar{of} \coqdocvar{N}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "branches" "*" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{branches} \coqdocvar{T}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "branches" "*" \coqdockw{constr}(\coqdocvar{N}) \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{branches} \coqdocvar{N} \coqdocvar{T}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "*" := \coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists\_\_\_" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{exists\_\_\_}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "*" \coqdockw{constr}(\coqdocvar{T1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "*" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1} \coqdocvar{T2}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "*" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{T3}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "*" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) \coqdockw{constr}(\coqdocvar{T4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{T3} \coqdocvar{T4}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "*" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) \coqdockw{constr}(\coqdocvar{T4})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{T5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{T3} \coqdocvar{T4} \coqdocvar{T5}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "exists" "*" \coqdockw{constr}(\coqdocvar{T1}) \coqdockw{constr}(\coqdocvar{T2}) \coqdockw{constr}(\coqdocvar{T3}) \coqdockw{constr}(\coqdocvar{T4})\coqdoceol
\coqdocindent{0.50em}
\coqdockw{constr}(\coqdocvar{T5}) \coqdockw{constr}(\coqdocvar{T6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{T3} \coqdocvar{T4} \coqdocvar{T5} \coqdocvar{T6}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Tactics to Sort Out the Proof Context}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Hiding Hypotheses}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{ltac\_something} (\coqdocvar{P}:\coqdockw{Type}) (\coqdocvar{e}:\coqdocvar{P}) := \coqdocvar{e}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} "'Something'" :=\coqdoceol
\coqdocindent{1.00em}
(@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{\_}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{ltac\_something\_eq} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{e}:\coqdockw{Type}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{e} = (@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{e}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{using}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{ltac\_something\_hide} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{e}:\coqdockw{Type}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{e} \ensuremath{\rightarrow} (@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{e}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{using}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{ltac\_something\_show} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{e}:\coqdockw{Type}),\coqdoceol
\coqdocindent{1.00em}
(@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{e}) \ensuremath{\rightarrow} \coqdocvar{e}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{using}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{hide\_def} \coqdocabbreviation{x} and \coqdocvar{show\_def} \coqdocabbreviation{x} can be used to hide/show
    the body of the definition \coqdocabbreviation{x}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "hide\_def" \coqdocvar{hyp}(\coqdocvar{x}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{x'} := \coqdockw{constr}:(\coqdocvar{x}) \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{T} := \coqdoctac{eval} \coqdoctac{unfold} \coqdocvar{x} \coqdoctac{in} \coqdocvar{x'} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{change} \coqdocvar{T} \coqdockw{with} (@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{T}) \coqdoctac{in} \coqdocvar{x}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_def" \coqdocvar{hyp}(\coqdocvar{x}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{x'} := \coqdockw{constr}:(\coqdocvar{x}) \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{U} := \coqdoctac{eval} \coqdoctac{unfold} \coqdocvar{x} \coqdoctac{in} \coqdocvar{x'} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{U} \coqdockw{with} @\coqdocvar{ltac\_something} \coqdocvar{\_} ?\coqdocvar{T} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{change} \coqdocvar{U} \coqdockw{with} \coqdocvar{T} \coqdoctac{in} \coqdocvar{x} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{show\_def} unfolds \coqdocvar{Something} in the goal \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_def" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{ltac\_something}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_def" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{ltac\_something} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_def" "in" "*" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{ltac\_something} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{hide\_defs} and \coqdocvar{show\_defs} applies to all definitions \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "hide\_defs" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H} := ?\coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} @\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{fail} 1\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{change} \coqdocvar{T} \coqdockw{with} (@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{T}) \coqdoctac{in} \coqdocvar{H}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_defs" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H} := (@\coqdocvar{ltac\_something} \coqdocvar{\_} ?\coqdocvar{T}) \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{change} (@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{T}) \coqdockw{with} \coqdocvar{T} \coqdoctac{in} \coqdocvar{H} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{hide\_hyp} \coqdocvariable{H} replaces the type of \coqdocvariable{H} with the notation \coqdocvar{Something}
    and \coqdocvar{show\_hyp} \coqdocvariable{H} reveals the type of the hypothesis. Note that the
    hidden type of \coqdocvariable{H} remains convertible the real type of \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_hyp" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ltac\_something\_show} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "hide\_hyp" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{ltac\_something\_hide} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{hide\_hyps} and \coqdocvar{show\_hyps} can be used to hide/show all hypotheses
    of type \coqdockw{Prop}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_hyps" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{H}: @\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{show\_hyp} \coqdocvar{H} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "hide\_hyps" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: ?\coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdockw{Prop} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} @\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{fail} 2\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{hide\_hyp} \coqdocvar{H}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{fail} 1\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{hide} \coqdocvariable{H} and \coqdocvar{show} \coqdocvariable{H} automatically select between
    \coqdocvar{hide\_hyp} or \coqdocvar{hide\_def}, and \coqdocvar{show\_hyp} or \coqdocvar{show\_def}.
    Similarly \coqdocvar{hide\_all} and \coqdocvar{show\_all} apply to all. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "hide" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first} [\coqdocvar{hide\_def} \coqdocvar{H} \ensuremath{|} \coqdocvar{hide\_hyp} \coqdocvar{H}].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "show" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{first} [\coqdocvar{show\_def} \coqdocvar{H} \ensuremath{|} \coqdocvar{show\_hyp} \coqdocvar{H}].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "hide\_all" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{hide\_hyps}; \coqdocvar{hide\_defs}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_all" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{ltac\_something} \coqdoctac{in} *.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{hide\_term} \coqdocvar{E} can be used to hide a term from the goal.
    \coqdocvar{show\_term} or \coqdocvar{show\_term} \coqdocvar{E} can be used to reveal it.
    \coqdocvar{hide\_term} \coqdocvar{E} \coqdoctac{in} \coqdocvariable{H} can be used to specify an hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "hide\_term" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{change} \coqdocvar{E} \coqdockw{with} (@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{E}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_term" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{change} (@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{E}) \coqdockw{with} \coqdocvar{E}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_term" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{ltac\_something}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "hide\_term" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{change} \coqdocvar{E} \coqdockw{with} (@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{E}) \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_term" \coqdockw{constr}(\coqdocvar{E}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{change} (@\coqdocvar{ltac\_something} \coqdocvar{\_} \coqdocvar{E}) \coqdockw{with} \coqdocvar{E} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_term" "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{ltac\_something} \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{show\_unfold} \coqdocdefinition{R} unfolds the definition of \coqdocdefinition{R} and
    reveals the hidden definition of R. --todo:test, 
    and implement using unfold simply \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_unfold" \coqdockw{constr}(\coqdocvar{R1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{R1}; \coqdocvar{show\_def}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "show\_unfold" \coqdockw{constr}(\coqdocvar{R1}) "," \coqdockw{constr}(\coqdocvar{R2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{R1}, \coqdocvar{R2}; \coqdocvar{show\_def}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Sorting Hypotheses}



 \coqdocvar{sort} sorts out hypotheses from the context by moving all the
    propositions (hypotheses of type Prop) to the bottom of the context. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{sort\_tactic} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} \coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: ?\coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{T} \coqdockw{with} \coqdockw{Prop} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{generalizes} \coqdocvar{H}; (\coqdoctac{try} \coqdocvar{sort\_tactic}); \coqdoctac{intro}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "sort" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{sort\_tactic}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Clearing Hypotheses}



 \coqdocvar{clears} \coqdocvar{X1} ... \coqdocvar{XN} is a variation on \coqdoctac{clear} which clears
    the variables \coqdocvar{X1}..\coqdocvar{XN} as well as all the hypotheses which
    depend on them. Contrary to \coqdoctac{clear}, it never fails. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "clears" \coqdocvar{ident}(\coqdocvar{X1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{rec} \coqdocvar{doit} \coqdocvar{\_} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H}:\coqdockw{context}[\coqdocvar{X1}] \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{clear} \coqdocvar{H}; \coqdoctac{try} (\coqdocvar{doit} \coqdocvar{tt})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{clear} \coqdocvar{X1}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end} \coqdoctac{in} \coqdocvar{doit} \coqdocvar{tt}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "clears" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears} \coqdocvar{X1}; \coqdocvar{clears} \coqdocvar{X2}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "clears" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears} \coqdocvar{X1}; \coqdocvar{clears} \coqdocvar{X2}; \coqdocvar{clears} \coqdocvar{X3}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "clears" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears} \coqdocvar{X1}; \coqdocvar{clears} \coqdocvar{X2}; \coqdocvar{clears} \coqdocvar{X3}; \coqdocvar{clears} \coqdocvar{X4}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "clears" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears} \coqdocvar{X1}; \coqdocvar{clears} \coqdocvar{X2}; \coqdocvar{clears} \coqdocvar{X3}; \coqdocvar{clears} \coqdocvar{X4}; \coqdocvar{clears} \coqdocvar{X5}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "clears" \coqdocvar{ident}(\coqdocvar{X1}) \coqdocvar{ident}(\coqdocvar{X2}) \coqdocvar{ident}(\coqdocvar{X3}) \coqdocvar{ident}(\coqdocvar{X4})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{ident}(\coqdocvar{X5}) \coqdocvar{ident}(\coqdocvar{X6}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears} \coqdocvar{X1}; \coqdocvar{clears} \coqdocvar{X2}; \coqdocvar{clears} \coqdocvar{X3}; \coqdocvar{clears} \coqdocvar{X4}; \coqdocvar{clears} \coqdocvar{X5}; \coqdocvar{clears} \coqdocvar{X6}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{clears} (without any argument) clears all the unused variables
    from the context. In other words, it removes any variable
    which is not a proposition (i.e., not of type Prop) and which
    does not appear in another hypothesis nor in the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{clears\_tactic} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: ?\coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{type} \coqdocvar{of} \coqdocvar{T} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdockw{Prop} \ensuremath{\Rightarrow} \coqdocvar{generalizes} \coqdocvar{H}; (\coqdoctac{try} \coqdocvar{clears\_tactic}); \coqdoctac{intro}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{TT} \ensuremath{\Rightarrow} \coqdoctac{clear} \coqdocvar{H}; (\coqdoctac{try} \coqdocvar{clears\_tactic})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} ?\coqdocvar{TT} \ensuremath{\Rightarrow} \coqdocvar{generalizes} \coqdocvar{H}; (\coqdoctac{try} \coqdocvar{clears\_tactic}); \coqdoctac{intro}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "clears" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_tactic}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{clears\_all} clears all the hypotheses from the context
    that can be cleared. It leaves only the hypotheses that
    are mentioned in the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{clears\_or\_generalizes\_all\_core} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} \coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: \coqdocvar{\_} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoceol
\coqdocindent{5.50em}
\coqdoctac{first} [ \coqdoctac{clear} \coqdocvar{H} \ensuremath{|} \coqdocvar{generalizes} \coqdocvar{H}] \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "clears\_all" :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdocvar{ltac\_mark};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_or\_generalizes\_all\_core};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{intro\_until\_mark}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{clears\_but} \coqdocvar{H1} \coqdocvar{H2} .. \coqdocvar{HN} clears all hypotheses except the
    one that are mentioned and those that cannot be cleared. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{clears\_but\_core} \coqdocvar{cont} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdocvar{ltac\_mark};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cont} \coqdocvar{tt};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_or\_generalizes\_all\_core};\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{intro\_until\_mark}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "clears\_but" :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but\_core} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{idtac}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "clears\_but" \coqdocvar{ident}(\coqdocvar{H1}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but\_core} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{gen} \coqdocvar{H1}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "clears\_but" \coqdocvar{ident}(\coqdocvar{H1}) \coqdocvar{ident}(\coqdocvar{H2}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but\_core} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{gen} \coqdocvar{H1} \coqdocvar{H2}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "clears\_but" \coqdocvar{ident}(\coqdocvar{H1}) \coqdocvar{ident}(\coqdocvar{H2}) \coqdocvar{ident}(\coqdocvar{H3}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but\_core} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{gen} \coqdocvar{H1} \coqdocvar{H2} \coqdocvar{H3}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "clears\_but" \coqdocvar{ident}(\coqdocvar{H1}) \coqdocvar{ident}(\coqdocvar{H2}) \coqdocvar{ident}(\coqdocvar{H3}) \coqdocvar{ident}(\coqdocvar{H4}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but\_core} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{gen} \coqdocvar{H1} \coqdocvar{H2} \coqdocvar{H3} \coqdocvar{H4}).\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "clears\_but" \coqdocvar{ident}(\coqdocvar{H1}) \coqdocvar{ident}(\coqdocvar{H2}) \coqdocvar{ident}(\coqdocvar{H3}) \coqdocvar{ident}(\coqdocvar{H4}) \coqdocvar{ident}(\coqdocvar{H5}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but\_core} \coqdockw{ltac}:(\coqdockw{fun} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{gen} \coqdocvar{H1} \coqdocvar{H2} \coqdocvar{H3} \coqdocvar{H4} \coqdocvar{H5}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_clears\_all\_and\_clears\_but} : \coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y}:\coqdocvar{nat}, \coqdocvar{y} < 2 \ensuremath{\rightarrow} \coqdocvar{x} = \coqdocvar{x} \ensuremath{\rightarrow} \coqdocvar{x} \ensuremath{\ge} 2 \ensuremath{\rightarrow} \coqdocvar{x} < 3 \ensuremath{\rightarrow} \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{using}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{M1} \coqdocvar{M2} \coqdocvar{M3}. \coqdocvar{dup} 6.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_all}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but} \coqdocvar{M3}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but} \coqdocvar{y}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but} \coqdocvar{x}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but} \coqdocvar{M2} \coqdocvar{M3}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_but} \coqdocvar{x} \coqdocvar{y}. \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{clears\_last} clears the last hypothesis in the context.
    \coqdocvar{clears\_last} \coqdocvar{N} clears the last \coqdocvar{N} hypotheses in the context. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "clears\_last" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \coqdocvar{H}: ?\coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{clear} \coqdocvar{H} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{clears\_last\_base} \coqdocvar{N} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{nat\_from\_number} \coqdocvar{N} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} 0 \ensuremath{\Rightarrow} \coqdoctac{idtac}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{S} ?\coqdocvar{p} \ensuremath{\Rightarrow} \coqdocvar{clears\_last}; \coqdocvar{clears\_last\_base} \coqdocvar{p}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "clears\_last" \coqdockw{constr}(\coqdocvar{N}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{clears\_last\_base} \coqdocvar{N}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Tactics for Development Purposes}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Skipping Subgoals}



 DEPRECATED: the new ``admit'' tactics now works fine.


    The \coqdocvar{skip} tactic can be used at any time to admit the current
    goal. Using \coqdocvar{skip} is much more efficient than using the \coqdocvar{Focus}
    top-level command to reach a particular subgoal.


    There are two possible implementations of \coqdocvar{skip}. The first one
    relies on the use of an existential variable. The second one
    relies on an axiom of type \coqdocinductive{False}. Remark that the builtin tactic
    \coqdocvar{admit} is not applicable if the current goal contains uninstantiated
    variables.


    The advantage of the first technique is that a proof using \coqdocvar{skip}
    must end with \coqdocvar{Admitted}, since \coqdockw{Qed} will be rejected with the message
    ``\coqdocvar{uninstantiated} \coqdocvar{existential} \coqdocvar{variables}''. It is thereafter clear
    that the development is incomplete.


    The advantage of the second technique is exactly the converse: one
    may conclude the proof using \coqdockw{Qed}, and thus one saves the pain from
    renaming \coqdockw{Qed} into \coqdocvar{Admitted} and vice-versa all the time.
    Note however, that it is still necessary to instantiate all the existential
    variables introduced by other tactics in order for \coqdockw{Qed} to be accepted.


    The two implementation are provided, so that you can select the one that
    suits you best. By default \coqdocvar{skip'} uses the first implementation, and
    \coqdocvar{skip} uses the second implementation.
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{skip\_with\_existential} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{G} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdoctac{evar}(\coqdocvar{H}:\coqdocvar{G}); \coqdoctac{eexact} \coqdocvar{H} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Parameter} \coqdocvar{skip\_axiom} : \coqdocvar{False}.\coqdoceol
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{skip\_with\_axiom} :=\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{elimtype} \coqdocvar{False}; \coqdoctac{apply} \coqdocvar{skip\_axiom}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip" :=\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{skip\_with\_axiom}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "skip'" :=\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{skip\_with\_existential}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{demo} is like \coqdocvar{admit} but it documents the fact that admit is intended \begin{coqdoccode}
\coqdocnoindent
\coqdockw{Tactic Notation} "demo" := \coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{skip} \coqdocvariable{H}: \coqdocdefinition{T} adds an assumption named \coqdocvariable{H} of type \coqdocdefinition{T} to the
    current context, blindly assuming that it is true.
    \coqdocvar{skip}: \coqdocdefinition{T} and \coqdocvar{skip} \coqdocvar{H\_asserts}: \coqdocdefinition{T} and \coqdocvar{skip\_asserts}: \coqdocdefinition{T}
    are other possible syntax.
    Note that H may be an intro pattern.
    The syntax \coqdocvar{skip} \coqdocvar{H1} .. \coqdocvar{HN}: \coqdocdefinition{T} can be used when \coqdocdefinition{T} is a
    conjunction of \coqdocvar{N} items. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts} \coqdocvar{I}: \coqdocvar{T}; [ \coqdocvar{skip} \ensuremath{|} ].\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "skip" ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{skip} \coqdocvar{H}: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "skip" "\~{}" ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip}: \coqdocvar{T}; \coqdocvar{auto\_tilde}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "skip" "*" ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip}: \coqdocvar{T}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip} [\coqdocvar{I1} \coqdocvar{I2}]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "skip" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip} [\coqdocvar{I1} [\coqdocvar{I2} \coqdocvar{I3}]]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "skip" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I4}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} \coqdocvar{I4}]]]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "skip" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} [\coqdocvar{I4} \coqdocvar{I5}]]]]: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "skip" \coqdocvar{simple\_intropattern}(\coqdocvar{I1})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I2}) \coqdocvar{simple\_intropattern}(\coqdocvar{I3})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I4}) \coqdocvar{simple\_intropattern}(\coqdocvar{I5})\coqdoceol
\coqdocindent{0.50em}
\coqdocvar{simple\_intropattern}(\coqdocvar{I6}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip} [\coqdocvar{I1} [\coqdocvar{I2} [\coqdocvar{I3} [\coqdocvar{I4} [\coqdocvar{I5} \coqdocvar{I6}]]]]]: \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip\_asserts" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip} \coqdocvar{I}: \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Tactic Notation} "skip\_asserts" ":" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip}: \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{skip\_cuts} \coqdocdefinition{T} simply replaces the current goal with \coqdocdefinition{T}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip\_cuts" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts}: \coqdocvar{T}; [ \coqdocvar{skip} \ensuremath{|} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{skip\_goal} \coqdocvariable{H} applies to any goal. It simply assumes
    the current goal to be true. The assumption is named ``H''.
    It is useful to set up proof by induction or coinduction.
    Syntax \coqdocvar{skip\_goal} is also accepted.\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip\_goal" \coqdocvar{ident}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with} \ensuremath{\vdash} ?\coqdocvar{G} \ensuremath{\Rightarrow} \coqdocvar{skip} \coqdocvar{H}: \coqdocvar{G} \coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip\_goal" :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{IH} := \coqdoctac{fresh} "IH" \coqdoctac{in} \coqdocvar{skip\_goal} \coqdocvar{IH}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{skip\_rewrite} \coqdocdefinition{T} can be applied when \coqdocdefinition{T} is an equality.
    It blindly assumes this equality to be true, and rewrite it in
    the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip\_rewrite" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{M} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{skip\_asserts} \coqdocvar{M}: \coqdocvar{T}; \coqdoctac{rewrite} \coqdocvar{M}; \coqdoctac{clear} \coqdocvar{M}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{skip\_rewrite} \coqdocdefinition{T} \coqdoctac{in} \coqdocvariable{H} is similar as \coqdocvar{rewrite\_skip}, except that
    it rewrites in hypothesis \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip\_rewrite" \coqdockw{constr}(\coqdocvar{T}) "in" \coqdocvar{hyp}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{M} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{skip\_asserts} \coqdocvar{M}: \coqdocvar{T}; \coqdoctac{rewrite} \coqdocvar{M} \coqdoctac{in} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{M}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{skip\_rewrites\_all} \coqdocdefinition{T} is similar as \coqdocvar{rewrite\_skip}, except that
    it rewrites everywhere (goal and all hypotheses). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip\_rewrite\_all" \coqdockw{constr}(\coqdocvar{T}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{M} := \coqdoctac{fresh} \coqdoctac{in} \coqdocvar{skip\_asserts} \coqdocvar{M}: \coqdocvar{T}; \coqdocvar{rewrite\_all} \coqdocvar{M}; \coqdoctac{clear} \coqdocvar{M}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\coqdocvar{skip\_induction} \coqdocvar{E} applies to any goal. It simply assumes
    the current goal to be true (the assumption is named ``IH'' by
    default), and call \coqdoctac{destruct} \coqdocvar{E} instead of \coqdoctac{induction} \coqdocvar{E}.
    It is useful to try and set up a proof by induction
    first, and fix the applications of the induction hypotheses
    during a second pass on the Proof using.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip\_induction" \coqdockw{constr}(\coqdocvar{E}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{IH} := \coqdoctac{fresh} "IH" \coqdoctac{in} \coqdocvar{skip\_goal} \coqdocvar{IH}; \coqdoctac{destruct} \coqdocvar{E}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "skip\_induction" \coqdockw{constr}(\coqdocvar{E}) "as" \coqdocvar{simple\_intropattern}(\coqdocvar{I}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{IH} := \coqdoctac{fresh} "IH" \coqdoctac{in} \coqdocvar{skip\_goal} \coqdocvar{IH}; \coqdoctac{destruct} \coqdocvar{E} \coqdockw{as} \coqdocvar{I}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Compatibility with Standard Library}



 The module \coqdoclibrary{Program} contains definitions that conflict with the
    current module. If you import \coqdoclibrary{Program}, either directly or indirectly
    (e.g., through \coqdoclibrary{Setoid} or \coqdoclibrary{ZArith}), you will need to import the
    compability definitions through the top-level command:
    \coqdockw{Import} \coqdocmodule{LibTacticsCompatibility}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{LibTacticsCompatibility}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Tactic Notation} "apply" "*" \coqdockw{constr}(\coqdocvar{H}) :=\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{sapply} \coqdocvar{H}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Tactic Notation} "subst" "*" :=\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst}; \coqdocvar{auto\_star}.\coqdoceol
\coqdocnoindent
\coqdockw{End} \coqdocvar{LibTacticsCompatibility}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Open} \coqdockw{Scope} \coqdocvar{nat\_scope}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
$Date: 2017-01-31 19:12:59 -0500 (Tue, 31 Jan 2017) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.UseTactics}{Library }{Top.UseTactics}

\begin{coqdoccode}
\end{coqdoccode}
\section{UseTactics: Tactic Library for Coq: A Gentle Introduction}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
Coq comes with a set of builtin tactics, such as \coqdoctac{reflexivity},
    \coqdoctac{intros}, \coqdoctac{inversion} and so on. While it is possible to conduct
    proofs using only those tactics, you can significantly increase
    your productivity by working with a set of more powerful tactics.
    This chapter describes a number of such useful tactics, which, for
    various reasons, are not yet available by default in Coq.  These
    tactics are defined in the \coqdocvar{LibTactics.v} file. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdockw{Types}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{LibTactics}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Remark: SSReflect is another package providing powerful tactics.
    The library ``LibTactics'' differs from ``SSReflect'' in two respects:

\begin{itemize}
\item  ``SSReflect'' was primarily developed for proving mathematical
          theorems, whereas ``LibTactics'' was primarily developed for proving
          theorems on programming languages. In particular, ``LibTactics''
          provides a number of useful tactics that have no counterpart in the
          ``SSReflect'' package.

\item  ``SSReflect'' entirely rethinks the presentation of tactics,
          whereas ``LibTactics'' mostly stick to the traditional
          presentation of Coq tactics, simply providing a number of
          additional tactics.  For this reason, ``LibTactics'' is
          probably easier to get started with than ``SSReflect''. 
\end{itemize}


 This chapter is a tutorial focusing on the most useful features
    from the ``LibTactics'' library. It does not aim at presenting all
    the features of ``LibTactics''. The detailed specification of tactics
    can be found in the source file \coqdocvar{LibTactics.v}. Further documentation
    as well as demos can be found at http://www.chargueraud.org/softs/tlc/. 

 In this tutorial, tactics are presented using examples taken from
    the core chapters of the ``Software Foundations'' course. To illustrate
    the various ways in which a given tactic can be used, we use a
    tactic that duplicates a given goal. More precisely, \coqdocvar{dup} produces
    two copies of the current goal, and \coqdocvar{dup} \coqdocabbreviation{n} produces \coqdocabbreviation{n} copies of it. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Tactics for Introduction and Case Analysis}



 This section presents the following tactics:

\begin{itemize}
\item  \coqdocvar{introv}, for naming hypotheses more efficiently,

\item  \coqdocvar{inverts}, for improving the \coqdoctac{inversion} tactic,

\item  \coqdocvar{cases}, for performing a case analysis without losing information,

\item  \coqdocvar{cases\_if}, for automating case analysis on the argument of \coqdockw{if}. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect}{introv}\coqdocvar{introv}}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{IntrovExamples}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Stlc}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Import} \coqdocvar{STLC}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{introv} allows to automatically introduce the
    variables of a theorem and explicitly name the hypotheses
    involved. In the example shown next, the variables \coqdocconstructor{c},
    \coqdocvariable{st}, \coqdocvariable{st1} and \coqdocvariable{st2} involved in the statement of determinism
    need not be named explicitly, because their name where already
    given in the statement of the lemma. On the contrary, it is
    useful to provide names for the two hypotheses, which we
    name \coqdocvar{E1} and \coqdocvar{E2}, respectively. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{E1} \coqdocvar{E2}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
When there is no hypothesis to be named, one can call
    \coqdocvar{introv} without any argument. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{dist\_exists\_or} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{X}:\coqdockw{Type}) (\coqdocvar{P} \coqdocvar{Q} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{P} \coqdocvar{x} \ensuremath{\lor} \coqdocvar{Q} \coqdocvar{x}) \ensuremath{\leftrightarrow} (\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{P} \coqdocvar{x}) \ensuremath{\lor} (\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{Q} \coqdocvar{x}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{introv} also applies to statements in which
    \coqdockw{\ensuremath{\forall}} and \ensuremath{\rightarrow} are interleaved. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}) \ensuremath{\rightarrow} \coqdockw{\ensuremath{\forall}} \coqdocvar{st2}, (\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2}) \ensuremath{\rightarrow} \coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{E1} \coqdocvar{E2}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Like the arguments of \coqdoctac{intros}, the arguments of \coqdocvar{introv}
    can be structured patterns. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{exists\_impl}: \coqdockw{\ensuremath{\forall}} \coqdocvar{X} (\coqdocvar{P} : \coqdocvar{X} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvar{Q} : \coqdockw{Prop}) (\coqdocvar{R} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{3.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{P} \coqdocvar{x} \ensuremath{\rightarrow} \coqdocvar{Q}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
((\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{P} \coqdocvar{x}) \ensuremath{\rightarrow} \coqdocvar{Q}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} [\coqdocvar{x} \coqdocvar{H2}]. \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Remark: the tactic \coqdocvar{introv} works even when definitions
    need to be unfolded in order to reveal hypotheses. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{IntrovExamples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect}{inverts}\coqdocvar{inverts}}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{InvertsExamples}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Stlc}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Equiv}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Import} \coqdocvar{STLC}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The \coqdoctac{inversion} tactic of Coq is not very satisfying for
    three reasons. First, it produces a bunch of equalities
    which one typically wants to substitute away, using \coqdoctac{subst}.
    Second, it introduces meaningless names for hypotheses.
    Third, a call to \coqdoctac{inversion} \coqdocvariable{H} does not remove \coqdocvariable{H} from the
    context, even though in most cases an hypothesis is no longer
    needed after being inverted. The tactic \coqdocvar{inverts} address all
    of these three issues. It is intented to be used in place of
    the tactic \coqdoctac{inversion}. 

 The following example illustrates how the tactic \coqdocvar{inverts} \coqdocvariable{H}
    behaves mostly like \coqdoctac{inversion} \coqdocvariable{H} except that it performs
    some substitutions in order to eliminate the trivial equalities
    that are being produced by \coqdoctac{inversion}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{skip\_left}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} (\coqdocvar{SKIP};; \coqdocvar{c}) \coqdocvar{c}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv}. \coqdoctac{split}; \coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dup}. \coqdocindent{1.00em}
- \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}. \coqdoctac{inversion} \coqdocvar{H2}. \coqdoctac{subst}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{inverts} \coqdocvar{H}. \coqdocvar{inverts} \coqdocvar{H2}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A slightly more interesting example appears next. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{E1} \coqdocvar{E2}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{admit}. \coqdocvar{admit}. \coqdocindent{1.00em}
\coqdocvar{dup}. \coqdocindent{1.00em}
- \coqdoctac{inversion} \coqdocvar{E2}. \coqdoctac{subst}. \coqdocvar{admit}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{inverts} \coqdocvar{E2}. \coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{inverts} \coqdocvariable{H} \coqdockw{as}. is like \coqdocvar{inverts} \coqdocvariable{H} except that the
    variables and hypotheses being produced are placed in the goal
    rather than in the context. This strategy allows naming those
    new variables and hypotheses explicitly, using either \coqdoctac{intros}
    or \coqdocvar{introv}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{E1} \coqdocvar{E2}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2}.\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{induction} \coqdocvar{E1}); \coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2};\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{inverts} \coqdocvar{E2} \coqdockw{as}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
 \coqdoctac{subst} \coqdocvar{n}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
 \coqdoctac{intros} \coqdocvar{st3} \coqdocvar{Red1} \coqdocvar{Red2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st3}) \coqdockw{as} \coqdocvar{EQ1}.\coqdoceol
\coqdocindent{2.00em}
\{  \coqdoctac{apply} \coqdocvar{IHE1\_1}; \coqdoctac{assumption}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st3}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHE1\_2}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
 \coqdoctac{intros}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHE1}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
 \coqdoctac{intros}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In the particular case where a call to \coqdoctac{inversion} produces
    a single subgoal, one can use the syntax \coqdocvar{inverts} \coqdocvariable{H} \coqdockw{as} \coqdocvar{H1} \coqdocvar{H2} \coqdocvar{H3}
    for calling \coqdocvar{inverts} and naming the new hypotheses \coqdocvar{H1}, \coqdocvar{H2}
    and \coqdocvar{H3}. In other words, the tactic \coqdocvar{inverts} \coqdocvariable{H} \coqdockw{as} \coqdocvar{H1} \coqdocvar{H2} \coqdocvar{H3} is
    equivalent to \coqdocvar{inverts} \coqdocvariable{H} \coqdockw{as}; \coqdocvar{introv} \coqdocvar{H1} \coqdocvar{H2} \coqdocvar{H3}. An example follows. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{skip\_left'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cequiv} (\coqdocvar{SKIP};; \coqdocvar{c}) \coqdocvar{c}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv}. \coqdoctac{split}; \coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H} \coqdockw{as} \coqdocvar{U} \coqdocvar{V}. \coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{U}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A more involved example appears next. In particular, this example
    shows that the name of the hypothesis being inverted can be reused. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{typing\_nonexample\_1} :\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdoctac{\ensuremath{\exists}} \coqdocvar{T},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{has\_type} \coqdocvar{empty}\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{TBool}\coqdoceol
\coqdocindent{6.00em}
(\coqdocvar{tabs} \coqdocvar{y} \coqdocvar{TBool}\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{tapp} (\coqdocvar{tvar} \coqdocvar{x}) (\coqdocvar{tvar} \coqdocvar{y}))))\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dup} 3.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoctac{intros} \coqdocvar{C}. \coqdoctac{destruct} \coqdocvar{C}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H5}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H4}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H4}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H2}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H5}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H1}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoctac{intros} \coqdocvar{C}. \coqdoctac{destruct} \coqdocvar{C}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H} \coqdockw{as} \coqdocvar{H1}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H1} \coqdockw{as} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H2} \coqdockw{as} \coqdocvar{H3}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H3} \coqdockw{as} \coqdocvar{H4}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H4}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoctac{intros} \coqdocvar{C}. \coqdoctac{destruct} \coqdocvar{C}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H} \coqdockw{as} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H} \coqdockw{as} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H} \coqdockw{as} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H} \coqdockw{as} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{InvertsExamples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note: in the rare cases where one needs to perform an inversion
    on an hypothesis \coqdocvariable{H} without clearing \coqdocvariable{H} from the context,
    one can use the tactic \coqdocvar{inverts} \coqdocvar{keep} \coqdocvariable{H}, where the keyword \coqdocvar{keep}
    indicates that the hypothesis should be kept in the context. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Tactics for N-ary Connectives}



 Because Coq encodes conjunctions and disjunctions using binary
    constructors \ensuremath{\land} and \ensuremath{\lor}, working with a conjunction or a
    disjunction of \coqdocvar{N} facts can sometimes be quite cumbursome.
    For this reason, ``LibTactics'' provides tactics offering direct
    support for n-ary conjunctions and disjunctions. It also provides
    direct support for n-ary existententials. 

 This section presents the following tactics:

\begin{itemize}
\item  \coqdocvar{splits} for decomposing n-ary conjunctions,

\item  \coqdocvar{branch} for decomposing n-ary disjunctions,

\item  \coqdoctac{\ensuremath{\exists}} for proving n-ary existentials. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{NaryExamples}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{References}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Import} \coqdocvar{STLCRef}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect}{splits}\coqdocvar{splits}}



 The tactic \coqdocvar{splits} applies to a goal made of a conjunction
    of \coqdocabbreviation{n} propositions and it produces \coqdocabbreviation{n} subgoals. For example,
    it decomposes the goal \coqdocvar{G1} \ensuremath{\land} \coqdocvar{G2} \ensuremath{\land} \coqdocvar{G3} into the three subgoals
    \coqdocvar{G1}, \coqdocvar{G2} and \coqdocvar{G3}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_splits} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} > 0 \ensuremath{\land} \coqdocvar{n} < \coqdocvar{m} \ensuremath{\land} \coqdocvar{m} < \coqdocvar{n}+10 \ensuremath{\land} \coqdocvar{m} \ensuremath{\not=} 3.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdocvar{splits}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect}{branch}\coqdocvar{branch}}



 The tactic \coqdocvar{branch} \coqdocabbreviation{k} can be used to prove a n-ary disjunction.
    For example, if the goal takes the form \coqdocvar{G1} \ensuremath{\lor} \coqdocvar{G2} \ensuremath{\lor} \coqdocvar{G3},
    the tactic \coqdocvar{branch} 2 leaves only \coqdocvar{G2} as subgoal. The following
    example illustrates the behavior of the \coqdocvar{branch} tactic. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_branch} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} < \coqdocvar{m} \ensuremath{\lor} \coqdocvar{n} = \coqdocvar{m} \ensuremath{\lor} \coqdocvar{m} < \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{lt\_eq\_lt\_dec} \coqdocvar{n} \coqdocvar{m}) \coqdockw{as} [[\coqdocvar{H1}\ensuremath{|}\coqdocvar{H2}]|\coqdocvar{H3}].\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{branch} 1. \coqdoctac{apply} \coqdocvar{H1}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{branch} 2. \coqdoctac{apply} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{branch} 3. \coqdoctac{apply} \coqdocvar{H3}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect\coqdoctac{\ensuremath{\exists}}}{\ensuremath{\exists}}}



 The library ``LibTactics'' introduces a notation for n-ary
    existentials. For example, one can write \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x} \coqdocabbreviation{y} \coqdocabbreviation{z}, \coqdocvariable{H}
    instead of \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x}, \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{y}, \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{z}, \coqdocvariable{H}. Similarly,
    the library provides a n-ary tactic \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{a} \coqdocconstructor{b} \coqdocconstructor{c}, which is a
    shorthand for \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{a}; \coqdoctac{\ensuremath{\exists}} \coqdocconstructor{b}; \coqdoctac{\ensuremath{\exists}} \coqdocconstructor{c}. The following
    example illustrates both the notation and the tactic for
    dealing with n-ary existentials. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'} \coqdocvar{st'}, \coqdocvar{t} / \coqdocvar{st} ==> \coqdocvar{t'} / \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T} \coqdocvar{st} \coqdocvar{Ht} \coqdocvar{HST}. \coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{induction} \coqdocvar{Ht}); \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt1} \coqdockw{as} [\coqdocvar{Ht1p} \ensuremath{|} \coqdocvar{Ht1p}]...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht1p}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2} \coqdockw{as} [\coqdocvar{Ht2p} \ensuremath{|} \coqdocvar{Ht2p}]...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Ht2p} \coqdockw{as} [\coqdocvar{t2'} [\coqdocvar{st'} \coqdocvar{Hstep}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{T} \coqdocvar{t}) \coqdocvar{t2'}) \coqdocvar{st'}...\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Remark: a similar facility for n-ary existentials is provided
    by the module \coqdocvar{Coq.Program.Syntax} from the standard library.
    (\coqdocvar{Coq.Program.Syntax} supports existentials up to arity 4;
    \coqdoclibrary{LibTactics} supports them up to arity 10. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{NaryExamples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Tactics for Working with Equality}



 One of the major weakness of Coq compared with other interactive
    proof assistants is its relatively poor support for reasoning
    with equalities. The tactics described next aims at simplifying
    pieces of proof scripts manipulating equalities. 

 This section presents the following tactics:

\begin{itemize}
\item  \coqdocvar{asserts\_rewrite} for introducing an equality to rewrite with,

\item  \coqdocvar{cuts\_rewrite}, which is similar except that its subgoals are swapped,

\item  \coqdocvar{substs} for improving the \coqdoctac{subst} tactic,

\item  \coqdocvar{fequals} for improving the \coqdoctac{f\_equal} tactic,

\item  \coqdocvar{applys\_eq} for proving \coqdocaxiom{P} \coqdocabbreviation{x} \coqdocabbreviation{y} using an hypothesis \coqdocaxiom{P} \coqdocabbreviation{x} \coqdocabbreviation{z},
      automatically producing an equality \coqdocabbreviation{y} = \coqdocabbreviation{z} as subgoal. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{EqualityExamples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactics \texorpdfstring{\protect}{asserts\_rewrite}\coqdocvar{asserts\_rewrite} and \texorpdfstring{\protect}{cuts\_rewrite}\coqdocvar{cuts\_rewrite}}



 The tactic \coqdocvar{asserts\_rewrite} (\coqdocvar{E1} = \coqdocvar{E2}) replaces \coqdocvar{E1} with \coqdocvar{E2} in
    the goal, and produces the goal \coqdocvar{E1} = \coqdocvar{E2}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_0\_plus} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(0 + \coqdocvar{n}) \ensuremath{\times} \coqdocvar{m} = \coqdocvar{n} \ensuremath{\times} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dup}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H}: 0 + \coqdocvar{n} = \coqdocvar{n}). \coqdoctac{reflexivity}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{asserts\_rewrite} (0 + \coqdocvar{n} = \coqdocvar{n}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}. \coqdocindent{2.00em}
\coqdoctac{reflexivity}. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{cuts\_rewrite} (\coqdocvar{E1} = \coqdocvar{E2}) is like
    \coqdocvar{asserts\_rewrite} (\coqdocvar{E1} = \coqdocvar{E2}), except that the equality \coqdocvar{E1} = \coqdocvar{E2}
    appears as first subgoal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_0\_plus'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(0 + \coqdocvar{n}) \ensuremath{\times} \coqdocvar{m} = \coqdocvar{n} \ensuremath{\times} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{cuts\_rewrite} (0 + \coqdocvar{n} = \coqdocvar{n}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}. \coqdocindent{2.00em}
\coqdoctac{reflexivity}. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
More generally, the tactics \coqdocvar{asserts\_rewrite} and \coqdocvar{cuts\_rewrite}
    can be provided a lemma as argument. For example, one can write
    \coqdocvar{asserts\_rewrite} (\coqdockw{\ensuremath{\forall}} \coqdocabbreviation{a} \coqdocconstructor{b}, \coqdocabbreviation{a}*(\coqdocconstructor{S} \coqdocconstructor{b}) = \coqdocabbreviation{a}\ensuremath{\times}\coqdocconstructor{b}+\coqdocabbreviation{a}).
    This formulation is useful when \coqdocabbreviation{a} and \coqdocconstructor{b} are big terms,
    since there is no need to repeat their statements. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_0\_plus'{}'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{u} \coqdocvar{v} \coqdocvar{w} \coqdocvar{x} \coqdocvar{y} \coqdocvar{z}: \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{u} + \coqdocvar{v}) \ensuremath{\times} (\coqdocvar{S} (\coqdocvar{w} \ensuremath{\times} \coqdocvar{x} + \coqdocvar{y})) = \coqdocvar{z}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdocvar{asserts\_rewrite} (\coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{b}, \coqdocvar{a}*(\coqdocvar{S} \coqdocvar{b}) = \coqdocvar{a}\ensuremath{\times}\coqdocvar{b}+\coqdocvar{a}).\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect}{substs}\coqdocvar{substs}}



 The tactic \coqdocvar{substs} is similar to \coqdoctac{subst} except that it
    does not fail when the goal contains ``circular equalities'',
    such as \coqdocabbreviation{x} = \coqdocabbreviation{f} \coqdocabbreviation{x}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_substs} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{y} (\coqdocvar{f}:\coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{x} = \coqdocvar{f} \coqdocvar{x} \ensuremath{\rightarrow} \coqdocvar{y} = \coqdocvar{x} \ensuremath{\rightarrow} \coqdocvar{y} = \coqdocvar{f} \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdocvar{substs}. \coqdocindent{1.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect}{fequals}\coqdocvar{fequals}}



 The tactic \coqdocvar{fequals} is similar to \coqdoctac{f\_equal} except that it
    directly discharges all the trivial subgoals produced. Moreover,
    the tactic \coqdocvar{fequals} features an enhanced treatment of equalities
    between tuples. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_fequals} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{a} \coqdocvar{b} \coqdocvar{c} \coqdocvar{d} \coqdocvar{e} : \coqdocvar{nat}) (\coqdocvar{f} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{a} = 1 \ensuremath{\rightarrow} \coqdocvar{b} = \coqdocvar{e} \ensuremath{\rightarrow} \coqdocvar{e} = 2 \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{f} \coqdocvar{a} \coqdocvar{b} \coqdocvar{c} \coqdocvar{d} = \coqdocvar{f} 1 2 \coqdocvar{c} 4.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdocvar{fequals}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect}{applys\_eq}\coqdocvar{applys\_eq}}



 The tactic \coqdocvar{applys\_eq} is a variant of \coqdoctac{eapply} that introduces
    equalities for subterms that do not unify. For example, assume
    the goal is the proposition \coqdocaxiom{P} \coqdocabbreviation{x} \coqdocabbreviation{y} and assume we have the
    assumption \coqdocvariable{H} asserting that \coqdocaxiom{P} \coqdocabbreviation{x} \coqdocabbreviation{z} holds. We know that we can
    prove \coqdocabbreviation{y} to be equal to \coqdocabbreviation{z}. So, we could call the tactic
    \coqdocvar{assert\_rewrite} (\coqdocabbreviation{y} = \coqdocabbreviation{z}) and change the goal to \coqdocaxiom{P} \coqdocabbreviation{x} \coqdocabbreviation{z}, but
    this would require copy-pasting the values of \coqdocabbreviation{y} and \coqdocabbreviation{z}.
    With the tactic \coqdocvar{applys\_eq}, we can call \coqdocvar{applys\_eq} \coqdocvariable{H} 1, which
    proves the goal and leaves only the subgoal \coqdocabbreviation{y} = \coqdocabbreviation{z}. The value 1
    given as argument to \coqdocvar{applys\_eq} indicates that we want an equality
    to be introduced for the first argument of \coqdocaxiom{P} \coqdocabbreviation{x} \coqdocabbreviation{y} counting from
    the right. The three following examples illustrate the behavior
    of a call to \coqdocvar{applys\_eq} \coqdocvariable{H} 1, a call to \coqdocvar{applys\_eq} \coqdocvariable{H} 2, and a
    call to \coqdocvar{applys\_eq} \coqdocvariable{H} 1 2. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Axiom} \coqdocvar{big\_expression\_using} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}. \coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_applys\_eq\_1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P}:\coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}) \coqdocvar{x} \coqdocvar{y} \coqdocvar{z},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \coqdocvar{x} (\coqdocvar{big\_expression\_using} \coqdocvar{z}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} \coqdocvar{x} (\coqdocvar{big\_expression\_using} \coqdocvar{y}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{H}. \coqdocvar{dup}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{Eq}: \coqdocvar{big\_expression\_using} \coqdocvar{y} = \coqdocvar{big\_expression\_using} \coqdocvar{z}).\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{admit}. \coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{Eq}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{applys\_eq} \coqdocvar{H} 1.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{admit}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If the mismatch was on the first argument of \coqdocaxiom{P} instead of
    the second, we would have written \coqdocvar{applys\_eq} \coqdocvariable{H} 2. Recall
    that the occurences are counted from the right. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_applys\_eq\_2} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P}:\coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}) \coqdocvar{x} \coqdocvar{y} \coqdocvar{z},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} (\coqdocvar{big\_expression\_using} \coqdocvar{z}) \coqdocvar{x} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} (\coqdocvar{big\_expression\_using} \coqdocvar{y}) \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{H}. \coqdocvar{applys\_eq} \coqdocvar{H} 2.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
When we have a mismatch on two arguments, we want to produce
    two equalities. To achieve this, we may call \coqdocvar{applys\_eq} \coqdocvariable{H} 1 2.
    More generally, the tactic \coqdocvar{applys\_eq} expects a lemma and a
    sequence of natural numbers as arguments. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_applys\_eq\_3} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P}:\coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}) \coqdocvar{x1} \coqdocvar{x2} \coqdocvar{y1} \coqdocvar{y2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} (\coqdocvar{big\_expression\_using} \coqdocvar{x2}) (\coqdocvar{big\_expression\_using} \coqdocvar{y2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} (\coqdocvar{big\_expression\_using} \coqdocvar{x1}) (\coqdocvar{big\_expression\_using} \coqdocvar{y1}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{H}. \coqdocvar{applys\_eq} \coqdocvar{H} 1 2.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{EqualityExamples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Some Convenient Shorthands}



 This section of the tutorial introduces a few tactics
    that help make proof scripts shorter and more readable:

\begin{itemize}
\item  \coqdocvar{unfolds} (without argument) for unfolding the head definition,

\item  \coqdocconstructor{false} for replacing the goal with \coqdocinductive{False},

\item  \coqdocvar{gen} as a shorthand for \coqdoctac{dependent} \coqdoctac{generalize},

\item  \coqdocvar{skip} for skipping a subgoal even if it contains existential variables,

\item  \coqdocvar{sort} for re-ordering the proof context by moving moving all
      propositions at the bottom. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect}{unfolds}\coqdocvar{unfolds}}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{UnfoldsExample}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Hoare}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{unfolds} (without any argument) unfolds the
    head constant of the goal. This tactic saves the need to
    name the constant explicitly. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{bexp\_eval\_true} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} = \coqdocvar{true} \ensuremath{\rightarrow} (\coqdocvar{bassn} \coqdocvar{b}) \coqdocvar{st}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{b} \coqdocvar{st} \coqdocvar{Hbe}. \coqdocvar{dup}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{bassn}. \coqdoctac{assumption}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{unfolds}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Remark: contrary to the tactic \coqdoctac{hnf}, which may unfold several
    constants, \coqdocvar{unfolds} performs only a single step of unfolding. 

 Remark: the tactic \coqdocvar{unfolds} \coqdoctac{in} \coqdocvariable{H} can be used to unfold the
    head definition of the hypothesis \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{UnfoldsExample}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactics \texorpdfstring{\protect\coqdocconstructor{false}}{false} and \texorpdfstring{\protect}{tryfalse}\coqdocvar{tryfalse}}



 The tactic \coqdocconstructor{false} can be used to replace any goal with \coqdocinductive{False}.
    In short, it is a shorthand for \coqdocvar{exfalso}.
    Moreover, \coqdocconstructor{false} proves the goal if it contains an absurd
    assumption, such as \coqdocinductive{False} or 0 = \coqdocconstructor{S} \coqdocabbreviation{n}, or if it contains
    contradictory assumptions, such as \coqdocabbreviation{x} = \coqdocconstructor{true} and \coqdocabbreviation{x} = \coqdocconstructor{false}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_false} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{S} \coqdocvar{n} = 1 \ensuremath{\rightarrow} \coqdocvar{n} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{destruct} \coqdocvar{n}. \coqdoctac{reflexivity}. \coqdocvar{false}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocconstructor{false} can be given an argument: \coqdocconstructor{false} \coqdocvariable{H} replace
    the goals with \coqdocinductive{False} and then applies \coqdocvariable{H}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_false\_arg} :\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{n} < 0 \ensuremath{\rightarrow} \coqdocvar{False}) \ensuremath{\rightarrow} (3 < 0) \ensuremath{\rightarrow} 4 < 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{H} \coqdocvar{L}. \coqdocvar{false} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{L}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{tryfalse} is a shorthand for \coqdoctac{try} \coqdoctac{solve} [\coqdocconstructor{false}]:
    it tries to find a contradiction in the goal. The tactic
    \coqdocvar{tryfalse} is generally called after a case analysis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_tryfalse} :\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{S} \coqdocvar{n} = 1 \ensuremath{\rightarrow} \coqdocvar{n} = 0.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{destruct} \coqdocvar{n}; \coqdocvar{tryfalse}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect}{gen}\coqdocvar{gen}}



 The tactic \coqdocvar{gen} is a shortand for \coqdoctac{generalize} \coqdoctac{dependent}
    that accepts several arguments at once. An invokation of
    this tactic takes the form \coqdocvar{gen} \coqdocabbreviation{x} \coqdocabbreviation{y} \coqdocabbreviation{z}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{GenExample}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Stlc}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Import} \coqdocvar{STLC}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{substitution\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \coqdocvar{t} \coqdocvar{S} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{v} \coqdocvar{U} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} ([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}) \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dup}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S} \coqdocvar{Htypt} \coqdocvar{Htypv}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{S}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{admit}. \coqdocvar{admit}. \coqdocvar{admit}. \coqdocvar{admit}. \coqdocvar{admit}. \coqdocvar{admit}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{Htypt} \coqdocvar{Htypv}. \coqdocvar{gen} \coqdocvar{S} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{t}; \coqdoctac{intros}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{admit}. \coqdocvar{admit}. \coqdocvar{admit}. \coqdocvar{admit}. \coqdocvar{admit}. \coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{GenExample}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactics \texorpdfstring{\protect}{skip}\coqdocvar{skip}, \texorpdfstring{\protect}{skip\_rewrite}\coqdocvar{skip\_rewrite} and \texorpdfstring{\protect}{skip\_goal}\coqdocvar{skip\_goal}}



 Temporarily admitting a given subgoal is very useful when
    constructing proofs. It gives the ability to focus first
    on the most interesting cases of a proof. The tactic \coqdocvar{skip}
    is like \coqdocvar{admit} except that it also works when the proof
    includes existential variables. Recall that existential
    variables are those whose name starts with a question mark,
    (e.g., ?24), and which are typically introduced by \coqdoctac{eapply}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{SkipExample}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Stlc}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Import} \coqdocvar{STLC}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Notation} " t '/' st '==>a*' t' " := (\coqdocvar{multi} (\coqdocvar{astep} \coqdocvar{st}) \coqdocvar{t} \coqdocvar{t'})\coqdoceol
\coqdocindent{18.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{astep\_example1} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{APlus} (\coqdocvar{ANum} 3) (\coqdocvar{AMult} (\coqdocvar{ANum} 3) (\coqdocvar{ANum} 4))) / \coqdocvar{empty\_state} ==>\coqdocvar{a}\ensuremath{\times} (\coqdocvar{ANum} 15).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdocvar{skip}. \coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{multi\_step}. \coqdocvar{skip}. \coqdocvar{skip}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{skip} \coqdocvariable{H}: \coqdocaxiom{P} adds the hypothesis \coqdocvariable{H}: \coqdocaxiom{P} to the context,
    without checking whether the proposition \coqdocaxiom{P} is true.
    It is useful for exploiting a fact and postponing its proof.
    Note: \coqdocvar{skip} \coqdocvariable{H}: \coqdocaxiom{P} is simply a shorthand for \coqdoctac{assert} (\coqdocvariable{H}:\coqdocaxiom{P}). \coqdocvar{skip}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{demo\_skipH} : \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip} \coqdocvar{H}: (\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat}, (0 + \coqdocvar{n}) \ensuremath{\times} \coqdocvar{m} = \coqdocvar{n} \ensuremath{\times} \coqdocvar{m}).\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{skip\_rewrite} (\coqdocvar{E1} = \coqdocvar{E2}) replaces \coqdocvar{E1} with \coqdocvar{E2} in
    the goal, without checking that \coqdocvar{E1} is actually equal to \coqdocvar{E2}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{mult\_0\_plus} : \coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m} : \coqdocvar{nat},\coqdoceol
\coqdocindent{1.00em}
(0 + \coqdocvar{n}) \ensuremath{\times} \coqdocvar{m} = \coqdocvar{n} \ensuremath{\times} \coqdocvar{m}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dup}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{assert} (\coqdocvar{H}: 0 + \coqdocvar{n} = \coqdocvar{n}). \coqdocvar{skip}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{n} \coqdocvar{m}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip\_rewrite} (0 + \coqdocvar{n} = \coqdocvar{n}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Remark: the tactic \coqdocvar{skip\_rewrite} can in fact be given a lemma
    statement as argument, in the same way as \coqdocvar{asserts\_rewrite}. 

 The tactic \coqdocvar{skip\_goal} adds the current goal as hypothesis.
    This cheat is useful to set up the structure of a proof by
    induction without having to worry about the induction hypothesis
    being applied only to smaller arguments. Using \coqdocvar{skip\_goal}, one
    can construct a proof in two steps: first, check that the main
    arguments go through without waisting time on fixing the details
    of the induction hypotheses; then, focus on fixing the invokations
    of the induction hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{skip\_goal}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{E1} \coqdocvar{E2}. \coqdocvar{gen} \coqdocvar{st2}.\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{induction} \coqdocvar{E1}); \coqdocvar{introv} \coqdocvar{E2}; \coqdocvar{inverts} \coqdocvar{E2} \coqdockw{as}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{n}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st3} \coqdocvar{Red1} \coqdocvar{Red2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st3}) \coqdockw{as} \coqdocvar{EQ1}.\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{3.00em}
 \coqdoctac{eapply} \coqdocvar{IH}. \coqdoctac{eapply} \coqdocvar{E1\_1}. \coqdoctac{eapply} \coqdocvar{Red1}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st3}.\coqdoceol
 \coqdoctac{eapply} \coqdocvar{IH}. \coqdoctac{eapply} \coqdocvar{E1\_2}. \coqdoctac{eapply} \coqdocvar{Red2}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{SkipExample}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Tactic \texorpdfstring{\protect}{sort}\coqdocvar{sort}}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{SortExamples}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{sort} reorganizes the proof context by placing
    all the variables at the top and all the hypotheses at the
    bottom, thereby making the proof context more readable. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2}.\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{induction} \coqdocvar{E1}); \coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdocvar{inverts} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{admit}. \coqdocvar{admit}. \coqdocindent{1.00em}
\coqdocvar{sort}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{SortExamples}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Tactics for Advanced Lemma Instantiation}



 This last section describes a mechanism for instantiating a lemma
    by providing some of its arguments and leaving other implicit.
    Variables whose instantiation is not provided are turned into
    existentential variables, and facts whose instantiation is not
    provided are turned into subgoals.


    Remark: this instantion mechanism goes far beyond the abilities of
    the ``Implicit Arguments'' mechanism. The point of the instantiation
    mechanism described in this section is that you will no longer need
    to spend time figuring out how many underscore symbols you need to
    write. 

 In this section, we'll use a useful feature of Coq for decomposing
    conjunctions and existentials. In short, a tactic like \coqdoctac{intros} or
    \coqdoctac{destruct} can be provided with a pattern (\coqdocvar{H1} \& \coqdocvar{H2} \& \coqdocvar{H3} \& \coqdocvar{H4} \& \coqdocvar{H5}),
    which is a shorthand for [\coqdocvar{H1} [\coqdocvar{H2} [\coqdocvar{H3} [\coqdocvar{H4} \coqdocvar{H5}]]]]]. For example,
    \coqdoctac{destruct} (\coqdocvariable{H} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt}) \coqdockw{as} [\coqdocdefinition{T} [\coqdocvar{Hctx} \coqdocvar{Hsub}]]. can be rewritten in
    the form \coqdoctac{destruct} (\coqdocvariable{H} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt}) \coqdockw{as} (\coqdocdefinition{T} \& \coqdocvar{Hctx} \& \coqdocvar{Hsub}). \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Working of \texorpdfstring{\protect}{lets}\coqdocvar{lets}}



 When we have a lemma (or an assumption) that we want to exploit,
    we often need to explicitly provide arguments to this lemma,
    writing something like:
    \coqdoctac{destruct} (\coqdocaxiom{typing\_inversion\_var} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{Htypt}) \coqdockw{as} (\coqdocdefinition{T} \& \coqdocvar{Hctx} \& \coqdocvar{Hsub}).
    The need to write several times the ``underscore'' symbol is tedious.
    Not only we need to figure out how many of them to write down, but
    it also makes the proof scripts look prettly ugly. With the tactic
    \coqdocvar{lets}, one can simply write:
    \coqdocvar{lets} (\coqdocdefinition{T} \& \coqdocvar{Hctx} \& \coqdocvar{Hsub}): \coqdocaxiom{typing\_inversion\_var} \coqdocvar{Htypt}.


    In short, this tactic \coqdocvar{lets} allows to specialize a lemma on a bunch
    of variables and hypotheses. The syntax is \coqdocvar{lets} \coqdocconstructor{I}: \coqdocvar{E0} \coqdocvar{E1} .. \coqdocvar{EN},
    for building an hypothesis named \coqdocconstructor{I} by applying the fact \coqdocvar{E0} to the
    arguments \coqdocvar{E1} to \coqdocvar{EN}. Not all the arguments need to be provided,
    however the arguments that are provided need to be provided in the
    correct order. The tactic relies on a first-match algorithm based on
    types in order to figure out how the to instantiate the lemma with
    the arguments provided. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{ExamplesLets}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Sub}.\coqdoceol
\coqdocemptyline
\coqdocemptyline
\coqdocnoindent
\coqdockw{Axiom} \coqdocvar{typing\_inversion\_var} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{G}:\coqdockw{context}) (\coqdocvar{x}:\coqdocvar{id}) (\coqdocvar{T}:\coqdocvar{ty}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{G} (\coqdocvar{tvar} \coqdocvar{x}) \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{S}, \coqdocvar{G} \coqdocvar{x} = \coqdocvar{Some} \coqdocvar{S} \ensuremath{\land} \coqdocvar{subtype} \coqdocvar{S} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
First, assume we have an assumption \coqdocvariable{H} with the type of the form
    \coqdocinductive{has\_type} \coqdocvariable{G} (\coqdocconstructor{tvar} \coqdocabbreviation{x}) \coqdocdefinition{T}. We can obtain the conclusion of the
    lemma \coqdocaxiom{typing\_inversion\_var} by invoking the tactics
    \coqdocvar{lets} \coqdocvar{K}: \coqdocaxiom{typing\_inversion\_var} \coqdocvariable{H}, as shown next. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_lets\_1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{G}:\coqdockw{context}) (\coqdocvar{x}:\coqdocvar{id}) (\coqdocvar{T}:\coqdocvar{ty}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{G} (\coqdocvar{tvar} \coqdocvar{x}) \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{G} \coqdocvar{x} \coqdocvar{T} \coqdocvar{H}. \coqdocvar{dup}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{K}: \coqdocvar{typing\_inversion\_var} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{K} \coqdockw{as} (\coqdocvar{S} \& \coqdocvar{Eq} \& \coqdocvar{Sub}).\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{admit}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{lets} (\coqdocvar{S} \& \coqdocvar{Eq} \& \coqdocvar{Sub}): \coqdocvar{typing\_inversion\_var} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Assume now that we know the values of \coqdocvariable{G}, \coqdocabbreviation{x} and \coqdocdefinition{T} and we
    want to obtain \coqdocconstructor{S}, and have \coqdocinductive{has\_type} \coqdocvariable{G} (\coqdocconstructor{tvar} \coqdocabbreviation{x}) \coqdocdefinition{T} be produced
    as a subgoal. To indicate that we want all the remaining arguments
    of \coqdocaxiom{typing\_inversion\_var} to be produced as subgoals, we use a
    triple-underscore symbol \coqdocvar{\_\_\_}. (We'll later introduce a shorthand
    tactic called \coqdocvar{forwards} to avoid writing triple underscores.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_lets\_2} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{G}:\coqdockw{context}) (\coqdocvar{x}:\coqdocvar{id}) (\coqdocvar{T}:\coqdocvar{ty}), \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{G} \coqdocvar{x} \coqdocvar{T}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} (\coqdocvar{S} \& \coqdocvar{Eq} \& \coqdocvar{Sub}): \coqdocvar{typing\_inversion\_var} \coqdocvar{G} \coqdocvar{x} \coqdocvar{T} \coqdocvar{\_\_\_}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Usually, there is only one context \coqdocvariable{G} and one type \coqdocdefinition{T} that are
    going to be suitable for proving \coqdocinductive{has\_type} \coqdocvariable{G} (\coqdocconstructor{tvar} \coqdocabbreviation{x}) \coqdocdefinition{T}, so
    we don't really need to bother giving \coqdocvariable{G} and \coqdocdefinition{T} explicitly.
    It suffices to call \coqdocvar{lets} (\coqdocconstructor{S} \& \coqdocvar{Eq} \& \coqdoclibrary{Sub}): \coqdocaxiom{typing\_inversion\_var} \coqdocabbreviation{x}.
    The variables \coqdocvariable{G} and \coqdocdefinition{T} are then instantiated using existential
    variables. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_lets\_3} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x}:\coqdocvar{id}), \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} (\coqdocvar{S} \& \coqdocvar{Eq} \& \coqdocvar{Sub}): \coqdocvar{typing\_inversion\_var} \coqdocvar{x} \coqdocvar{\_\_\_}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We may go even further by not giving any argument to instantiate
    \coqdocaxiom{typing\_inversion\_var}. In this case, three unification variables
    are introduced. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_lets\_4} : \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} (\coqdocvar{S} \& \coqdocvar{Eq} \& \coqdocvar{Sub}): \coqdocvar{typing\_inversion\_var} \coqdocvar{\_\_\_}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note: if we provide \coqdocvar{lets} with only the name of the lemma as
    argument, it simply adds this lemma in the proof context, without
    trying to instantiate any of its arguments. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_lets\_5} : \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{H}: \coqdocvar{typing\_inversion\_var}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A last useful feature of \coqdocvar{lets} is the double-underscore symbol,
    which allows skipping an argument when several arguments have
    the same type. In the following example, our assumption quantifies
    over two variables \coqdocabbreviation{n} and \coqdocabbreviation{m}, both of type \coqdocdefinition{nat}. We would like
    \coqdocabbreviation{m} to be instantiated as the value 3, but without specifying a
    value for \coqdocabbreviation{n}. This can be achieved by writting \coqdocvar{lets} \coqdocvar{K}: \coqdocvariable{H} \coqdocvar{\_\_} 3. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_lets\_underscore} :\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{n} \ensuremath{\le} \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{n} < \coqdocvar{m}+1) \ensuremath{\rightarrow} \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{H}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{K}: \coqdocvar{H} 3. \coqdocindent{2.00em}
\coqdoctac{clear} \coqdocvar{K}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{lets} \coqdocvar{K}: \coqdocvar{H} \coqdocvar{\_\_} 3. \coqdocindent{2.00em}
\coqdoctac{clear} \coqdocvar{K}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note: one can write \coqdocvar{lets}: \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} in place of \coqdocvar{lets} \coqdocvariable{H}: \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2}.
    In this case, the name \coqdocvariable{H} is chosen arbitrarily.


    Note: the tactics \coqdocvar{lets} accepts up to five arguments. Another
    syntax is available for providing more than five arguments.
    It consists in using a list introduced with the special symbol >>,
    for example \coqdocvar{lets} \coqdocvariable{H}: (>> \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3} \coqdocvar{E4} \coqdocvar{E5} \coqdocvar{E6} \coqdocvar{E7} \coqdocvar{E8} \coqdocvar{E9} 10). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{ExamplesLets}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Working of \texorpdfstring{\protect}{applys}\coqdocvar{applys}, \texorpdfstring{\protect}{forwards}\coqdocvar{forwards} and \texorpdfstring{\protect}{specializes}\coqdocvar{specializes}}



 The tactics \coqdocvar{applys}, \coqdocvar{forwards} and \coqdocvar{specializes} are
    shorthand that may be used in place of \coqdocvar{lets} to perform
    specific tasks.



\begin{itemize}
\item  \coqdocvar{forwards} is a shorthand for instantiating all the arguments

\end{itemize}
    of a lemma. More precisely, \coqdocvar{forwards} \coqdocvariable{H}: \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3} is the
    same as \coqdocvar{lets} \coqdocvariable{H}: \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3} \coqdocvar{\_\_\_}, where the triple-underscore
    has the same meaning as explained earlier on.



\begin{itemize}
\item  \coqdocvar{applys} allows building a lemma using the advanced instantion

\end{itemize}
    mode of \coqdocvar{lets}, and then apply that lemma right away. So,
    \coqdocvar{applys} \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3} is the same as \coqdocvar{lets} \coqdocvariable{H}: \coqdocvar{E0} \coqdocvar{E1} \coqdocvar{E2} \coqdocvar{E3}
    followed with \coqdoctac{eapply} \coqdocvariable{H} and then \coqdoctac{clear} \coqdocvariable{H}.



\begin{itemize}
\item  \coqdocvar{specializes} is a shorthand for instantiating in-place

\end{itemize}
    an assumption from the context with particular arguments.
    More precisely, \coqdocvar{specializes} \coqdocvariable{H} \coqdocvar{E0} \coqdocvar{E1} is the same as
    \coqdocvar{lets} \coqdocvar{H'}: \coqdocvariable{H} \coqdocvar{E0} \coqdocvar{E1} followed with \coqdoctac{clear} \coqdocvariable{H} and \coqdoctac{rename} \coqdocvar{H'} \coqdocvar{into} \coqdocvariable{H}.


    Examples of use of \coqdocvar{applys} appear further on. Several examples of
    use of \coqdocvar{forwards} can be found in the tutorial chapter \coqdoclibrary{UseAuto}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Example of Instantiations}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{ExamplesInstantiations}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Sub}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The following proof shows several examples where \coqdocvar{lets} is used
    instead of \coqdoctac{destruct}, as well as examples where \coqdocvar{applys} is used
    instead of \coqdoctac{apply}. The proof also contains some holes that you
    need to fill in as an exercise. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{substitution\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \coqdocvar{t} \coqdocvar{S} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{v} \coqdocvar{U} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{Gamma} ([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}) \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S} \coqdocvar{Htypt} \coqdocvar{Htypv}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{S}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{induction} \coqdocvar{t}); \coqdoctac{intros}; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}.\coqdoceol
\coqdocemptyline
 \coqdocvar{lets} (\coqdocvar{T}\&\coqdocvar{Hctx}\&\coqdocvar{Hsub}): \coqdocvar{typing\_inversion\_var} \coqdocvar{Htypt}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update} \coqdoctac{in} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Hctx}; \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{Hctx}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{context\_invariance} \coqdockw{with} \coqdocvar{empty}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hcontra}.\coqdoceol
\coqdocemptyline
\coqdocindent{4.00em}
\coqdocvar{lets} [\coqdocvar{T'} \coqdocvar{HT'}]: \coqdocvar{free\_in\_context} \coqdocvar{S} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdocvar{Hcontra}...\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{HT'}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
 \coqdocvar{admit}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rename} \coqdocvar{i} \coqdocvar{into} \coqdocvar{y}. \coqdoctac{rename} \coqdocvar{t} \coqdocvar{into} \coqdocvar{T1}.\coqdoceol
\coqdocemptyline
 \coqdocvar{lets} (\coqdocvar{T2}\&\coqdocvar{Hsub}\&\coqdocvar{Htypt2}): \coqdocvar{typing\_inversion\_abs} \coqdocvar{Htypt}.\coqdoceol
\coqdocemptyline
 \coqdocvar{applys} \coqdocvar{T\_Sub} (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2})...\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{apply} \coqdocvar{T\_Abs}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{x} \coqdocvar{y}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y} \coqdocvar{x})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHt}. \coqdoctac{eapply} \coqdocvar{context\_invariance}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{z} \coqdocvar{Hafi}. \coqdoctac{unfold} \coqdocvar{update}, \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{y} \coqdocvar{z})...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{subst}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{lets}: \coqdocvar{typing\_inversion\_true} \coqdocvar{Htypt}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{lets}: \coqdocvar{typing\_inversion\_false} \coqdocvar{Htypt}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{lets} (\coqdocvar{Htyp1}\&\coqdocvar{Htyp2}\&\coqdocvar{Htyp3}): \coqdocvar{typing\_inversion\_if} \coqdocvar{Htypt}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
 \coqdocvar{lets}: \coqdocvar{typing\_inversion\_unit} \coqdocvar{Htypt}...\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{ExamplesInstantiations}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Summary}



 In this chapter we have presented a number of tactics that help make
    proof script more concise and more robust on change.



\begin{itemize}
\item  \coqdocvar{introv} and \coqdocvar{inverts} improve naming and inversions.



\item  \coqdocconstructor{false} and \coqdocvar{tryfalse} help discarding absurd goals.



\item  \coqdocvar{unfolds} automatically calls \coqdoctac{unfold} on the head definition.



\item  \coqdocvar{gen} helps setting up goals for induction.



\item  \coqdocvar{cases} and \coqdocvar{cases\_if} help with case analysis.



\item  \coqdocvar{splits}, \coqdocvar{branch} and \coqdoctac{\ensuremath{\exists}} to deal with n-ary constructs.



\item  \coqdocvar{asserts\_rewrite}, \coqdocvar{cuts\_rewrite}, \coqdocvar{substs} and \coqdocvar{fequals} help
      working with equalities.



\item  \coqdocvar{lets}, \coqdocvar{forwards}, \coqdocvar{specializes} and \coqdocvar{applys} provide means
      of very conveniently instantiating lemmas.



\item  \coqdocvar{applys\_eq} can save the need to perform manual rewriting steps
      before being able to apply lemma.



\item  \coqdocvar{skip}, \coqdocvar{skip\_rewrite} and \coqdocvar{skip\_goal} give the flexibility to
      choose which subgoals to try and discharge first.

\end{itemize}


    Making use of these tactics can boost one's productivity in Coq proofs.


    If you are interested in using \coqdocvar{LibTactics.v} in your own developments,
    make sure you get the lastest version from:
    http://www.chargueraud.org/softs/tlc/.




 $Date: 2017-01-30 19:42:52 -0500 (Mon, 30 Jan 2017) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.UseAuto}{Library }{Top.UseAuto}

\begin{coqdoccode}
\end{coqdoccode}
\section{UseAuto: Theory and Practice of Automation in Coq Proofs}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
In a machine-checked proof, every single detail has to be
    justified.  This can result in huge proof scripts. Fortunately,
    Coq comes with a proof-search mechanism and with several decision
    procedures that enable the system to automatically synthesize
    simple pieces of proof. Automation is very powerful when set up
    appropriately. The purpose of this chapter is to explain the
    basics of working of automation.


    The chapter is organized in two parts. The first part focuses on a
    general mechanism called ``proof search.'' In short, proof search
    consists in naively trying to apply lemmas and assumptions in all
    possible ways. The second part describes ``decision procedures'',
    which are tactics that are very good at solving proof obligations
    that fall in some particular fragment of the logic of Coq.


    Many of the examples used in this chapter consist of small lemmas
    that have been made up to illustrate particular aspects of automation.
    These examples are completely independent from the rest of the Software
    Foundations course. This chapter also contains some bigger examples
    which are used to explain how to use automation in realistic proofs.
    These examples are taken from other chapters of the course (mostly
    from STLC), and the proofs that we present make use of the tactics
    from the library \coqdocvar{LibTactics.v}, which is presented in the chapter
    \coqdoclibrary{UseTactics}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Lists.List}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{ListNotations}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Stlc}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{LibTactics}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Basic Features of Proof Search}



 The idea of proof search is to replace a sequence of tactics
    applying lemmas and assumptions with a call to a single tactic,
    for example \coqdoctac{auto}. This form of proof automation saves a lot of
    effort. It typically leads to much shorter proof scripts, and to
    scripts that are typically more robust to change.  If one makes a
    little change to a definition, a proof that exploits automation
    probably won't need to be modified at all. Of course, using too
    much automation is a bad idea.  When a proof script no longer
    records the main arguments of a proof, it becomes difficult to fix
    it when it gets broken after a change in a definition. Overall, a
    reasonable use of automation is generally a big win, as it saves a
    lot of time both in building proof scripts and in subsequently
    maintaining those proof scripts. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Strength of Proof Search}



 We are going to study four proof-search tactics: \coqdoctac{auto}, \coqdoctac{eauto},
    \coqdocvar{iauto} and \coqdocvar{jauto}. The tactics \coqdoctac{auto} and \coqdoctac{eauto} are builtin
    in Coq. The tactic \coqdocvar{iauto} is a shorthand for the builtin tactic
    \coqdoctac{try} \coqdoctac{solve} [\coqdoctac{intuition} \coqdoctac{eauto}]. The tactic \coqdocvar{jauto} is defined in
    the library \coqdoclibrary{LibTactics}, and simply performs some preprocessing
    of the goal before calling \coqdoctac{eauto}. The goal of this chapter is
    to explain the general principles of proof search and to give
    rule of thumbs for guessing which of the four tactics mentioned
    above is best suited for solving a given goal.


    Proof search is a compromise between efficiency and
    expressiveness, that is, a tradeoff between how complex goals the
    tactic can solve and how much time the tactic requires for
    terminating. The tactic \coqdoctac{auto} builds proofs only by using the
    basic tactics \coqdoctac{reflexivity}, \coqdoctac{assumption}, and \coqdoctac{apply}. The tactic
    \coqdoctac{eauto} can also exploit \coqdoctac{eapply}. The tactic \coqdocvar{jauto} extends
    \coqdoctac{eauto} by being able to open conjunctions and existentials that
    occur in the context.  The tactic \coqdocvar{iauto} is able to deal with
    conjunctions, disjunctions, and negation in a quite clever way;
    however it is not able to open existentials from the context.
    Also, \coqdocvar{iauto} usually becomes very slow when the goal involves
    several disjunctions.


    Note that proof search tactics never perform any rewriting
    step (tactics \coqdoctac{rewrite}, \coqdoctac{subst}), nor any case analysis on an
    arbitrary data structure or property (tactics \coqdoctac{destruct} and
    \coqdoctac{inversion}), nor any proof by induction (tactic \coqdoctac{induction}). So,
    proof search is really intended to automate the final steps from
    the various branches of a proof. It is not able to discover the
    overall structure of a proof. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Basics}



 The tactic \coqdoctac{auto} is able to solve a goal that can be proved
    using a sequence of \coqdoctac{intros}, \coqdoctac{apply}, \coqdoctac{assumption}, and \coqdoctac{reflexivity}.
    Two examples follow. The first one shows the ability for
    \coqdoctac{auto} to call \coqdoctac{reflexivity} at any time. In fact, calling
    \coqdoctac{reflexivity} is always the first thing that \coqdoctac{auto} tries to do. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_by\_reflexivity} :\coqdoceol
\coqdocindent{1.00em}
2 + 3 = 5.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The second example illustrates a proof where a sequence of
    two calls to \coqdoctac{apply} are needed. The goal is to prove that
    if \coqdocvariable{Q} \coqdocabbreviation{n} implies \coqdocaxiom{P} \coqdocabbreviation{n} for any \coqdocabbreviation{n} and if \coqdocvariable{Q} \coqdocabbreviation{n} holds for any \coqdocabbreviation{n},
    then \coqdocaxiom{P} 2 holds. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_by\_apply} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{Q} \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{n}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{Q} \coqdocvar{n}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} 2.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If we are interested to see which proof \coqdoctac{auto} came up with,
    one possibility is to look at the generated proof-term,
    using the command:


       \coqdockw{Print} \coqdoclemma{solving\_by\_apply}.


   The proof term is:


   \coqdockw{fun} (\coqdocaxiom{P} \coqdocvariable{Q} : \coqdocdefinition{nat} \ensuremath{\rightarrow} \coqdockw{Prop}) (\coqdocvariable{H} : \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n} : \coqdocdefinition{nat}, \coqdocvariable{Q} \coqdocabbreviation{n} \ensuremath{\rightarrow} \coqdocaxiom{P} \coqdocabbreviation{n}) (\coqdocvar{H0} : \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n} : \coqdocdefinition{nat}, \coqdocvariable{Q} \coqdocabbreviation{n})
     \ensuremath{\Rightarrow} \coqdocvariable{H} 2 (\coqdocvar{H0} 2)


   This essentially means that \coqdoctac{auto} applied the hypothesis \coqdocvariable{H}
   (the first one), and then applied the hypothesis \coqdocvar{H0} (the
   second one).




 The tactic \coqdoctac{auto} can invoke \coqdoctac{apply} but not \coqdoctac{eapply}. So, \coqdoctac{auto}
    cannot exploit lemmas whose instantiation cannot be directly
    deduced from the proof goal. To exploit such lemmas, one needs to
    invoke the tactic \coqdoctac{eauto}, which is able to call \coqdoctac{eapply}.


    In the following example, the first hypothesis asserts that \coqdocaxiom{P} \coqdocabbreviation{n}
    is true when \coqdocvariable{Q} \coqdocabbreviation{m} is true for some \coqdocabbreviation{m}, and the goal is to prove
    that \coqdocvariable{Q} 1 implies \coqdocaxiom{P} 2.  This implication follows direction from
    the hypothesis by instantiating \coqdocabbreviation{m} as the value 1.  The
    following proof script shows that \coqdoctac{eauto} successfully solves the
    goal, whereas \coqdoctac{auto} is not able to do so. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_by\_eapply} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{Q} \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{n}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Q} 1 \ensuremath{\rightarrow} \coqdocvar{P} 2.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdoctac{eauto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Conjunctions}



 So far, we've seen that \coqdoctac{eauto} is stronger than \coqdoctac{auto} in the
    sense that it can deal with \coqdoctac{eapply}. In the same way, we are going
    to see how \coqdocvar{jauto} and \coqdocvar{iauto} are stronger than \coqdoctac{auto} and \coqdoctac{eauto}
    in the sense that they provide better support for conjunctions. 

 The tactics \coqdoctac{auto} and \coqdoctac{eauto} can prove a goal of the form
    \coqdocvariable{F} \ensuremath{\land} \coqdocvariable{F'}, where \coqdocvariable{F} and \coqdocvariable{F'} are two propositions, as soon as
    both \coqdocvariable{F} and \coqdocvariable{F'} can be proved in the current context.
    An example follows. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_conj\_goal} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}) (\coqdocvar{F} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{P} \coqdocvar{n}) \ensuremath{\rightarrow} \coqdocvar{F} \ensuremath{\rightarrow} \coqdocvar{F} \ensuremath{\land} \coqdocvar{P} 2.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, when an assumption is a conjunction, \coqdoctac{auto} and \coqdoctac{eauto}
    are not able to exploit this conjunction. It can be quite
    surprising at first that \coqdoctac{eauto} can prove very complex goals but
    that it fails to prove that \coqdocvariable{F} \ensuremath{\land} \coqdocvariable{F'} implies \coqdocvariable{F}. The tactics
    \coqdocvar{iauto} and \coqdocvar{jauto} are able to decompose conjunctions from the context.
    Here is an example. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_conj\_hyp} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{F} \coqdocvar{F'} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{F} \ensuremath{\land} \coqdocvar{F'} \ensuremath{\rightarrow} \coqdocvar{F}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdoctac{eauto}. \coqdocvar{jauto}.  \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdocvar{jauto} is implemented by first calling a
    pre-processing tactic called \coqdocvar{jauto\_set}, and then calling
    \coqdoctac{eauto}. So, to understand how \coqdocvar{jauto} works, one can directly
    call the tactic \coqdocvar{jauto\_set}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_conj\_hyp'} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{F} \coqdocvar{F'} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{F} \ensuremath{\land} \coqdocvar{F'} \ensuremath{\rightarrow} \coqdocvar{F}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdocvar{jauto\_set}. \coqdoctac{eauto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next is a more involved goal that can be solved by \coqdocvar{iauto} and
    \coqdocvar{jauto}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_conj\_more} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} \coqdocvar{R} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}) (\coqdocvar{F} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{F} \ensuremath{\land} (\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, (\coqdocvar{Q} \coqdocvar{m} \ensuremath{\land} \coqdocvar{R} \coqdocvar{n}) \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{n})) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{F} \ensuremath{\rightarrow} \coqdocvar{R} 2) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Q} 1 \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} 2 \ensuremath{\land} \coqdocvar{F}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{jauto}.  \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The strategy of \coqdocvar{iauto} and \coqdocvar{jauto} is to run a global analysis of
    the top-level conjunctions, and then call \coqdoctac{eauto}.  For this
    reason, those tactics are not good at dealing with conjunctions
    that occur as the conclusion of some universally quantified
    hypothesis. The following example illustrates a general weakness
    of Coq proof search mechanisms. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_conj\_hyp\_forall} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{P} \coqdocvar{n} \ensuremath{\land} \coqdocvar{Q} \coqdocvar{n}) \ensuremath{\rightarrow} \coqdocvar{P} 2.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}. \coqdoctac{eauto}. \coqdocvar{iauto}. \coqdocvar{jauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdoctac{destruct} (\coqdocvar{H} 2). \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This situation is slightly disappointing, since automation is
    able to prove the following goal, which is very similar. The
    only difference is that the universal quantification has been
    distributed over the conjunction. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solved\_by\_jauto} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} \coqdocvar{Q} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}) (\coqdocvar{F} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{P} \coqdocvar{n}) \ensuremath{\land} (\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{Q} \coqdocvar{n}) \ensuremath{\rightarrow} \coqdocvar{P} 2.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{jauto}.  \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Disjunctions}



 The tactics \coqdoctac{auto} and \coqdoctac{eauto} can handle disjunctions that
    occur in the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_disj\_goal} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{F} \coqdocvar{F'} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{F} \ensuremath{\rightarrow} \coqdocvar{F} \ensuremath{\lor} \coqdocvar{F'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, only \coqdocvar{iauto} is able to automate reasoning on the
    disjunctions that appear in the context. For example, \coqdocvar{iauto} can
    prove that \coqdocvariable{F} \ensuremath{\lor} \coqdocvariable{F'} entails \coqdocvariable{F'} \ensuremath{\lor} \coqdocvariable{F}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_disj\_hyp} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{F} \coqdocvar{F'} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{F} \ensuremath{\lor} \coqdocvar{F'} \ensuremath{\rightarrow} \coqdocvar{F'} \ensuremath{\lor} \coqdocvar{F}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdoctac{eauto}. \coqdocvar{jauto}. \coqdocvar{iauto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
More generally, \coqdocvar{iauto} can deal with complex combinations of
    conjunctions, disjunctions, and negations. Here is an example. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_tauto} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{F1} \coqdocvar{F2} \coqdocvar{F3} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
((\~{}\coqdocvar{F1} \ensuremath{\land} \coqdocvar{F3}) \ensuremath{\lor} (\coqdocvar{F2} \ensuremath{\land} \ensuremath{\lnot}\coqdocvar{F3})) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{F2} \ensuremath{\rightarrow} \coqdocvar{F1}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{F2} \ensuremath{\rightarrow} \coqdocvar{F3}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot}\coqdocvar{F2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{iauto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, the ability of \coqdocvar{iauto} to automatically perform a case
    analysis on disjunctions comes with a downside: \coqdocvar{iauto} may be
    very slow. If the context involves several hypotheses with
    disjunctions, \coqdocvar{iauto} typically generates an exponential number of
    subgoals on which \coqdoctac{eauto} is called. One major advantage of \coqdocvar{jauto}
    compared with \coqdocvar{iauto} is that it never spends time performing this
    kind of case analyses. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Existentials}



 The tactics \coqdoctac{eauto}, \coqdocvar{iauto}, and \coqdocvar{jauto} can prove goals whose
    conclusion is an existential. For example, if the goal is \coqdoctac{\ensuremath{\exists}}
    \coqdocabbreviation{x}, \coqdocabbreviation{f} \coqdocabbreviation{x}, the tactic \coqdoctac{eauto} introduces an existential variable,
    say ?25, in place of \coqdocabbreviation{x}. The remaining goal is \coqdocabbreviation{f} ?25, and
    \coqdoctac{eauto} tries to solve this goal, allowing itself to instantiate
    ?25 with any appropriate value. For example, if an assumption \coqdocabbreviation{f}
    2 is available, then the variable ?25 gets instantiated with
    2 and the goal is solved, as shown below. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_exists\_goal} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{f} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{f} 2 \ensuremath{\rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{f} \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}. \coqdocindent{1.00em}
\coqdoctac{eauto}. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A major strength of \coqdocvar{jauto} over the other proof search tactics is
    that it is able to exploit the existentially-quantified
    hypotheses, i.e., those of the form \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x}, \coqdocaxiom{P}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{solving\_exists\_hyp} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{f} \coqdocvar{g} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{f} \coqdocvar{x} \ensuremath{\rightarrow} \coqdocvar{g} \coqdocvar{x}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{a}, \coqdocvar{f} \coqdocvar{a}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{a}, \coqdocvar{g} \coqdocvar{a}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}. \coqdoctac{eauto}. \coqdocvar{iauto}. \coqdocindent{1.00em}
\coqdocvar{jauto}. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Negation}



 The tactics \coqdoctac{auto} and \coqdoctac{eauto} suffer from some limitations with
    respect to the manipulation of negations, mostly related to the
    fact that negation, written \ensuremath{\lnot} \coqdocaxiom{P}, is defined as \coqdocaxiom{P} \ensuremath{\rightarrow} \coqdocinductive{False} but
    that the unfolding of this definition is not performed
    automatically. Consider the following example. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{negation\_study\_1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} 0 \ensuremath{\rightarrow} (\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \ensuremath{\lnot} \coqdocvar{P} \coqdocvar{x}) \ensuremath{\rightarrow} \coqdocvar{False}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{H0} \coqdocvar{HX}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eauto}. \coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{not} \coqdoctac{in} *. \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For this reason, the tactics \coqdocvar{iauto} and \coqdocvar{jauto} systematically
    invoke \coqdoctac{unfold} \coqdocdefinition{not} \coqdoctac{in} * as part of their pre-processing. So,
    they are able to solve the previous goal right away. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{negation\_study\_2} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} 0 \ensuremath{\rightarrow} (\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \ensuremath{\lnot} \coqdocvar{P} \coqdocvar{x}) \ensuremath{\rightarrow} \coqdocvar{False}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{jauto}.  \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We will come back later on to the behavior of proof search with
    respect to the unfolding of definitions. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Equalities}



 Coq's proof-search feature is not good at exploiting equalities.
    It can do very basic operations, like exploiting reflexivity
    and symmetry, but that's about it. Here is a simple example
    that \coqdoctac{auto} can solve, by first calling \coqdoctac{symmetry} and then
    applying the hypothesis. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{equality\_by\_auto} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{f} \coqdocvar{g} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{f} \coqdocvar{x} = \coqdocvar{g} \coqdocvar{x}) \ensuremath{\rightarrow} \coqdocvar{g} 2 = \coqdocvar{f} 2.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To automate more advanced reasoning on equalities, one should
    rather try to use the tactic \coqdoctac{congruence}, which is presented at
    the end of this chapter in the ``Decision Procedures'' section. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{How Proof Search Works}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Search Depth}



 The tactic \coqdoctac{auto} works as follows.  It first tries to call
    \coqdoctac{reflexivity} and \coqdoctac{assumption}. If one of these calls solves the
    goal, the job is done. Otherwise \coqdoctac{auto} tries to apply the most
    recently introduced assumption that can be applied to the goal
    without producing and error. This application produces
    subgoals. There are two possible cases. If the sugboals produced
    can be solved by a recursive call to \coqdoctac{auto}, then the job is done.
    Otherwise, if this application produces at least one subgoal that
    \coqdoctac{auto} cannot solve, then \coqdoctac{auto} starts over by trying to apply
    the second most recently introduced assumption. It continues in a
    similar fashion until it finds a proof or until no assumption
    remains to be tried.


    It is very important to have a clear idea of the backtracking
    process involved in the execution of the \coqdoctac{auto} tactic; otherwise
    its behavior can be quite puzzling. For example, \coqdoctac{auto} is not
    able to solve the following triviality. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{search\_depth\_0} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{True} \ensuremath{\land} \coqdocvar{True} \ensuremath{\land} \coqdocvar{True} \ensuremath{\land} \coqdocvar{True} \ensuremath{\land} \coqdocvar{True} \ensuremath{\land} \coqdocvar{True}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The reason \coqdoctac{auto} fails to solve the goal is because there are
    too many conjunctions. If there had been only five of them, \coqdoctac{auto}
    would have successfully solved the proof, but six is too many.
    The tactic \coqdoctac{auto} limits the number of lemmas and hypotheses
    that can be applied in a proof, so as to ensure that the proof
    search eventually terminates. By default, the maximal number
    of steps is five. One can specify a different bound, writing
    for example \coqdoctac{auto} 6 to search for a proof involving at most
    six steps. For example, \coqdoctac{auto} 6 would solve the previous lemma.
    (Similarly, one can invoke \coqdoctac{eauto} 6 or \coqdoctac{intuition} \coqdoctac{eauto} 6.)
    The argument \coqdocabbreviation{n} of \coqdoctac{auto} \coqdocabbreviation{n} is called the ``search depth.''
    The tactic \coqdoctac{auto} is simply defined as a shorthand for \coqdoctac{auto} 5.


    The behavior of \coqdoctac{auto} \coqdocabbreviation{n} can be summarized as follows. It first
    tries to solve the goal using \coqdoctac{reflexivity} and \coqdoctac{assumption}. If
    this fails, it tries to apply a hypothesis (or a lemma that has
    been registered in the hint database), and this application
    produces a number of sugoals. The tactic \coqdoctac{auto} (\coqdocabbreviation{n}-1) is then
    called on each of those subgoals. If all the subgoals are solved,
    the job is completed, otherwise \coqdoctac{auto} \coqdocabbreviation{n} tries to apply a
    different hypothesis.


    During the process, \coqdoctac{auto} \coqdocabbreviation{n} calls \coqdoctac{auto} (\coqdocabbreviation{n}-1), which in turn
    might call \coqdoctac{auto} (\coqdocabbreviation{n}-2), and so on. The tactic \coqdoctac{auto} 0 only
    tries \coqdoctac{reflexivity} and \coqdoctac{assumption}, and does not try to apply
    any lemma. Overall, this means that when the maximal number of
    steps allowed has been exceeded, the \coqdoctac{auto} tactic stops searching
    and backtracks to try and investigate other paths. 

 The following lemma admits a unique proof that involves exactly
    three steps. So, \coqdoctac{auto} \coqdocabbreviation{n} proves this goal iff \coqdocabbreviation{n} is greater than
    three. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{search\_depth\_1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{P} 0 \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} 0 \ensuremath{\rightarrow} \coqdocvar{P} 1) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} 1 \ensuremath{\rightarrow} \coqdocvar{P} 2) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{P} 2).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto} 0. \coqdocindent{1.00em}
\coqdoctac{auto} 1. \coqdocindent{1.00em}
\coqdoctac{auto} 2. \coqdocindent{1.00em}
\coqdoctac{auto} 3. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can generalize the example by introducing an assumption
    asserting that \coqdocaxiom{P} \coqdocabbreviation{k} is derivable from \coqdocaxiom{P} (\coqdocabbreviation{k}-1) for all \coqdocabbreviation{k},
    and keep the assumption \coqdocaxiom{P} 0. The tactic \coqdoctac{auto}, which is the
    same as \coqdoctac{auto} 5, is able to derive \coqdocaxiom{P} \coqdocabbreviation{k} for all values of \coqdocabbreviation{k}
    less than 5. For example, it can prove \coqdocaxiom{P} 4. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{search\_depth\_3} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
 (\coqdocvar{P} 0) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdockw{\ensuremath{\forall}} \coqdocvar{k}, \coqdocvar{P} (\coqdocvar{k}-1) \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{k}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdocvar{P} 4).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, to prove \coqdocaxiom{P} 5, one needs to call at least \coqdoctac{auto} 6. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{search\_depth\_4} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
 (\coqdocvar{P} 0) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdockw{\ensuremath{\forall}} \coqdocvar{k}, \coqdocvar{P} (\coqdocvar{k}-1) \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{k}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdocvar{P} 5).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdoctac{auto} 6. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Because \coqdoctac{auto} looks for proofs at a limited depth, there are
    cases where \coqdoctac{auto} can prove a goal \coqdocvariable{F} and can prove a goal
    \coqdocvariable{F'} but cannot prove \coqdocvariable{F} \ensuremath{\land} \coqdocvariable{F'}. In the following example,
    \coqdoctac{auto} can prove \coqdocaxiom{P} 4 but it is not able to prove \coqdocaxiom{P} 4 \ensuremath{\land} \coqdocaxiom{P} 4,
    because the splitting of the conjunction consumes one proof step.
    To prove the conjunction, one needs to increase the search depth,
    using at least \coqdoctac{auto} 6. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{search\_depth\_5} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
 (\coqdocvar{P} 0) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdockw{\ensuremath{\forall}} \coqdocvar{k}, \coqdocvar{P} (\coqdocvar{k}-1) \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{k}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdocvar{P} 4 \ensuremath{\land} \coqdocvar{P} 4).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdoctac{auto} 6. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Backtracking}



 In the previous section, we have considered proofs where
    at each step there was a unique assumption that \coqdoctac{auto}
    could apply. In general, \coqdoctac{auto} can have several choices
    at every step. The strategy of \coqdoctac{auto} consists of trying all
    of the possibilities (using a depth-first search exploration).


    To illustrate how automation works, we are going to extend the
    previous example with an additional assumption asserting that
    \coqdocaxiom{P} \coqdocabbreviation{k} is also derivable from \coqdocaxiom{P} (\coqdocabbreviation{k}+1). Adding this hypothesis
    offers a new possibility that \coqdoctac{auto} could consider at every step.


    There exists a special command that one can use for tracing
    all the steps that proof-search considers. To view such a
    trace, one should write \coqdoctac{debug} \coqdoctac{eauto}. (For some reason, the
    command \coqdoctac{debug} \coqdoctac{auto} does not exist, so we have to use the
    command \coqdoctac{debug} \coqdoctac{eauto} instead.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{working\_of\_auto\_1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
 (\coqdocvar{P} 0) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdockw{\ensuremath{\forall}} \coqdocvar{k}, \coqdocvar{P} (\coqdocvar{k}-1) \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{k}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdockw{\ensuremath{\forall}} \coqdocvar{k}, \coqdocvar{P} (\coqdocvar{k}+1) \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{k}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdocvar{P} 2).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{P} \coqdocvar{H1} \coqdocvar{H2} \coqdocvar{H3}.  \coqdoctac{eauto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The output message produced by \coqdoctac{debug} \coqdoctac{eauto} is as follows.


    depth=5
    depth=4 apply H2
    depth=3 apply H2
    depth=3 exact H1


    The depth indicates the value of \coqdocabbreviation{n} with which \coqdoctac{eauto} \coqdocabbreviation{n} is
    called. The tactics shown in the message indicate that the first
    thing that \coqdoctac{eauto} has tried to do is to apply \coqdocvar{H2}. The effect of
    applying \coqdocvar{H2} is to replace the goal \coqdocaxiom{P} 2 with the goal \coqdocaxiom{P} 1.
    Then, again, \coqdocvar{H2} has been applied, changing the goal \coqdocaxiom{P} 1 into
    \coqdocaxiom{P} 0. At that point, the goal was exactly the hypothesis \coqdocvar{H1}.


    It seems that \coqdoctac{eauto} was quite lucky there, as it never even
    tried to use the hypothesis \coqdocvar{H3} at any time. The reason is that
    \coqdoctac{auto} always tried to use the \coqdocvar{H2} first. So, let's permute
    the hypotheses \coqdocvar{H2} and \coqdocvar{H3} and see what happens. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{working\_of\_auto\_2} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
 (\coqdocvar{P} 0) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdockw{\ensuremath{\forall}} \coqdocvar{k}, \coqdocvar{P} (\coqdocvar{k}+1) \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{k}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdockw{\ensuremath{\forall}} \coqdocvar{k}, \coqdocvar{P} (\coqdocvar{k}-1) \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{k}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
 (\coqdocvar{P} 2).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{P} \coqdocvar{H1} \coqdocvar{H3} \coqdocvar{H2}.  \coqdoctac{eauto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This time, the output message suggests that the proof search
    investigates many possibilities. If we print the proof term:


      \coqdockw{Print} \coqdoclemma{working\_of\_auto\_2}.


    we observe that the proof term refers to \coqdocvar{H3}. Thus the proof
    is not the simplest one, since only \coqdocvar{H2} and \coqdocvar{H1} are needed.


    In turns out that the proof goes through the proof obligation \coqdocaxiom{P} 3, 
    even though it is not required to do so. The following tree drawing
    describes all the goals that \coqdoctac{eauto} has been going through.


    |5||4||3||2||1||0| -- below, tabulation indicates the depth


    \coqdocaxiom{P} 2

\begin{itemize}
\item > \coqdocaxiom{P} 3

\begin{itemize}
\item > \coqdocaxiom{P} 4

\begin{itemize}
\item > \coqdocaxiom{P} 5

\begin{itemize}
\item > \coqdocaxiom{P} 6

\begin{itemize}
\item > \coqdocaxiom{P} 7

\item > \coqdocaxiom{P} 5

\end{itemize}

\item > \coqdocaxiom{P} 4

\begin{itemize}
\item > \coqdocaxiom{P} 5

\item > \coqdocaxiom{P} 3

\end{itemize}

\end{itemize}

\item -> \coqdocaxiom{P} 3

\begin{itemize}
\item > \coqdocaxiom{P} 4

\begin{itemize}
\item > \coqdocaxiom{P} 5

\item > \coqdocaxiom{P} 3

\end{itemize}

\item > \coqdocaxiom{P} 2

\begin{itemize}
\item > \coqdocaxiom{P} 3

\item > \coqdocaxiom{P} 1

\end{itemize}

\end{itemize}

\end{itemize}

\item > \coqdocaxiom{P} 2

\begin{itemize}
\item > \coqdocaxiom{P} 3

\begin{itemize}
\item > \coqdocaxiom{P} 4

\begin{itemize}
\item > \coqdocaxiom{P} 5

\item > \coqdocaxiom{P} 3

\end{itemize}

\item > \coqdocaxiom{P} 2

\begin{itemize}
\item > \coqdocaxiom{P} 3

\item > \coqdocaxiom{P} 1

\end{itemize}

\end{itemize}

\item > \coqdocaxiom{P} 1

\begin{itemize}
\item > \coqdocaxiom{P} 2

\begin{itemize}
\item > \coqdocaxiom{P} 3

\item > \coqdocaxiom{P} 1

\end{itemize}

\item > \coqdocaxiom{P} 0

\begin{itemize}
\item > !! Done !!

\end{itemize}

\end{itemize}

\end{itemize}

\end{itemize}

\end{itemize}


    The first few lines read as follows. To prove \coqdocaxiom{P} 2, \coqdoctac{eauto} 5
    has first tried to apply \coqdocvar{H3}, producing the subgoal \coqdocaxiom{P} 3.
    To solve it, \coqdoctac{eauto} 4 has tried again to apply \coqdocvar{H3}, producing
    the goal \coqdocaxiom{P} 4. Similarly, the search goes through \coqdocaxiom{P} 5, \coqdocaxiom{P} 6
    and \coqdocaxiom{P} 7. When reaching \coqdocaxiom{P} 7, the tactic \coqdoctac{eauto} 0 is called
    but as it is not allowed to try and apply any lemma, it fails.
    So, we come back to the goal \coqdocaxiom{P} 6, and try this time to apply
    hypothesis \coqdocvar{H2}, producing the subgoal \coqdocaxiom{P} 5. Here again,
    \coqdoctac{eauto} 0 fails to solve this goal.


    The process goes on and on, until backtracking to \coqdocaxiom{P} 3 and trying
    to apply \coqdocvar{H3} three times in a row, going through \coqdocaxiom{P} 2 and \coqdocaxiom{P} 1
    and \coqdocaxiom{P} 0. This search tree explains why \coqdoctac{eauto} came up with a
    proof term starting with an application of \coqdocvar{H3}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Adding Hints}



 By default, \coqdoctac{auto} (and \coqdoctac{eauto}) only tries to apply the
    hypotheses that appear in the proof context. There are two
    possibilities for telling \coqdoctac{auto} to exploit a lemma that have
    been proved previously: either adding the lemma as an assumption
    just before calling \coqdoctac{auto}, or adding the lemma as a hint, so
    that it can be used by every calls to \coqdoctac{auto}.


    The first possibility is useful to have \coqdoctac{auto} exploit a lemma
    that only serves at this particular point. To add the lemma as
    hypothesis, one can type \coqdoctac{generalize} \coqdocvar{mylemma}; \coqdoctac{intros}, or simply
    \coqdocvar{lets}: \coqdocvar{mylemma} (the latter requires \coqdocvar{LibTactics.v}).


    The second possibility is useful for lemmas that need to be
    exploited several times. The syntax for adding a lemma as a hint
    is \coqdockw{Hint} \coqdockw{Resolve} \coqdocvar{mylemma}. For example, the lemma asserting than
    any number is less than or equal to itself, \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{x}, \coqdocabbreviation{x} \ensuremath{\le} \coqdocabbreviation{x},
    called \coqdocvar{Le.le\_refl} in the Coq standard library, can be added as a
    hint as follows. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Resolve} \coqdocvar{Le.le\_refl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
A convenient shorthand for adding all the constructors of an
    inductive datatype as hints is the command \coqdockw{Hint} \coqdockw{Constructors}
    \coqdocvar{mydatatype}.


    Warning: some lemmas, such as transitivity results, should
    not be added as hints as they would very badly affect the
    performance of proof search. The description of this problem
    and the presentation of a general work-around for transitivity
    lemmas appear further on. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Integration of Automation in Tactics}



 The library ``LibTactics'' introduces a convenient feature for
    invoking automation after calling a tactic. In short, it suffices
    to add the symbol star (\ensuremath{\times}) to the name of a tactic. For example,
    \coqdoctac{apply}\ensuremath{\times} \coqdocvariable{H} is equivalent to \coqdoctac{apply} \coqdocvariable{H}; \coqdocvar{auto\_star}, where \coqdocvar{auto\_star}
    is a tactic that can be defined as needed.


    The definition of \coqdocvar{auto\_star}, which determines the meaning of the
    star symbol, can be modified whenever needed. Simply write:


       Ltac auto\_star ::= a\_new\_definition.


    Observe the use of ::= instead of :=, which indicates that the
    tactic is being rebound to a new definition. So, the default
    definition is as follows. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{auto\_star} ::= \coqdoctac{try} \coqdoctac{solve} [ \coqdocvar{jauto} ].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Nearly all standard Coq tactics and all the tactics from
    ``LibTactics'' can be called with a star symbol. For example, one
    can invoke \coqdoctac{subst}\ensuremath{\times}, \coqdoctac{destruct}\ensuremath{\times} \coqdocvariable{H}, \coqdocvar{inverts}\ensuremath{\times} \coqdocvariable{H}, \coqdocvar{lets}\ensuremath{\times} \coqdocconstructor{I}: \coqdocvariable{H} \coqdocabbreviation{x},
    \coqdocvar{specializes}\ensuremath{\times} \coqdocvariable{H} \coqdocabbreviation{x}, and so on... There are two notable exceptions.
    The tactic \coqdoctac{auto}\ensuremath{\times} is just another name for the tactic
    \coqdocvar{auto\_star}.  And the tactic \coqdoctac{apply}\ensuremath{\times} \coqdocvariable{H} calls \coqdoctac{eapply} \coqdocvariable{H} (or the
    more powerful \coqdocvar{applys} \coqdocvariable{H} if needed), and then calls \coqdocvar{auto\_star}.
    Note that there is no \coqdoctac{eapply}\ensuremath{\times} \coqdocvariable{H} tactic, use \coqdoctac{apply}\ensuremath{\times} \coqdocvariable{H}
    instead. 

 In large developments, it can be convenient to use two degrees of
    automation. Typically, one would use a fast tactic, like \coqdoctac{auto},
    and a slower but more powerful tactic, like \coqdocvar{jauto}. To allow for
    a smooth coexistence of the two form of automation, \coqdocvar{LibTactics.v}
    also defines a ``tilde'' version of tactics, like \coqdoctac{apply}\ensuremath{\lnot} \coqdocvariable{H},
    \coqdoctac{destruct}\ensuremath{\lnot} \coqdocvariable{H}, \coqdoctac{subst}\ensuremath{\lnot}, \coqdoctac{auto}\ensuremath{\lnot} and so on. The meaning of the
    tilde symbol is described by the \coqdocvar{auto\_tilde} tactic, whose
    default implementation is \coqdoctac{auto}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{auto\_tilde} ::= \coqdoctac{auto}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In the examples that follow, only \coqdocvar{auto\_star} is needed. 

 An alternative, possibly more efficient version of auto\_star is the
    following``:


    Ltac auto\_star ::= try solve  \coqdocvar{eassumption} \ensuremath{|} \coqdoctac{auto} \ensuremath{|} \coqdocvar{jauto} .


    With the above definition, \coqdocvar{auto\_star} first tries to solve the
    goal using the assumptions; if it fails, it tries using \coqdoctac{auto},
    and if this still fails, then it calls \coqdocvar{jauto}. Even though
    \coqdocvar{jauto} is strictly stronger than \coqdocvar{eassumption} and \coqdoctac{auto}, it
    makes sense to call these tactics first, because, when the
    succeed, they save a lot of time, and when they fail to prove
    the goal, they fail very quickly.''.


\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Examples of Use of Automation}



 Let's see how to use proof search in practice on the main theorems
    of the ``Software Foundations'' course, proving in particular
    results such as determinism, preservation and progress. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Determinism}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{DeterministicImp}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Recall the original proof of the determinism lemma for the IMP
    language, shown below. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{E1} \coqdocvar{E2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st2}.\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{induction} \coqdocvar{E1}); \coqdoctac{intros} \coqdocvar{st2} \coqdocvar{E2}; \coqdoctac{inversion} \coqdocvar{E2}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1}.\coqdoceol
\coqdocindent{2.00em}
\{  \coqdoctac{apply} \coqdocvar{IHE1\_1}; \coqdoctac{assumption}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHE1\_2}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHE1}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H5}. \coqdoctac{inversion} \coqdocvar{H5}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{IHE1}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H2}. \coqdoctac{inversion} \coqdocvar{H2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{H} \coqdoctac{in} \coqdocvar{H4}. \coqdoctac{inversion} \coqdocvar{H4}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}) \coqdockw{as} \coqdocvar{EQ1}.\coqdoceol
\coqdocindent{2.00em}
\{  \coqdoctac{apply} \coqdocvar{IHE1\_1}; \coqdoctac{assumption}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{subst} \coqdocvar{st'0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{IHE1\_2}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Exercise: rewrite this proof using \coqdoctac{auto} whenever possible.
    (The solution uses \coqdoctac{auto} 9 times.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In fact, using automation is not just a matter of calling \coqdoctac{auto}
    in place of one or two other tactics. Using automation is about
    rethinking the organization of sequences of tactics so as to
    minimize the effort involved in writing and maintaining the proof.
    This process is eased by the use of the tactics from
    \coqdocvar{LibTactics.v}.  So, before trying to optimize the way automation
    is used, let's first rewrite the proof of determinism:

\begin{itemize}
\item  use \coqdocvar{introv} \coqdocvariable{H} instead of \coqdoctac{intros} \coqdocabbreviation{x} \coqdocvariable{H},

\item  use \coqdocvar{gen} \coqdocabbreviation{x} instead of \coqdoctac{generalize} \coqdoctac{dependent} \coqdocabbreviation{x},

\item  use \coqdocvar{inverts} \coqdocvariable{H} instead of \coqdoctac{inversion} \coqdocvariable{H}; \coqdoctac{subst},

\item  use \coqdocvar{tryfalse} to handle contradictions, and get rid of
        the cases where \coqdocdefinition{beval} \coqdocvariable{st} \coqdocvariable{b1} = \coqdocconstructor{true} and \coqdocdefinition{beval} \coqdocvariable{st} \coqdocvariable{b1} = \coqdocconstructor{false}
        both appear in the context,

\item  stop using \coqdocvar{ceval\_cases} to label subcases. 
\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'{}'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{E1} \coqdocvar{E2}. \coqdocvar{gen} \coqdocvar{st2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros}; \coqdocvar{inverts} \coqdocvar{E2}; \coqdocvar{tryfalse}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}). \coqdoctac{auto}. \coqdoctac{subst}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}). \coqdoctac{auto}. \coqdoctac{subst}. \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To obtain a nice clean proof script, we have to remove the calls
    \coqdoctac{assert} (\coqdocvariable{st'} = \coqdocvar{st'0}). Such a tactic invokation is not nice
    because it refers to some variables whose name has been
    automatically generated. This kind of tactics tend to be very
    brittle.  The tactic \coqdoctac{assert} (\coqdocvariable{st'} = \coqdocvar{st'0}) is used to assert the
    conclusion that we want to derive from the induction
    hypothesis. So, rather than stating this conclusion explicitly, we
    are going to ask Coq to instantiate the induction hypothesis,
    using automation to figure out how to instantiate it. The tactic
    \coqdocvar{forwards}, described in \coqdocvar{LibTactics.v} precisely helps with
    instantiating a fact. So, let's see how it works out on our
    example. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'{}'{}'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{E1} \coqdocvar{E2}. \coqdocvar{gen} \coqdocvar{st2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros}; \coqdocvar{inverts} \coqdocvar{E2}; \coqdocvar{tryfalse}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{dup} 4.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
+ \coqdoctac{assert} (\coqdocvar{st'} = \coqdocvar{st'0}). \coqdoctac{apply} \coqdocvar{IHE1\_1}. \coqdoctac{apply} \coqdocvar{H1}.\coqdoceol
 \coqdocvar{skip}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
+ \coqdocvar{forwards}: \coqdocvar{IHE1\_1}. \coqdoctac{apply} \coqdocvar{H1}.\coqdoceol
 \coqdocvar{skip}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
+ \coqdocvar{forwards}: \coqdocvar{IHE1\_1}. \coqdoctac{eauto}.\coqdoceol
 \coqdocvar{skip}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
+ \coqdocvar{forwards}*: \coqdocvar{IHE1\_1}.\coqdoceol
 \coqdocvar{skip}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To polish the proof script, it remains to factorize the calls
    to \coqdoctac{auto}, using the star symbol. The proof of determinism can then
    be rewritten in only four lines, including no more than 10 tactics. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_deterministic'{}'{}'{}'}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{st1} = \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{E1} \coqdocvar{E2}. \coqdocvar{gen} \coqdocvar{st2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{E1}; \coqdoctac{intros}; \coqdocvar{inverts}\ensuremath{\times} \coqdocvar{E2}; \coqdocvar{tryfalse}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHE1\_1}. \coqdoctac{subst}\ensuremath{\times}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHE1\_1}. \coqdoctac{subst}\ensuremath{\times}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{DeterministicImp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Preservation for STLC}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{PreservationProgressStlc}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{StlcProp}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Import} \coqdocvar{STLC}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Import} \coqdocvar{STLCProp}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Consider the proof of perservation of STLC, shown below.
    This proof already uses \coqdoctac{eauto} through the triple-dot
    mechanism. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} ==> \coqdocvar{t'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t'} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{HT}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{induction} \coqdocvar{HT}); \coqdoctac{intros} \coqdocvar{t'} \coqdocvar{HE}; \coqdoctac{subst} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{substitution\_preserves\_typing} \coqdockw{with} \coqdocvar{T11}...\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{HT1}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{HE}; \coqdoctac{subst}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Exercise: rewrite this proof using tactics from \coqdoclibrary{LibTactics}
    and calling automation using the star symbol rather than the
    triple-dot notation. More precisely, make use of the tactics
    \coqdocvar{inverts}\ensuremath{\times} and \coqdocvar{applys}\ensuremath{\times} to call \coqdoctac{auto}\ensuremath{\times} after a call to
    \coqdocvar{inverts} or to \coqdocvar{applys}. The solution is three lines long.\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} ==> \coqdocvar{t'}  \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t'} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Progress for STLC}



 Consider the proof of the progress theorem. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{T} \coqdocvar{Ht}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{induction} \coqdocvar{Ht}); \coqdoctac{subst} \coqdocvar{Gamma}...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{IHHt2}...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{4.00em}
\coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{subst}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{\ensuremath{\exists}} ([\coqdocvar{x0}:=\coqdocvar{t2}]\coqdocvar{t})...\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoceol
\coqdocindent{3.50em}
\coqdoctac{destruct} \coqdocvar{H0} \coqdockw{as} [\coqdocvar{t2'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1} \coqdocvar{t2'})...\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{H} \coqdockw{as} [\coqdocvar{t1'} \coqdocvar{Hstp}]. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tapp} \coqdocvar{t1'} \coqdocvar{t2})...\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{right}. \coqdoctac{destruct} \coqdocvar{IHHt1}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} \coqdocvar{t1}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}...\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{\ensuremath{\exists}} (\coqdocvar{tif} \coqdocvar{x0} \coqdocvar{t2} \coqdocvar{t3})...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Exercise: optimize the above proof.
    Hint: make use of \coqdoctac{destruct}\ensuremath{\times} and \coqdocvar{inverts}\ensuremath{\times}.
    The solution consists of 10 short lines. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{progress'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdocvar{t} ==> \coqdocvar{t'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{PreservationProgressStlc}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{BigStep and SmallStep}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Semantics}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Consider the proof relating a small-step reduction judgment
    to a big-step reduction judgment. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{multistep\_\_eval} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{v},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{normal\_form\_of} \coqdocvar{t} \coqdocvar{v} \ensuremath{\rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{n}, \coqdocvar{v} = \coqdocvar{C} \coqdocvar{n} \ensuremath{\land} \coqdocvar{t} \symbol{92}\symbol{92} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{t} \coqdocvar{v} \coqdocvar{Hnorm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{normal\_form\_of} \coqdoctac{in} \coqdocvar{Hnorm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{Hnorm} \coqdockw{as} [\coqdocvar{Hs} \coqdocvar{Hnf}]; \coqdoctac{clear} \coqdocvar{Hnorm}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{nf\_same\_as\_value} \coqdoctac{in} \coqdocvar{Hnf}. \coqdoctac{inversion} \coqdocvar{Hnf}. \coqdoctac{clear} \coqdocvar{Hnf}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{n}. \coqdoctac{split}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hs}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{E\_Const}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{step\_\_eval}. \coqdocvar{eassumption}. \coqdoctac{apply} \coqdocvar{IHHs}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Our goal is to optimize the above proof. It is generally
    easier to isolate inductions into separate lemmas. So,
    we are going to first prove an intermediate result
    that consists of the judgment over which the induction
    is being performed. 

 Exercise: prove the following result, using tactics
    \coqdocvar{introv}, \coqdoctac{induction} and \coqdoctac{subst}, and \coqdoctac{apply}\ensuremath{\times}.
    The solution is 3 lines long. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{multistep\_eval\_ind} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{v},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} ==>* \coqdocvar{v} \ensuremath{\rightarrow} \coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{C} \coqdocvar{n} = \coqdocvar{v} \ensuremath{\rightarrow} \coqdocvar{t} \symbol{92}\symbol{92} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Exercise: using the lemma above, simplify the proof of
    the result \coqdoclemma{multistep\_\_eval}. You should use the tactics
    \coqdocvar{introv}, \coqdocvar{inverts}, \coqdoctac{split}\ensuremath{\times} and \coqdoctac{apply}\ensuremath{\times}.
    The solution is 2 lines long. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{multistep\_\_eval'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{v},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{normal\_form\_of} \coqdocvar{t} \coqdocvar{v} \ensuremath{\rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{n}, \coqdocvar{v} = \coqdocvar{C} \coqdocvar{n} \ensuremath{\land} \coqdocvar{t} \symbol{92}\symbol{92} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If we try to combine the two proofs into a single one,
    we will likely fail, because of a limitation of the
    \coqdoctac{induction} tactic. Indeed, this tactic looses
    information when applied to a property whose arguments
    are not reduced to variables, such as \coqdocvariable{t} ==>* (\coqdocabbreviation{C} \coqdocabbreviation{n}).
    You will thus need to use the more powerful tactic called
    \coqdoctac{dependent} \coqdoctac{induction}. This tactic is available only after
    importing the \coqdoclibrary{Program} library, as shown below. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Program}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Exercise: prove the lemma \coqdoclemma{multistep\_\_eval} without invoking
    the lemma \coqdoclemma{multistep\_eval\_ind}, that is, by inlining the proof
    by induction involved in \coqdoclemma{multistep\_eval\_ind}, using the
    tactic \coqdoctac{dependent} \coqdoctac{induction} instead of \coqdoctac{induction}.
    The solution is 5 lines long. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{multistep\_\_eval'{}'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{t} \coqdocvar{v},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{normal\_form\_of} \coqdocvar{t} \coqdocvar{v} \ensuremath{\rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{n}, \coqdocvar{v} = \coqdocvar{C} \coqdocvar{n} \ensuremath{\land} \coqdocvar{t} \symbol{92}\symbol{92} \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Semantics}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Preservation for STLCRef}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{PreservationProgressReferences}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{References}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Import} \coqdocvar{STLCRef}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Hint Resolve} \coqdocvar{store\_weakening} \coqdocvar{extends\_refl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The proof of preservation for \coqdocmodule{STLCRef} can be found in chapter
    \coqdoclibrary{References}.  The optimized proof script is more than twice
    shorter.  The following material explains how to build the
    optimized proof script.  The resulting optimized proof script for
    the preservation theorem appears afterwards. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} / \coqdocvar{st} ==> \coqdocvar{t'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{extends} \coqdocvar{ST'} \coqdocvar{ST} \ensuremath{\land}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{ST'} \coqdocvar{t'} \coqdocvar{T} \ensuremath{\land}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST'} \coqdocvar{st'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}. \coqdocvar{introv} \coqdocvar{Ht}. \coqdocvar{gen} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{induction} \coqdocvar{Ht}); \coqdocvar{introv} \coqdocvar{HST} \coqdocvar{Hstep};\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{1.50em}
\coqdoctac{subst} \coqdocvar{Gamma}; \coqdocvar{inverts} \coqdocvar{Hstep}; \coqdoctac{eauto}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST}. \coqdocvar{inverts} \coqdocvar{Ht1}. \coqdocvar{splits}\ensuremath{\times}. \coqdocvar{applys}\ensuremath{\times} \coqdocvar{substitution\_preserves\_typing}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}: \coqdocvar{IHHt1}. \coqdoctac{eauto}. \coqdoctac{eauto}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{jauto\_set\_hyps}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{jauto\_set\_goal}; \coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eauto}. \coqdoctac{eauto}. \coqdoctac{eauto}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
-\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{forwards}*: \coqdocvar{IHHt2}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt1}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt1}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{1.00em}
+ \coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{\ensuremath{\exists}} (\coqdocvar{ST} ++ \coqdocvar{T1}::\coqdocvar{nil}). \coqdocvar{inverts} \coqdocvar{keep} \coqdocvar{HST}. \coqdocvar{splits}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{extends\_app}.\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{applys\_eq} \coqdocvar{T\_Loc} 1.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \coqdocvar{app\_length}. \coqdoctac{simpl}. \coqdoctac{omega}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{unfold} \coqdocvar{store\_Tlookup}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{H}. \coqdoctac{rewrite}\ensuremath{\times} \coqdocvar{app\_nth2}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{minus\_diag}. \coqdoctac{simpl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply}\ensuremath{\times} \coqdocvar{store\_well\_typed\_app}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{1.00em}
+ \coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST}. \coqdocvar{splits}\ensuremath{\times}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{lets} [\coqdocvar{\_} \coqdocvar{Hsty}]: \coqdocvar{HST}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{applys\_eq}\ensuremath{\times} \coqdocvar{Hsty} 1.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{inverts}\ensuremath{\times} \coqdocvar{Ht}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{1.00em}
+ \coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST}. \coqdocvar{splits}\ensuremath{\times}. \coqdocvar{applys}\ensuremath{\times} \coqdocvar{assign\_pres\_store\_typing}. \coqdocvar{inverts}\ensuremath{\times} \coqdocvar{Ht1}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt1}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt2}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Let's come back to the proof case that was hard to optimize.
    The difficulty comes from the statement of \coqdoclemma{nth\_eq\_last}, which
    takes the form \coqexternalref{nth}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Lists.List}{\coqdocdefinition{nth}} (\coqdocdefinition{length} \coqdocabbreviation{l}) (\coqdocabbreviation{l} ++ \coqdocabbreviation{x}::\coqdocconstructor{nil}) \coqdocconstructor{d} = \coqdocabbreviation{x}. This lemma is
    hard to exploit because its first argument, \coqdocdefinition{length} \coqdocabbreviation{l}, mentions
    a list \coqdocabbreviation{l} that has to be exactly the same as the \coqdocabbreviation{l} occuring in
    \coqdocvar{snoc} \coqdocabbreviation{l} \coqdocabbreviation{x}. In practice, the first argument is often a natural
    number \coqdocabbreviation{n} that is provably equal to \coqdocdefinition{length} \coqdocabbreviation{l} yet that is not
    syntactically equal to \coqdocdefinition{length} \coqdocabbreviation{l}. There is a simple fix for
    making \coqdoclemma{nth\_eq\_last} easy to apply: introduce the intermediate
    variable \coqdocabbreviation{n} explicitly, so that the goal becomes
    \coqexternalref{nth}{http://coq.inria.fr/distrib/8.6.1/stdlib/Coq.Lists.List}{\coqdocdefinition{nth}} \coqdocabbreviation{n} (\coqdocvar{snoc} \coqdocabbreviation{l} \coqdocabbreviation{x}) \coqdocconstructor{d} = \coqdocabbreviation{x}, with a premise asserting \coqdocabbreviation{n} = \coqdocdefinition{length} \coqdocabbreviation{l}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{nth\_eq\_last'} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{A} : \coqdockw{Type}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{A}) (\coqdocvar{x} \coqdocvar{d} : \coqdocvar{A}) (\coqdocvar{n} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n} = \coqdocvar{length} \coqdocvar{l} \ensuremath{\rightarrow} \coqdocvar{nth} \coqdocvar{n} (\coqdocvar{l} ++ \coqdocvar{x}::\coqdocvar{nil}) \coqdocvar{d} = \coqdocvar{x}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{subst}. \coqdoctac{apply} \coqdocvar{nth\_eq\_last}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The proof case for \coqdocvar{ref} from the preservation theorem then
    becomes much easier to prove, because \coqdoctac{rewrite} \coqdoclemma{nth\_eq\_last'}
    now succeeds. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{preservation\_ref} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{st}:\coqdocvar{store}) (\coqdocvar{ST} : \coqdocvar{store\_ty}) \coqdocvar{T1},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{length} \coqdocvar{ST} = \coqdocvar{length} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{TRef} \coqdocvar{T1} = \coqdocvar{TRef} (\coqdocvar{store\_Tlookup} (\coqdocvar{length} \coqdocvar{st}) (\coqdocvar{ST} ++ \coqdocvar{T1}::\coqdocvar{nil})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdocvar{dup}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{store\_Tlookup}. \coqdoctac{rewrite}\ensuremath{\times} \coqdocvar{nth\_eq\_last'}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{fequal}. \coqdoctac{symmetry}. \coqdoctac{apply}\ensuremath{\times} \coqdocvar{nth\_eq\_last'}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The optimized proof of preservation is summarized next. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{preservation'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{t'} \coqdocvar{T} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t} / \coqdocvar{st} ==> \coqdocvar{t'} / \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{\ensuremath{\exists}} \coqdocvar{ST'},\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{extends} \coqdocvar{ST'} \coqdocvar{ST} \ensuremath{\land}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{ST'} \coqdocvar{t'} \coqdocvar{T} \ensuremath{\land}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST'} \coqdocvar{st'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}. \coqdocvar{introv} \coqdocvar{Ht}. \coqdocvar{gen} \coqdocvar{t'}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Ht}; \coqdocvar{introv} \coqdocvar{HST} \coqdocvar{Hstep}; \coqdoctac{subst} \coqdocvar{Gamma}; \coqdocvar{inverts} \coqdocvar{Hstep}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{\ensuremath{\exists}} \coqdocvar{ST}. \coqdocvar{inverts} \coqdocvar{Ht1}. \coqdocvar{splits}\ensuremath{\times}. \coqdocvar{applys}\ensuremath{\times} \coqdocvar{substitution\_preserves\_typing}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt1}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt1}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt1}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{\ensuremath{\exists}} (\coqdocvar{ST} ++ \coqdocvar{T1}::\coqdocvar{nil}). \coqdocvar{inverts} \coqdocvar{keep} \coqdocvar{HST}. \coqdocvar{splits}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{extends\_app}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{applys\_eq} \coqdocvar{T\_Loc} 1.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{app\_length}. \coqdoctac{simpl}. \coqdoctac{omega}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{unfold} \coqdocvar{store\_Tlookup}. \coqdoctac{rewrite}\ensuremath{\times} \coqdocvar{nth\_eq\_last'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply}\ensuremath{\times} \coqdocvar{store\_well\_typed\_app}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{\ensuremath{\exists}} \coqdocvar{ST}. \coqdocvar{splits}\ensuremath{\times}. \coqdocvar{lets} [\coqdocvar{\_} \coqdocvar{Hsty}]: \coqdocvar{HST}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{applys\_eq}\ensuremath{\times} \coqdocvar{Hsty} 1. \coqdocvar{inverts}\ensuremath{\times} \coqdocvar{Ht}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{\ensuremath{\exists}} \coqdocvar{ST}. \coqdocvar{splits}\ensuremath{\times}. \coqdocvar{applys}\ensuremath{\times} \coqdocvar{assign\_pres\_store\_typing}. \coqdocvar{inverts}\ensuremath{\times} \coqdocvar{Ht1}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt1}.\coqdoceol
\coqdocindent{1.00em}
- \coqdocvar{forwards}*: \coqdocvar{IHHt2}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Progress for STLCRef}



 The proof of progress for \coqdocmodule{STLCRef} can be found in chapter
    \coqdoclibrary{References}. The optimized proof script is, here again, about
    half the length. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdoctac{progress} : \coqdockw{\ensuremath{\forall}} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{ST} \coqdocvar{t} \coqdocvar{T} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{store\_well\_typed} \coqdocvar{ST} \coqdocvar{st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{value} \coqdocvar{t} \ensuremath{\lor} \coqdoctac{\ensuremath{\exists}} \coqdocvar{t'}, \coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}, \coqdocvar{t} / \coqdocvar{st} ==> \coqdocvar{t'} / \coqdocvar{st'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{introv} \coqdocvar{Ht} \coqdocvar{HST}. \coqdocvar{remember} (@\coqdocvar{empty} \coqdocvar{ty}) \coqdockw{as} \coqdocvar{Gamma}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Ht}; \coqdoctac{subst} \coqdocvar{Gamma}; \coqdocvar{tryfalse}; \coqdoctac{try} \coqdoctac{solve} [\coqdoctac{left}*].\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{right}. \coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt1} \coqdockw{as} [\coqdocvar{K}|].\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{inverts} \coqdocvar{K}; \coqdocvar{inverts} \coqdocvar{Ht1}.\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt2}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{right}. \coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt} \coqdockw{as} [\coqdocvar{K}|].\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{inverts} \coqdocvar{K}; \coqdoctac{try} \coqdoctac{solve} [\coqdocvar{inverts} \coqdocvar{Ht}]. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{right}. \coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt} \coqdockw{as} [\coqdocvar{K}|].\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{inverts} \coqdocvar{K}; \coqdoctac{try} \coqdoctac{solve} [\coqdocvar{inverts} \coqdocvar{Ht}]. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{right}. \coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt1} \coqdockw{as} [\coqdocvar{K}|].\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{inverts} \coqdocvar{K}; \coqdoctac{try} \coqdoctac{solve} [\coqdocvar{inverts} \coqdocvar{Ht1}].\coqdoceol
\coqdocindent{2.50em}
\coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt2} \coqdockw{as} [\coqdocvar{M}|].\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{inverts} \coqdocvar{M}; \coqdoctac{try} \coqdoctac{solve} [\coqdocvar{inverts} \coqdocvar{Ht2}]. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{right}. \coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt1} \coqdockw{as} [\coqdocvar{K}|].\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{inverts} \coqdocvar{K}; \coqdoctac{try} \coqdoctac{solve} [\coqdocvar{inverts} \coqdocvar{Ht1}]. \coqdoctac{destruct}\ensuremath{\times} \coqdocvar{n}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{right}. \coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{right}. \coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt} \coqdockw{as} [\coqdocvar{K}|].\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{inverts} \coqdocvar{K}; \coqdocvar{inverts} \coqdocvar{Ht} \coqdockw{as} \coqdocvar{M}.\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{inverts} \coqdocvar{HST} \coqdockw{as} \coqdocvar{N}. \coqdoctac{rewrite}\ensuremath{\times} \coqdocvar{N} \coqdoctac{in} \coqdocvar{M}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{right}. \coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt1} \coqdockw{as} [\coqdocvar{K}|].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct}\ensuremath{\times} \coqdocvar{IHHt2}.\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{inverts} \coqdocvar{K}; \coqdocvar{inverts} \coqdocvar{Ht1} \coqdockw{as} \coqdocvar{M}.\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{inverts} \coqdocvar{HST} \coqdockw{as} \coqdocvar{N}. \coqdoctac{rewrite}\ensuremath{\times} \coqdocvar{N} \coqdoctac{in} \coqdocvar{M}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{PreservationProgressReferences}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Subtyping}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{SubtypingInversion}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Sub}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Consider the inversion lemma for typing judgment
    of abstractions in a type system with subtyping. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{abs\_arrow} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2}) (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{subtype} \coqdocvar{T1} \coqdocvar{S1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\land} \coqdocvar{has\_type} (\coqdocvar{update} \coqdocvar{empty} \coqdocvar{x} \coqdocvar{S1}) \coqdocvar{s2} \coqdocvar{T2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof} \coqdockw{with} \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{typing\_inversion\_abs} \coqdoctac{in} \coqdocvar{Hty}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{Hty} \coqdockw{as} [\coqdocvar{S2} [\coqdocvar{Hsub} \coqdocvar{Hty}]].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{sub\_inversion\_arrow} \coqdoctac{in} \coqdocvar{Hsub}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{Hsub} \coqdockw{as} [\coqdocvar{U1} [\coqdocvar{U2} [\coqdocvar{Heq} [\coqdocvar{Hsub1} \coqdocvar{Hsub2}]]]].\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{Heq}; \coqdoctac{subst}...\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Exercise: optimize the proof script, using
    \coqdocvar{introv}, \coqdocvar{lets} and \coqdocvar{inverts}\ensuremath{\times}. In particular,
    you will find it useful to replace the pattern
    \coqdoctac{apply} \coqdocvar{K} \coqdoctac{in} \coqdocvariable{H}. \coqdoctac{destruct} \coqdocvariable{H} \coqdockw{as} \coqdocconstructor{I} with \coqdocvar{lets} \coqdocconstructor{I}: \coqdocvar{K} \coqdocvariable{H}.
    The solution is 4 lines. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{abs\_arrow'} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2} \coqdocvar{T1} \coqdocvar{T2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} (\coqdocvar{tabs} \coqdocvar{x} \coqdocvar{S1} \coqdocvar{s2}) (\coqdocvar{TArrow} \coqdocvar{T1} \coqdocvar{T2}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{subtype} \coqdocvar{T1} \coqdocvar{S1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\land} \coqdocvar{has\_type} (\coqdocvar{update} \coqdocvar{empty} \coqdocvar{x} \coqdocvar{S1}) \coqdocvar{s2} \coqdocvar{T2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The lemma \coqdoclemma{substitution\_preserves\_typing} has already been used to
    illustrate the working of \coqdocvar{lets} and \coqdocvar{applys} in chapter
    \coqdoclibrary{UseTactics}. Optimize further this proof using automation (with
    the star symbol), and using the tactic \coqdocvar{cases\_if'}. The solution
    is 33 lines). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{substitution\_preserves\_typing} : \coqdockw{\ensuremath{\forall}} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U} \coqdocvar{v} \coqdocvar{t} \coqdocvar{S},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} (\coqdocvar{update} \coqdocvar{Gamma} \coqdocvar{x} \coqdocvar{U}) \coqdocvar{t} \coqdocvar{S} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{empty} \coqdocvar{v} \coqdocvar{U} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{has\_type} \coqdocvar{Gamma} ([\coqdocvar{x}:=\coqdocvar{v}]\coqdocvar{t}) \coqdocvar{S}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
 \coqdocvar{admit}.\coqdoceol
\coqdocnoindent
\coqdocvar{Admitted}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{SubtypingInversion}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Advanced Topics in Proof Search}

\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Stating Lemmas in the Right Way}



 Due to its depth-first strategy, \coqdoctac{eauto} can get exponentially
    slower as the depth search increases, even when a short proof
    exists. In general, to make proof search run reasonably fast, one
    should avoid using a depth search greater than 5 or 6. Moreover,
    one should try to minimize the number of applicable lemmas, and
    usually put first the hypotheses whose proof usefully instantiates
    the existential variables.


    In fact, the ability for \coqdoctac{eauto} to solve certain goals actually
    depends on the order in which the hypotheses are stated. This point
    is illustrated through the following example, in which \coqdocaxiom{P} is
    a property of natural numbers. This property is such that
    \coqdocaxiom{P} \coqdocabbreviation{n} holds for any \coqdocabbreviation{n} as soon as \coqdocaxiom{P} \coqdocabbreviation{m} holds for at least one \coqdocabbreviation{m}
    different from zero. The goal is to prove that \coqdocaxiom{P} 2 implies \coqdocaxiom{P} 1.
    When the hypothesis about \coqdocaxiom{P} is stated in the form
    \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n} \coqdocabbreviation{m}, \coqdocaxiom{P} \coqdocabbreviation{m} \ensuremath{\rightarrow} \coqdocabbreviation{m} \ensuremath{\not=} 0 \ensuremath{\rightarrow} \coqdocaxiom{P} \coqdocabbreviation{n}, then \coqdoctac{eauto} works. However, with
    \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n} \coqdocabbreviation{m}, \coqdocabbreviation{m} \ensuremath{\not=} 0 \ensuremath{\rightarrow} \coqdocaxiom{P} \coqdocabbreviation{m} \ensuremath{\rightarrow} \coqdocaxiom{P} \coqdocabbreviation{n}, the tactic \coqdoctac{eauto} fails. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{order\_matters\_1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{P} \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{m} \ensuremath{\not=} 0 \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{n}) \ensuremath{\rightarrow} \coqdocvar{P} 2 \ensuremath{\rightarrow} \coqdocvar{P} 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eauto}. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{order\_matters\_2} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{P} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n} \coqdocvar{m}, \coqdocvar{m} \ensuremath{\not=} 0 \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{m} \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{n}) \ensuremath{\rightarrow} \coqdocvar{P} 5 \ensuremath{\rightarrow} \coqdocvar{P} 1.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eauto}. \coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{P} \coqdocvar{H} \coqdocvar{K}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It is very important to understand that the hypothesis \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n}
    \coqdocabbreviation{m}, \coqdocaxiom{P} \coqdocabbreviation{m} \ensuremath{\rightarrow} \coqdocabbreviation{m} \ensuremath{\not=} 0 \ensuremath{\rightarrow} \coqdocaxiom{P} \coqdocabbreviation{n} is eauto-friendly, whereas \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{n} \coqdocabbreviation{m}, \coqdocabbreviation{m}
    \ensuremath{\not=} 0 \ensuremath{\rightarrow} \coqdocaxiom{P} \coqdocabbreviation{m} \ensuremath{\rightarrow} \coqdocaxiom{P} \coqdocabbreviation{n} really isn't.  Guessing a value of \coqdocabbreviation{m} for
    which \coqdocaxiom{P} \coqdocabbreviation{m} holds and then checking that \coqdocabbreviation{m} \ensuremath{\not=} 0 holds works well
    because there are few values of \coqdocabbreviation{m} for which \coqdocaxiom{P} \coqdocabbreviation{m} holds. So, it
    is likely that \coqdoctac{eauto} comes up with the right one. On the other
    hand, guessing a value of \coqdocabbreviation{m} for which \coqdocabbreviation{m} \ensuremath{\not=} 0 and then checking
    that \coqdocaxiom{P} \coqdocabbreviation{m} holds does not work well, because there are many values
    of \coqdocabbreviation{m} that satisfy \coqdocabbreviation{m} \ensuremath{\not=} 0 but not \coqdocaxiom{P} \coqdocabbreviation{m}. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Unfolding of Definitions During Proof-Search}



 The use of intermediate definitions is generally encouraged in a
    formal development as it usually leads to more concise and more
    readable statements. Yet, definitions can make it a little harder
    to automate proofs. The problem is that it is not obvious for a
    proof search mechanism to know when definitions need to be
    unfolded. Note that a naive strategy that consists in unfolding
    all definitions before calling proof search does not scale up to
    large proofs, so we avoid it. This section introduces a few
    techniques for avoiding to manually unfold definitions before
    calling proof search. 

 To illustrate the treatment of definitions, let \coqdocaxiom{P} be an abstract
    property on natural numbers, and let \coqdocdefinition{myFact} be a definition
    denoting the proposition \coqdocaxiom{P} \coqdocabbreviation{x} holds for any \coqdocabbreviation{x} less than or
    equal to 3. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Axiom} \coqdocvar{P} : \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{myFact} := \coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{x} \ensuremath{\le} 3 \ensuremath{\rightarrow} \coqdocvar{P} \coqdocvar{x}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Proving that \coqdocdefinition{myFact} under the assumption that \coqdocaxiom{P} \coqdocabbreviation{x} holds for
    any \coqdocabbreviation{x} should be trivial. Yet, \coqdoctac{auto} fails to prove it unless we
    unfold the definition of \coqdocdefinition{myFact} explicitly. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_hint\_unfold\_goal\_1} :\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{P} \coqdocvar{x}) \ensuremath{\rightarrow} \coqdocvar{myFact}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}. \coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{myFact}. \coqdoctac{auto}. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To automate the unfolding of definitions that appear as proof
    obligation, one can use the command \coqdockw{Hint} \coqdockw{Unfold} \coqdocdefinition{myFact} to tell
    Coq that it should always try to unfold \coqdocdefinition{myFact} when \coqdocdefinition{myFact}
    appears in the goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Unfold} \coqdocvar{myFact}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This time, automation is able to see through the definition
    of \coqdocdefinition{myFact}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_hint\_unfold\_goal\_2} :\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{x}, \coqdocvar{P} \coqdocvar{x}) \ensuremath{\rightarrow} \coqdocvar{myFact}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, the \coqdockw{Hint} \coqdockw{Unfold} mechanism only works for unfolding
    definitions that appear in the goal. In general, proof search does
    not unfold definitions from the context. For example, assume we
    want to prove that \coqdocaxiom{P} 3 holds under the assumption that \coqdocinductive{True} \ensuremath{\rightarrow}
    \coqdocdefinition{myFact}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_hint\_unfold\_context\_1} :\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{True} \ensuremath{\rightarrow} \coqdocvar{myFact}) \ensuremath{\rightarrow} \coqdocvar{P} 3.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{auto}. \coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{myFact} \coqdoctac{in} *. \coqdoctac{auto}. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
There is actually one exception to the previous rule: a constant
    occuring in an hypothesis is automatically unfolded if the
    hypothesis can be directly applied to the current goal. For example,
    \coqdoctac{auto} can prove \coqdocdefinition{myFact} \ensuremath{\rightarrow} \coqdocaxiom{P} 3, as illustrated below. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_hint\_unfold\_context\_2} :\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{myFact} \ensuremath{\rightarrow} \coqdocvar{P} 3.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Automation for Proving Absurd Goals}



 In this section, we'll see that lemmas concluding on a negation
    are generally not useful as hints, and that lemmas whose
    conclusion is \coqdocinductive{False} can be useful hints but having too many of
    them makes proof search inefficient. We'll also see a practical
    work-around to the efficiency issue. 

 Consider the following lemma, which asserts that a number
    less than or equal to 3 is not greater than 3. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Parameter} \coqdocvar{le\_not\_gt} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{x} \ensuremath{\le} 3) \ensuremath{\rightarrow} \ensuremath{\lnot} (\coqdocvar{x} > 3).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Equivalently, one could state that a number greater than three is
    not less than or equal to 3. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Parameter} \coqdocvar{gt\_not\_le} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{x} > 3) \ensuremath{\rightarrow} \ensuremath{\lnot} (\coqdocvar{x} \ensuremath{\le} 3).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In fact, both statements are equivalent to a third one stating
    that \coqdocabbreviation{x} \ensuremath{\le} 3 and \coqdocabbreviation{x} > 3 are contradictory, in the sense that
    they imply \coqdocinductive{False}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Parameter} \coqdocvar{le\_gt\_false} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{x} \ensuremath{\le} 3) \ensuremath{\rightarrow} (\coqdocvar{x} > 3) \ensuremath{\rightarrow} \coqdocvar{False}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The following investigation aim at figuring out which of the three
    statments is the most convenient with respect to proof
    automation. The following material is enclosed inside a \coqdockw{Section},
    so as to restrict the scope of the hints that we are adding. In
    other words, after the end of the section, the hints added within
    the section will no longer be active.\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Section} \coqdocvar{DemoAbsurd1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Let's try to add the first lemma, \coqdocaxiom{le\_not\_gt}, as hint,
    and see whether we can prove that the proposition
    \coqdoctac{\ensuremath{\exists}} \coqdocabbreviation{x}, \coqdocabbreviation{x} \ensuremath{\le} 3 \ensuremath{\land} \coqdocabbreviation{x} > 3 is absurd. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Resolve} \coqdocvar{le\_not\_gt}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_auto\_absurd\_1} :\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{x} \ensuremath{\le} 3 \ensuremath{\land} \coqdocvar{x} > 3) \ensuremath{\rightarrow} \coqdocvar{False}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdocvar{jauto\_set}.  \coqdoctac{eauto}. \coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{le\_not\_gt}. \coqdoctac{eauto}. \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The lemma \coqdocaxiom{gt\_not\_le} is symmetric to \coqdocaxiom{le\_not\_gt}, so it will not
    be any better. The third lemma, \coqdocaxiom{le\_gt\_false}, is a more useful
    hint, because it concludes on \coqdocinductive{False}, so proof search will try to
    apply it when the current goal is \coqdocinductive{False}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Resolve} \coqdocvar{le\_gt\_false}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_auto\_absurd\_2} :\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{x}, \coqdocvar{x} \ensuremath{\le} 3 \ensuremath{\land} \coqdocvar{x} > 3) \ensuremath{\rightarrow} \coqdocvar{False}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{dup}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdocvar{jauto\_set}.  \coqdoctac{eauto}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
\coqdocvar{jauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In summary, a lemma of the form \coqdocvar{H1} \ensuremath{\rightarrow} \coqdocvar{H2} \ensuremath{\rightarrow} \coqdocinductive{False} is a much more
    effective hint than \coqdocvar{H1} \ensuremath{\rightarrow} \ensuremath{\lnot} \coqdocvar{H2}, even though the two statments
    are equivalent up to the definition of the negation symbol \ensuremath{\lnot}. 

 That said, one should be careful with adding lemmas whose
    conclusion is \coqdocinductive{False} as hint. The reason is that whenever
    reaching the goal \coqdocinductive{False}, the proof search mechanism will
    potentially try to apply all the hints whose conclusion is \coqdocinductive{False}
    before applying the appropriate one.  \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{DemoAbsurd1}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Adding lemmas whose conclusion is \coqdocinductive{False} as hint can be, locally,
    a very effective solution. However, this approach does not scale
    up for global hints.  For most practical applications, it is
    reasonable to give the name of the lemmas to be exploited for
    deriving a contradiction. The tactic \coqdocconstructor{false} \coqdocvariable{H}, provided by
    \coqdoclibrary{LibTactics} serves that purpose: \coqdocconstructor{false} \coqdocvariable{H} replaces the goal
    with \coqdocinductive{False} and calls \coqdoctac{eapply} \coqdocvariable{H}. Its behavior is described next.
    Observe that any of the three statements \coqdocaxiom{le\_not\_gt}, \coqdocaxiom{gt\_not\_le}
    or \coqdocaxiom{le\_gt\_false} can be used. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{demo\_false} : \coqdockw{\ensuremath{\forall}} \coqdocvar{x},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{x} \ensuremath{\le} 3) \ensuremath{\rightarrow} (\coqdocvar{x} > 3) \ensuremath{\rightarrow} 4 = 5.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}. \coqdocvar{dup} 4.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdocvar{false}. \coqdoctac{eapply} \coqdocvar{le\_gt\_false}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{auto}. \coqdocindent{2.00em}
+ \coqdocvar{skip}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdocvar{false}. \coqdoctac{eapply} \coqdocvar{le\_gt\_false}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{eauto}. \coqdocindent{2.00em}
+ \coqdoctac{eauto}. \coqdocemptyline
\coqdocindent{1.00em}
- \coqdocvar{false} \coqdocvar{le\_gt\_false}. \coqdoctac{eauto}. \coqdoctac{eauto}.\coqdoceol
\coqdocemptyline
\coqdocindent{1.00em}
- \coqdocvar{false} \coqdocvar{le\_not\_gt}. \coqdoctac{eauto}. \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In the above example, \coqdocconstructor{false} \coqdocaxiom{le\_gt\_false}; \coqdoctac{eauto} proves the goal,
    but \coqdocconstructor{false} \coqdocaxiom{le\_gt\_false}; \coqdoctac{auto} does not, because \coqdoctac{auto} does not
    correctly instantiate the existential variable. Note that \coqdocconstructor{false}\ensuremath{\times}
    \coqdocaxiom{le\_gt\_false} would not work either, because the star symbol tries
    to call \coqdoctac{auto} first. So, there are two possibilities for
    completing the proof: either call \coqdocconstructor{false} \coqdocaxiom{le\_gt\_false}; \coqdoctac{eauto}, or
    call \coqdocconstructor{false}\ensuremath{\times} (\coqdocaxiom{le\_gt\_false} 3). \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Automation for Transitivity Lemmas}



 Some lemmas should never be added as hints, because they would
    very badly slow down proof search. The typical example is that of
    transitivity results. This section describes the problem and
    presents a general workaround.


    Consider a subtyping relation, written \coqdocaxiom{subtype} \coqdocconstructor{S} \coqdocdefinition{T}, that relates
    two object \coqdocconstructor{S} and \coqdocdefinition{T} of type \coqdocaxiom{typ}. Assume that this relation
    has been proved reflexive and transitive. The corresponding lemmas
    are named \coqdocaxiom{subtype\_refl} and \coqdocaxiom{subtype\_trans}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Parameter} \coqdocvar{typ} : \coqdockw{Type}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Parameter} \coqdocvar{subtype} : \coqdocvar{typ} \ensuremath{\rightarrow} \coqdocvar{typ} \ensuremath{\rightarrow} \coqdockw{Prop}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Parameter} \coqdocvar{subtype\_refl} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} \coqdocvar{T} \coqdocvar{T}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Parameter} \coqdocvar{subtype\_trans} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S} \coqdocvar{T} \coqdocvar{U},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} \coqdocvar{S} \coqdocvar{T} \ensuremath{\rightarrow} \coqdocvar{subtype} \coqdocvar{T} \coqdocvar{U} \ensuremath{\rightarrow} \coqdocvar{subtype} \coqdocvar{S} \coqdocvar{U}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Adding reflexivity as hint is generally a good idea,
    so let's add reflexivity of subtyping as hint. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Resolve} \coqdocvar{subtype\_refl}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Adding transitivity as hint is generally a bad idea.  To
    understand why, let's add it as hint and see what happens.
    Because we cannot remove hints once we've added them, we are going
    to open a ``Section,'' so as to restrict the scope of the
    transitivity hint to that section. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Section} \coqdocvar{HintsTransitivity}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Resolve} \coqdocvar{subtype\_trans}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now, consider the goal \coqdockw{\ensuremath{\forall}} \coqdocconstructor{S} \coqdocdefinition{T}, \coqdocaxiom{subtype} \coqdocconstructor{S} \coqdocdefinition{T}, which clearly has
    no hope of being solved. Let's call \coqdoctac{eauto} on this goal. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{transitivity\_bad\_hint\_1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} \coqdocvar{S} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.  \coqdoctac{eauto}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note that after closing the section, the hint \coqdocaxiom{subtype\_trans}
    is no longer active. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{HintsTransitivity}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In the previous example, the proof search has spent a lot of time
    trying to apply transitivity and reflexivity in every possible
    way.  Its process can be summarized as follows. The first goal is
    \coqdocaxiom{subtype} \coqdocconstructor{S} \coqdocdefinition{T}. Since reflexivity does not apply, \coqdoctac{eauto} invokes
    transitivity, which produces two subgoals, \coqdocaxiom{subtype} \coqdocconstructor{S} ?\coqdocdefinition{X} and
    \coqdocaxiom{subtype} ?\coqdocdefinition{X} \coqdocdefinition{T}. Solving the first subgoal, \coqdocaxiom{subtype} \coqdocconstructor{S} ?\coqdocdefinition{X}, is
    straightforward, it suffices to apply reflexivity. This unifies
    ?\coqdocdefinition{X} with \coqdocconstructor{S}. So, the second sugoal, \coqdocaxiom{subtype} ?\coqdocdefinition{X} \coqdocdefinition{T},
    becomes \coqdocaxiom{subtype} \coqdocconstructor{S} \coqdocdefinition{T}, which is exactly what we started from...


    The problem with the transitivity lemma is that it is applicable
    to any goal concluding on a subtyping relation. Because of this,
    \coqdoctac{eauto} keeps trying to apply it even though it most often doesn't
    help to solve the goal. So, one should never add a transitivity
    lemma as a hint for proof search. 

 There is a general workaround for having automation to exploit
    transitivity lemmas without giving up on efficiency. This workaround
    relies on a powerful mechanism called ``external hint.'' This
    mechanism allows to manually describe the condition under which
    a particular lemma should be tried out during proof search.


    For the case of transitivity of subtyping, we are going to tell
    Coq to try and apply the transitivity lemma on a goal of the form
    \coqdocaxiom{subtype} \coqdocconstructor{S} \coqdocvariable{U} only when the proof context already contains an
    assumption either of the form \coqdocaxiom{subtype} \coqdocconstructor{S} \coqdocdefinition{T} or of the form
    \coqdocaxiom{subtype} \coqdocdefinition{T} \coqdocvariable{U}. In other words, we only apply the transitivity
    lemma when there is some evidence that this application might
    help.  To set up this ``external hint,'' one has to write the
    following. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Extern} 1 (\coqdocvar{subtype} ?\coqdocvar{S} ?\coqdocvar{U}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdockw{goal} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H}: \coqdocvar{subtype} \coqdocvar{S} ?\coqdocvar{T} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{apply} (@\coqdocvar{subtype\_trans} \coqdocvar{S} \coqdocvar{T} \coqdocvar{U})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{H}: \coqdocvar{subtype} ?\coqdocvar{T} \coqdocvar{U} \ensuremath{\vdash} \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdoctac{apply} (@\coqdocvar{subtype\_trans} \coqdocvar{S} \coqdocvar{T} \coqdocvar{U})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This hint declaration can be understood as follows.

\begin{itemize}
\item  ``Hint Extern'' introduces the hint.

\item  The number ``1'' corresponds to a priority for proof search.
      It doesn't matter so much what priority is used in practice.

\item  The pattern \coqdocaxiom{subtype} ?\coqdocconstructor{S} ?\coqdocvariable{U} describes the kind of goal on
      which the pattern should apply. The question marks are used
      to indicate that the variables ?\coqdocconstructor{S} and ?\coqdocvariable{U} should be bound
      to some value in the rest of the hint description.

\item  The construction \coqdockw{match} \coqdockw{goal} \coqdockw{with} ... \coqdockw{end} tries to recognize
      patterns in the goal, or in the proof context, or both.

\item  The first pattern is \coqdocvariable{H}: \coqdocaxiom{subtype} \coqdocconstructor{S} ?\coqdocdefinition{T} \ensuremath{\vdash} \coqdocvar{\_}. It indices that
      the context should contain an hypothesis \coqdocvariable{H} of type
      \coqdocaxiom{subtype} \coqdocconstructor{S} ?\coqdocdefinition{T}, where \coqdocconstructor{S} has to be the same as in the goal,
      and where ?\coqdocdefinition{T} can have any value.

\item  The symbol \ensuremath{\vdash} \coqdocvar{\_} at the end of \coqdocvariable{H}: \coqdocaxiom{subtype} \coqdocconstructor{S} ?\coqdocdefinition{T} \ensuremath{\vdash} \coqdocvar{\_} indicates
      that we do not impose further condition on how the proof
      obligation has to look like.

\item  The branch \ensuremath{\Rightarrow} \coqdoctac{apply} (@\coqdocaxiom{subtype\_trans} \coqdocconstructor{S} \coqdocdefinition{T} \coqdocvariable{U}) that follows
      indicates that if the goal has the form \coqdocaxiom{subtype} \coqdocconstructor{S} \coqdocvariable{U} and if
      there exists an hypothesis of the form \coqdocaxiom{subtype} \coqdocconstructor{S} \coqdocdefinition{T}, then
      we should try and apply transitivity lemma instantiated on
      the arguments \coqdocconstructor{S}, \coqdocdefinition{T} and \coqdocvariable{U}. (Note: the symbol @ in front of
      \coqdocaxiom{subtype\_trans} is only actually needed when the ``Implicit Arguments''
      feature is activated.)

\item  The other branch, which corresponds to an hypothesis of the form
      \coqdocvariable{H}: \coqdocaxiom{subtype} ?\coqdocdefinition{T} \coqdocvariable{U} is symmetrical.

\end{itemize}


    Note: the same external hint can be reused for any other transitive
    relation, simply by renaming \coqdocaxiom{subtype} into the name of that relation. 

 Let us see an example illustrating how the hint works. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{transitivity\_workaround\_1} : \coqdockw{\ensuremath{\forall}} \coqdocvar{T1} \coqdocvar{T2} \coqdocvar{T3} \coqdocvar{T4},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} \coqdocvar{T1} \coqdocvar{T2} \ensuremath{\rightarrow} \coqdocvar{subtype} \coqdocvar{T2} \coqdocvar{T3} \ensuremath{\rightarrow} \coqdocvar{subtype} \coqdocvar{T3} \coqdocvar{T4} \ensuremath{\rightarrow} \coqdocvar{subtype} \coqdocvar{T1} \coqdocvar{T4}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.  \coqdoctac{eauto}. \coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We may also check that the new external hint does not suffer from the
    complexity blow up. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{transitivity\_workaround\_2} : \coqdockw{\ensuremath{\forall}} \coqdocvar{S} \coqdocvar{T},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{subtype} \coqdocvar{S} \coqdocvar{T}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.  \coqdoctac{eauto}. \coqdocnoindent
\coqdockw{Abort}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Decision Procedures}



 A decision procedure is able to solve proof obligations whose
    statement admits a particular form. This section describes three
    useful decision procedures. The tactic \coqdoctac{omega} handles goals
    involving arithmetic and inequalities, but not general
    multiplications.  The tactic \coqdoctac{ring} handles goals involving
    arithmetic, including multiplications, but does not support
    inequalities. The tactic \coqdoctac{congruence} is able to prove equalities
    and inequalities by exploiting equalities available in the proof
    context. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Omega}



 The tactic \coqdoctac{omega} supports natural numbers (type \coqdocdefinition{nat}) as well as
    integers (type \coqdocdefinition{Z}, available by including the module \coqdoclibrary{ZArith}).
    It supports addition, substraction, equalities and inequalities.
    Before using \coqdoctac{omega}, one needs to import the module \coqdoclibrary{Omega},
    as follows. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Omega}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Here is an example. Let \coqdocabbreviation{x} and \coqdocabbreviation{y} be two natural numbers
    (they cannot be negative). Assume \coqdocabbreviation{y} is less than 4, assume
    \coqdocabbreviation{x}+\coqdocabbreviation{x}+1 is less than \coqdocabbreviation{y}, and assume \coqdocabbreviation{x} is not zero. Then,
    it must be the case that \coqdocabbreviation{x} is equal to one. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{omega\_demo\_1} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x} \coqdocvar{y} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{y} \ensuremath{\le} 4) \ensuremath{\rightarrow} (\coqdocvar{x} + \coqdocvar{x} + 1 \ensuremath{\le} \coqdocvar{y}) \ensuremath{\rightarrow} (\coqdocvar{x} \ensuremath{\not=} 0) \ensuremath{\rightarrow} (\coqdocvar{x} = 1).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{omega}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Another example: if \coqdocabbreviation{z} is the mean of \coqdocabbreviation{x} and \coqdocabbreviation{y}, and if the
    difference between \coqdocabbreviation{x} and \coqdocabbreviation{y} is at most 4, then the difference
    between \coqdocabbreviation{x} and \coqdocabbreviation{z} is at most 2. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{omega\_demo\_2} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x} \coqdocvar{y} \coqdocvar{z} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{x} + \coqdocvar{y} = \coqdocvar{z} + \coqdocvar{z}) \ensuremath{\rightarrow} (\coqdocvar{x} - \coqdocvar{y} \ensuremath{\le} 4) \ensuremath{\rightarrow} (\coqdocvar{x} - \coqdocvar{z} \ensuremath{\le} 2).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{omega}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
One can proof \coqdocinductive{False} using \coqdoctac{omega} if the mathematical facts
    from the context are contradictory. In the following example,
    the constraints on the values \coqdocabbreviation{x} and \coqdocabbreviation{y} cannot be all
    satisfied in the same time. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{omega\_demo\_3} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x} \coqdocvar{y} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{x} + 5 \ensuremath{\le} \coqdocvar{y}) \ensuremath{\rightarrow} (\coqdocvar{y} - \coqdocvar{x} < 3) \ensuremath{\rightarrow} \coqdocvar{False}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{omega}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Note: \coqdoctac{omega} can prove a goal by contradiction only if its
    conclusion reduces to \coqdocinductive{False}. The tactic \coqdoctac{omega} always fails
    when the conclusion is an arbitrary proposition \coqdocaxiom{P}, even though
    \coqdocinductive{False} implies any proposition \coqdocaxiom{P} (by \coqdoclemma{ex\_falso\_quodlibet}). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{omega\_demo\_4} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x} \coqdocvar{y} : \coqdocvar{nat}) (\coqdocvar{P} : \coqdockw{Prop}),\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{x} + 5 \ensuremath{\le} \coqdocvar{y}) \ensuremath{\rightarrow} (\coqdocvar{y} - \coqdocvar{x} < 3) \ensuremath{\rightarrow} \coqdocvar{P}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{false}. \coqdoctac{omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Ring}



 Compared with \coqdoctac{omega}, the tactic \coqdoctac{ring} adds support for
    multiplications, however it gives up the ability to reason on
    inequations. Moreover, it supports only integers (type \coqdocdefinition{Z}) and
    not natural numbers (type \coqdocdefinition{nat}). Here is an example showing how
    to use \coqdoctac{ring}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{RingDemo}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Require} \coqdockw{Import} \coqdocvar{ZArith}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Open} \coqdockw{Scope} \coqdocvar{Z\_scope}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{ring\_demo} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{x} \coqdocvar{y} \coqdocvar{z} : \coqdocvar{Z}),\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{x} \ensuremath{\times} (\coqdocvar{y} + \coqdocvar{z}) - \coqdocvar{z} \ensuremath{\times} 3 \ensuremath{\times} \coqdocvar{x}\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{x} \ensuremath{\times} \coqdocvar{y} - 2 \ensuremath{\times} \coqdocvar{x} \ensuremath{\times} \coqdocvar{z}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{ring}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{RingDemo}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Congruence}



 The tactic \coqdoctac{congruence} is able to exploit equalities from the
    proof context in order to automatically perform the rewriting
    operations necessary to establish a goal. It is slightly more
    powerful than the tactic \coqdoctac{subst}, which can only handle equalities
    of the form \coqdocabbreviation{x} = \coqdocconstructor{e} where \coqdocabbreviation{x} is a variable and \coqdocconstructor{e} an
    expression. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{congruence\_demo\_1} :\coqdoceol
\coqdocindent{1.50em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{f} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}) (\coqdocvar{g} \coqdocvar{h} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}) (\coqdocvar{x} \coqdocvar{y} \coqdocvar{z} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{f} (\coqdocvar{g} \coqdocvar{x}) (\coqdocvar{g} \coqdocvar{y}) = \coqdocvar{z} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
2 = \coqdocvar{g} \coqdocvar{x} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{g} \coqdocvar{y} = \coqdocvar{h} \coqdocvar{z} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{f} 2 (\coqdocvar{h} \coqdocvar{z}) = \coqdocvar{z}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{congruence}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Moreover, \coqdoctac{congruence} is able to exploit universally quantified
    equalities, for example \coqdockw{\ensuremath{\forall}} \coqdocabbreviation{a}, \coqdocabbreviation{g} \coqdocabbreviation{a} = \coqdocvariable{h} \coqdocabbreviation{a}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{congruence\_demo\_2} :\coqdoceol
\coqdocindent{1.50em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{f} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}) (\coqdocvar{g} \coqdocvar{h} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}) (\coqdocvar{x} \coqdocvar{y} \coqdocvar{z} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.50em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{a}, \coqdocvar{g} \coqdocvar{a} = \coqdocvar{h} \coqdocvar{a}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{f} (\coqdocvar{g} \coqdocvar{x}) (\coqdocvar{g} \coqdocvar{y}) = \coqdocvar{z} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{g} \coqdocvar{x} = 2 \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{f} 2 (\coqdocvar{h} \coqdocvar{y}) = \coqdocvar{z}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{congruence}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Next is an example where \coqdoctac{congruence} is very useful. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{congruence\_demo\_4} : \coqdockw{\ensuremath{\forall}} (\coqdocvar{f} \coqdocvar{g} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}),\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{a}, \coqdocvar{f} \coqdocvar{a} = \coqdocvar{g} \coqdocvar{a}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{f} (\coqdocvar{g} (\coqdocvar{g} 2)) = \coqdocvar{g} (\coqdocvar{f} (\coqdocvar{f} 2)).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{congruence}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The tactic \coqdoctac{congruence} is able to prove a contradiction if the
    goal entails an equality that contradicts an inequality available
    in the proof context. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{congruence\_demo\_3} :\coqdoceol
\coqdocindent{1.50em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{f} \coqdocvar{g} \coqdocvar{h} : \coqdocvar{nat}\ensuremath{\rightarrow}\coqdocvar{nat}) (\coqdocvar{x} : \coqdocvar{nat}),\coqdoceol
\coqdocindent{1.50em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{a}, \coqdocvar{f} \coqdocvar{a} = \coqdocvar{h} \coqdocvar{a}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{g} \coqdocvar{x} = \coqdocvar{f} \coqdocvar{x} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{g} \coqdocvar{x} \ensuremath{\not=} \coqdocvar{h} \coqdocvar{x} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{False}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{congruence}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
One of the strengths of \coqdoctac{congruence} is that it is a very fast
    tactic. So, one should not hesitate to invoke it wherever it might
    help. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Summary}



 Let us summarize the main automation tactics available.



\begin{itemize}
\item  \coqdoctac{auto} automatically applies \coqdoctac{reflexivity}, \coqdoctac{assumption}, and \coqdoctac{apply}.



\item  \coqdoctac{eauto} moreover tries \coqdoctac{eapply}, and in particular can instantiate
      existentials in the conclusion.



\item  \coqdocvar{iauto} extends \coqdoctac{eauto} with support for negation, conjunctions, and
      disjunctions. However, its support for disjunction can make it
      exponentially slow.



\item  \coqdocvar{jauto} extends \coqdoctac{eauto} with support for  negation, conjunctions, and
      existential at the head of hypothesis.



\item  \coqdoctac{congruence} helps reasoning about equalities and inequalities.



\item  \coqdoctac{omega} proves arithmetic goals with equalities and inequalities,
      but it does not support multiplication.



\item  \coqdoctac{ring} proves arithmetic goals with multiplications, but does not
      support inequalities.

\end{itemize}


    In order to set up automation appropriately, keep in mind the following
    rule of thumbs:



\begin{itemize}
\item  automation is all about balance: not enough automation makes proofs
      not very robust on change, whereas too much automation makes proofs
      very hard to fix when they break.



\item  if a lemma is not goal directed (i.e., some of its variables do not
      occur in its conclusion), then the premises need to be ordered in
      such a way that proving the first premises maximizes the chances of
      correctly instantiating the variables that do not occur in the conclusion.



\item  a lemma whose conclusion is \coqdocinductive{False} should only be added as a local
      hint, i.e., as a hint within the current section.



\item  a transitivity lemma should never be considered as hint; if automation
      of transitivity reasoning is really necessary, an \coqdockw{Extern} \coqdockw{Hint} needs
      to be set up.



\item  a definition usually needs to be accompanied with a \coqdockw{Hint} \coqdockw{Unfold}.

\end{itemize}


    Becoming a master in the black art of automation certainly requires
    some investment, however this investment will pay off very quickly.


 $Date: 2016-07-13 12:41:41 -0400 (Wed, 13 Jul 2016) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.PE}{Library }{Top.PE}

\begin{coqdoccode}
\end{coqdoccode}
\section{PE: Partial Evaluation}

\begin{coqdoccode}
\coqdocemptyline
\coqdocemptyline
\end{coqdoccode}
The \coqdoclibrary{Equiv} chapter introduced constant folding as an example of a
    program transformation and proved that it preserves the meaning of
    programs.  Constant folding operates on manifest constants such as
    \coqdocconstructor{ANum} expressions.  For example, it simplifies the command \coqdocdefinition{Y} ::=
    \coqdocconstructor{APlus} (\coqdocconstructor{ANum} 3) (\coqdocconstructor{ANum} 1) to the command \coqdocdefinition{Y} ::= \coqdocconstructor{ANum} 4.  However,
    it does not propagate known constants along data flow.  For
    example, it does not simplify the sequence


      X ::= ANum 3;; Y ::= APlus (AId X) (ANum 1)


    to


      X ::= ANum 3;; Y ::= ANum 4


    because it forgets that \coqdocdefinition{X} is 3 by the time it gets to \coqdocdefinition{Y}.


    We might naturally want to enhance constant folding so that it
    propagates known constants and uses them to simplify programs.
    Doing so constitutes a rudimentary form of \textit{partial evaluation}.
    As we will see, partial evaluation is so called because it is like
    running a program, except only part of the program can be
    evaluated because only part of the input to the program is known.
    For example, we can only simplify the program


      X ::= ANum 3;; Y ::= AMinus (APlus (AId X) (ANum 1)) (AId Y)


    to


      X ::= ANum 3;; Y ::= AMinus (ANum 4) (AId Y)


    without knowing the initial value of \coqdocdefinition{Y}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Bool.Bool}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.Arith}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Arith.EqNat}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.omega.Omega}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Logic.FunctionalExtensionality}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Coq.Lists.List}.\coqdoceol
\coqdocnoindent
\coqdockw{Import} \coqdocvar{ListNotations}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Maps}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Imp}.\coqdoceol
\coqdocnoindent
\coqdockw{Require} \coqdockw{Import} \coqdocvar{Smallstep}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Generalizing Constant Folding}



 The starting point of partial evaluation is to represent our
    partial knowledge about the state.  For example, between the two
    assignments above, the partial evaluator may know only that \coqdocdefinition{X} is
    3 and nothing about any other variable. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Partial States}



 Conceptually speaking, we can think of such partial states as the
    type \coqdocinductive{id} \ensuremath{\rightarrow} \coqdocinductive{option} \coqdocdefinition{nat} (as opposed to the type \coqdocinductive{id} \ensuremath{\rightarrow} \coqdocdefinition{nat} of
    concrete, full states).  However, in addition to looking up and
    updating the values of individual variables in a partial state, we
    may also want to compare two partial states to see if and where
    they differ, to handle conditional control flow.  It is not possible
    to compare two arbitrary functions in this way, so we represent
    partial states in a more concrete format: as a list of \coqdocinductive{id} \ensuremath{\times} \coqdocdefinition{nat}
    pairs. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pe\_state} := \coqdocvar{list} (\coqdocvar{id} \ensuremath{\times} \coqdocvar{nat}).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The idea is that a variable \coqdocinductive{id} appears in the list if and only
    if we know its current \coqdocdefinition{nat} value.  The \coqdocdefinition{pe\_lookup} function thus
    interprets this concrete representation.  (If the same variable
    \coqdocinductive{id} appears multiple times in the list, the first occurrence
    wins, but we will define our partial evaluator to never construct
    such a \coqdocdefinition{pe\_state}.) \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{pe\_lookup} (\coqdocvar{pe\_st} : \coqdocvar{pe\_state}) (\coqdocvar{V}:\coqdocvar{id}) : \coqdocvar{option} \coqdocvar{nat} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{pe\_st} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{None}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{V'},\coqdocvar{n'})::\coqdocvar{pe\_st} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{V} \coqdocvar{V'} \coqdockw{then} \coqdocvar{Some} \coqdocvar{n'}\coqdoceol
\coqdocindent{11.00em}
\coqdockw{else} \coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
For example, \coqdocdefinition{empty\_pe\_state} represents complete ignorance about
    every variable -- the function that maps every \coqdocinductive{id} to \coqdocconstructor{None}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{empty\_pe\_state} : \coqdocvar{pe\_state} := [].\coqdoceol
\coqdocemptyline
\end{coqdoccode}
More generally, if the \coqdocinductive{list} representing a \coqdocdefinition{pe\_state} does not
    contain some \coqdocinductive{id}, then that \coqdocdefinition{pe\_state} must map that \coqdocinductive{id} to
    \coqdocconstructor{None}.  Before we prove this fact, we first define a useful
    tactic for reasoning with \coqdocinductive{id} equality.  The tactic


      compare V V'


    means to reason by cases over \coqdocdefinition{beq\_id} \coqdocvariable{V} \coqdocvar{V'}.
    In the case where \coqdocvariable{V} = \coqdocvar{V'}, the tactic
    substitutes \coqdocvariable{V} for \coqdocvar{V'} throughout. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Tactic Notation} "compare" \coqdocvar{ident}(\coqdocvar{i}) \coqdocvar{ident}(\coqdocvar{j}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{let} \coqdocvar{H} := \coqdoctac{fresh} "Heq" \coqdocvar{i} \coqdocvar{j} \coqdoctac{in}\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{i} \coqdocvar{j});\coqdoceol
\coqdocindent{1.00em}
[ \coqdoctac{subst} \coqdocvar{j} \ensuremath{|} ].\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_domain}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V} = \coqdocvar{Some} \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{In} \coqdocvar{V} (\coqdocvar{map} (@\coqdocvar{fst} \coqdocvar{\_} \coqdocvar{\_}) \coqdocvar{pe\_st}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n} \coqdocvar{H}. \coqdoctac{induction} \coqdocvar{pe\_st} \coqdockw{as} [| [\coqdocvar{V'} \coqdocvar{n'}] \coqdocvar{pe\_st}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{simpl}. \coqdocvar{compare} \coqdocvar{V} \coqdocvar{V'}; \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
In what follows, we will make heavy use of the \coqdocdefinition{In} property from
    the standard library, also defined in \coqdocvar{Logic.v}: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Print} \coqdocvar{In}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Besides the various lemmas about \coqdocdefinition{In} that we've already come
    across, the following one (taken from the standard library) will
    also be useful: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Check} \coqdocvar{filter\_In}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
If a type \coqdocabbreviation{A} has an operator \coqdocvariable{beq} for testing equality of its
    elements, we can compute a boolean \coqdocdefinition{inb} \coqdocvariable{beq} \coqdocabbreviation{a} \coqdocabbreviation{l} for testing
    whether \coqdocdefinition{In} \coqdocabbreviation{a} \coqdocabbreviation{l} holds or not. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{inb} \{\coqdocvar{A} : \coqdockw{Type}\} (\coqdocvar{beq} : \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{A} \ensuremath{\rightarrow} \coqdocvar{bool}) (\coqdocvar{a} : \coqdocvar{A}) (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{A}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{a'}::\coqdocvar{l'} \ensuremath{\Rightarrow} \coqdocvar{beq} \coqdocvar{a} \coqdocvar{a'} || \coqdocvar{inb} \coqdocvar{beq} \coqdocvar{a} \coqdocvar{l'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
It is easy to relate \coqdocdefinition{inb} to \coqdocdefinition{In} with the \coqdocinductive{reflect} property: \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{inbP} : \coqdockw{\ensuremath{\forall}} \coqdocvar{A} : \coqdockw{Type}, \coqdockw{\ensuremath{\forall}} \coqdocvar{beq} : \coqdocvar{A}\ensuremath{\rightarrow}\coqdocvar{A}\ensuremath{\rightarrow}\coqdocvar{bool},\coqdoceol
\coqdocindent{1.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{a1} \coqdocvar{a2}, \coqdocvar{reflect} (\coqdocvar{a1} = \coqdocvar{a2}) (\coqdocvar{beq} \coqdocvar{a1} \coqdocvar{a2})) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{a} \coqdocvar{l}, \coqdocvar{reflect} (\coqdocvar{In} \coqdocvar{a} \coqdocvar{l}) (\coqdocvar{inb} \coqdocvar{beq} \coqdocvar{a} \coqdocvar{l}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{A} \coqdocvar{beq} \coqdocvar{beqP} \coqdocvar{a} \coqdocvar{l}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{l} \coqdockw{as} [|\coqdocvar{a'} \coqdocvar{l'} \coqdocvar{IH}].\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{constructor}. \coqdoctac{intros} [].\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{simpl}. \coqdoctac{destruct} (\coqdocvar{beqP} \coqdocvar{a} \coqdocvar{a'}).\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{subst}. \coqdoctac{constructor}. \coqdoctac{left}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoctac{simpl}. \coqdoctac{destruct} \coqdocvar{IH}; \coqdoctac{constructor}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoctac{right}. \coqdoctac{trivial}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times} \coqdoctac{intros} [\coqdocvar{H1} \ensuremath{|} \coqdocvar{H2}]; \coqdoctac{congruence}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Arithmetic Expressions}



 Partial evaluation of \coqdocinductive{aexp} is straightforward -- it is basically
    the same as constant folding, \coqdocdefinition{fold\_constants\_aexp}, except that
    sometimes the partial state tells us the current value of a
    variable and we can replace it by a constant expression. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{pe\_aexp} (\coqdocvar{pe\_st} : \coqdocvar{pe\_state}) (\coqdocvar{a} : \coqdocvar{aexp}) : \coqdocvar{aexp} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{a} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{ANum} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{ANum} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AId} \coqdocvar{i} \ensuremath{\Rightarrow} \coqdockw{match} \coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{i} \coqdockw{with} \coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{ANum} \coqdocvar{n}\coqdoceol
\coqdocindent{6.50em}
\ensuremath{|} \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{AId} \coqdocvar{i}\coqdoceol
\coqdocindent{6.50em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{APlus} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1}, \coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a2}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{ANum} \coqdocvar{n1}, \coqdocvar{ANum} \coqdocvar{n2}) \ensuremath{\Rightarrow} \coqdocvar{ANum} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{a1'}, \coqdocvar{a2'}) \ensuremath{\Rightarrow} \coqdocvar{APlus} \coqdocvar{a1'} \coqdocvar{a2'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMinus} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1}, \coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a2}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{ANum} \coqdocvar{n1}, \coqdocvar{ANum} \coqdocvar{n2}) \ensuremath{\Rightarrow} \coqdocvar{ANum} (\coqdocvar{n1} - \coqdocvar{n2})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{a1'}, \coqdocvar{a2'}) \ensuremath{\Rightarrow} \coqdocvar{AMinus} \coqdocvar{a1'} \coqdocvar{a2'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{AMult} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1}, \coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a2}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{ANum} \coqdocvar{n1}, \coqdocvar{ANum} \coqdocvar{n2}) \ensuremath{\Rightarrow} \coqdocvar{ANum} (\coqdocvar{n1} \ensuremath{\times} \coqdocvar{n2})\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{a1'}, \coqdocvar{a2'}) \ensuremath{\Rightarrow} \coqdocvar{AMult} \coqdocvar{a1'} \coqdocvar{a2'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
This partial evaluator folds constants but does not apply the
    associativity of addition. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_pe\_aexp1}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_aexp} [(\coqdocvar{X},3)] (\coqdocvar{APlus} (\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)) (\coqdocvar{AId} \coqdocvar{Y}))\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{APlus} (\coqdocvar{ANum} 4) (\coqdocvar{AId} \coqdocvar{Y}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{text\_pe\_aexp2}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_aexp} [(\coqdocvar{Y},3)] (\coqdocvar{APlus} (\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)) (\coqdocvar{AId} \coqdocvar{Y}))\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{APlus} (\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)) (\coqdocvar{ANum} 3).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now, in what sense is \coqdocdefinition{pe\_aexp} correct?  It is reasonable to
    define the correctness of \coqdocdefinition{pe\_aexp} as follows: whenever a full
    state \coqdocvariable{st}:\coqdocdefinition{state} is \textit{consistent} with a partial state
    \coqdocvariable{pe\_st}:\coqdocdefinition{pe\_state} (in other words, every variable to which \coqdocvariable{pe\_st}
    assigns a value is assigned the same value by \coqdocvariable{st}), evaluating
    \coqdocabbreviation{a} and evaluating \coqdocdefinition{pe\_aexp} \coqdocvariable{pe\_st} \coqdocabbreviation{a} in \coqdocvariable{st} yields the same
    result.  This statement is indeed true. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pe\_consistent} (\coqdocvar{st}:\coqdocvar{state}) (\coqdocvar{pe\_st}:\coqdocvar{pe\_state}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{V} \coqdocvar{n}, \coqdocvar{Some} \coqdocvar{n} = \coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V} \ensuremath{\rightarrow} \coqdocvar{st} \coqdocvar{V} = \coqdocvar{n}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_aexp\_correct\_weak}: \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{pe\_st}, \coqdocvar{pe\_consistent} \coqdocvar{st} \coqdocvar{pe\_st} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{a}, \coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a} = \coqdocvar{aeval} \coqdocvar{st} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{unfold} \coqdocvar{pe\_consistent}. \coqdoctac{intros} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{H} \coqdocvar{a}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{a}; \coqdoctac{simpl};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{reflexivity};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{destruct} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{destruct} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a2});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{rewrite} \coqdocvar{IHa1}; \coqdoctac{rewrite} \coqdocvar{IHa2}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{i}) \coqdockw{as} \coqdocvar{l}. \coqdoctac{destruct} \coqdocvar{l}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{rewrite} \coqdocvar{H} \coqdockw{with} (\coqdocvar{n}:=\coqdocvar{n}) \coqdoctac{by} \coqdoctac{apply} \coqdocvar{Heql}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
However, we will soon want our partial evaluator to remove
    assignments.  For example, it will simplify


    X ::= ANum 3;; Y ::= AMinus (AId X) (AId Y);; X ::= ANum 4


    to just


    Y ::= AMinus (ANum 3) (AId Y);; X ::= ANum 4


    by delaying the assignment to \coqdocdefinition{X} until the end.  To accomplish
    this simplification, we need the result of partial evaluating


    pe\_aexp (\coqdocdefinition{X},3) (AMinus (AId X) (AId Y))


    to be equal to \coqdocconstructor{AMinus} (\coqdocconstructor{ANum} 3) (\coqdocconstructor{AId} \coqdocdefinition{Y}) and \textit{not} the original
    expression \coqdocconstructor{AMinus} (\coqdocconstructor{AId} \coqdocdefinition{X}) (\coqdocconstructor{AId} \coqdocdefinition{Y}).  After all, it would be
    incorrect, not just inefficient, to transform


    X ::= ANum 3;; Y ::= AMinus (AId X) (AId Y);; X ::= ANum 4


    to


    Y ::= AMinus (AId X) (AId Y);; X ::= ANum 4


    even though the output expressions \coqdocconstructor{AMinus} (\coqdocconstructor{ANum} 3) (\coqdocconstructor{AId} \coqdocdefinition{Y}) and
    \coqdocconstructor{AMinus} (\coqdocconstructor{AId} \coqdocdefinition{X}) (\coqdocconstructor{AId} \coqdocdefinition{Y}) both satisfy the correctness criterion
    that we just proved.  Indeed, if we were to just define \coqdocdefinition{pe\_aexp}
    \coqdocvariable{pe\_st} \coqdocabbreviation{a} = \coqdocabbreviation{a} then the theorem \coqdocvar{pe\_aexp\_correct'} would already
    trivially hold.


    Instead, we want to prove that the \coqdocdefinition{pe\_aexp} is correct in a
    stronger sense: evaluating the expression produced by partial
    evaluation (\coqdocdefinition{aeval} \coqdocvariable{st} (\coqdocdefinition{pe\_aexp} \coqdocvariable{pe\_st} \coqdocabbreviation{a})) must not depend on those
    parts of the full state \coqdocvariable{st} that are already specified in the
    partial state \coqdocvariable{pe\_st}.  To be more precise, let us define a
    function \coqdocvar{pe\_override}, which updates \coqdocvariable{st} with the contents of
    \coqdocvariable{pe\_st}.  In other words, \coqdocvar{pe\_override} carries out the
    assignments listed in \coqdocvariable{pe\_st} on top of \coqdocvariable{st}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{pe\_update} (\coqdocvar{st}:\coqdocvar{state}) (\coqdocvar{pe\_st}:\coqdocvar{pe\_state}) : \coqdocvar{state} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{pe\_st} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{V},\coqdocvar{n})::\coqdocvar{pe\_st} \ensuremath{\Rightarrow} \coqdocvar{t\_update} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdocvar{V} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_pe\_update}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{Y} 1) [(\coqdocvar{X},3);(\coqdocvar{Z},2)]\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{t\_update} (\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{Y} 1) \coqdocvar{Z} 2) \coqdocvar{X} 3.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Although \coqdocdefinition{pe\_update} operates on a concrete \coqdocinductive{list} representing
    a \coqdocdefinition{pe\_state}, its behavior is defined entirely by the \coqdocdefinition{pe\_lookup}
    interpretation of the \coqdocdefinition{pe\_state}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_update\_correct}: \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{V0},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{V0} =\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V0} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{V0}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{induction} \coqdocvar{pe\_st} \coqdockw{as} [| [\coqdocvar{V} \coqdocvar{n}] \coqdocvar{pe\_st}]. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl} \coqdoctac{in} *. \coqdoctac{unfold} \coqdocvar{t\_update}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{compare} \coqdocvar{V0} \coqdocvar{V}; \coqdoctac{auto}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_refl}; \coqdoctac{auto}. \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}; \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We can relate \coqdocdefinition{pe\_consistent} to \coqdocdefinition{pe\_update} in two ways.
    First, overriding a state with a partial state always gives a
    state that is consistent with the partial state.  Second, if a
    state is already consistent with a partial state, then overriding
    the state with the partial state gives the same state. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_update\_consistent}: \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{pe\_st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_consistent} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdocvar{pe\_st}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n} \coqdocvar{H}. \coqdoctac{rewrite} \coqdocvar{pe\_update\_correct}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V}); \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_consistent\_update}: \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{pe\_st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_consistent} \coqdocvar{st} \coqdocvar{pe\_st} \ensuremath{\rightarrow} \coqdockw{\ensuremath{\forall}} \coqdocvar{V}, \coqdocvar{st} \coqdocvar{V} = \coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{V}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{H} \coqdocvar{V}. \coqdoctac{rewrite} \coqdocvar{pe\_update\_correct}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V}) \coqdockw{as} \coqdocvar{l}. \coqdoctac{destruct} \coqdocvar{l}; \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Now we can state and prove that \coqdocdefinition{pe\_aexp} is correct in the
    stronger sense that will help us define the rest of the partial
    evaluator.


    Intuitively, running a program using partial evaluation is a
    two-stage process.  In the first, \textit{static} stage, we partially
    evaluate the given program with respect to some partial state to
    get a \textit{residual} program.  In the second, \textit{dynamic} stage, we
    evaluate the residual program with respect to the rest of the
    state.  This dynamic state provides values for those variables
    that are unknown in the static (partial) state.  Thus, the
    residual program should be equivalent to \textit{prepending} the
    assignments listed in the partial state to the original program. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_aexp\_correct}: \coqdockw{\ensuremath{\forall}} (\coqdocvar{pe\_st}:\coqdocvar{pe\_state}) (\coqdocvar{a}:\coqdocvar{aexp}) (\coqdocvar{st}:\coqdocvar{state}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{aeval} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdocvar{a} = \coqdocvar{aeval} \coqdocvar{st} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{pe\_st} \coqdocvar{a} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{a}; \coqdoctac{simpl};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{reflexivity};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{destruct} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{destruct} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a2});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{rewrite} \coqdocvar{IHa1}; \coqdoctac{rewrite} \coqdocvar{IHa2}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{pe\_update\_correct}. \coqdoctac{destruct} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{i}); \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Boolean Expressions}



 The partial evaluation of boolean expressions is similar.  In
    fact, it is entirely analogous to the constant folding of boolean
    expressions, because our language has no boolean variables. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{pe\_bexp} (\coqdocvar{pe\_st} : \coqdocvar{pe\_state}) (\coqdocvar{b} : \coqdocvar{bexp}) : \coqdocvar{bexp} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{b} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BTrue}        \ensuremath{\Rightarrow} \coqdocvar{BTrue}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BFalse}       \ensuremath{\Rightarrow} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BEq} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1}, \coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a2}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{ANum} \coqdocvar{n1}, \coqdocvar{ANum} \coqdocvar{n2}) \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_nat} \coqdocvar{n1} \coqdocvar{n2} \coqdockw{then} \coqdocvar{BTrue} \coqdockw{else} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{a1'}, \coqdocvar{a2'}) \ensuremath{\Rightarrow} \coqdocvar{BEq} \coqdocvar{a1'} \coqdocvar{a2'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BLe} \coqdocvar{a1} \coqdocvar{a2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1}, \coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a2}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{ANum} \coqdocvar{n1}, \coqdocvar{ANum} \coqdocvar{n2}) \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{leb} \coqdocvar{n1} \coqdocvar{n2} \coqdockw{then} \coqdocvar{BTrue} \coqdockw{else} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{a1'}, \coqdocvar{a2'}) \ensuremath{\Rightarrow} \coqdocvar{BLe} \coqdocvar{a1'} \coqdocvar{a2'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BNot} \coqdocvar{b1} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{BTrue} \ensuremath{\Rightarrow} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{BFalse} \ensuremath{\Rightarrow} \coqdocvar{BTrue}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{b1'} \ensuremath{\Rightarrow} \coqdocvar{BNot} \coqdocvar{b1'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{BAnd} \coqdocvar{b1} \coqdocvar{b2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{match} (\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1}, \coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b2}) \coqdockw{with}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{BTrue}, \coqdocvar{BTrue}) \ensuremath{\Rightarrow} \coqdocvar{BTrue}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{BTrue}, \coqdocvar{BFalse}) \ensuremath{\Rightarrow} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{BFalse}, \coqdocvar{BTrue}) \ensuremath{\Rightarrow} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{BFalse}, \coqdocvar{BFalse}) \ensuremath{\Rightarrow} \coqdocvar{BFalse}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} (\coqdocvar{b1'}, \coqdocvar{b2'}) \ensuremath{\Rightarrow} \coqdocvar{BAnd} \coqdocvar{b1'} \coqdocvar{b2'}\coqdoceol
\coqdocindent{3.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_pe\_bexp1}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_bexp} [(\coqdocvar{X},3)] (\coqdocvar{BNot} (\coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 3)))\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{BFalse}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{test\_pe\_bexp2}: \coqdockw{\ensuremath{\forall}} \coqdocvar{b},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{b} = \coqdocvar{BNot} (\coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1))) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_bexp} [] \coqdocvar{b} = \coqdocvar{b}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{b} \coqdocvar{H}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The correctness of \coqdocdefinition{pe\_bexp} is analogous to the correctness of
    \coqdocdefinition{pe\_aexp} above. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_bexp\_correct}: \coqdockw{\ensuremath{\forall}} (\coqdocvar{pe\_st}:\coqdocvar{pe\_state}) (\coqdocvar{b}:\coqdocvar{bexp}) (\coqdocvar{st}:\coqdocvar{state}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{beval} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdocvar{b} = \coqdocvar{beval} \coqdocvar{st} (\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{pe\_st} \coqdocvar{b} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{b}; \coqdoctac{simpl};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{reflexivity};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdocvar{remember} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a}) \coqdockw{as} \coqdocvar{a'};\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{remember} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a0}) \coqdockw{as} \coqdocvar{a0'};\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{assert} (\coqdocvar{Ha}: \coqdocvar{aeval} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdocvar{a} = \coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a'});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{assert} (\coqdocvar{Ha0}: \coqdocvar{aeval} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdocvar{a0} = \coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a0'});\coqdoceol
\coqdocindent{5.50em}
\coqdoctac{try} (\coqdoctac{subst}; \coqdoctac{apply} \coqdocvar{pe\_aexp\_correct});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{destruct} \coqdocvar{a'}; \coqdoctac{destruct} \coqdocvar{a0'}; \coqdoctac{rewrite} \coqdocvar{Ha}; \coqdoctac{rewrite} \coqdocvar{Ha0};\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{simpl}; \coqdoctac{try} \coqdoctac{destruct} (\coqdocvar{beq\_nat} \coqdocvar{n} \coqdocvar{n0});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{try} \coqdoctac{destruct} (\coqdocvar{leb} \coqdocvar{n} \coqdocvar{n0}); \coqdoctac{reflexivity});\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{destruct} (\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b}); \coqdoctac{rewrite} \coqdocvar{IHb}; \coqdoctac{reflexivity});\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{destruct} (\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{destruct} (\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b2});\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{rewrite} \coqdocvar{IHb1}; \coqdoctac{rewrite} \coqdocvar{IHb2}; \coqdoctac{reflexivity}).\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Partial Evaluation of Commands, Without Loops}



 What about the partial evaluation of commands?  The analogy
    between partial evaluation and full evaluation continues: Just as
    full evaluation of a command turns an initial state into a final
    state, partial evaluation of a command turns an initial partial
    state into a final partial state.  The difference is that, because
    the state is partial, some parts of the command may not be
    executable at the static stage.  Therefore, just as \coqdocdefinition{pe\_aexp}
    returns a residual \coqdocinductive{aexp} and \coqdocdefinition{pe\_bexp} returns a residual \coqdocinductive{bexp}
    above, partially evaluating a command yields a residual command.


    Another way in which our partial evaluator is similar to a full
    evaluator is that it does not terminate on all commands.  It is
    not hard to build a partial evaluator that terminates on all
    commands; what is hard is building a partial evaluator that
    terminates on all commands yet automatically performs desired
    optimizations such as unrolling loops.  Often a partial evaluator
    can be coaxed into terminating more often and performing more
    optimizations by writing the source program differently so that
    the separation between static and dynamic information becomes more
    apparent.  Such coaxing is the art of \textit{binding-time improvement}.
    The binding time of a variable tells when its value is known --
    either ``static'', or ``dynamic.''


    Anyway, for now we will just live with the fact that our partial
    evaluator is not a total function from the source command and the
    initial partial state to the residual command and the final
    partial state.  To model this non-termination, just as with the
    full evaluation of commands, we use an inductively defined
    relation.  We write


      c1 / st \symbol{92}\symbol{92} c1' / st'


    to mean that partially evaluating the source command \coqdocconstructor{c1} in the
    initial partial state \coqdocvariable{st} yields the residual command \coqdocvariable{c1'} and
    the final partial state \coqdocvariable{st'}.  For example, we want something like


      (X ::= ANum 3 ;; Y ::= AMult (AId Z) (APlus (AId X) (AId X)))
      / \ensuremath{\Box} \symbol{92}\symbol{92} (Y ::= AMult (AId Z) (ANum 6)) / (\coqdocdefinition{X},3)


    to hold.  The assignment to \coqdocdefinition{X} appears in the final partial state,
    not the residual command. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Assignment}



 Let's start by considering how to partially evaluate an
    assignment.  The two assignments in the source program above needs
    to be treated differently.  The first assignment \coqdocdefinition{X} ::= \coqdocconstructor{ANum} 3,
    is \textit{static}: its right-hand-side is a constant (more generally,
    simplifies to a constant), so we should update our partial state
    at \coqdocdefinition{X} to 3 and produce no residual code.  (Actually, we produce
    a residual \coqdocvar{SKIP}.)  The second assignment \coqdocdefinition{Y} ::= \coqdocconstructor{AMult} (\coqdocconstructor{AId} \coqdocdefinition{Z})
    (\coqdocconstructor{APlus} (\coqdocconstructor{AId} \coqdocdefinition{X}) (\coqdocconstructor{AId} \coqdocdefinition{X})) is \textit{dynamic}: its right-hand-side does
    not simplify to a constant, so we should leave it in the residual
    code and remove \coqdocdefinition{Y}, if present, from our partial state.  To
    implement these two cases, we define the functions \coqdocdefinition{pe\_add} and
    \coqdocdefinition{pe\_remove}.  Like \coqdocdefinition{pe\_update} above, these functions operate on
    a concrete \coqdocinductive{list} representing a \coqdocdefinition{pe\_state}, but the theorems
    \coqdoclemma{pe\_add\_correct} and \coqdoclemma{pe\_remove\_correct} specify their behavior by
    the \coqdocdefinition{pe\_lookup} interpretation of the \coqdocdefinition{pe\_state}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{pe\_remove} (\coqdocvar{pe\_st}:\coqdocvar{pe\_state}) (\coqdocvar{V}:\coqdocvar{id}) : \coqdocvar{pe\_state} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{pe\_st} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} []\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} (\coqdocvar{V'},\coqdocvar{n'})::\coqdocvar{pe\_st} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{V} \coqdocvar{V'} \coqdockw{then} \coqdocvar{pe\_remove} \coqdocvar{pe\_st} \coqdocvar{V}\coqdoceol
\coqdocindent{11.00em}
\coqdockw{else} (\coqdocvar{V'},\coqdocvar{n'}) :: \coqdocvar{pe\_remove} \coqdocvar{pe\_st} \coqdocvar{V}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_remove\_correct}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{V0},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_lookup} (\coqdocvar{pe\_remove} \coqdocvar{pe\_st} \coqdocvar{V}) \coqdocvar{V0}\coqdoceol
\coqdocindent{1.00em}
= \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{V} \coqdocvar{V0} \coqdockw{then} \coqdocvar{None} \coqdockw{else} \coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V0}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{V0}. \coqdoctac{induction} \coqdocvar{pe\_st} \coqdockw{as} [| [\coqdocvar{V'} \coqdocvar{n'}] \coqdocvar{pe\_st}].\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{V} \coqdocvar{V0}); \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{simpl}. \coqdocvar{compare} \coqdocvar{V} \coqdocvar{V'}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{rewrite} \coqdocvar{IHpe\_st}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{V} \coqdocvar{V0}). \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{simpl}. \coqdocvar{compare} \coqdocvar{V0} \coqdocvar{V'}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{rewrite} \coqdocvar{IHpe\_st}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pe\_add} (\coqdocvar{pe\_st}:\coqdocvar{pe\_state}) (\coqdocvar{V}:\coqdocvar{id}) (\coqdocvar{n}:\coqdocvar{nat}) : \coqdocvar{pe\_state} :=\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{V},\coqdocvar{n}) :: \coqdocvar{pe\_remove} \coqdocvar{pe\_st} \coqdocvar{V}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_add\_correct}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n} \coqdocvar{V0},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_lookup} (\coqdocvar{pe\_add} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n}) \coqdocvar{V0}\coqdoceol
\coqdocindent{1.00em}
= \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{V} \coqdocvar{V0} \coqdockw{then} \coqdocvar{Some} \coqdocvar{n} \coqdockw{else} \coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V0}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n} \coqdocvar{V0}. \coqdoctac{unfold} \coqdocvar{pe\_add}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{compare} \coqdocvar{V} \coqdocvar{V0}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_refl}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{rewrite} \coqdocvar{pe\_remove\_correct}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{repeat} \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We will use the two theorems below to show that our partial
    evaluator correctly deals with dynamic assignments and static
    assignments, respectively. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_update\_update\_remove}: \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t\_update} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdocvar{V} \coqdocvar{n} =\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_update} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{V} \coqdocvar{n}) (\coqdocvar{pe\_remove} \coqdocvar{pe\_st} \coqdocvar{V}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n}. \coqdoctac{apply} \coqdocvar{functional\_extensionality}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{V0}. \coqdoctac{unfold} \coqdocvar{t\_update}. \coqdoctac{rewrite} !\coqdocvar{pe\_update\_correct}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{pe\_remove\_correct}. \coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{V} \coqdocvar{V0}); \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_update\_update\_add}: \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{t\_update} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdocvar{V} \coqdocvar{n} =\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_update} \coqdocvar{st} (\coqdocvar{pe\_add} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{V} \coqdocvar{n}. \coqdoctac{apply} \coqdocvar{functional\_extensionality}. \coqdoctac{intros} \coqdocvar{V0}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{t\_update}. \coqdoctac{rewrite} !\coqdocvar{pe\_update\_correct}. \coqdoctac{rewrite} \coqdocvar{pe\_add\_correct}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_id} \coqdocvar{V} \coqdocvar{V0}); \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Conditional}



 Trickier than assignments to partially evaluate is the
    conditional, \coqdocvar{IFB} \coqdocvariable{b1} \coqdocvar{THEN} \coqdocconstructor{c1} \coqdocvar{ELSE} \coqdocconstructor{c2} \coqdocvar{FI}.  If \coqdocvariable{b1} simplifies to
    \coqdocconstructor{BTrue} or \coqdocconstructor{BFalse} then it's easy: we know which branch will be
    taken, so just take that branch.  If \coqdocvariable{b1} does not simplify to a
    constant, then we need to take both branches, and the final
    partial state may differ between the two branches!


    The following program illustrates the difficulty:


      X ::= ANum 3;;
      IFB BLe (AId Y) (ANum 4) THEN
          Y ::= ANum 4;;
          IFB BEq (AId X) (AId Y) THEN Y ::= ANum 999 ELSE SKIP FI
      ELSE SKIP FI


    Suppose the initial partial state is empty.  We don't know
    statically how \coqdocdefinition{Y} compares to 4, so we must partially evaluate
    both branches of the (outer) conditional.  On the \coqdocvar{THEN} branch,
    we know that \coqdocdefinition{Y} is set to 4 and can even use that knowledge to
    simplify the code somewhat.  On the \coqdocvar{ELSE} branch, we still don't
    know the exact value of \coqdocdefinition{Y} at the end.  What should the final
    partial state and residual program be?


    One way to handle such a dynamic conditional is to take the
    intersection of the final partial states of the two branches.  In
    this example, we take the intersection of (\coqdocdefinition{Y},4),(\coqdocdefinition{X},3) and
    (\coqdocdefinition{X},3), so the overall final partial state is (\coqdocdefinition{X},3).  To
    compensate for forgetting that \coqdocdefinition{Y} is 4, we need to add an
    assignment \coqdocdefinition{Y} ::= \coqdocconstructor{ANum} 4 to the end of the \coqdocvar{THEN} branch.  So,
    the residual program will be something like


      SKIP;;
      IFB BLe (AId Y) (ANum 4) THEN
          SKIP;;
          SKIP;;
          Y ::= ANum 4
      ELSE SKIP FI


    Programming this case in Coq calls for several auxiliary
    functions: we need to compute the intersection of two \coqdocdefinition{pe\_state}s
    and turn their difference into sequences of assignments.


    First, we show how to compute whether two \coqdocdefinition{pe\_state}s to disagree
    at a given variable.  In the theorem \coqdoclemma{pe\_disagree\_domain}, we
    prove that two \coqdocdefinition{pe\_state}s can only disagree at variables that
    appear in at least one of them. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pe\_disagree\_at} (\coqdocvar{pe\_st1} \coqdocvar{pe\_st2} : \coqdocvar{pe\_state}) (\coqdocvar{V}:\coqdocvar{id}) : \coqdocvar{bool} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{pe\_lookup} \coqdocvar{pe\_st1} \coqdocvar{V}, \coqdocvar{pe\_lookup} \coqdocvar{pe\_st2} \coqdocvar{V} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{x}, \coqdocvar{Some} \coqdocvar{y} \ensuremath{\Rightarrow} \coqdocvar{negb} (\coqdocvar{beq\_nat} \coqdocvar{x} \coqdocvar{y})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{None}, \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{false}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{\_}, \coqdocvar{\_} \ensuremath{\Rightarrow} \coqdocvar{true}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_disagree\_domain}: \coqdockw{\ensuremath{\forall}} (\coqdocvar{pe\_st1} \coqdocvar{pe\_st2} : \coqdocvar{pe\_state}) (\coqdocvar{V}:\coqdocvar{id}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{true} = \coqdocvar{pe\_disagree\_at} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{V} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{In} \coqdocvar{V} (\coqdocvar{map} (@\coqdocvar{fst} \coqdocvar{\_} \coqdocvar{\_}) \coqdocvar{pe\_st1} ++ \coqdocvar{map} (@\coqdocvar{fst} \coqdocvar{\_} \coqdocvar{\_}) \coqdocvar{pe\_st2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{unfold} \coqdocvar{pe\_disagree\_at}. \coqdoctac{intros} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{V} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{in\_app\_iff}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st1} \coqdocvar{V}) \coqdockw{as} \coqdocvar{lookup1}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{lookup1} \coqdockw{as} [\coqdocvar{n1}|]. \coqdoctac{left}. \coqdoctac{apply} \coqdocvar{pe\_domain} \coqdockw{with} \coqdocvar{n1}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{remember} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st2} \coqdocvar{V}) \coqdockw{as} \coqdocvar{lookup2}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} \coqdocvar{lookup2} \coqdockw{as} [\coqdocvar{n2}|]. \coqdoctac{right}. \coqdoctac{apply} \coqdocvar{pe\_domain} \coqdockw{with} \coqdocvar{n2}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We define the \coqdocdefinition{pe\_compare} function to list the variables where
    two given \coqdocdefinition{pe\_state}s disagree.  This list is exact, according to
    the theorem \coqdoclemma{pe\_compare\_correct}: a variable appears on the list
    if and only if the two given \coqdocdefinition{pe\_state}s disagree at that
    variable.  Furthermore, we use the \coqdocdefinition{pe\_unique} function to
    eliminate duplicates from the list. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{pe\_unique} (\coqdocvar{l} : \coqdocvar{list} \coqdocvar{id}) : \coqdocvar{list} \coqdocvar{id} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} []\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{x}::\coqdocvar{l} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{x} :: \coqdocvar{filter} (\coqdockw{fun} \coqdocvar{y} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{beq\_id} \coqdocvar{x} \coqdocvar{y} \coqdockw{then} \coqdocvar{false} \coqdockw{else} \coqdocvar{true}) (\coqdocvar{pe\_unique} \coqdocvar{l})\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_unique\_correct}: \coqdockw{\ensuremath{\forall}} \coqdocvar{l} \coqdocvar{x},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{In} \coqdocvar{x} \coqdocvar{l} \ensuremath{\leftrightarrow} \coqdocvar{In} \coqdocvar{x} (\coqdocvar{pe\_unique} \coqdocvar{l}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{l} \coqdocvar{x}. \coqdoctac{induction} \coqdocvar{l} \coqdockw{as} [| \coqdocvar{h} \coqdocvar{t}]. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl} \coqdoctac{in} *. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}. \coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{left}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{beq\_idP} \coqdocvar{h} \coqdocvar{x}).\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{left}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{4.50em}
\coqdoctac{right}. \coqdoctac{apply} \coqdocvar{filter\_In}. \coqdoctac{split}.\coqdoceol
\coqdocindent{5.50em}
\coqdoctac{apply} \coqdocvar{IHt}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{5.50em}
\coqdoctac{rewrite} \coqdocvar{false\_beq\_id}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros}. \coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{clear} \coqdocvar{H}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{left}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{apply} \coqdocvar{filter\_In} \coqdoctac{in} \coqdocvar{H0}. \coqdoctac{inversion} \coqdocvar{H0}. \coqdoctac{right}. \coqdoctac{apply} \coqdocvar{IHt}. \coqdoctac{assumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pe\_compare} (\coqdocvar{pe\_st1} \coqdocvar{pe\_st2} : \coqdocvar{pe\_state}) : \coqdocvar{list} \coqdocvar{id} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_unique} (\coqdocvar{filter} (\coqdocvar{pe\_disagree\_at} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2})\coqdoceol
\coqdocindent{2.00em}
(\coqdocvar{map} (@\coqdocvar{fst} \coqdocvar{\_} \coqdocvar{\_}) \coqdocvar{pe\_st1} ++ \coqdocvar{map} (@\coqdocvar{fst} \coqdocvar{\_} \coqdocvar{\_}) \coqdocvar{pe\_st2})).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_compare\_correct}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{V},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_lookup} \coqdocvar{pe\_st1} \coqdocvar{V} = \coqdocvar{pe\_lookup} \coqdocvar{pe\_st2} \coqdocvar{V} \ensuremath{\leftrightarrow}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{\lnot} \coqdocvar{In} \coqdocvar{V} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{V}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{unfold} \coqdocvar{pe\_compare}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_unique\_correct}. \coqdoctac{rewrite} \coqdocvar{filter\_In}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}; \coqdoctac{intros} \coqdocvar{Heq}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intro}. \coqdoctac{destruct} \coqdocvar{H}. \coqdoctac{unfold} \coqdocvar{pe\_disagree\_at} \coqdoctac{in} \coqdocvar{H0}. \coqdoctac{rewrite} \coqdocvar{Heq} \coqdoctac{in} \coqdocvar{H0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st2} \coqdocvar{V}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_nat\_refl} \coqdoctac{in} \coqdocvar{H0}. \coqdoctac{inversion} \coqdocvar{H0}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H0}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assert} (\coqdocvar{Hagree}: \coqdocvar{pe\_disagree\_at} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{V} = \coqdocvar{false}).\coqdoceol
\coqdocindent{2.00em}
\{ \coqdoceol
\coqdocindent{3.00em}
\coqdocvar{remember} (\coqdocvar{pe\_disagree\_at} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{V}) \coqdockw{as} \coqdocvar{disagree}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{disagree}; [| \coqdoctac{reflexivity}].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply}  \coqdocvar{pe\_disagree\_domain} \coqdoctac{in} \coqdocvar{Heqdisagree}.\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{exfalso}. \coqdoctac{apply} \coqdocvar{Heq}. \coqdoctac{split}. \coqdoctac{assumption}. \coqdoctac{reflexivity}. \}\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{unfold} \coqdocvar{pe\_disagree\_at} \coqdoctac{in} \coqdocvar{Hagree}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st1} \coqdocvar{V}) \coqdockw{as} [\coqdocvar{n1}|];\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st2} \coqdocvar{V}) \coqdockw{as} [\coqdocvar{n2}|];\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{try} \coqdoctac{reflexivity}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \coqdocvar{negb\_false\_iff} \coqdoctac{in} \coqdocvar{Hagree}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{beq\_nat\_true} \coqdoctac{in} \coqdocvar{Hagree}. \coqdoctac{subst}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The intersection of two partial states is the result of removing
    from one of them all the variables where the two disagree.  We
    define the function \coqdocdefinition{pe\_removes}, in terms of \coqdocdefinition{pe\_remove} above,
    to perform such a removal of a whole list of variables at once.


    The theorem \coqdoclemma{pe\_compare\_removes} testifies that the \coqdocdefinition{pe\_lookup}
    interpretation of the result of this intersection operation is the
    same no matter which of the two partial states we remove the
    variables from.  Because \coqdocdefinition{pe\_update} only depends on the
    \coqdocdefinition{pe\_lookup} interpretation of partial states, \coqdocdefinition{pe\_update} also
    does not care which of the two partial states we remove the
    variables from; that theorem \coqdoclemma{pe\_compare\_update} is used in the
    correctness proof shortly. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{pe\_removes} (\coqdocvar{pe\_st}:\coqdocvar{pe\_state}) (\coqdocvar{ids} : \coqdocvar{list} \coqdocvar{id}) : \coqdocvar{pe\_state} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{ids} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{pe\_st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{V}::\coqdocvar{ids} \ensuremath{\Rightarrow} \coqdocvar{pe\_remove} (\coqdocvar{pe\_removes} \coqdocvar{pe\_st} \coqdocvar{ids}) \coqdocvar{V}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_removes\_correct}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{ids} \coqdocvar{V},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_lookup} (\coqdocvar{pe\_removes} \coqdocvar{pe\_st} \coqdocvar{ids}) \coqdocvar{V} =\coqdoceol
\coqdocindent{1.00em}
\coqdockw{if} \coqdocvar{inb} \coqdocvar{beq\_id} \coqdocvar{V} \coqdocvar{ids} \coqdockw{then} \coqdocvar{None} \coqdockw{else} \coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{pe\_st} \coqdocvar{ids} \coqdocvar{V}. \coqdoctac{induction} \coqdocvar{ids} \coqdockw{as} [| \coqdocvar{V'} \coqdocvar{ids}]. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{pe\_remove\_correct}. \coqdoctac{rewrite} \coqdocvar{IHids}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{compare} \coqdocvar{V'} \coqdocvar{V}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_refl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}; \coqdoctac{try} \coqdoctac{congruence}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_compare\_removes}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{V},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_lookup} (\coqdocvar{pe\_removes} \coqdocvar{pe\_st1} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2})) \coqdocvar{V} =\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_lookup} (\coqdocvar{pe\_removes} \coqdocvar{pe\_st2} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2})) \coqdocvar{V}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{intros} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{V}. \coqdoctac{rewrite} !\coqdocvar{pe\_removes\_correct}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{inbP} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{beq\_idP} \coqdocvar{V} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2})).\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoctac{apply} \coqdocvar{pe\_compare\_correct}. \coqdoctac{auto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_compare\_update}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_update} \coqdocvar{st} (\coqdocvar{pe\_removes} \coqdocvar{pe\_st1} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2})) =\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_update} \coqdocvar{st} (\coqdocvar{pe\_removes} \coqdocvar{pe\_st2} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{apply} \coqdocvar{functional\_extensionality}. \coqdoctac{intros} \coqdocvar{V}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} !\coqdocvar{pe\_update\_correct}. \coqdoctac{rewrite} \coqdocvar{pe\_compare\_removes}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Finally, we define an \coqdocdefinition{assign} function to turn the difference
    between two partial states into a sequence of assignment commands.
    More precisely, \coqdocdefinition{assign} \coqdocvariable{pe\_st} \coqdocvariable{ids} generates an assignment command
    for each variable listed in \coqdocvariable{ids}. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{assign} (\coqdocvar{pe\_st} : \coqdocvar{pe\_state}) (\coqdocvar{ids} : \coqdocvar{list} \coqdocvar{id}) : \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{ids} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} [] \ensuremath{\Rightarrow} \coqdocvar{SKIP}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{V}::\coqdocvar{ids} \ensuremath{\Rightarrow} \coqdockw{match} \coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V} \coqdockw{with}\coqdoceol
\coqdocindent{7.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{n} \ensuremath{\Rightarrow} (\coqdocvar{assign} \coqdocvar{pe\_st} \coqdocvar{ids};; \coqdocvar{V} ::= \coqdocvar{ANum} \coqdocvar{n})\coqdoceol
\coqdocindent{7.00em}
\ensuremath{|} \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{assign} \coqdocvar{pe\_st} \coqdocvar{ids}\coqdoceol
\coqdocindent{7.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The command generated by \coqdocdefinition{assign} always terminates, because it is
    just a sequence of assignments.  The (total) function \coqdocdefinition{assigned}
    below computes the effect of the command on the (dynamic state).
    The theorem \coqdoclemma{assign\_removes} then confirms that the generated
    assignments perfectly compensate for removing the variables from
    the partial state. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{assigned} (\coqdocvar{pe\_st}:\coqdocvar{pe\_state}) (\coqdocvar{ids} : \coqdocvar{list} \coqdocvar{id}) (\coqdocvar{st}:\coqdocvar{state}) : \coqdocvar{state} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} \coqdocvar{V} \ensuremath{\Rightarrow} \coqdockw{if} \coqdocvar{inb} \coqdocvar{beq\_id} \coqdocvar{V} \coqdocvar{ids} \coqdockw{then}\coqdoceol
\coqdocindent{8.00em}
\coqdockw{match} \coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V} \coqdockw{with}\coqdoceol
\coqdocindent{8.00em}
\ensuremath{|} \coqdocvar{Some} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{n}\coqdoceol
\coqdocindent{8.00em}
\ensuremath{|} \coqdocvar{None} \ensuremath{\Rightarrow} \coqdocvar{st} \coqdocvar{V}\coqdoceol
\coqdocindent{8.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{5.50em}
\coqdockw{else} \coqdocvar{st} \coqdocvar{V}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{assign\_removes}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{ids} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st} =\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_update} (\coqdocvar{assigned} \coqdocvar{pe\_st} \coqdocvar{ids} \coqdocvar{st}) (\coqdocvar{pe\_removes} \coqdocvar{pe\_st} \coqdocvar{ids}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{pe\_st} \coqdocvar{ids} \coqdocvar{st}. \coqdoctac{apply} \coqdocvar{functional\_extensionality}. \coqdoctac{intros} \coqdocvar{V}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} !\coqdocvar{pe\_update\_correct}. \coqdoctac{rewrite} \coqdocvar{pe\_removes\_correct}. \coqdoctac{unfold} \coqdocvar{assigned}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{destruct} (\coqdocvar{inbP} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{beq\_idP} \coqdocvar{V} \coqdocvar{ids}); \coqdoctac{destruct} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V}); \coqdoctac{reflexivity}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{ceval\_extensionality}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st1} \ensuremath{\rightarrow} (\coqdockw{\ensuremath{\forall}} \coqdocvar{V}, \coqdocvar{st1} \coqdocvar{V} = \coqdocvar{st2} \coqdocvar{V}) \ensuremath{\rightarrow} \coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st1} \coqdocvar{st2} \coqdocvar{H} \coqdocvar{Heq}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{functional\_extensionality} \coqdoctac{in} \coqdocvar{Heq}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Heq}. \coqdoctac{apply} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{eval\_assign}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{ids} \coqdocvar{st},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{assign} \coqdocvar{pe\_st} \coqdocvar{ids} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{assigned} \coqdocvar{pe\_st} \coqdocvar{ids} \coqdocvar{st}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{pe\_st} \coqdocvar{ids} \coqdocvar{st}. \coqdoctac{induction} \coqdocvar{ids} \coqdockw{as} [| \coqdocvar{V} \coqdocvar{ids}]; \coqdoctac{simpl}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eapply} \coqdocvar{ceval\_extensionality}. \coqdoctac{apply} \coqdocvar{E\_Skip}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{pe\_lookup} \coqdocvar{pe\_st} \coqdocvar{V}) \coqdockw{as} \coqdocvar{lookup}. \coqdoctac{destruct} \coqdocvar{lookup}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{eapply} \coqdocvar{E\_Seq}. \coqdoctac{apply} \coqdocvar{IHids}. \coqdoctac{unfold} \coqdocvar{assigned}. \coqdoctac{simpl}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{ceval\_extensionality}. \coqdoctac{apply} \coqdocvar{E\_Ass}. \coqdoctac{simpl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{V0}. \coqdoctac{unfold} \coqdocvar{t\_update}. \coqdocvar{compare} \coqdocvar{V} \coqdocvar{V0}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Heqlookup}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_refl}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}; \coqdoctac{simpl}; \coqdoctac{congruence}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{eapply} \coqdocvar{ceval\_extensionality}. \coqdoctac{apply} \coqdocvar{IHids}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{unfold} \coqdocvar{assigned}. \coqdoctac{intros} \coqdocvar{V0}. \coqdoctac{simpl}. \coqdocvar{compare} \coqdocvar{V} \coqdocvar{V0}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{Heqlookup}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{beq\_id\_refl}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{destruct} (\coqdocvar{inbP} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{beq\_idP} \coqdocvar{V} \coqdocvar{ids}); \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{rewrite} \coqdocvar{false\_beq\_id}; \coqdoctac{simpl}; \coqdoctac{congruence}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{The Partial Evaluation Relation}



 At long last, we can define a partial evaluator for commands
    without loops, as an inductive relation!  The inequality
    conditions in \coqdocconstructor{PE\_AssDynamic} and \coqdocconstructor{PE\_If} are just to keep the
    partial evaluator deterministic; they are not required for
    correctness. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "c1 '/' st '\symbol{92}\symbol{92}' c1' '/' st'"\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{c1'} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{pe\_com} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{pe\_state} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{pe\_state} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{SKIP} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{SKIP} / \coqdocvar{pe\_st}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_AssStatic} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{a1} \coqdocvar{n1} \coqdocvar{l},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1} = \coqdocvar{ANum} \coqdocvar{n1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{l} ::= \coqdocvar{a1}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{SKIP} / \coqdocvar{pe\_add} \coqdocvar{pe\_st} \coqdocvar{l} \coqdocvar{n1}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_AssDynamic} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{a1} \coqdocvar{a1'} \coqdocvar{l},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1} = \coqdocvar{a1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{a1'} \ensuremath{\not=} \coqdocvar{ANum} \coqdocvar{n}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{l} ::= \coqdocvar{a1}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} (\coqdocvar{l} ::= \coqdocvar{a1'}) / \coqdocvar{pe\_remove} \coqdocvar{pe\_st} \coqdocvar{l}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_Seq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{pe\_st'{}'} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c1'} \coqdocvar{c2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{pe\_st}  \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{pe\_st'} \symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{c1} ;; \coqdocvar{c2}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} (\coqdocvar{c1'} ;; \coqdocvar{c2'}) / \coqdocvar{pe\_st'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c1'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} = \coqdocvar{BTrue} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} = \coqdocvar{BFalse} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c1'} \coqdocvar{c2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \ensuremath{\not=} \coqdocvar{BTrue} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \ensuremath{\not=} \coqdocvar{BFalse} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{pe\_st}\coqdoceol
\coqdocindent{4.00em}
\symbol{92}\symbol{92} (\coqdocvar{IFB} \coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1}\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{THEN} \coqdocvar{c1'} ;; \coqdocvar{assign} \coqdocvar{pe\_st1} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2})\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{ELSE} \coqdocvar{c2'} ;; \coqdocvar{assign} \coqdocvar{pe\_st2} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2}) \coqdocvar{FI})\coqdoceol
\coqdocindent{6.00em}
/ \coqdocvar{pe\_removes} \coqdocvar{pe\_st1} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "c1 '/' st '\symbol{92}\symbol{92}' c1' '/' st'" := (\coqdocvar{pe\_com} \coqdocvar{c1} \coqdocvar{st} \coqdocvar{c1'} \coqdocvar{st'}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{pe\_com}.\coqdoceol
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{ceval}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Examples}



 Below are some examples of using the partial evaluator.  To make
    the \coqdocinductive{pe\_com} relation actually usable for automatic partial
    evaluation, we would need to define more automation tactics in
    Coq.  That is not hard to do, but it is not needed here. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{pe\_example1}:\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 3 ;; \coqdocvar{Y} ::= \coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{APlus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{X})))\coqdoceol
\coqdocindent{1.00em}
/ [] \symbol{92}\symbol{92} (\coqdocvar{SKIP};; \coqdocvar{Y} ::= \coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{Z}) (\coqdocvar{ANum} 6)) / [(\coqdocvar{X},3)].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{eapply} \coqdocvar{PE\_Seq}. \coqdoctac{eapply} \coqdocvar{PE\_AssStatic}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{PE\_AssDynamic}. \coqdoctac{reflexivity}. \coqdoctac{intros} \coqdocvar{n} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{pe\_example2}:\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 3 ;; \coqdocvar{IFB} \coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 4) \coqdocvar{THEN} \coqdocvar{X} ::= \coqdocvar{ANum} 4 \coqdocvar{ELSE} \coqdocvar{SKIP} \coqdocvar{FI})\coqdoceol
\coqdocindent{1.00em}
/ [] \symbol{92}\symbol{92} (\coqdocvar{SKIP};; \coqdocvar{SKIP}) / [(\coqdocvar{X},4)].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{eapply} \coqdocvar{PE\_Seq}. \coqdoctac{eapply} \coqdocvar{PE\_AssStatic}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{PE\_IfTrue}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{PE\_AssStatic}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{pe\_example3}:\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 3;;\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{IFB} \coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 4) \coqdocvar{THEN}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{Y} ::= \coqdocvar{ANum} 4;;\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{IFB} \coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{AId} \coqdocvar{Y}) \coqdocvar{THEN} \coqdocvar{Y} ::= \coqdocvar{ANum} 999 \coqdocvar{ELSE} \coqdocvar{SKIP} \coqdocvar{FI}\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{ELSE} \coqdocvar{SKIP} \coqdocvar{FI}) / []\coqdoceol
\coqdocindent{1.00em}
\symbol{92}\symbol{92} (\coqdocvar{SKIP};;\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{IFB} \coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 4) \coqdocvar{THEN}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{SKIP};; \coqdocvar{SKIP});; (\coqdocvar{SKIP};; \coqdocvar{Y} ::= \coqdocvar{ANum} 4)\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{ELSE} \coqdocvar{SKIP};; \coqdocvar{SKIP} \coqdocvar{FI})\coqdoceol
\coqdocindent{3.00em}
/ [(\coqdocvar{X},3)].\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{erewrite} \coqdocvar{f\_equal2} \coqdockw{with} (\coqdocvar{f} := \coqdockw{fun} \coqdocvar{c} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{\_} / \coqdocvar{\_} \symbol{92}\symbol{92} \coqdocvar{c} / \coqdocvar{st}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{PE\_Seq}. \coqdoctac{eapply} \coqdocvar{PE\_AssStatic}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{PE\_If}; \coqdoctac{intuition} \coqdoctac{eauto}; \coqdoctac{try} \coqdocvar{solve\_by\_invert}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{econstructor}. \coqdoctac{eapply} \coqdocvar{PE\_AssStatic}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{PE\_IfFalse}. \coqdoctac{reflexivity}. \coqdoctac{econstructor}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Correctness of Partial Evaluation}



 Finally let's prove that this partial evaluator is correct! \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "c' '/' pe\_st' '/' st '\symbol{92}\symbol{92}' st'{}'"\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{pe\_st'} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{pe\_ceval}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c'}:\coqdocvar{com}) (\coqdocvar{pe\_st'}:\coqdocvar{pe\_state}) (\coqdocvar{st}:\coqdocvar{state}) (\coqdocvar{st'{}'}:\coqdocvar{state}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{pe\_ceval\_intro} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{c'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{pe\_update} \coqdocvar{st'} \coqdocvar{pe\_st'} = \coqdocvar{st'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "c' '/' pe\_st' '/' st '\symbol{92}\symbol{92}' st'{}'" := (\coqdocvar{pe\_ceval} \coqdocvar{c'} \coqdocvar{pe\_st'} \coqdocvar{st} \coqdocvar{st'{}'}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{pe\_ceval}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_com\_complete}:\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'}, \coqdocvar{c} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c'} / \coqdocvar{pe\_st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'{}'},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c} / \coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'} \coqdocvar{Hpe}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hpe}; \coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'{}'} \coqdocvar{Heval};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} (\coqdoctac{inversion} \coqdocvar{Heval}; \coqdoctac{subst};\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{try} (\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}, \ensuremath{\rightarrow} \coqdocvar{H} \coqdoctac{in} *; \coqdocvar{solve\_by\_invert});\coqdoceol
\coqdocindent{3.50em}
[]);\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{econstructor}. \coqdoctac{econstructor}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_aexp\_correct}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_update\_update\_add}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{econstructor}. \coqdoctac{econstructor}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_aexp\_correct}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_update\_update\_remove}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe1}. \coqdocvar{eassumption}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe2}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{inversion} \coqdocvar{Heval}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdocvar{edestruct} \coqdocvar{IHHpe1}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{econstructor}. \coqdoctac{apply} \coqdocvar{E\_IfTrue}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{E\_Seq}. \coqdocvar{eassumption}. \coqdoctac{apply} \coqdocvar{eval\_assign}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdocvar{edestruct} \coqdocvar{IHHpe2}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{econstructor}. \coqdoctac{apply} \coqdocvar{E\_IfFalse}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{E\_Seq}. \coqdocvar{eassumption}. \coqdoctac{apply} \coqdocvar{eval\_assign}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_compare\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes}. \coqdocvar{eassumption}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_com\_sound}:\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'}, \coqdocvar{c} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c'} / \coqdocvar{pe\_st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'{}'},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c} / \coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'} \coqdocvar{Hpe}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hpe};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'{}'} [\coqdocvar{st'} \coqdocvar{Heval} \coqdocvar{Heq}];\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{inversion} \coqdocvar{Heval}; []; \coqdoctac{subst}); \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_update\_update\_add}. \coqdoctac{apply} \coqdocvar{E\_Ass}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_aexp\_correct}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_update\_update\_remove}. \coqdoctac{apply} \coqdocvar{E\_Ass}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_aexp\_correct}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eapply} \coqdocvar{E\_Seq}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{E\_IfTrue}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{E\_IfFalse}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Heval}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{H7};\coqdoceol
\coqdocindent{3.00em}
(\coqdoctac{eapply} \coqdocvar{ceval\_deterministic} \coqdoctac{in} \coqdocvar{H8}; [| \coqdoctac{apply} \coqdocvar{eval\_assign}]); \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_IfTrue}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_compare\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_IfFalse}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes}. \coqdoctac{eauto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The main theorem. Thanks to David Menendez for this formulation! \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Corollary} \coqdocvar{pe\_com\_correct}:\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'}, \coqdocvar{c} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c'} / \coqdocvar{pe\_st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'{}'},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c} / \coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}) \ensuremath{\leftrightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'} \coqdocvar{H} \coqdocvar{st} \coqdocvar{st'{}'}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{pe\_com\_complete}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{pe\_com\_sound}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Partial Evaluation of Loops}



 It may seem straightforward at first glance to extend the partial
    evaluation relation \coqdocinductive{pe\_com} above to loops.  Indeed, many loops
    are easy to deal with.  Considered this repeated-squaring loop,
    for example:


      WHILE BLe (ANum 1) (AId X) DO
          Y ::= AMult (AId Y) (AId Y);;
          X ::= AMinus (AId X) (ANum 1)
      END


    If we know neither \coqdocdefinition{X} nor \coqdocdefinition{Y} statically, then the entire loop is
    dynamic and the residual command should be the same.  If we know
    \coqdocdefinition{X} but not \coqdocdefinition{Y}, then the loop can be unrolled all the way and the
    residual command should be, for example,


      Y ::= AMult (AId Y) (AId Y);;
      Y ::= AMult (AId Y) (AId Y);;
      Y ::= AMult (AId Y) (AId Y)


    if \coqdocdefinition{X} is initially 3 (and finally 0).  In general, a loop is
    easy to partially evaluate if the final partial state of the loop
    body is equal to the initial state, or if its guard condition is
    static.


    But there are other loops for which it is hard to express the
    residual program we want in Imp.  For example, take this program
    for checking whether \coqdocdefinition{Y} is even or odd:


      X ::= ANum 0;;
      WHILE BLe (ANum 1) (AId Y) DO
          Y ::= AMinus (AId Y) (ANum 1);;
          X ::= AMinus (ANum 1) (AId X)
      END


    The value of \coqdocdefinition{X} alternates between 0 and 1 during the loop.
    Ideally, we would like to unroll this loop, not all the way but
    \textit{two-fold}, into something like


      WHILE BLe (ANum 1) (AId Y) DO
          Y ::= AMinus (AId Y) (ANum 1);;
          IF BLe (ANum 1) (AId Y) THEN
              Y ::= AMinus (AId Y) (ANum 1)
          ELSE
              X ::= ANum 1;; EXIT
          FI
      END;;
      X ::= ANum 0


    Unfortunately, there is no \coqdocvar{EXIT} command in Imp.  Without
    extending the range of control structures available in our
    language, the best we can do is to repeat loop-guard tests or add
    flag variables.  Neither option is terribly attractive.


    Still, as a digression, below is an attempt at performing partial
    evaluation on Imp commands.  We add one more command argument
    \coqdocvariable{c'{}'} to the \coqdocinductive{pe\_com} relation, which keeps track of a loop to
    roll up. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Module} \coqdocvar{Loop}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "c1 '/' st '\symbol{92}\symbol{92}' c1' '/' st' '/' c'{}'"\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{c1'} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{st'} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{pe\_com} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{pe\_state} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{pe\_state} \ensuremath{\rightarrow} \coqdocvar{com} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{SKIP} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{SKIP} / \coqdocvar{pe\_st} / \coqdocvar{SKIP}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_AssStatic} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{a1} \coqdocvar{n1} \coqdocvar{l},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1} = \coqdocvar{ANum} \coqdocvar{n1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{l} ::= \coqdocvar{a1}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{SKIP} / \coqdocvar{pe\_add} \coqdocvar{pe\_st} \coqdocvar{l} \coqdocvar{n1} / \coqdocvar{SKIP}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_AssDynamic} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{a1} \coqdocvar{a1'} \coqdocvar{l},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a1} = \coqdocvar{a1'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdockw{\ensuremath{\forall}} \coqdocvar{n}, \coqdocvar{a1'} \ensuremath{\not=} \coqdocvar{ANum} \coqdocvar{n}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{l} ::= \coqdocvar{a1}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} (\coqdocvar{l} ::= \coqdocvar{a1'}) / \coqdocvar{pe\_remove} \coqdocvar{pe\_st} \coqdocvar{l} / \coqdocvar{SKIP}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_Seq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{pe\_st'{}'} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c1'} \coqdocvar{c2'} \coqdocvar{c'{}'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{pe\_st}  \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st'} / \coqdocvar{SKIP} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{pe\_st'} \symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st'{}'} / \coqdocvar{c'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{c1} ;; \coqdocvar{c2}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} (\coqdocvar{c1'} ;; \coqdocvar{c2'}) / \coqdocvar{pe\_st'{}'} / \coqdocvar{c'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c1'} \coqdocvar{c'{}'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} = \coqdocvar{BTrue} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c2'} \coqdocvar{c'{}'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} = \coqdocvar{BFalse} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_If} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{c1'} \coqdocvar{c2'} \coqdocvar{c'{}'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \ensuremath{\not=} \coqdocvar{BTrue} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \ensuremath{\not=} \coqdocvar{BFalse} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st1} / \coqdocvar{c'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st2} / \coqdocvar{c'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{pe\_st}\coqdoceol
\coqdocindent{4.00em}
\symbol{92}\symbol{92} (\coqdocvar{IFB} \coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1}\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{THEN} \coqdocvar{c1'} ;; \coqdocvar{assign} \coqdocvar{pe\_st1} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2})\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{ELSE} \coqdocvar{c2'} ;; \coqdocvar{assign} \coqdocvar{pe\_st2} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2}) \coqdocvar{FI})\coqdoceol
\coqdocindent{6.00em}
/ \coqdocvar{pe\_removes} \coqdocvar{pe\_st1} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2})\coqdoceol
\coqdocindent{6.00em}
/ \coqdocvar{c'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_WhileEnd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{b1} \coqdocvar{c1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} = \coqdocvar{BFalse} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{SKIP} / \coqdocvar{pe\_st} / \coqdocvar{SKIP}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_WhileLoop} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{pe\_st'{}'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c1'} \coqdocvar{c2'} \coqdocvar{c2'{}'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} = \coqdocvar{BTrue} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st'} / \coqdocvar{SKIP} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{pe\_st'} \symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st'{}'} / \coqdocvar{c2'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_compare} \coqdocvar{pe\_st} \coqdocvar{pe\_st'{}'} \ensuremath{\not=} [] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} (\coqdocvar{c1'};;\coqdocvar{c2'}) / \coqdocvar{pe\_st'{}'} / \coqdocvar{c2'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_While} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{pe\_st'{}'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c1'} \coqdocvar{c2'} \coqdocvar{c2'{}'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \ensuremath{\not=} \coqdocvar{BFalse} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \ensuremath{\not=} \coqdocvar{BTrue} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st'} / \coqdocvar{SKIP} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{pe\_st'} \symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st'{}'} / \coqdocvar{c2'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_compare} \coqdocvar{pe\_st} \coqdocvar{pe\_st'{}'} \ensuremath{\not=} [] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{c2'{}'} = \coqdocvar{SKIP} \ensuremath{\lor} \coqdocvar{c2'{}'} = \coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{pe\_st}\coqdoceol
\coqdocindent{4.00em}
\symbol{92}\symbol{92} (\coqdocvar{IFB} \coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1}\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{THEN} \coqdocvar{c1'};; \coqdocvar{c2'};; \coqdocvar{assign} \coqdocvar{pe\_st'{}'} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st} \coqdocvar{pe\_st'{}'})\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{ELSE} \coqdocvar{assign} \coqdocvar{pe\_st} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st} \coqdocvar{pe\_st'{}'}) \coqdocvar{FI})\coqdoceol
\coqdocindent{6.00em}
/ \coqdocvar{pe\_removes} \coqdocvar{pe\_st} (\coqdocvar{pe\_compare} \coqdocvar{pe\_st} \coqdocvar{pe\_st'{}'})\coqdoceol
\coqdocindent{6.00em}
/ \coqdocvar{c2'{}'}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_WhileFixedEnd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{b1} \coqdocvar{c1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \ensuremath{\not=} \coqdocvar{BFalse} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{SKIP} / \coqdocvar{pe\_st} / (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_WhileFixedLoop} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{pe\_st'{}'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c1'} \coqdocvar{c2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} = \coqdocvar{BTrue} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st'} / \coqdocvar{SKIP} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{pe\_st'}\coqdoceol
\coqdocindent{4.00em}
\symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st'{}'} / (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_compare} \coqdocvar{pe\_st} \coqdocvar{pe\_st'{}'} = [] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{pe\_st}\coqdoceol
\coqdocindent{4.00em}
\symbol{92}\symbol{92} (\coqdocvar{WHILE} \coqdocvar{BTrue} \coqdocvar{DO} \coqdocvar{SKIP} \coqdocvar{END}) / \coqdocvar{pe\_st} / \coqdocvar{SKIP}\coqdoceol
\coqdocindent{3.00em}
\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{PE\_WhileFixed} : \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{pe\_st'{}'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c1'} \coqdocvar{c2'},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \ensuremath{\not=} \coqdocvar{BFalse} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \ensuremath{\not=} \coqdocvar{BTrue} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c1'} / \coqdocvar{pe\_st'} / \coqdocvar{SKIP} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{pe\_st'}\coqdoceol
\coqdocindent{4.00em}
\symbol{92}\symbol{92} \coqdocvar{c2'} / \coqdocvar{pe\_st'{}'} / (\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{pe\_compare} \coqdocvar{pe\_st} \coqdocvar{pe\_st'{}'} = [] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{pe\_st}\coqdoceol
\coqdocindent{4.00em}
\symbol{92}\symbol{92} (\coqdocvar{WHILE} \coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1'};; \coqdocvar{c2'} \coqdocvar{END}) / \coqdocvar{pe\_st} / \coqdocvar{SKIP}\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "c1 '/' st '\symbol{92}\symbol{92}' c1' '/' st' '/' c'{}'" := (\coqdocvar{pe\_com} \coqdocvar{c1} \coqdocvar{st} \coqdocvar{c1'} \coqdocvar{st'} \coqdocvar{c'{}'}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{pe\_com}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Examples}

\begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Ltac} \coqdocvar{step} \coqdocvar{i} :=\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{eapply} \coqdocvar{i}; \coqdoctac{intuition} \coqdoctac{eauto}; \coqdoctac{try} \coqdocvar{solve\_by\_invert});\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{repeat} (\coqdoctac{try} \coqdoctac{eapply} \coqdocvar{PE\_Seq};\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{try} (\coqdoctac{eapply} \coqdocvar{PE\_AssStatic}; \coqdoctac{simpl}; \coqdoctac{reflexivity});\coqdoceol
\coqdocindent{5.00em}
\coqdoctac{try} (\coqdoctac{eapply} \coqdocvar{PE\_AssDynamic};\coqdoceol
\coqdocindent{7.50em}
[ \coqdoctac{simpl}; \coqdoctac{reflexivity}\coqdoceol
\coqdocindent{7.50em}
\ensuremath{|} \coqdoctac{intuition} \coqdoctac{eauto}; \coqdocvar{solve\_by\_invert}])).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{square\_loop}: \coqdocvar{com} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{WHILE} \coqdocvar{BLe} (\coqdocvar{ANum} 1) (\coqdocvar{AId} \coqdocvar{X}) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{Y} ::= \coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{Y});;\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1)\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{END}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{pe\_loop\_example1}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{square\_loop} / []\coqdoceol
\coqdocindent{1.00em}
\symbol{92}\symbol{92} (\coqdocvar{WHILE} \coqdocvar{BLe} (\coqdocvar{ANum} 1) (\coqdocvar{AId} \coqdocvar{X}) \coqdocvar{DO}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{Y} ::= \coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{Y});;\coqdoceol
\coqdocindent{5.00em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1));; \coqdocvar{SKIP}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{END}) / [] / \coqdocvar{SKIP}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{erewrite} \coqdocvar{f\_equal2} \coqdockw{with} (\coqdocvar{f} := \coqdockw{fun} \coqdocvar{c} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{\_} / \coqdocvar{\_} \symbol{92}\symbol{92} \coqdocvar{c} / \coqdocvar{st} / \coqdocvar{SKIP}).\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_WhileFixed}. \coqdocvar{step} \coqdocvar{PE\_WhileFixedEnd}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{pe\_loop\_example2}:\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 3;; \coqdocvar{square\_loop}) / []\coqdoceol
\coqdocindent{1.00em}
\symbol{92}\symbol{92} (\coqdocvar{SKIP};;\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{Y} ::= \coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{Y});; \coqdocvar{SKIP});;\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{Y} ::= \coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{Y});; \coqdocvar{SKIP});;\coqdoceol
\coqdocindent{3.50em}
(\coqdocvar{Y} ::= \coqdocvar{AMult} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{AId} \coqdocvar{Y});; \coqdocvar{SKIP});;\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{SKIP}) / [(\coqdocvar{X},0)] / \coqdocvar{SKIP}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{erewrite} \coqdocvar{f\_equal2} \coqdockw{with} (\coqdocvar{f} := \coqdockw{fun} \coqdocvar{c} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{\_} / \coqdocvar{\_} \symbol{92}\symbol{92} \coqdocvar{c} / \coqdocvar{st} / \coqdocvar{SKIP}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{PE\_Seq}. \coqdoctac{eapply} \coqdocvar{PE\_AssStatic}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_WhileLoop}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_WhileLoop}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_WhileLoop}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_WhileEnd}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{pe\_loop\_example3}:\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{Z} ::= \coqdocvar{ANum} 3;; \coqdocvar{subtract\_slowly}) / []\coqdoceol
\coqdocindent{1.00em}
\symbol{92}\symbol{92} (\coqdocvar{SKIP};;\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{IFB} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0)) \coqdocvar{THEN}\coqdoceol
\coqdocindent{4.50em}
(\coqdocvar{SKIP};; \coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1));;\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{IFB} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0)) \coqdocvar{THEN}\coqdoceol
\coqdocindent{5.50em}
(\coqdocvar{SKIP};; \coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1));;\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{IFB} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0)) \coqdocvar{THEN}\coqdoceol
\coqdocindent{6.50em}
(\coqdocvar{SKIP};; \coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1));;\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{WHILE} \coqdocvar{BNot} (\coqdocvar{BEq} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 0)) \coqdocvar{DO}\coqdoceol
\coqdocindent{7.50em}
(\coqdocvar{SKIP};; \coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 1));; \coqdocvar{SKIP}\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{END};;\coqdoceol
\coqdocindent{6.50em}
\coqdocvar{SKIP};; \coqdocvar{Z} ::= \coqdocvar{ANum} 0\coqdoceol
\coqdocindent{5.50em}
\coqdocvar{ELSE} \coqdocvar{SKIP};; \coqdocvar{Z} ::= \coqdocvar{ANum} 1 \coqdocvar{FI};; \coqdocvar{SKIP}\coqdoceol
\coqdocindent{4.50em}
\coqdocvar{ELSE} \coqdocvar{SKIP};; \coqdocvar{Z} ::= \coqdocvar{ANum} 2 \coqdocvar{FI};; \coqdocvar{SKIP}\coqdoceol
\coqdocindent{3.50em}
\coqdocvar{ELSE} \coqdocvar{SKIP};; \coqdocvar{Z} ::= \coqdocvar{ANum} 3 \coqdocvar{FI}) / [] / \coqdocvar{SKIP}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{erewrite} \coqdocvar{f\_equal2} \coqdockw{with} (\coqdocvar{f} := \coqdockw{fun} \coqdocvar{c} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{\_} / \coqdocvar{\_} \symbol{92}\symbol{92} \coqdocvar{c} / \coqdocvar{st} / \coqdocvar{SKIP}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{PE\_Seq}. \coqdoctac{eapply} \coqdocvar{PE\_AssStatic}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_While}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_While}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_While}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_WhileFixed}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_WhileFixedEnd}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{reflexivity}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{pe\_loop\_example4}:\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{X} ::= \coqdocvar{ANum} 0;;\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{WHILE} \coqdocvar{BLe} (\coqdocvar{AId} \coqdocvar{X}) (\coqdocvar{ANum} 2) \coqdocvar{DO}\coqdoceol
\coqdocindent{2.50em}
\coqdocvar{X} ::= \coqdocvar{AMinus} (\coqdocvar{ANum} 1) (\coqdocvar{AId} \coqdocvar{X})\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{END}) / [] \symbol{92}\symbol{92} (\coqdocvar{SKIP};; \coqdocvar{WHILE} \coqdocvar{BTrue} \coqdocvar{DO} \coqdocvar{SKIP} \coqdocvar{END}) / [(\coqdocvar{X},0)] / \coqdocvar{SKIP}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{erewrite} \coqdocvar{f\_equal2} \coqdockw{with} (\coqdocvar{f} := \coqdockw{fun} \coqdocvar{c} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{\_} / \coqdocvar{\_} \symbol{92}\symbol{92} \coqdocvar{c} / \coqdocvar{st} / \coqdocvar{SKIP}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{PE\_Seq}. \coqdoctac{eapply} \coqdocvar{PE\_AssStatic}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_WhileFixedLoop}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_WhileLoop}.\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{step} \coqdocvar{PE\_WhileFixedEnd}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{inversion} \coqdocvar{H}. \coqdoctac{reflexivity}. \coqdoctac{reflexivity}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Correctness}



 Because this partial evaluator can unroll a loop n-fold where n is
    a (finite) integer greater than one, in order to show it correct
    we need to perform induction not structurally on dynamic
    evaluation but on the number of times dynamic evaluation enters a
    loop body. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "c1 '/' st '\symbol{92}\symbol{92}' st' '\#' n"\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{st'} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{ceval\_count} : \coqdocvar{com} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{nat} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E'Skip} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{SKIP} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st} \# 0\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E'Ass}  : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{a1} \coqdocvar{n} \coqdocvar{l},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a1} = \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{l} ::= \coqdocvar{a1}) / \coqdocvar{st} \symbol{92}\symbol{92} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{l} \coqdocvar{n}) \# 0\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E'Seq} : \coqdockw{\ensuremath{\forall}} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st}  \symbol{92}\symbol{92} \coqdocvar{st'}  \# \coqdocvar{n1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# \coqdocvar{n2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{c1} ;; \coqdocvar{c2}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E'IfTrue} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{n},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \# \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \# \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E'IfFalse} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{c2} \coqdocvar{n},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c2} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \# \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{IFB} \coqdocvar{b1} \coqdocvar{THEN} \coqdocvar{c1} \coqdocvar{ELSE} \coqdocvar{c2} \coqdocvar{FI}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \# \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E'WhileEnd} : \coqdockw{\ensuremath{\forall}} \coqdocvar{b1} \coqdocvar{st} \coqdocvar{c1},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{false} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st} \# 0\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E'WhileLoop} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{st'{}'} \coqdocvar{b1} \coqdocvar{c1} \coqdocvar{n1} \coqdocvar{n2},\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{beval} \coqdocvar{st} \coqdocvar{b1} = \coqdocvar{true} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{c1} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \# \coqdocvar{n1} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# \coqdocvar{n2} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{3.00em}
(\coqdocvar{WHILE} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1} \coqdocvar{END}) / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# \coqdocvar{S} (\coqdocvar{n1} + \coqdocvar{n2})\coqdoceol
\coqdocnoindent
\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "c1 '/' st '\symbol{92}\symbol{92}' st' \# n" := (\coqdocvar{ceval\_count} \coqdocvar{c1} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{ceval\_count}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_count\_complete}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow} \coqdoctac{\ensuremath{\exists}} \coqdocvar{n}, \coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \# \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{Heval}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Heval};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{inversion} \coqdocvar{IHHeval1};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{inversion} \coqdocvar{IHHeval2};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} \coqdoctac{inversion} \coqdocvar{IHHeval};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eauto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{ceval\_count\_sound}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \# \coqdocvar{n} \ensuremath{\rightarrow} \coqdocvar{c} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{c} \coqdocvar{st} \coqdocvar{st'} \coqdocvar{n} \coqdocvar{Heval}. \coqdoctac{induction} \coqdocvar{Heval}; \coqdoctac{eauto}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_compare\_nil\_lookup}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} = [] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{V}, \coqdocvar{pe\_lookup} \coqdocvar{pe\_st1} \coqdocvar{V} = \coqdocvar{pe\_lookup} \coqdocvar{pe\_st2} \coqdocvar{V}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{H} \coqdocvar{V}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} (\coqdocvar{pe\_compare\_correct} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{V}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{intro}. \coqdoctac{inversion} \coqdocvar{H0}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_compare\_nil\_update}: \coqdockw{\ensuremath{\forall}} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_compare} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} = [] \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st}, \coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st1} = \coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st2}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{pe\_st1} \coqdocvar{pe\_st2} \coqdocvar{H} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{functional\_extensionality}. \coqdoctac{intros} \coqdocvar{V}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} !\coqdocvar{pe\_update\_correct}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{pe\_compare\_nil\_lookup} \coqdockw{with} (\coqdocvar{V}:=\coqdocvar{V}) \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{rewrite} \coqdocvar{H}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Reserved Notation} "c' '/' pe\_st' '/' c'{}' '/' st '\symbol{92}\symbol{92}' st'{}' '\#' n"\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{at} \coqdockw{level} 40, \coqdocvar{pe\_st'} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{c'{}'} \coqdoctac{at} \coqdockw{level} 39,\coqdoceol
\coqdocindent{1.50em}
\coqdocvar{st} \coqdoctac{at} \coqdockw{level} 39, \coqdocvar{st'{}'} \coqdoctac{at} \coqdockw{level} 39).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{pe\_ceval\_count} (\coqdocvar{c'}:\coqdocvar{com}) (\coqdocvar{pe\_st'}:\coqdocvar{pe\_state}) (\coqdocvar{c'{}'}:\coqdocvar{com})\coqdoceol
\coqdocindent{12.50em}
(\coqdocvar{st}:\coqdocvar{state}) (\coqdocvar{st'{}'}:\coqdocvar{state}) (\coqdocvar{n}:\coqdocvar{nat}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{pe\_ceval\_count\_intro} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st'} \coqdocvar{n'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{c'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{c'{}'} / \coqdocvar{pe\_update} \coqdocvar{st'} \coqdocvar{pe\_st'} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# \coqdocvar{n'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{n'} \ensuremath{\le} \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# \coqdocvar{n}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{where} "c' '/' pe\_st' '/' c'{}' '/' st '\symbol{92}\symbol{92}' st'{}' '\#' n" :=\coqdoceol
\coqdocindent{4.00em}
(\coqdocvar{pe\_ceval\_count} \coqdocvar{c'} \coqdocvar{pe\_st'} \coqdocvar{c'{}'} \coqdocvar{st} \coqdocvar{st'{}'} \coqdocvar{n}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Hint Constructors} \coqdocvar{pe\_ceval\_count}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Lemma} \coqdocvar{pe\_ceval\_count\_le}: \coqdockw{\ensuremath{\forall}} \coqdocvar{c'} \coqdocvar{pe\_st'} \coqdocvar{c'{}'} \coqdocvar{st} \coqdocvar{st'{}'} \coqdocvar{n} \coqdocvar{n'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{n'} \ensuremath{\le} \coqdocvar{n} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# \coqdocvar{n'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# \coqdocvar{n}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{c'} \coqdocvar{pe\_st'} \coqdocvar{c'{}'} \coqdocvar{st} \coqdocvar{st'{}'} \coqdocvar{n} \coqdocvar{n'} \coqdocvar{Hle} \coqdocvar{H}. \coqdoctac{inversion} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{econstructor}; \coqdoctac{try} \coqdocvar{eassumption}. \coqdoctac{omega}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_com\_complete}:\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'} \coqdocvar{c'{}'}, \coqdocvar{c} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'{}'} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c} / \coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# \coqdocvar{n}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# \coqdocvar{n}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'} \coqdocvar{c'{}'} \coqdocvar{Hpe}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hpe}; \coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'{}'} \coqdocvar{n} \coqdocvar{Heval};\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{try} (\coqdoctac{inversion} \coqdocvar{Heval}; \coqdoctac{subst};\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{try} (\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}, \ensuremath{\rightarrow} \coqdocvar{H} \coqdoctac{in} *; \coqdocvar{solve\_by\_invert});\coqdoceol
\coqdocindent{3.50em}
[]);\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{econstructor}. \coqdoctac{econstructor}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_aexp\_correct}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_update\_update\_add}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{E'Skip}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{econstructor}. \coqdoctac{econstructor}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_aexp\_correct}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_update\_update\_remove}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{E'Skip}. \coqdoctac{auto}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe1} \coqdockw{as} [? ? ? \coqdocvar{Hskip} ?]. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Hskip}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe2}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{econstructor}; \coqdoctac{eauto}. \coqdoctac{omega}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{inversion} \coqdocvar{Heval}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdocvar{edestruct} \coqdocvar{IHHpe1}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{econstructor}. \coqdoctac{apply} \coqdocvar{E\_IfTrue}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{E\_Seq}. \coqdocvar{eassumption}. \coqdoctac{apply} \coqdocvar{eval\_assign}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes}. \coqdocvar{eassumption}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdocvar{edestruct} \coqdocvar{IHHpe2}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{econstructor}. \coqdoctac{apply} \coqdocvar{E\_IfFalse}. \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{E\_Seq}. \coqdocvar{eassumption}. \coqdoctac{apply} \coqdocvar{eval\_assign}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_compare\_update}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes}. \coqdocvar{eassumption}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe1} \coqdockw{as} [? ? ? \coqdocvar{Hskip} ?]. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{Hskip}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe2}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{econstructor}; \coqdoctac{eauto}. \coqdoctac{omega}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{inversion} \coqdocvar{Heval}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{econstructor}. \coqdoctac{apply} \coqdocvar{E\_IfFalse}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{eval\_assign}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes}. \coqdoctac{inversion} \coqdocvar{H2}; \coqdoctac{subst}; \coqdoctac{auto}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{auto}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe1} \coqdockw{as} [? ? ? \coqdocvar{Hskip} ?]. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Hskip}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe2}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{econstructor}. \coqdoctac{apply} \coqdocvar{E\_IfTrue}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{repeat} \coqdoctac{eapply} \coqdocvar{E\_Seq}; \coqdoctac{eauto}. \coqdoctac{apply} \coqdocvar{eval\_assign}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_compare\_update}, \ensuremath{\leftarrow} \coqdocvar{assign\_removes}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{omega}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdocvar{exfalso}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{generalize} \coqdoctac{dependent} (\coqdocvar{S} (\coqdocvar{n1} + \coqdocvar{n2})). \coqdoctac{intros} \coqdocvar{n}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{clear} - \coqdocvar{H} \coqdocvar{H0} \coqdocvar{IHHpe1} \coqdocvar{IHHpe2}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{induction} \coqdocvar{n} \coqdockw{using} \coqdocvar{lt\_wf\_ind}; \coqdoctac{intros} \coqdocvar{st} \coqdocvar{Heval}. \coqdoctac{inversion} \coqdocvar{Heval}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{rewrite} \coqdocvar{pe\_bexp\_correct}, \coqdocvar{H} \coqdoctac{in} \coqdocvar{H7}. \coqdoctac{inversion} \coqdocvar{H7}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe1} \coqdockw{as} [? ? ? \coqdocvar{Hskip} ?]. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Hskip}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe2}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} (\coqdocvar{pe\_compare\_nil\_update} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H0}) \coqdoctac{in} \coqdocvar{H7}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{H1} \coqdoctac{in} \coqdocvar{H7}; [| \coqdoctac{omega}]. \coqdoctac{inversion} \coqdocvar{H7}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{induction} \coqdocvar{n} \coqdockw{using} \coqdocvar{lt\_wf\_ind}; \coqdoctac{intros} \coqdocvar{st} \coqdocvar{Heval}. \coqdoctac{inversion} \coqdocvar{Heval}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{rewrite} \coqdocvar{pe\_bexp\_correct} \coqdoctac{in} \coqdocvar{H8}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{rewrite} \coqdocvar{pe\_bexp\_correct} \coqdoctac{in} \coqdocvar{H5}.\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe1} \coqdockw{as} [? ? ? \coqdocvar{Hskip} ?]. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Hskip}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{edestruct} \coqdocvar{IHHpe2}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} (\coqdocvar{pe\_compare\_nil\_update} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H1}) \coqdoctac{in} \coqdocvar{H8}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{H2} \coqdoctac{in} \coqdocvar{H8}; [| \coqdoctac{omega}]. \coqdoctac{inversion} \coqdocvar{H8}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{econstructor}; [ \coqdoctac{eapply} \coqdocvar{E\_WhileLoop}; \coqdoctac{eauto} \ensuremath{|} \coqdocvar{eassumption} \ensuremath{|} \coqdoctac{omega}].\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_com\_sound}:\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'} \coqdocvar{c'{}'}, \coqdocvar{c} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'{}'} \coqdocvar{n},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{c'{}'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'{}'} \# \coqdocvar{n}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c} / \coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'} \coqdocvar{c'{}'} \coqdocvar{Hpe}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{Hpe};\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{st'{}'} \coqdocvar{n} [\coqdocvar{st'} \coqdocvar{n'} \coqdocvar{Heval} \coqdocvar{Heval'} \coqdocvar{Hle}];\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{inversion} \coqdocvar{Heval}; []; \coqdoctac{subst});\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{try} (\coqdoctac{inversion} \coqdocvar{Heval'}; []; \coqdoctac{subst}); \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_update\_update\_add}. \coqdoctac{apply} \coqdocvar{E\_Ass}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_aexp\_correct}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_update\_update\_remove}. \coqdoctac{apply} \coqdocvar{E\_Ass}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{pe\_aexp\_correct}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eapply} \coqdocvar{E\_Seq}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{E\_IfTrue}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHpe}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{E\_IfFalse}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHpe}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{inversion} \coqdocvar{Heval}; \coqdoctac{subst}; \coqdoctac{inversion} \coqdocvar{H7}; \coqdoctac{subst}; \coqdoctac{clear} \coqdocvar{H7}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{ceval\_deterministic} \coqdoctac{in} \coqdocvar{H8}; [| \coqdoctac{apply} \coqdocvar{eval\_assign}]. \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes} \coqdoctac{in} \coqdocvar{Heval'}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_IfTrue}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{IHHpe1}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{ceval\_deterministic} \coqdoctac{in} \coqdocvar{H8}; [| \coqdoctac{apply} \coqdocvar{eval\_assign}]. \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_compare\_update} \coqdoctac{in} \coqdocvar{Heval'}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes} \coqdoctac{in} \coqdocvar{Heval'}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{E\_IfFalse}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{IHHpe2}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{apply} \coqdocvar{E\_WhileEnd}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eapply} \coqdocvar{E\_WhileLoop}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{H}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{IHHpe1}. \coqdoctac{eauto}. \coqdoctac{eapply} \coqdocvar{IHHpe2}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{inversion} \coqdocvar{Heval}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H9}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H9}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H10}. \coqdoctac{subst}. \coqdoctac{clear} \coqdocvar{H10}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{ceval\_deterministic} \coqdoctac{in} \coqdocvar{H11}; [| \coqdoctac{apply} \coqdocvar{eval\_assign}]. \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_compare\_update} \coqdoctac{in} \coqdocvar{Heval'}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes} \coqdoctac{in} \coqdocvar{Heval'}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{E\_WhileLoop}. \coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{IHHpe1}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{IHHpe2}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{apply} \coqdocvar{ceval\_count\_sound} \coqdoctac{in} \coqdocvar{Heval'}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{ceval\_deterministic} \coqdoctac{in} \coqdocvar{H9}; [| \coqdoctac{apply} \coqdocvar{eval\_assign}]. \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} \coqdocvar{assign\_removes} \coqdoctac{in} \coqdocvar{Heval'}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{H2}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{inversion} \coqdocvar{Heval'}. \coqdoctac{subst}. \coqdoctac{apply} \coqdocvar{E\_WhileEnd}.\coqdoceol
\coqdocindent{4.00em}
\coqdoctac{rewrite} \ensuremath{\rightarrow} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{3.00em}
\ensuremath{\times}  \coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{eapply} \coqdocvar{ceval\_count\_sound}. \coqdoctac{apply} \coqdocvar{Heval'}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{loop\_never\_stops} \coqdoctac{in} \coqdocvar{Heval}. \coqdoctac{inversion} \coqdocvar{Heval}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{clear} - \coqdocvar{H1} \coqdocvar{IHHpe1} \coqdocvar{IHHpe2} \coqdocvar{Heval}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{WHILE} \coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b1} \coqdocvar{DO} \coqdocvar{c1'};; \coqdocvar{c2'} \coqdocvar{END}) \coqdockw{as} \coqdocvar{c'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{induction} \coqdocvar{Heval};\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Heqc'}; \coqdoctac{subst}; \coqdoctac{clear} \coqdocvar{Heqc'}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{apply} \coqdocvar{E\_WhileEnd}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{assert} (\coqdocvar{IHHeval2'} := \coqdocvar{IHHeval2} (\coqdocvar{refl\_equal} \coqdocvar{\_})).\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{apply} \coqdocvar{ceval\_count\_complete} \coqdoctac{in} \coqdocvar{IHHeval2'}. \coqdoctac{inversion} \coqdocvar{IHHeval2'}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{clear} \coqdocvar{IHHeval1} \coqdocvar{IHHeval2} \coqdocvar{IHHeval2'}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Heval1}. \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{E\_WhileLoop}. \coqdoctac{rewrite} \coqdocvar{pe\_bexp\_correct}. \coqdoctac{assumption}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{IHHpe2}. \coqdoctac{econstructor}. \coqdocvar{eassumption}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{rewrite} \ensuremath{\leftarrow} (\coqdocvar{pe\_compare\_nil\_update} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{H1}). \coqdocvar{eassumption}. \coqdoctac{apply} \coqdocvar{le\_n}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Corollary} \coqdocvar{pe\_com\_correct}:\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'}, \coqdocvar{c} / \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{c'} / \coqdocvar{pe\_st'} / \coqdocvar{SKIP} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{st'{}'},\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{c} / \coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st} \symbol{92}\symbol{92} \coqdocvar{st'{}'}) \ensuremath{\leftrightarrow}\coqdoceol
\coqdocindent{1.00em}
(\coqdoctac{\ensuremath{\exists}} \coqdocvar{st'}, \coqdocvar{c'} / \coqdocvar{st} \symbol{92}\symbol{92} \coqdocvar{st'} \ensuremath{\land} \coqdocvar{pe\_update} \coqdocvar{st'} \coqdocvar{pe\_st'} = \coqdocvar{st'{}'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros} \coqdocvar{c} \coqdocvar{pe\_st} \coqdocvar{pe\_st'} \coqdocvar{c'} \coqdocvar{H} \coqdocvar{st} \coqdocvar{st'{}'}. \coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{intros} \coqdocvar{Heval}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{ceval\_count\_complete} \coqdoctac{in} \coqdocvar{Heval}. \coqdoctac{inversion} \coqdocvar{Heval} \coqdockw{as} [\coqdocvar{n} \coqdocvar{Heval'}].\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{apply} \coqdocvar{pe\_com\_complete} \coqdockw{with} (\coqdocvar{st}:=\coqdocvar{st}) (\coqdocvar{st'{}'}:=\coqdocvar{st'{}'}) (\coqdocvar{n}:=\coqdocvar{n}) \coqdoctac{in} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{inversion} \coqdocvar{H} \coqdockw{as} [? ? ? \coqdocvar{Hskip} ?]. \coqdoctac{inversion} \coqdocvar{Hskip}. \coqdoctac{subst}. \coqdoctac{eauto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{assumption}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{intros} [\coqdocvar{st'} [\coqdocvar{Heval} \coqdocvar{Heq}]]. \coqdoctac{subst} \coqdocvar{st'{}'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{eapply} \coqdocvar{pe\_com\_sound} \coqdoctac{in} \coqdocvar{H}. \coqdoctac{apply} \coqdocvar{H}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{econstructor}. \coqdoctac{apply} \coqdocvar{Heval}. \coqdoctac{apply} \coqdocvar{E'Skip}. \coqdoctac{apply} \coqdocvar{le\_n}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{End} \coqdocvar{Loop}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\section{Partial Evaluation of Flowchart Programs}



 Instead of partially evaluating \coqdocvar{WHILE} loops directly, the
    standard approach to partially evaluating imperative programs is
    to convert them into \textit{flowcharts}.  In other words, it turns out
    that adding labels and jumps to our language makes it much easier
    to partially evaluate.  The result of partially evaluating a
    flowchart is a residual flowchart.  If we are lucky, the jumps in
    the residual flowchart can be converted back to \coqdocvar{WHILE} loops, but
    that is not possible in general; we do not pursue it here. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsection{Basic blocks}



 A flowchart is made of \textit{basic blocks}, which we represent with the
    inductive type \coqdocinductive{block}.  A basic block is a sequence of
    assignments (the constructor \coqdocconstructor{Assign}), concluding with a
    conditional jump (the constructor \coqdocconstructor{If}) or an unconditional jump
    (the constructor \coqdocconstructor{Goto}).  The destinations of the jumps are
    specified by \textit{labels}, which can be of any type.  Therefore, we
    parameterize the \coqdocinductive{block} type by the type of labels. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{block} (\coqdocvar{Label}:\coqdockw{Type}) : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Goto} : \coqdocvar{Label} \ensuremath{\rightarrow} \coqdocvar{block} \coqdocvar{Label}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{If} : \coqdocvar{bexp} \ensuremath{\rightarrow} \coqdocvar{Label} \ensuremath{\rightarrow} \coqdocvar{Label} \ensuremath{\rightarrow} \coqdocvar{block} \coqdocvar{Label}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Assign} : \coqdocvar{id} \ensuremath{\rightarrow} \coqdocvar{aexp} \ensuremath{\rightarrow} \coqdocvar{block} \coqdocvar{Label} \ensuremath{\rightarrow} \coqdocvar{block} \coqdocvar{Label}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{Goto} \{\coqdocvar{Label}\} \coqdocvar{\_}.\coqdoceol
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{If}   \{\coqdocvar{Label}\} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}.\coqdoceol
\coqdocnoindent
\coqdocvar{Arguments} \coqdocvar{Assign} \{\coqdocvar{Label}\} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
We use the ``even or odd'' program, expressed above in Imp, as our
    running example.  Converting this program into a flowchart turns
    out to require 4 labels, so we define the following type. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{parity\_label} : \coqdockw{Type} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{entry} : \coqdocvar{parity\_label}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{loop}  : \coqdocvar{parity\_label}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{body}  : \coqdocvar{parity\_label}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{done}  : \coqdocvar{parity\_label}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
The following \coqdocinductive{block} is the basic block found at the \coqdocconstructor{body} label
    of the example program. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{parity\_body} : \coqdocvar{block} \coqdocvar{parity\_label} :=\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{Assign} \coqdocvar{Y} (\coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 1))\coqdoceol
\coqdocindent{1.50em}
(\coqdocvar{Assign} \coqdocvar{X} (\coqdocvar{AMinus} (\coqdocvar{ANum} 1) (\coqdocvar{AId} \coqdocvar{X}))\coqdoceol
\coqdocindent{2.50em}
(\coqdocvar{Goto} \coqdocvar{loop})).\coqdoceol
\coqdocemptyline
\end{coqdoccode}
To evaluate a basic block, given an initial state, is to compute
    the final state and the label to jump to next.  Because basic
    blocks do not \textit{contain} loops or other control structures,
    evaluation of basic blocks is a total function -- we don't need to
    worry about non-termination. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{keval} \{\coqdocvar{L}:\coqdockw{Type}\} (\coqdocvar{st}:\coqdocvar{state}) (\coqdocvar{k} : \coqdocvar{block} \coqdocvar{L}) : \coqdocvar{state} \ensuremath{\times} \coqdocvar{L} :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{k} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Goto} \coqdocvar{l} \ensuremath{\Rightarrow} (\coqdocvar{st}, \coqdocvar{l})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{If} \coqdocvar{b} \coqdocvar{l1} \coqdocvar{l2} \ensuremath{\Rightarrow} (\coqdocvar{st}, \coqdockw{if} \coqdocvar{beval} \coqdocvar{st} \coqdocvar{b} \coqdockw{then} \coqdocvar{l1} \coqdockw{else} \coqdocvar{l2})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Assign} \coqdocvar{i} \coqdocvar{a} \coqdocvar{k} \ensuremath{\Rightarrow} \coqdocvar{keval} (\coqdocvar{t\_update} \coqdocvar{st} \coqdocvar{i} (\coqdocvar{aeval} \coqdocvar{st} \coqdocvar{a})) \coqdocvar{k}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{keval\_example}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{keval} \coqdocvar{empty\_state} \coqdocvar{parity\_body}\coqdoceol
\coqdocindent{1.00em}
= (\coqdocvar{t\_update} (\coqdocvar{t\_update} \coqdocvar{empty\_state} \coqdocvar{Y} 0) \coqdocvar{X} 1, \coqdocvar{loop}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Flowchart programs}



 A flowchart program is simply a lookup function that maps labels
    to basic blocks.  Actually, some labels are \textit{halting states} and
    do not map to any basic block.  So, more precisely, a flowchart
    \coqdocdefinition{program} whose labels are of type \coqdocvariable{L} is a function from \coqdocvariable{L} to
    \coqdocinductive{option} (\coqdocinductive{block} \coqdocvariable{L}). \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{program} (\coqdocvar{L}:\coqdockw{Type}) : \coqdockw{Type} := \coqdocvar{L} \ensuremath{\rightarrow} \coqdocvar{option} (\coqdocvar{block} \coqdocvar{L}).\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{parity} : \coqdocvar{program} \coqdocvar{parity\_label} := \coqdockw{fun} \coqdocvar{l} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{l} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{entry} \ensuremath{\Rightarrow} \coqdocvar{Some} (\coqdocvar{Assign} \coqdocvar{X} (\coqdocvar{ANum} 0) (\coqdocvar{Goto} \coqdocvar{loop}))\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{loop} \ensuremath{\Rightarrow} \coqdocvar{Some} (\coqdocvar{If} (\coqdocvar{BLe} (\coqdocvar{ANum} 1) (\coqdocvar{AId} \coqdocvar{Y})) \coqdocvar{body} \coqdocvar{done})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{body} \ensuremath{\Rightarrow} \coqdocvar{Some} \coqdocvar{parity\_body}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{done} \ensuremath{\Rightarrow} \coqdocvar{None} \coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
Unlike a basic block, a program may not terminate, so we model the
    evaluation of programs by an inductive relation \coqdocinductive{peval} rather
    than a recursive function. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{peval} \{\coqdocvar{L}:\coqdockw{Type}\} (\coqdocvar{p} : \coqdocvar{program} \coqdocvar{L})\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{L} \ensuremath{\rightarrow} \coqdocvar{state} \ensuremath{\rightarrow} \coqdocvar{L} \ensuremath{\rightarrow} \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_None}: \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{l},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{p} \coqdocvar{l} = \coqdocvar{None} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{peval} \coqdocvar{p} \coqdocvar{st} \coqdocvar{l} \coqdocvar{st} \coqdocvar{l}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{E\_Some}: \coqdockw{\ensuremath{\forall}} \coqdocvar{st} \coqdocvar{l} \coqdocvar{k} \coqdocvar{st'} \coqdocvar{l'} \coqdocvar{st'{}'} \coqdocvar{l'{}'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{p} \coqdocvar{l} = \coqdocvar{Some} \coqdocvar{k} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{keval} \coqdocvar{st} \coqdocvar{k} = (\coqdocvar{st'}, \coqdocvar{l'}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{peval} \coqdocvar{p} \coqdocvar{st'} \coqdocvar{l'} \coqdocvar{st'{}'} \coqdocvar{l'{}'} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{peval} \coqdocvar{p} \coqdocvar{st} \coqdocvar{l} \coqdocvar{st'{}'} \coqdocvar{l'{}'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{parity\_eval}: \coqdocvar{peval} \coqdocvar{parity} \coqdocvar{empty\_state} \coqdocvar{entry} \coqdocvar{empty\_state} \coqdocvar{done}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdocvar{erewrite} \coqdoctac{f\_equal} \coqdockw{with} (\coqdocvar{f} := \coqdockw{fun} \coqdocvar{st} \ensuremath{\Rightarrow} \coqdocvar{peval} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{\_} \coqdocvar{st} \coqdocvar{\_}).\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{E\_Some}. \coqdoctac{reflexivity}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{eapply} \coqdocvar{E\_Some}. \coqdoctac{reflexivity}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{E\_None}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{apply} \coqdocvar{functional\_extensionality}. \coqdoctac{intros} \coqdocvar{i}. \coqdoctac{rewrite} \coqdocvar{t\_update\_same}; \coqdoctac{auto}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
\subsection{Partial Evaluation of Basic Blocks and Flowchart Programs}



 Partial evaluation changes the label type in a systematic way: if
    the label type used to be \coqdocvariable{L}, it becomes \coqdocdefinition{pe\_state} \ensuremath{\times} \coqdocvariable{L}.  So the
    same label in the original program may be unfolded, or blown up,
    into multiple labels by being paired with different partial
    states.  For example, the label \coqdocconstructor{loop} in the \coqdocdefinition{parity} program
    will become two labels: ([(\coqdocdefinition{X},0)], \coqdocconstructor{loop}) and ([(\coqdocdefinition{X},1)], \coqdocconstructor{loop}).
    This change of label type is reflected in the types of \coqdocdefinition{pe\_block}
    and \coqdocdefinition{pe\_program} defined presently. \begin{coqdoccode}
\coqdocemptyline
\coqdocnoindent
\coqdockw{Fixpoint} \coqdocvar{pe\_block} \{\coqdocvar{L}:\coqdockw{Type}\} (\coqdocvar{pe\_st}:\coqdocvar{pe\_state}) (\coqdocvar{k} : \coqdocvar{block} \coqdocvar{L})\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{block} (\coqdocvar{pe\_state} \ensuremath{\times} \coqdocvar{L}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{match} \coqdocvar{k} \coqdockw{with}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Goto} \coqdocvar{l} \ensuremath{\Rightarrow} \coqdocvar{Goto} (\coqdocvar{pe\_st}, \coqdocvar{l})\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{If} \coqdocvar{b} \coqdocvar{l1} \coqdocvar{l2} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{BTrue}  \ensuremath{\Rightarrow} \coqdocvar{Goto} (\coqdocvar{pe\_st}, \coqdocvar{l1})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{BFalse} \ensuremath{\Rightarrow} \coqdocvar{Goto} (\coqdocvar{pe\_st}, \coqdocvar{l2})\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{b'}     \ensuremath{\Rightarrow} \coqdocvar{If} \coqdocvar{b'} (\coqdocvar{pe\_st}, \coqdocvar{l1}) (\coqdocvar{pe\_st}, \coqdocvar{l2})\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{Assign} \coqdocvar{i} \coqdocvar{a} \coqdocvar{k} \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdockw{match} \coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a} \coqdockw{with}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{ANum} \coqdocvar{n} \ensuremath{\Rightarrow} \coqdocvar{pe\_block} (\coqdocvar{pe\_add} \coqdocvar{pe\_st} \coqdocvar{i} \coqdocvar{n}) \coqdocvar{k}\coqdoceol
\coqdocindent{2.00em}
\ensuremath{|} \coqdocvar{a'} \ensuremath{\Rightarrow} \coqdocvar{Assign} \coqdocvar{i} \coqdocvar{a'} (\coqdocvar{pe\_block} (\coqdocvar{pe\_remove} \coqdocvar{pe\_st} \coqdocvar{i}) \coqdocvar{k})\coqdoceol
\coqdocindent{2.00em}
\coqdockw{end}\coqdoceol
\coqdocindent{1.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Example} \coqdocvar{pe\_block\_example}:\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_block} [(\coqdocvar{X},0)] \coqdocvar{parity\_body}\coqdoceol
\coqdocindent{1.00em}
= \coqdocvar{Assign} \coqdocvar{Y} (\coqdocvar{AMinus} (\coqdocvar{AId} \coqdocvar{Y}) (\coqdocvar{ANum} 1)) (\coqdocvar{Goto} ([(\coqdocvar{X},1)], \coqdocvar{loop})).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{reflexivity}. \coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_block\_correct}: \coqdockw{\ensuremath{\forall}} (\coqdocvar{L}:\coqdockw{Type}) \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{k} \coqdocvar{st'} \coqdocvar{pe\_st'} (\coqdocvar{l'}:\coqdocvar{L}),\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{keval} \coqdocvar{st} (\coqdocvar{pe\_block} \coqdocvar{pe\_st} \coqdocvar{k}) = (\coqdocvar{st'}, (\coqdocvar{pe\_st'}, \coqdocvar{l'})) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{keval} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdocvar{k} = (\coqdocvar{pe\_update} \coqdocvar{st'} \coqdocvar{pe\_st'}, \coqdocvar{l'}).\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{pe\_st}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{induction} \coqdocvar{k} \coqdockw{as} [\coqdocvar{l} \ensuremath{|} \coqdocvar{b} \coqdocvar{l1} \coqdocvar{l2} \ensuremath{|} \coqdocvar{i} \coqdocvar{a} \coqdocvar{k}];\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{H}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{replace} (\coqdocvar{keval} \coqdocvar{st} (\coqdocvar{pe\_block} \coqdocvar{pe\_st} (\coqdocvar{If} \coqdocvar{b} \coqdocvar{l1} \coqdocvar{l2})))\coqdoceol
\coqdocindent{3.50em}
\coqdockw{with} (\coqdocvar{keval} \coqdocvar{st} (\coqdocvar{If} (\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b}) (\coqdocvar{pe\_st}, \coqdocvar{l1}) (\coqdocvar{pe\_st}, \coqdocvar{l2})))\coqdoceol
\coqdocindent{3.50em}
\coqdoctac{in} \coqdocvar{H} \coqdoctac{by} (\coqdoctac{simpl}; \coqdoctac{destruct} (\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b}); \coqdoctac{reflexivity}).\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl} \coqdoctac{in} *. \coqdoctac{rewrite} \coqdocvar{pe\_bexp\_correct}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{beval} \coqdocvar{st} (\coqdocvar{pe\_bexp} \coqdocvar{pe\_st} \coqdocvar{b})); \coqdoctac{inversion} \coqdocvar{H}; \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
- \coqdoceol
\coqdocindent{2.00em}
\coqdoctac{simpl} \coqdoctac{in} *. \coqdoctac{rewrite} \coqdocvar{pe\_aexp\_correct}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{destruct} (\coqdocvar{pe\_aexp} \coqdocvar{pe\_st} \coqdocvar{a}); \coqdoctac{simpl};\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{try} \coqdoctac{solve} [\coqdoctac{rewrite} \coqdocvar{pe\_update\_update\_add}; \coqdoctac{apply} \coqdocvar{IHk}; \coqdoctac{apply} \coqdocvar{H}];\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{solve} [\coqdoctac{rewrite} \coqdocvar{pe\_update\_update\_remove}; \coqdoctac{apply} \coqdocvar{IHk}; \coqdoctac{apply} \coqdocvar{H}].\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Definition} \coqdocvar{pe\_program} \{\coqdocvar{L}:\coqdockw{Type}\} (\coqdocvar{p} : \coqdocvar{program} \coqdocvar{L})\coqdoceol
\coqdocindent{1.00em}
: \coqdocvar{program} (\coqdocvar{pe\_state} \ensuremath{\times} \coqdocvar{L}) :=\coqdoceol
\coqdocindent{1.00em}
\coqdockw{fun} \coqdocvar{pe\_l} \ensuremath{\Rightarrow} \coqdockw{match} \coqdocvar{pe\_l} \coqdockw{with} \ensuremath{|} (\coqdocvar{pe\_st}, \coqdocvar{l}) \ensuremath{\Rightarrow}\coqdoceol
\coqdocindent{8.00em}
\coqdocvar{option\_map} (\coqdocvar{pe\_block} \coqdocvar{pe\_st}) (\coqdocvar{p} \coqdocvar{l})\coqdoceol
\coqdocindent{7.00em}
\coqdockw{end}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Inductive} \coqdocvar{pe\_peval} \{\coqdocvar{L}:\coqdockw{Type}\} (\coqdocvar{p} : \coqdocvar{program} \coqdocvar{L})\coqdoceol
\coqdocindent{1.00em}
(\coqdocvar{st}:\coqdocvar{state}) (\coqdocvar{pe\_st}:\coqdocvar{pe\_state}) (\coqdocvar{l}:\coqdocvar{L}) (\coqdocvar{st'o}:\coqdocvar{state}) (\coqdocvar{l'}:\coqdocvar{L}) : \coqdockw{Prop} :=\coqdoceol
\coqdocindent{1.00em}
\ensuremath{|} \coqdocvar{pe\_peval\_intro} : \coqdockw{\ensuremath{\forall}} \coqdocvar{st'} \coqdocvar{pe\_st'},\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{peval} (\coqdocvar{pe\_program} \coqdocvar{p}) \coqdocvar{st} (\coqdocvar{pe\_st}, \coqdocvar{l}) \coqdocvar{st'} (\coqdocvar{pe\_st'}, \coqdocvar{l'}) \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{pe\_update} \coqdocvar{st'} \coqdocvar{pe\_st'} = \coqdocvar{st'o} \ensuremath{\rightarrow}\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{pe\_peval} \coqdocvar{p} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{l} \coqdocvar{st'o} \coqdocvar{l'}.\coqdoceol
\coqdocemptyline
\coqdocnoindent
\coqdockw{Theorem} \coqdocvar{pe\_program\_correct}:\coqdoceol
\coqdocindent{1.00em}
\coqdockw{\ensuremath{\forall}} (\coqdocvar{L}:\coqdockw{Type}) (\coqdocvar{p} : \coqdocvar{program} \coqdocvar{L}) \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{l} \coqdocvar{st'o} \coqdocvar{l'},\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{peval} \coqdocvar{p} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdocvar{l} \coqdocvar{st'o} \coqdocvar{l'} \ensuremath{\leftrightarrow}\coqdoceol
\coqdocindent{1.00em}
\coqdocvar{pe\_peval} \coqdocvar{p} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{l} \coqdocvar{st'o} \coqdocvar{l'}.\coqdoceol
\coqdocnoindent
\coqdockw{Proof}. \coqdoctac{intros}.\coqdoceol
\coqdocindent{1.00em}
\coqdoctac{split}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{intros} \coqdocvar{Heval}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{pe\_update} \coqdocvar{st} \coqdocvar{pe\_st}) \coqdockw{as} \coqdocvar{sto}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{pe\_st}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{st}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{induction} \coqdocvar{Heval} \coqdockw{as}\coqdoceol
\coqdocindent{3.00em}
[ \coqdocvar{sto} \coqdocvar{l} \coqdocvar{Hlookup} \ensuremath{|} \coqdocvar{sto} \coqdocvar{l} \coqdocvar{k} \coqdocvar{st'o} \coqdocvar{l'} \coqdocvar{st'{}'o} \coqdocvar{l'{}'} \coqdocvar{Hlookup} \coqdocvar{Hkeval} \coqdocvar{Heval} ];\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{st} \coqdocvar{pe\_st} \coqdocvar{Heqsto}; \coqdoctac{subst} \coqdocvar{sto}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{eapply} \coqdocvar{pe\_peval\_intro}. \coqdoctac{apply} \coqdocvar{E\_None}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{Hlookup}. \coqdoctac{reflexivity}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdocvar{remember} (\coqdocvar{keval} \coqdocvar{st} (\coqdocvar{pe\_block} \coqdocvar{pe\_st} \coqdocvar{k})) \coqdockw{as} \coqdocvar{x}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{x} \coqdockw{as} [\coqdocvar{st'} [\coqdocvar{pe\_st'} \coqdocvar{l'\_}]].\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{symmetry} \coqdoctac{in} \coqdocvar{Heqx}. \coqdocvar{erewrite} \coqdocvar{pe\_block\_correct} \coqdoctac{in} \coqdocvar{Hkeval} \coqdoctac{by} \coqdoctac{apply} \coqdocvar{Heqx}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Hkeval}. \coqdoctac{subst} \coqdocvar{st'o} \coqdocvar{l'\_}. \coqdoctac{clear} \coqdocvar{Hkeval}.\coqdoceol
\coqdocindent{3.00em}
\coqdocvar{edestruct} \coqdocvar{IHHeval}. \coqdoctac{reflexivity}. \coqdoctac{subst} \coqdocvar{st'{}'o}. \coqdoctac{clear} \coqdocvar{IHHeval}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{pe\_peval\_intro}; [| \coqdoctac{reflexivity}]. \coqdoctac{eapply} \coqdocvar{E\_Some}; \coqdoctac{eauto}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl}. \coqdoctac{rewrite} \coqdocvar{Hlookup}. \coqdoctac{reflexivity}.\coqdoceol
\coqdocindent{1.00em}
-  \coqdoctac{intros} [\coqdocvar{st'} \coqdocvar{pe\_st'} \coqdocvar{Heval} \coqdocvar{Heqst'o}].\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{pe\_st}, \coqdocvar{l}) \coqdockw{as} \coqdocvar{pe\_st\_l}.\coqdoceol
\coqdocindent{2.00em}
\coqdocvar{remember} (\coqdocvar{pe\_st'}, \coqdocvar{l'}) \coqdockw{as} \coqdocvar{pe\_st'\_l'}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{pe\_st}. \coqdoctac{generalize} \coqdoctac{dependent} \coqdocvar{l}.\coqdoceol
\coqdocindent{2.00em}
\coqdoctac{induction} \coqdocvar{Heval} \coqdockw{as}\coqdoceol
\coqdocindent{3.00em}
[ \coqdocvar{st} [\coqdocvar{pe\_st\_} \coqdocvar{l\_}] \coqdocvar{Hlookup}\coqdoceol
\coqdocindent{3.00em}
\ensuremath{|} \coqdocvar{st} [\coqdocvar{pe\_st\_} \coqdocvar{l\_}] \coqdocvar{pe\_k} \coqdocvar{st'} [\coqdocvar{pe\_st'\_} \coqdocvar{l'\_}] \coqdocvar{st'{}'} [\coqdocvar{pe\_st'{}'} \coqdocvar{l'{}'}]\coqdoceol
\coqdocindent{4.00em}
\coqdocvar{Hlookup} \coqdocvar{Hkeval} \coqdocvar{Heval} ];\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{intros} \coqdocvar{l} \coqdocvar{pe\_st} \coqdocvar{Heqpe\_st\_l};\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{inversion} \coqdocvar{Heqpe\_st\_l}; \coqdoctac{inversion} \coqdocvar{Heqpe\_st'\_l'}; \coqdoctac{repeat} \coqdoctac{subst}.\coqdoceol
\coqdocindent{2.00em}
+  \coqdoctac{apply} \coqdocvar{E\_None}. \coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hlookup}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} (\coqdocvar{p} \coqdocvar{l'}); [ \coqdoctac{solve} [ \coqdoctac{inversion} \coqdocvar{Hlookup} ] \ensuremath{|} \coqdoctac{reflexivity} ].\coqdoceol
\coqdocindent{2.00em}
+ \coqdoceol
\coqdocindent{3.00em}
\coqdoctac{simpl} \coqdoctac{in} \coqdocvar{Hlookup}. \coqdocvar{remember} (\coqdocvar{p} \coqdocvar{l}) \coqdockw{as} \coqdocvar{k}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{destruct} \coqdocvar{k} \coqdockw{as} [\coqdocvar{k}|]; \coqdoctac{inversion} \coqdocvar{Hlookup}; \coqdoctac{subst}.\coqdoceol
\coqdocindent{3.00em}
\coqdoctac{eapply} \coqdocvar{E\_Some}; \coqdoctac{eauto}. \coqdoctac{apply} \coqdocvar{pe\_block\_correct}. \coqdoctac{apply} \coqdocvar{Hkeval}.\coqdoceol
\coqdocnoindent
\coqdockw{Qed}.\coqdoceol
\coqdocemptyline
\end{coqdoccode}
$Date: 2017-01-30 19:42:52 -0500 (Mon, 30 Jan 2017) $ \begin{coqdoccode}
\end{coqdoccode}
\coqlibrary{Top.Postscript}{Library }{Top.Postscript}

\begin{coqdoccode}
\end{coqdoccode}
\section{Postscript}



 Congratulations: We've made it to the end! \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Looking Back}



 We've covered a lot of ground.  Here's a quick review...  



\begin{itemize}
\item  \textit{Functional programming}:

\begin{itemize}
\item  ``declarative'' programming style (recursion over persistent
            data structures, rather than looping over mutable arrays
            or pointer structures)

\item  higher-order functions

\item  polymorphism 
\end{itemize}

\end{itemize}





\begin{itemize}
\item  \textit{Logic}, the mathematical basis for software engineering:


               logic                        calculus

\begin{itemize}
\item -------------------   \~{}   ----------------------------

\end{itemize}
        software engineering       mechanical/civil engineering

\end{itemize}





\begin{itemize}
\item  inductively defined sets and relations

\item  inductive proofs

\item  proof objects 
\end{itemize}





\begin{itemize}
\item  \textit{Coq}, an industrial-strength proof assistant

\begin{itemize}
\item  functional core language

\item  core tactics

\item  automation

\end{itemize}

\end{itemize}





\begin{itemize}
\item  \textit{Foundations of programming languages}


\begin{itemize}
\item  notations and definitional techniques for precisely specifying

\begin{itemize}
\item  abstract syntax

\item  operational semantics

\begin{itemize}
\item  big-step style

\item  small-step style

\end{itemize}

\item  type systems



\end{itemize}

\item  program equivalence



\item  Hoare logic



\item  fundamental metatheory of type systems



\begin{itemize}
\item  progress and preservation



\end{itemize}

\item  theory of subtyping

\end{itemize}

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Looking Around}



 Large-scale applications of these core topics can be found
    everywhere, both in ongoing research projects and in real-world
    software systems.  Here are a few recent examples involving
    formal, machine-checked verification of real-world software and
    hardware systems, to give a sense of what is being done
    today... \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{CompCert}

 \textit{CompCert} is a fully verified optimizing compiler for almost all
    of the ISO C90 / ANSI C language, generating code for x86, ARM,
    and PowerPC processors.  The whole of CompCert is is written in
    Gallina and extracted to an efficient OCaml program using Coq's
    extraction facilities.


    ``The CompCert project investigates the formal verification of
    realistic compilers usable for critical embedded software. Such
    verified compilers come with a mathematical, machine-checked proof
    that the generated executable code behaves exactly as prescribed
    by the semantics of the source program. By ruling out the
    possibility of compiler-introduced bugs, verified compilers
    strengthen the guarantees that can be obtained by applying formal
    methods to source programs.''


    In 2011, CompCert was included in a landmark study on fuzz-testing
    a large number of real-world C compilers using the CSmith tool.
    The CSmith authors wrote:



\begin{itemize}
\item  The striking thing about our CompCert results is that the
        middle-end bugs we found in all other compilers are absent. As
        of early 2011, the under-development version of CompCert is
        the only compiler we have tested for which Csmith cannot find
        wrong-code errors. This is not for lack of trying: we have
        devoted about six CPU-years to the task. The apparent
        unbreakability of CompCert supports a strong argument that
        developing compiler optimizations within a proof framework,
        where safety checks are explicit and machine-checked, has
        tangible benefits for compiler users.

\end{itemize}


    http://compcert.inria.fr \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{seL4}

 \textit{seL4} is a fully verified microkernel, considered to be the
    world's first OS kernel with an end-to-end proof of implementation
    correctness and security enforcement.  It is implemented in C and
    ARM assembly and specified and verified using Isabelle.  The code
    is available as open source.


    ``seL4 has been comprehensively formally verified: a rigorous
    process to prove mathematically that its executable code, as it
    runs on hardware, correctly implements the behaviour allowed by
    the specification, and no others. Furthermore, we have proved that
    the specification has the desired safety and security
    properties (integrity and confidentiality)... The verification was
    achieved at a cost that is significantly less than that of
    traditional high-assurance development approaches, while giving
    guarantees traditional approaches cannot provide.''


    https://sel4.systems. \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{CertiKOS}

 \textit{CertiKOS} is a clean-slate, fully verified hypervisor, written in
    CompCert C and verified in Coq.


    ``The CertiKOS project aims to develop a novel and practical
    programming infrastructure for constructing large-scale certified
    system software. By combining recent advances in programming
    languages, operating systems, and formal methods, we hope to
    attack the following research questions: (1) what OS kernel
    structure can offer the best support for extensibility, security,
    and resilience? (2) which semantic models and program logics can
    best capture these abstractions? (3) what are the right
    programming languages and environments for developing such
    certified kernels? and (4) how to build automation facilities to
    make certified software development really scale?''


    http://flint.cs.yale.edu/certikos/ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Ironclad}

 \textit{Ironclad Apps} is a collection of fully verified web
    applications, including a ``notary'' for securely signing
    statements, a password hasher, a multi-user trusted counter, and a
    differentially-private database.


    The system is coded in the verification-oriented programming
    language Dafny and verified using Boogie, a verification tool
    based on Hoare logic.


    ``An Ironclad App lets a user securely transmit her data to a
    remote machine with the guarantee that every instruction executed
    on that machine adheres to a formal abstract specification of the
    app’s behavior. This does more than eliminate implementation
    vulnerabilities such as buffer overflows, parsing errors, or data
    leaks; it tells the user exactly how the app will behave at all
    times. We provide these guarantees via complete, low-level
    software verification. We then use cryptography and secure
    hardware to enable secure channels from the verified software to
    remote users.''


    https://github.com/Microsoft/Ironclad/tree/master/ironclad-apps \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Verdi}

 \textit{Verdi} is a framework for implementing and formally verifying
    distributed systems.


    ``Verdi supports several different fault models ranging from
    idealistic to realistic. Verdi's verified system
    transformers (VSTs) encapsulate common fault tolerance
    techniques. Developers can verify an application in an idealized
    fault model, and then apply a VST to obtain an application that is
    guaranteed to have analogous properties in a more adversarial
    environment.  Verdi is developed using the Coq proof assistant,
    and systems are extracted to OCaml for execution. Verdi systems,
    including a fault-tolerant key-value store, achieve comparable
    performance to unverified counterparts.''


    http://verdi.uwplse.org \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{DeepSpec}

 \textit{The Science of Deep Specification} is an NSF ``Expedition''
    project (running from 2016 to 2020) that focuses on the
    specification and verification of full functional correctness of
    both software and hardware.  It also sponsors workshops and summer
    schools.

\begin{itemize}
\item  Website: http://deepspec.org/

\item  Overview presentations: 

\begin{itemize}
\item  http://deepspec.org/about/

\item  https://www.youtube.com/watch?v=IPNdsnRWBkk 
\end{itemize}

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{REMS}

 \textit{REMS} is a european project on Rigorous Engineering of Mainstream
    Systems.  It has produced detailed formal specifications of a wide
    range of critical real-world interfaces, protocols, and APIs,
    including 
      the C language, 
      the ELF linker format,
      the ARM, Power, MIPS, CHERI, and RISC-V instruction sets,
      the weak memory models of ARM and Power processors, and
      POSIX filesystems.


    ``The project is focussed on lightweight rigorous methods: precise
    specification (post hoc and during design) and testing against
    specifications, with full verification only in some cases. The
    project emphasises building useful (and reusable) semantics and
    tools. We are building accurate full-scale mathematical models of
    some of the key computational abstractions (processor
    architectures, programming languages, concurrent OS interfaces,
    and network protocols), studying how this can be done, and
    investigating how such models can be used for new verification
    research and in new systems and programming language
    research. Supporting all this, we are also working on new
    specification tools and their foundations.''


    http://www.cl.cam.ac.uk/\~{}pes20/rems/ \begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\subsubsection{Others}



 There's much more.  Other projects worth checking out include:

\begin{itemize}
\item  Vellvm (formal specification and verification of LLVM
        optimization passes)

\item  Zach Tatlock's formally certified browser

\item  Tobias Nipkow's formalization of most of Java

\item  The CakeML verified ML compiler

\item  Greg Morrisett's formal specification of the x86 instruction
        set and the RockSalt Software Fault Isolation tool (a better,
        faster, more secure version of Google's Native Client)

\item  Ur/Web, a programming language for verified web applications
        embedded in Coq

\item  the Princeton Verified Software Toolchain

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\section{Looking Forward}



 Some good places to learn more...



\begin{itemize}
\item  This book includes several optional chapters covering topics
         that you may find useful.  Take a look at the table of contents and the chapter dependency diagram to find
         them.



\item  Cutting-edge conferences on programming languages and formal
         verification:

\begin{itemize}
\item  Principles of Programming Langauges (POPL)

\item  Programming Language Design and Implementation (PLDI)

\item  SPLASH/OOPSLA

\item  International Conference on Functional
              Programming (ICFP)

\item  Computer Aided Verification (CAV)

\item  Interactive Theorem Proving (ITP)

\item  Principles in Practice workshop (PiP)

\item  CoqPL workshop



\end{itemize}

\item  More on functional programming

\begin{itemize}
\item  Learn You a Haskell for Great Good, by Miran Lipovaca
              \coqdocvar{Lipovaca} 2011.

\item  Real World Haskell, by Bryan O'Sullivan, John Goerzen,
              and Don Stewart \coqdocvar{O'Sullivan} 2008

\item  ...and many other excellent books on Haskell, OCaml,
              Scheme, Racket, Scala, F sharp, etc., etc.



\end{itemize}

\item  More on Hoare logic and program verification

\begin{itemize}
\item  The Formal Semantics of Programming Languages: An
              Introduction, by Glynn Winskel \coqdocvar{Winskel} 1993.

\item  Many practical verification tools, e.g. Microsoft's
              Boogie system, Java Extended Static Checking, etc.



\end{itemize}

\item  More on the foundations of programming languages:

\begin{itemize}
\item  Concrete Semantics with Isabelle/HOL, by Tobias Nipkow
              and Gerwin Klein \coqdocvar{Nipkow} 2014

\item  Types and Programming Languages, by Benjamin C. Pierce
              \coqdocvar{Pierce} 2002.

\item  Practical Foundations for Programming Languages, by
              Robert Harper \coqdocvar{Harper} 2016.

\item  Foundations for Programming Languages, by John
              C. Mitchell \coqdocvar{Mitchell} 1996.



\end{itemize}

\item  More on Coq:

\begin{itemize}
\item  Verified Functional Algorithms, by Andrew Appel
             \coqdocvar{Chlipala} 2013.

\item  Certified Programming with Dependent Types, by Adam
             Chlipala \coqdocvar{Chlipala} 2013.

\item  Interactive Theorem Proving and Program Development:
             Coq'Art: The Calculus of Inductive Constructions, by Yves
             Bertot and Pierre Casteran \coqdocvar{Bertot} 2004.

\item  Iron Lambda (http://iron.ouroborus.net/) is a collection
             of ​Coq formalisations for functional languages of
             increasing complexity. It fills part of the gap between
             the end of the​ Software Foundations course and what
             appears in current research papers.  The collection has
             at least Progress and Preservation theorems for a number
             of variants of STLC and the polymorphic
             lambda-calculus (System F). 
\end{itemize}

\end{itemize}
\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\coqlibrary{Top.Bib}{Library }{Top.Bib}

\begin{coqdoccode}
\end{coqdoccode}
\section{Bib: Bibliography}





\coqdocvar{Appel} 2017 Andrew Appel.  Verified Functional Algorithms (volume
  3 in the Software Foundations series).
  https://www.cs.princeton.edu/\~{}appel/vfa/


\coqdocvar{Aydemir} 2008 Brian Aydemir, Arthur Charguéraud, Benjamin
  C. Pierce, Randy Pollack, and Stephanie Weirich. Engineering Formal
  Metatheory. In ACM SIGPLAN-SIGACT Symposium on Principles of
  Programming Languages (POPL), San Francisco, California, pages
  3-15. ACM, January 2008.
  http://www.cis.upenn.edu/\~{}bcpierce/papers/binders.pdf


\coqdocvar{Bertot} 2004 Interactive Theorem Proving and Program Development:
  Coq'Art: The Calculus of Inductive Constructions, by Yves Bertot and
  Pierre Casteran.  Springer-Verlag, 2004.
  http://tinyurl.com/z3o7nqu


\coqdocvar{Chlipala} 2013 Certified Programming with Dependent Types, by
  Adam Chlipala.  MIT Press.  2013.  http://tinyurl.com/zqdnyg2


\coqdocvar{Harper} 2015 Practical Foundations for Programming Languages, by
  Robert Harper.  Cambridge University Press.  Second edition, 2016.
  http://tinyurl.com/z82xwta


\coqdocvar{Lipovaca} 2011 Learn You a Haskell for Great Good! A Beginner's
  Guide, by Miran Lipovaca, No Starch Press, April 2011.
  http://learnyouahaskell.com


\coqdocvar{Mitchell} 1996 Foundations for Programming Languages, by John
  C. Mitchell.  MIT Press, 1996.  http://tinyurl.com/zkosavw


\coqdocvar{Nipkow} 2014 Concrete Semantics with Isabelle/HOL, by Tobias
  Nipkow and Gerwin Klein.  Springer 2014.
  http://www.concrete-semantics.org


\coqdocvar{Pierce} 2002 Types and Programming Languages, by Benjamin
  C. Pierce. MIT Press, 2002.  http://tinyurl.com/gtnudmu


\coqdocvar{O'Sullivan} 2008 Bryan O'Sullivan, John Goerzen, and Don Stewart:
  Real world Haskell - code you can believe in. O'Reilly
  2008. http://book.realworldhaskell.org


\coqdocvar{Pugh} 1991 Pugh, William. ``The Omega test: a fast and practical
  integer programming algorithm for dependence analysis.'' Proceedings
  of the 1991 ACM/IEEE conference on Supercomputing. ACM, 1991.
  http://dl.acm.org/citation.cfm?id=125848


\coqdocvar{Wadler} 2015 Philip Wadler. ``Propositions as types.''
  Communications of the ACM 58, no. 12 (2015): 75-84.
  http://dl.acm.org/citation.cfm?id=2699407


\coqdocvar{Winskel} 1993 The Formal Semantics of Programming Languages: An
  Introduction, by Glynn Winskel.  MIT Press, 1993.
  http://tinyurl.com/j2k6ev7


\begin{coqdoccode}
\coqdocemptyline
\end{coqdoccode}
\end{document}
